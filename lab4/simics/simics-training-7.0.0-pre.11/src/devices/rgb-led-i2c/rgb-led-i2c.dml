/*
  Â© 2018 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

/*
----------------------------------------------------------------------------------

  rgb-led-i2c : RGB color LED device on an I2C bus
              : can drive LEDs shown in a system panel in Eclipse
              : Part of Simics training materials

*/


dml 1.4;

device rgb_led_i2c;

param desc = "rgb led on I2C bus";

param documentation = "An I2C device that controls an RGB LED.  The LED itself is simulated in the System Panel.";

//=============================================================================
// I2C interface
// 
// Wants to receive a multiple-byte message to change color:
//   [ 'c', RED, GREEN, BLUE ]
//
//-----------------------------------------------------------------------------
import "utility.dml";
import "simics/devs/i2c.dml";

loggroup i2c_comms;

// I2C link connection - back towards master
connect i2c_link {
    param desc = "I2C link outbond connection";
    param configuration = "optional";
    interface i2c_master_v2;
}

// i2c_slave_v2 interface - inbound to this device 
port i2c_in {
    param desc = "Inbound I2C traffic";
    
    implement i2c_slave_v2 {
        method start(uint8 address) {
            log info, 4, i2c_comms: "i2c_slave.start_request(0x%x)", address;
    
            // is this for this device?
            if (address[7:1] == dev.address.val) {
                // acknowledge start request
                log info, 2, i2c_comms: "i2c start message targeting device received (addr=0x%.2x)", address;
                
                // reset comms state machine to use byte 0
                i2cregs.transaction_state.active.set_val(1);            
                i2cregs.transaction_state.rcvbyte.set_val(0);
                
                // and then send ack to master that we did indeed get it 
                i2c_link.i2c_master_v2.acknowledge(I2C_ack);
            } else {
                // OK, start was for some other device. 
                // Make sure that we are not thinking we are active. 
                i2cregs.transaction_state.active.set_val(0);  
                // And send a noack 
                i2c_link.i2c_master_v2.acknowledge(I2C_noack);
            }
        }
    
        method read() {
            // Log that we receive
            log info, 4, i2c_comms: "read incoming";
                            
            // Check if we are in a transaction at all
            if (i2cregs.transaction_state.active.get_val() == 1) {
                // This is ours
                local int rcvbyte = i2cregs.transaction_state.rcvbyte.get_val();
                local int readvalue = 0;
                
                log info, 2, i2c_comms: "read received, inside transaction, current offset = %d", rcvbyte;
                        
                // set red, green, or blue depending on current byte
                switch(rcvbyte) {
                    case 0:
                        readvalue = 99;  // ASCII code for 'c'
                        break;
                    case 1:
                        // RED comes first
                        readvalue = i2cregs.red.val;
                        break;
                    case 2:
                        // GREEN comes second
                        readvalue = i2cregs.green.val;
                        break;
                    case 3:
                        // BLUE comes third
                        readvalue = i2cregs.blue.val;
                        break;
                    default: 
                        log error, 1: "The two-bit counter has a value > 0b11, here be dragons";
                        readvalue = 0;
                        break;
                }
                
                // Log read
                log info, 3, i2c_comms : "I2C read: offset=%d, replying with %d", rcvbyte, readvalue;
            
                // Increment byte counter
                i2cregs.transaction_state.rcvbyte.inc();
                
                // reply
                i2c_link.i2c_master_v2.read_response(readvalue);
                
            } 
            else
            {
                // Active is zero but we got a write
                log spec_viol, 1, i2c_comms: "I2C read seen without preceding start, replying zero";
                i2c_link.i2c_master_v2.read_response(0);            
            }
            
        }
    
        method write(uint8 value) {
            // Log that we receive
            log info, 4, i2c_comms: "write incoming";
            
            // Check if we are in a transaction at all
            if (i2cregs.transaction_state.active.get_val() == 1) {
                // This is ours
                log info, 2, i2c_comms: "write received, inside transaction, value = 0x%.2x", value;
                
                // acknowledge write request
                i2c_link.i2c_master_v2.acknowledge(I2C_ack);
    
                // save last written byte for diagnostics
                written_value.val = value;
            
                // set red, green, or blue depending on current byte
                switch(i2cregs.transaction_state.rcvbyte.get_val()) {
                    case 0:
                        // just ignore it, even though it should be 'c'
                        break;
                    case 1:
                        // RED comes first
                        i2cregs.red.val = value;
                        log info, 3, i2c_comms : "I2C write: received red value = %d", value;
                        break;
                    case 2:
                        // GREEN comes second
                        i2cregs.green.val = value;
                        log info, 3, i2c_comms : "I2C write: received green value = %d", value;
                        break;
                    case 3:
                        // BLUE comes third
                        i2cregs.blue.val = value;
                        log info, 3, i2c_comms : "I2C write: received blue value = %d", value;
                        // Complete update, send the new color to any attached system panel
                        panel_led_out.drive();
                        break;
                    default: 
                        log error, 1: "The two-bit counter has a value > 0b11, here be dragons";
                        break;
                }
            
                // Increment byte counter
                i2cregs.transaction_state.rcvbyte.inc();
            } 
            else
            {
                // Active is zero but we got a write
                log spec_viol, 1, i2c_comms: "I2C write seen without preceding start, ignoring";
            }
        }
    
        method stop() {
            // Log that we see a stop - 
            // i2c in Simics makes ALL devices see this, even if they were
            // not the device targeted by the current transaction 
            log info, 4, i2c_comms: "stop incoming";
            
            // If we are active, log that we got a stop
            if (i2cregs.transaction_state.active.get_val() == 1) {
                log info, 2, i2c_comms: "stop received inside transaction, setting device state to inactive";
                // terminate the transaction
                i2cregs.transaction_state.active.set_val(0);
                // do not send an ACK - I2C protocol is done once we see
                // the stop message and does not expect or accept an ack from here 
            }
        }
    
        method addresses() -> (attr_value_t) {
            local attr_value_t result;
            result = SIM_make_attr_list(
                2, SIM_make_attr_uint64(address.val * 2),
                SIM_make_attr_uint64(address.val * 2 + 1));
            return result;
        }
    }
} // end of port declaration

attribute address is (uint64_attr) {
    param documentation = "7-bit address on the i2c bus. It can be any "
        + "valid i2c address in range of [0, 127].";
    param configuration = "required";
}

//=============================================================================
// Outbound LED interface
// - Assumes we have a UINT64-driven system panel attached
// - This code here has to know about the color coding used in the panel
// - Convert from the RGB we get in to outbound color code
//-----------------------------------------------------------------------------
import "simics/model-iface/state.dml";

connect panel_led_out {
    param desc = "Connection to the System Panel LED depiction";
    
    interface uint64_state;
    
    // Call this method to compute the outbound value and send it to the 
    // attached system panel (if any)
    method drive() {
        // Compute the color value to drive
        // 0 ... 0 0 0 0 0 G R B
        local uint64 drive_value;
        drive_value[0] = (i2cregs.blue.val   > 0 ? 1 : 0);
        drive_value[1] = (i2cregs.red.val    > 0 ? 1 : 0);
        drive_value[2] = (i2cregs.green.val  > 0 ? 1 : 0);
        log info, 3 : "System panel RGB LED value computed %d (from R=%d,G=%d,B=%d)", drive_value, 
                        i2cregs.red.val, i2cregs.green.val, i2cregs.blue.val;

        // Update the stored last driven value
        current_color_value_driven.val = drive_value;
                
        // Check if there is reason to do anything to update an attached actual LED display
	// Make sure we only call the panel if there is connection to it, we are not opening a
	// checkpoint, and the connected panel is ready to be used.  
        if(obj) {
            if (!SIM_is_restoring_state(dev.obj)) {
                if (SIM_object_is_configured(obj)) {
                    log info, 3 : "Panel connected to %s, updating RGB LED value to %d", qname, drive_value;
                    // The other end is live, and we can drive our current state to it
                    uint64_state.set(drive_value);
                }
            }
        }
    }
}



//=============================================================================
// Device registers 
// - The registers could be done as attribute as they are not memory-mapped
// - Putting them with addresses in a bank makes them visible to various
//   inspection tools
// - Register offsets are old-school byte-packed
//-----------------------------------------------------------------------------

bank i2cregs {
    // Put I2C registers into a register bank for debug access from Simics
    // Note that this is not how most i2c devices do their modeling
    param desc = "Register bank holding I2C state (not software addressable)";
    
    param register_size = 1;
    
    register red @ 0x00 is (read_only) {
        param desc = "Current red RGB value";
    }  

    register green @ 0x01 is (read_only) {
        param desc = "Current green RGB value";
    }  

    register blue @ 0x02 is (read_only)  {
        param desc = "Current blue RGB value";
    }  
    
    register transaction_state @ 0x03 is (read_only)  {
        field active   @ [0]   {
            param desc = "Are we in an active transaction?";
        }            
        field rcvbyte  @ [2:1] {
            param desc = "Current byte number in the I2C operation [0 to 3]";
            method inc() {
                // "this" is the field.  In DML 1.4, you use set() and get() to get
                // at the value of the field.  The masking to the value of the field
                // is automatic. 
                this.set(this.get()+1);
            }
        }
        field rsv  @ [7:3] is (reserved);
    }
}


//=============================================================================
// Misc attributes
// - written_value to support tests
// - current_value to support restoring from a checkpoint
// - drive, pseudo-attribute to support command to force change 
//-----------------------------------------------------------------------------

// For debug and test purposes
attribute written_value is (uint64_attr) {
    param documentation = "Last byte written to this device.";
}

// For custom command purposes
attribute drive_value is write_only_attr {
    param documentation = "Write this attribute to force the rgb to drive its value to the panel";
    param type          = "b";     // booleans looks more logical than an integer

    // Set function - don't care about the value provided, and drive the panel
    method set(attr_value_t val) throws {
        panel_led_out.drive();
    }
    // Get is not useful.
    //   DML 1.2 - just do not implement
    //   DML 1.4 - use a write-only template 
}

// Checkpoint what we are doing
attribute current_color_value_driven is (uint64_attr) {
    param documentation = "The current color value driven to the attached LED";
}




