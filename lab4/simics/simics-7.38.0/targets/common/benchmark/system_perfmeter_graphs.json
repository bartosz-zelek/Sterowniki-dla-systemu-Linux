{
  "comment": [
    "system_perfmeter_graphs.json",
    "This file contains definitions of graphs, which *might* be generated ",
    "depending on which probes Simics has been run with.",
    "",
    "This file is dedicated to the new-system-perfmeter, which focuses on ",
    "graphs for Simics simulation performance.",
    "",
    "The supported key/values pairs for graph generation is documented in ",
    "the 'html-report' command of the probe-monitor or system-perfmeter"
  ],

  "graphs":
  [
    {
      "title":    "MIPS\nHigher is better",
      "y_probes": ["sim:sim.mips", ["sim:sim.module_profile"]],
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
	"<b>MIPS</b> shows the simulation speed as millions of simulated",
	"instructions (on all processors in the simulation) per host wallclock",
	"second. Higer numbers means better throughput.<br/><br/>",
	"If the data is available, each point in the graph is also annotated",
	"with the <i>module-profile</i> histogram corresponding to this",
	"sample, providing a coarse-grained performance profile over time."
      ]
    },
    {
      "title":    "Slowdown\nLower is better",
      "y_probes": ["sim:sim.slowdown",
		   ["sim:sim.time.schedule_object_histogram"]],
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
	"<b>Slowdown</b> is calculated as <i>host-wallclock</i> /",
	"<i>virtual-time</i>.",
	"That is, a value of less than 1.0 means the simulator runs faster than",
	"the simulated target, which is possible when the processors are mainly",
	"idle and can be simulated very quickly.",
	"Having a low slowdown value is important for interactive usage,",
	"such as moving the mouse in a graphical console.",
	"If the data is available, each point in the graph is also annotated",
	"with the <i>scheduled-object</i> histogram corresponding to this",
	"sample, showing which processors have been scheduled most during",
	"the sample."
	]
    },
    {
      "title":    "CPU Load (stacked processors)",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": "*:cpu.load_sim_percent",
      "x_probe":  "sim:sim.time.wallclock-session",
      "max_data_series": 20,
      "description": [
	"<b>CPU Load</b> is calculated as <i>instructions</i> / <i>cycles</i>,",
	"indicating how busy the processors are executed instructions",
	"compared to just waiting on interrupts etc.",
	"In this graph all processors' loads are stacked on top of each other,",
	"showing the total load of all processors in the simulation.",
	"A stacked value of 100% means that all the processors are running",
	"flat-out crunching instructions.",
	"With a higher load, both MIPS and slowdown tend to be higher.",
	"To efficiently parallelize the workload, there must be at",
	"least two processors running with a high load."
      ]
    },
    {
      "title":    "CPU Load (stacked processor classes)",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": "*:cls.cpu.load_sim_percent",
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
	"<b>CPU Load</b> is calculated as <i>instructions</i> / <i>cycles</i>,",
	"indicating how busy the processors are executed instructions",
	"compared to just waiting on interrupts etc.",
	"In this graph all processors of the same class are grouped together",
	"and then stacked on-top of each other",
	"showing the total load of all processor classes in the simulation.",
	"A value of 100% means the that all processors of these classes runs",
	"flat-out crunching instructions.",
	"With a high load, both MIPS and slowdown tend to be higher."
      ]
    },
    {
      "title":    "Execution Modes (Percent)",
      "y_axis_title": "%",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": ["sim:sim.exec_mode.interpreter_percent",
                   "sim:sim.exec_mode.jit_percent",
                   "sim:sim.exec_mode.vmp_percent",
                   "sim:sim.exec_mode.hypersim_percent"],
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
	"Instructions can be simulated in different ways in Simics,",
	"typically with varying speeds depending on simulation method.",
	"<ul>",
        "<li><strong>INT</strong>:",
	"Executing in the <i>interpreter</i> is normally the slowest.</li>",
        "<li><strong>JIT</strong>:",
	"After executing a while in the interpreter, some instruction sequences",
	"can be translated to native x86 code by the built-in Just-In-Time",
	"compiler which runs faster.</li>",
        "<li><strong>VMP</strong>:",
	"When simulating an x86 processor it is possible to run in",
	"<i>virtualized</i> (VT-x) mode. When VMP is applicable, this is even",
	"faster since each instruction is executed natively without overhead.",
	"</li>",
        "<li><strong>HYP</strong>:",
	"In rarer cases, the JIT compiler can detect loops in the",
	"software which will persist for a while. Instead of simulating",
	"this loop instruction by instruction, <i>Hypersimulation</i>",
	"instead jumps forward in time, making it the fastest simulation",
	"mode.</li>",
	"</ul>"
      ]
    },
    {
      "title":    "Execution Modes (Percent) per CPU class",
      "y_axis_title": "%",
      "stacked":  true,
      "percent":  true,
      "multi_graph": true,
      "y_probes": [["*:cls.cpu.exec_mode.interpreter_percent",
		    ["*:cls.cpu.tool.sr_histogram.sr_hist0.int_sr.histogram"]],
		   ["*:cls.cpu.exec_mode.jit_percent",
		    ["*:cls.cpu.tool.sr_histogram.sr_hist0.jit_sr.histogram"]],
		   "*:cls.cpu.exec_mode.vmp_percent",
		   "*:cls.cpu.exec_mode.hypersim_percent"
      ],
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_graphs": 2,
      "description": [
	"This graph shows the execution modes used, aggregated over all",
	"processors of the same class, one graph per class.",
	"If no instructions were executed in a sample (on all the processor of",
	"this class), the percent drops down to zero."
      ]
    },
    {
      "title":    "Execution Modes (Instructions)",
      "y_axis_title": "Instructions",
      "stacked":  true,
      "y_probes": ["sim:sim.exec_mode.interpreter_steps",
                   "sim:sim.exec_mode.jit_steps",
                   "sim:sim.exec_mode.vmp_steps",
                   "sim:sim.exec_mode.hypersim_steps"],
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
	"Similar to <i>Execution Modes (Percent)</i>, but instead of showing",
	"the percent, this graph displays the actual number of instruction",
	"executed in each execution mode.",
	"That is, even if we are 100% in the interpreter, perhaps the amount",
	"of instructions actually executed are low, and thus not a source of",
	"any significant bottleneck."
      ]
    },
    {
      "title":    "Execution Modes (Instructions) per CPU class",
      "y_axis_title": "Instructions",
      "stacked":  true,
      "multi_graph": true,
      "y_probes": [["*:cls.cpu.exec_mode.interpreter_steps",
		    ["*:cls.cpu.tool.sr_histogram.sr_hist0.int_sr.histogram"]],
                   ["*:cls.cpu.exec_mode.jit_steps",
		    ["*:cls.cpu.tool.sr_histogram.sr_hist0.jit_sr.histogram"]],
                   "*:cls.cpu.exec_mode.vmp_steps",
                   "*:cls.cpu.exec_mode.hypersim_steps"],
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_graphs": 2,
      "description": [
	"Similar to <i>Execution Modes (Percent) per CPU class</i>, but instead",
	"of showing",
	"the percent, this graph displays the actual number of instruction",
	"executed in each execution mode.",
	"That is, even if we are 100% in the interpreter, perhaps the amount",
	"of instructions actually executed are low, and thus not a source of",
	"any significant bottleneck.<br/><br/>",
	"If the data is available, each point in the graph is also annotated",
	"with the <i>service-routine</i> histogram specifying the most",
	"frequently executed service-routines (~instructions) that has been",
	"executed in interpreter and JIT mode. (VMP and HYP are unknown)"
      ]
    },
    {
      "title":    "Memory Usage",
      "y_axis_title": "Bytes",
      "y_probes": ["host:host.memory.used-current",
		   "host:host.swap.used-current",
                   "sim:sim.process.memory.resident-current",
		   "sim:sim.image.memory_usage-current"],
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
	"The memory consumption of Simics and other processes on the host.",
	"<ul>",
        "<li><strong>Host Mem</strong>:",
	"The total amount of memory consumed on the host, of all processes.",
	"</li>",
        "<li><strong>Host Swap</strong>:",
	"The total amount of swap space used by the operating system on the",
	"host.</li>",
	"<li><strong>Process Mem-Res</strong>:",
	"The amount of resident memory used by this Simics process.",
	"If this grows significantly more than the image-memory usage, it",
	"indicacate a possible memory-leak.</li>",
        "<li><strong>Image-Memory</strong>:",
	"Part of the Simics memory consumed is the <i>image</i> memory.",
	"The image memory is used to simulate RAM, ROM and disk-sectors,",
	"and typically has the largest footprint in the",
	"simulation. If this curve goes down to zero, it means that the",
	"<i>image-memory-limit</i> has been reached (swapping out dirty",
	"pages to disk), which could be a source of a major performance",
	"bottleneck.</li>",
	"</ul>"
      ]
    },
    {
      "title": "Host CPU Simics Usage",
      "percent": true,
      "y_probes": "sim:sim.process.cpu_percent",
      "x_probe": "sim:sim.time.wallclock-session",
      "description": [
	"The percentage of CPU that Simics consumes (for all Simics threads).",
	"100% corresponds to one host CPU being utilized.",
	"During simulation, this should typically never be below 100%",
	"unless <i>real-time mode</i> is enabled.",
	"Even if the simulation is serialized, the CPU usage percentage can",
	"be well over 100% due to other threads, such as handling JIT",
	"compilation in parallel during execution."
      ]
    },
    {
      "title": "VMP Number of VM-Exits",
      "y_probes": [
	"sim:sim.vmp.vmexits.total",
	["sim:sim.vmp.vmexits.histogram"]
      ],
      "x_probe": "sim:sim.time.wallclock-session",
      "description": [
	"There is an overhead when transitioning in and out of VMP mode.",
	"This graph shows how many VM-Exits have occurred over the",
	"sample.<br/><br/>",
	"If the data is available, each point in the graph is also annotated",
	"with the <i>vmexit</i> histogram, specifying the most",
	"frequent causes for exiting VMP execution."
      ]
    },
    {
      "title":    "VMP Disabled Reasons",
      "histogram_probe": "sim:sim.vmp.disabled_reason",
      "histogram_data_set": "samples",
      "y_axis_title": "Instructions",
      "x_probe":  "sim:sim.time.wallclock-session",
      "stacked":  true,
      "description": [
        "Depending on the mode the target x86 processor is in, or other Simics",
        "features enabled, it might not be possible to run in VMP mode.",
        "For example, running with new features enabled that do not exist",
        "yet on the host.",
        "This graph shows how many instructions VMP was temporarily",
        "disabled and the reason."
      ]
    },
    {
      "title":    "Cell Schedule",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": "*:cell.schedule_percent",
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
        "The Simics scheduler can keep track of how long it has scheduled",
        "each processor in the system, identifying which processors are",
        "slowest to simulate.",
        "This graph shows this data for each cell, where each cell's",
        "processors are aggregated.",
        "Since cells typically run in parallel (but still synchronize in",
        "time at regular intervals), it is the slowest cell that limits",
        "performance."
      ]
    },
    {
      "title":    "CPU Class Schedule",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": "*:cls.cpu.schedule_percent",
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
        "The Simics scheduler can keep track of how long it has scheduled",
        "each processor in the system, identifying which processors are",
        "slowest to simulate.",
        "This graph shows this data for each class, where each processor",
        "of the same class is aggregated."
      ]
    },
    {
      "title":    "CPU Schedule",
      "stacked":  true,
      "percent":  true,
      "y_range":  [0,1],
      "y_probes": "*:cpu.schedule_percent",
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
        "The Simics scheduler can keep track of how long it has scheduled",
        "each processor in the system, identifying which processors are",
        "slowest to simulate.",
        "This graph shows this data for each processor object."
      ]
    },
    {
      "title":    "CPU MIPS\n(based on schedule-time)",
      "y_probes": "*:cpu.mips",
      "x_probe":  "sim:sim.time.wallclock-session",
      "min_data_series": 2,
      "description": [
        "The frequencies of the processors in Simics reflect how many",
        "cycles the scheduler requests them to consume.",
        "A high-frequency processor will have to execute more cycles",
        "compared to a low-frequency processor.",
        "This graph shows the calculated MIPS value a processor gets,",
        "based on the actual time it was scheduled.",
        "This makes it possible to look at MIPS numbers for a processor",
        "and see roughly how fast it executes, in isolation from the",
        "other processors."
      ]
    },
    {
      "title":    "CPU Class MIPS\n(based on schedule-time)",
      "y_probes": "*:cls.cpu.mips",
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
        "Similar to <i>CPU MIPS</i>, but aggregated over each processor",
        "of the same class."
      ]
    },
    {
      "title":    "All VMP Exits",
      "x_axis_title": "VMEXIT name",
      "y_axis_title": "# VMEXITS",
      "type":     "bar",
      "histogram_probe": "sim:sim.vmp.vmexits.histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows the total amount of the different VMP exits that have happened.",
        "VMEXITS of less than 1% are put in the <i>Accumulated cutoff</i>",
        "bucket."
      ]
    },
    {
      "title":    "IO Class accesses",
      "x_axis_title": "class-name",
      "y_axis_title": "# accesses",
      "type":     "bar",
      "histogram_probe": "sim:sim.io_access_class_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "IO accesses are typically slow compared to RAM accesses in Simics.",
        "This bar chart shows the most commonly accessed device classes and",
        "how many accesses they received."
      ]
    },
    {
      "title":    "Cycle Events",
      "x_axis_title": "event-name",
      "y_axis_title": "# events",
      "type":     "bar",
      "histogram_probe": "sim:sim.event.cycle.histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Events are used to postpone some actions a bit further into the",
	"future.",
        "Using a high number of events can, however, severely reduce the",
        "performance of Simics. This graph shows the most common events and",
        "the class that receives them.",
        "The event mechanism is also used for Simics itself, so having",
        "<i>Time Quantum End</i> as the most common event is beneficial,",
        "as this event is used to switch between the processors being scheduled."
      ]
    },
    {
      "title":    "Interface Lookups",
      "x_axis_title": "interface-name",
      "y_axis_title": "# lookups",
      "type":     "bar",
      "histogram_probe": "sim:sim.interface.lookup_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "A Simics interface is a collection of methods that can be called",
        "for communication between modules. An interface is identified",
        "through a string. To reduce overhead, device models that communicate",
        "should cache the interface, instead of constantly performing a lookup",
	"each time the interface is used.",
        "This graph shows the most common interface lookups that have",
        "happened. It shows the <b>owner</b> of the interface, not who",
        "is actually requesting it."
      ]
    },
    {
      "title":    "Attribute Reads",
      "x_axis_title": "attribute-name",
      "y_axis_title": "# reads",
      "type":     "bar",
      "histogram_probe": "sim:sim.attribute.read_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Using attributes as a means of communication between models should",
        "be avoided. Instead, cached interfaces should be used.",
        "This graph shows which attribute is being read and who the",
        "owner is; it does not show who is actually reading it."
      ]
    },
    {
      "title":    "Simics Thread Execution",
      "x_axis_title": "thread-group",
      "y_axis_title": "time (s)",
      "type":     "bar",
      "histogram_probe": "sim:sim.process.thread_group_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows how much of Simics' different thread groups have been running."
      ]
    },
    {
      "title":    "Simics Object Scheduling",
      "x_axis_title": "object-name",
      "y_axis_title": "time (s)",
      "type":     "bar",
      "histogram_probe": "sim:sim.time.schedule_object_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows a histogram of the most commonly scheduled processor models."
      ]
    },
    {
      "title":    "Simics Class Scheduling",
      "x_axis_title": "class-name",
      "y_axis_title": "time (s)",
      "type":     "bar",
      "histogram_probe": "sim:sim.time.schedule_class_histogram",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows a histogram of the most commonly scheduled processor classes."
      ]
    },
    {
      "title":    "Module Profile",
      "x_axis_title": "Module",
      "y_axis_title": "Measurement ticks",
      "type":     "bar",
      "histogram_probe": "sim:sim.module_profile",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows a histogram of the modules that have executed the most."
      ]
    },
    {
      "title":    "Module Profile Pie",
      "type":     "pie",
      "histogram_probe": "sim:sim.module_profile",
      "histogram_data_set": "final",
      "cutoff_percent": 1.0,
      "description": [
        "Shows a pie chart of the modules that have executed the most."
      ]
    },
    {
      "title":    "Module Profile (over time)",
      "type":     "line",
      "y_axis_title": "Measurement ticks",
      "x_axis_title": "Module",
      "stacked":  true,
      "histogram_probe": "sim:sim.module_profile",
      "histogram_data_set": "samples",
      "cutoff_percent": 0.5,
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
        "Shows a stacked line chart of the module profile over time."
      ]
    },
    {
      "title":    "Process Histogram",
      "stacked":  true,
      "y_axis_title": "Instructions",
      "x_axis_title": "Process name",
      "type":     "bar",
      "histogram_data_set": "final",
      "cutoff_percent": 0.1,
      "histogram_probe": "sim:sim.tool.process_histogram.phist0.histogram",
      "description": [
        "Shows a histogram of the target processes that have executed",
        "the most."
      ]
    },
    {
      "title":    "Process Histogram (over wallclock time)",
      "type":     "line",
      "y_axis_title": "Instructions",
      "stacked":  true,
      "histogram_probe": "sim:sim.tool.process_histogram.phist0.histogram",
      "histogram_data_set": "samples",
      "cutoff_percent": 0.1,
      "x_probe":  "sim:sim.time.wallclock-session",
      "description": [
        "Shows a stacked line chart of the processes that have been executed",
        "over host wallclock time."
      ]
    },
    {
      "title":    "Process Histogram (over virtual time)",
      "type":     "line",
      "y_axis_title": "Instructions",
      "stacked":  true,
      "histogram_probe": "sim:sim.tool.process_histogram.phist0.histogram",
      "histogram_data_set": "samples",
      "cutoff_percent": 0.1,
      "x_probe":  "sim:sim.time.virtual-session",
      "description": [
        "Shows a stacked line chart of the processes that have been executed",
        "over target virtual time."
      ]
    },
    {
      "title":    "Service-Routines Interpreter+JIT (per CPU class)",
      "y_axis_title": "Instructions",
      "x_axis_title": "Service-routine",
      "type":     "bar",
      "histogram_data_set": "final",
      "cutoff_percent": 0.5,
      "multi_graph": true,
      "histogram_probe": "*:cls.cpu.tool.sr_histogram.sr_hist0.all_sr.histogram",
      "description": [
        "Shows which service routines have executed the most, in both",
	"interpreter and JIT mode, for each processor class."
      ]
    },
    {
      "title":    "Service-Routines Interpreter (per CPU class)",
      "y_axis_title": "Instructions",
      "x_axis_title": "Service-routine",
      "type":     "bar",
      "histogram_data_set": "final",
      "cutoff_percent": 0.5,
      "multi_graph": true,
      "histogram_probe": "*:cls.cpu.tool.sr_histogram.sr_hist0.non_jit_sr.histogram",
      "description": [
        "Shows which service routines have executed the most, only in the",
        "interpreter (never in JIT). These could be a source of optimizations."
      ]
    },
    {
      "title":    "Service-Routines JIT (per CPU class)",
      "y_axis_title": "Instructions",
      "x_axis_title": "Service-routine",
      "type":     "bar",
      "histogram_data_set": "final",
      "cutoff_percent": 0.5,
      "multi_graph": true,
      "histogram_probe": "*:cls.cpu.tool.sr_histogram.sr_hist0.jit_sr.histogram",
      "description": [
        "Shows which service routines have executed the most in JIT mode."
      ]
    },
    {
      "title":    "Interface Usage",
      "y_axis_title": "#calls",
      "x_axis_title": "interface->method",
      "type":     "bar",
      "histogram_data_set": "final",
      "cutoff_percent": 0.5,
      "histogram_probe": "*:interface_histogram_tool.ifhist0.method_histogram",
      "description": [
        "Shows a histogram of the most frequently called interface methods."
      ]
    }
  ]
}

