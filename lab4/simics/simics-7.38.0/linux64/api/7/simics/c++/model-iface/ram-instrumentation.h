// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_RAM_INSTRUMENTATION_H
#define SIMICS_CPP_MODEL_IFACE_RAM_INSTRUMENTATION_H

#include "simics/model-iface/ram-instrumentation.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class RamAccessSubscribeInterface {
  public:
    using ctype = ram_access_subscribe_interface_t;

    // Function override and implemented by user
    virtual void remove_callback(ram_cb_handle_t *handle) = 0;
    virtual void enable_callback(ram_cb_handle_t *handle) = 0;
    virtual void disable_callback(ram_cb_handle_t *handle) = 0;
    virtual ram_cb_handle_t * register_access_before_cb(conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) = 0;
    virtual ram_cb_handle_t * register_access_after_cb(conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) = 0;
    virtual ram_cb_handle_t * register_access_filter_cb(conf_object_t *connection, access_filter_cb_t cb, lang_void *data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void remove_callback(conf_object_t *obj, ram_cb_handle_t *handle) {
            detail::get_interface<RamAccessSubscribeInterface>(obj)->remove_callback(handle);
        }
        static void enable_callback(conf_object_t *obj, ram_cb_handle_t *handle) {
            detail::get_interface<RamAccessSubscribeInterface>(obj)->enable_callback(handle);
        }
        static void disable_callback(conf_object_t *obj, ram_cb_handle_t *handle) {
            detail::get_interface<RamAccessSubscribeInterface>(obj)->disable_callback(handle);
        }
        static ram_cb_handle_t * register_access_before_cb(conf_object_t *obj, conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) {
            return detail::get_interface<RamAccessSubscribeInterface>(obj)->register_access_before_cb(conn_obj, cb, data);
        }
        static ram_cb_handle_t * register_access_after_cb(conf_object_t *obj, conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) {
            return detail::get_interface<RamAccessSubscribeInterface>(obj)->register_access_after_cb(conn_obj, cb, data);
        }
        static ram_cb_handle_t * register_access_filter_cb(conf_object_t *obj, conf_object_t *connection, access_filter_cb_t cb, lang_void *data) {
            return detail::get_interface<RamAccessSubscribeInterface>(obj)->register_access_filter_cb(connection, cb, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RamAccessSubscribeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void remove_callback(ram_cb_handle_t *handle) const {
            iface_->remove_callback(obj_, handle);
        }
        void enable_callback(ram_cb_handle_t *handle) const {
            iface_->enable_callback(obj_, handle);
        }
        void disable_callback(ram_cb_handle_t *handle) const {
            iface_->disable_callback(obj_, handle);
        }
        ram_cb_handle_t * register_access_before_cb(conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) const {
            return iface_->register_access_before_cb(obj_, conn_obj, cb, data);
        }
        ram_cb_handle_t * register_access_after_cb(conf_object_t *conn_obj, ram_access_cb_t cb, lang_void *data) const {
            return iface_->register_access_after_cb(obj_, conn_obj, cb, data);
        }
        ram_cb_handle_t * register_access_filter_cb(conf_object_t *connection, access_filter_cb_t cb, lang_void *data) const {
            return iface_->register_access_filter_cb(obj_, connection, cb, data);
        }

        const RamAccessSubscribeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RamAccessSubscribeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RAM_ACCESS_SUBSCRIBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RamAccessSubscribeInterface::ctype funcs {
                FromC::remove_callback,
                FromC::enable_callback,
                FromC::disable_callback,
                FromC::register_access_before_cb,
                FromC::register_access_after_cb,
                FromC::register_access_filter_cb,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
