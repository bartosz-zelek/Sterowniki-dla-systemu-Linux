// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_TRANSLATOR_H
#define SIMICS_CPP_DEVS_TRANSLATOR_H

#include "simics/devs/translator.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TranslatorInterface {
  public:
    using ctype = translator_interface_t;

    // Function override and implemented by user
    virtual translation_t translate(physical_address_t addr, access_t access, const map_target_t *default_target) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static translation_t translate(conf_object_t *obj, physical_address_t addr, access_t access, const map_target_t *default_target) {
            return detail::get_interface<TranslatorInterface>(obj)->translate(addr, access, default_target);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TranslatorInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        translation_t translate(physical_address_t addr, access_t access, const map_target_t *default_target) const {
            return iface_->translate(obj_, addr, access, default_target);
        }

        const TranslatorInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TranslatorInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TRANSLATOR_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TranslatorInterface::ctype funcs {
                FromC::translate,
            };
            return &funcs;
        }
    };
};

class TransactionTranslatorInterface {
  public:
    using ctype = transaction_translator_interface_t;

    // Function override and implemented by user
    virtual exception_type_t translate(uint64 addr, access_t access, transaction_t *t, exception_type_t (*callback)( translation_t translation, transaction_t *transaction, cbdata_call_t data), cbdata_register_t data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t translate(conf_object_t *obj, uint64 addr, access_t access, transaction_t *t, exception_type_t (*callback)( translation_t translation, transaction_t *transaction, cbdata_call_t data), cbdata_register_t data) {
            return detail::get_interface<TransactionTranslatorInterface>(obj)->translate(addr, access, t, callback, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TransactionTranslatorInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t translate(uint64 addr, access_t access, transaction_t *t, exception_type_t (*callback)( translation_t translation, transaction_t *transaction, cbdata_call_t data), cbdata_register_t data) const {
            return iface_->translate(obj_, addr, access, t, callback, data);
        }

        const TransactionTranslatorInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TransactionTranslatorInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TRANSACTION_TRANSLATOR_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TransactionTranslatorInterface::ctype funcs {
                FromC::translate,
            };
            return &funcs;
        }
    };
};

class TranslationFlushInterface {
  public:
    using ctype = translation_flush_interface_t;

    // Function override and implemented by user
    virtual bool flush_range(uint64 base, uint64 size, access_t access, const map_target_t *default_target) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool flush_range(conf_object_t *obj, uint64 base, uint64 size, access_t access, const map_target_t *default_target) {
            return detail::get_interface<TranslationFlushInterface>(obj)->flush_range(base, size, access, default_target);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TranslationFlushInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool flush_range(uint64 base, uint64 size, access_t access, const map_target_t *default_target) const {
            return iface_->flush_range(obj_, base, size, access, default_target);
        }

        const TranslationFlushInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TranslationFlushInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TRANSLATION_FLUSH_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TranslationFlushInterface::ctype funcs {
                FromC::flush_range,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
