// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_TRANSACTION_H
#define SIMICS_CPP_MODEL_IFACE_TRANSACTION_H

#include "simics/model-iface/transaction.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TransactionInterface {
  public:
    using ctype = transaction_interface_t;

    // Function override and implemented by user
    virtual exception_type_t issue(transaction_t *t, uint64 addr) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t issue(conf_object_t *obj, transaction_t *t, uint64 addr) {
            return detail::get_interface<TransactionInterface>(obj)->issue(t, addr);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TransactionInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t issue(transaction_t *t, uint64 addr) const {
            return iface_->issue(obj_, t, addr);
        }

        const TransactionInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TransactionInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TRANSACTION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TransactionInterface::ctype funcs {
                FromC::issue,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
