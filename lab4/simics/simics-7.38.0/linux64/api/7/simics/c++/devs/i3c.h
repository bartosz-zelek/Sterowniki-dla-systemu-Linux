// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_I3C_H
#define SIMICS_CPP_DEVS_I3C_H

#include "simics/devs/i3c.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class I3cMasterInterface {
  public:
    using ctype = i3c_master_interface_t;

    // Function override and implemented by user
    virtual void acknowledge(i3c_ack_t ack) = 0;
    virtual void read_response(uint8 value, bool more) = 0;
    virtual void daa_response(uint64 id, uint8 bcr, uint8 dcr) = 0;
    virtual void ibi_request() = 0;
    virtual void ibi_address(uint8 address) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void acknowledge(conf_object_t *obj, i3c_ack_t ack) {
            detail::get_interface<I3cMasterInterface>(obj)->acknowledge(ack);
        }
        static void read_response(conf_object_t *obj, uint8 value, bool more) {
            detail::get_interface<I3cMasterInterface>(obj)->read_response(value, more);
        }
        static void daa_response(conf_object_t *obj, uint64 id, uint8 bcr, uint8 dcr) {
            detail::get_interface<I3cMasterInterface>(obj)->daa_response(id, bcr, dcr);
        }
        static void ibi_request(conf_object_t *obj) {
            detail::get_interface<I3cMasterInterface>(obj)->ibi_request();
        }
        static void ibi_address(conf_object_t *obj, uint8 address) {
            detail::get_interface<I3cMasterInterface>(obj)->ibi_address(address);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I3cMasterInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void acknowledge(i3c_ack_t ack) const {
            iface_->acknowledge(obj_, ack);
        }
        void read_response(uint8 value, bool more) const {
            iface_->read_response(obj_, value, more);
        }
        void daa_response(uint64 id, uint8 bcr, uint8 dcr) const {
            iface_->daa_response(obj_, id, bcr, dcr);
        }
        void ibi_request() const {
            iface_->ibi_request(obj_);
        }
        void ibi_address(uint8 address) const {
            iface_->ibi_address(obj_, address);
        }

        const I3cMasterInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I3cMasterInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I3C_MASTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I3cMasterInterface::ctype funcs {
                FromC::acknowledge,
                FromC::read_response,
                FromC::daa_response,
                FromC::ibi_request,
                FromC::ibi_address,
            };
            return &funcs;
        }
    };
};

class I3cSlaveInterface {
  public:
    using ctype = i3c_slave_interface_t;

    // Function override and implemented by user
    virtual void start(uint8 address) = 0;
    virtual void write(uint8 value) = 0;
    virtual void sdr_write(bytes_t data) = 0;
    virtual void read() = 0;
    virtual void daa_read() = 0;
    virtual void stop() = 0;
    virtual void ibi_start() = 0;
    virtual void ibi_acknowledge(i3c_ack_t ack) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void start(conf_object_t *obj, uint8 address) {
            detail::get_interface<I3cSlaveInterface>(obj)->start(address);
        }
        static void write(conf_object_t *obj, uint8 value) {
            detail::get_interface<I3cSlaveInterface>(obj)->write(value);
        }
        static void sdr_write(conf_object_t *obj, bytes_t data) {
            detail::get_interface<I3cSlaveInterface>(obj)->sdr_write(data);
        }
        static void read(conf_object_t *obj) {
            detail::get_interface<I3cSlaveInterface>(obj)->read();
        }
        static void daa_read(conf_object_t *obj) {
            detail::get_interface<I3cSlaveInterface>(obj)->daa_read();
        }
        static void stop(conf_object_t *obj) {
            detail::get_interface<I3cSlaveInterface>(obj)->stop();
        }
        static void ibi_start(conf_object_t *obj) {
            detail::get_interface<I3cSlaveInterface>(obj)->ibi_start();
        }
        static void ibi_acknowledge(conf_object_t *obj, i3c_ack_t ack) {
            detail::get_interface<I3cSlaveInterface>(obj)->ibi_acknowledge(ack);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I3cSlaveInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void start(uint8 address) const {
            iface_->start(obj_, address);
        }
        void write(uint8 value) const {
            iface_->write(obj_, value);
        }
        void sdr_write(bytes_t data) const {
            iface_->sdr_write(obj_, data);
        }
        void read() const {
            iface_->read(obj_);
        }
        void daa_read() const {
            iface_->daa_read(obj_);
        }
        void stop() const {
            iface_->stop(obj_);
        }
        void ibi_start() const {
            iface_->ibi_start(obj_);
        }
        void ibi_acknowledge(i3c_ack_t ack) const {
            iface_->ibi_acknowledge(obj_, ack);
        }

        const I3cSlaveInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I3cSlaveInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I3C_SLAVE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I3cSlaveInterface::ctype funcs {
                FromC::start,
                FromC::write,
                FromC::sdr_write,
                FromC::read,
                FromC::daa_read,
                FromC::stop,
                FromC::ibi_start,
                FromC::ibi_acknowledge,
            };
            return &funcs;
        }
    };
};

class I3cDaaSnoopInterface {
  public:
    using ctype = i3c_daa_snoop_interface_t;

    // Function override and implemented by user
    virtual void assigned_address(uint64 id, uint8 bcr, uint8 dcr, uint8 address) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void assigned_address(conf_object_t *obj, uint64 id, uint8 bcr, uint8 dcr, uint8 address) {
            detail::get_interface<I3cDaaSnoopInterface>(obj)->assigned_address(id, bcr, dcr, address);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I3cDaaSnoopInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void assigned_address(uint64 id, uint8 bcr, uint8 dcr, uint8 address) const {
            iface_->assigned_address(obj_, id, bcr, dcr, address);
        }

        const I3cDaaSnoopInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I3cDaaSnoopInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I3C_DAA_SNOOP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I3cDaaSnoopInterface::ctype funcs {
                FromC::assigned_address,
            };
            return &funcs;
        }
    };
};

class I3cHdrSlaveInterface {
  public:
    using ctype = i3c_hdr_slave_interface_t;

    // Function override and implemented by user
    virtual void hdr_write(bytes_t data) = 0;
    virtual void hdr_read(uint32 max_len) = 0;
    virtual void hdr_restart() = 0;
    virtual void hdr_exit() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void hdr_write(conf_object_t *obj, bytes_t data) {
            detail::get_interface<I3cHdrSlaveInterface>(obj)->hdr_write(data);
        }
        static void hdr_read(conf_object_t *obj, uint32 max_len) {
            detail::get_interface<I3cHdrSlaveInterface>(obj)->hdr_read(max_len);
        }
        static void hdr_restart(conf_object_t *obj) {
            detail::get_interface<I3cHdrSlaveInterface>(obj)->hdr_restart();
        }
        static void hdr_exit(conf_object_t *obj) {
            detail::get_interface<I3cHdrSlaveInterface>(obj)->hdr_exit();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I3cHdrSlaveInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void hdr_write(bytes_t data) const {
            iface_->hdr_write(obj_, data);
        }
        void hdr_read(uint32 max_len) const {
            iface_->hdr_read(obj_, max_len);
        }
        void hdr_restart() const {
            iface_->hdr_restart(obj_);
        }
        void hdr_exit() const {
            iface_->hdr_exit(obj_);
        }

        const I3cHdrSlaveInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I3cHdrSlaveInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I3C_HDR_SLAVE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I3cHdrSlaveInterface::ctype funcs {
                FromC::hdr_write,
                FromC::hdr_read,
                FromC::hdr_restart,
                FromC::hdr_exit,
            };
            return &funcs;
        }
    };
};

class I3cHdrMasterInterface {
  public:
    using ctype = i3c_hdr_master_interface_t;

    // Function override and implemented by user
    virtual void hdr_read_response(bytes_t bytes, bool more) = 0;
    virtual void hdr_acknowledge(i3c_ack_t ack) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void hdr_read_response(conf_object_t *obj, bytes_t bytes, bool more) {
            detail::get_interface<I3cHdrMasterInterface>(obj)->hdr_read_response(bytes, more);
        }
        static void hdr_acknowledge(conf_object_t *obj, i3c_ack_t ack) {
            detail::get_interface<I3cHdrMasterInterface>(obj)->hdr_acknowledge(ack);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I3cHdrMasterInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void hdr_read_response(bytes_t bytes, bool more) const {
            iface_->hdr_read_response(obj_, bytes, more);
        }
        void hdr_acknowledge(i3c_ack_t ack) const {
            iface_->hdr_acknowledge(obj_, ack);
        }

        const I3cHdrMasterInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I3cHdrMasterInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I3C_HDR_MASTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I3cHdrMasterInterface::ctype funcs {
                FromC::hdr_read_response,
                FromC::hdr_acknowledge,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
