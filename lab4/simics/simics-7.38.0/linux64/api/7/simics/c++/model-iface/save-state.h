// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_SAVE_STATE_H
#define SIMICS_CPP_MODEL_IFACE_SAVE_STATE_H

#include "simics/model-iface/save-state.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SaveStateInterface {
  public:
    using ctype = save_state_interface_t;

    // Function override and implemented by user
    virtual int get_version() = 0;
    virtual int get_size(state_save_kind_t stype) = 0;
    virtual int get_align(state_save_kind_t stype) = 0;
    virtual int save_state(state_save_kind_t stype, void *dest) = 0;
    virtual int load_state(state_save_kind_t stype, void *src) = 0;
    virtual int compare_state(state_save_kind_t stype, void *src) = 0;
    virtual int print_state(state_save_kind_t stype, void *src, int symnames, int diff) = 0;
    virtual int save_state_he(state_save_kind_t stype, void *dest) = 0;
    virtual int load_state_he(state_save_kind_t stype, void *src) = 0;
    virtual int compare_state_he(state_save_kind_t stype, void *src) = 0;
    virtual int print_state_he(state_save_kind_t stype, void *src, int symnames, int diff) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int get_version(conf_object_t *obj) {
            return detail::get_interface<SaveStateInterface>(obj)->get_version();
        }
        static int get_size(conf_object_t *obj, state_save_kind_t stype) {
            return detail::get_interface<SaveStateInterface>(obj)->get_size(stype);
        }
        static int get_align(conf_object_t *obj, state_save_kind_t stype) {
            return detail::get_interface<SaveStateInterface>(obj)->get_align(stype);
        }
        static int save_state(conf_object_t *obj, state_save_kind_t stype, void *dest) {
            return detail::get_interface<SaveStateInterface>(obj)->save_state(stype, dest);
        }
        static int load_state(conf_object_t *obj, state_save_kind_t stype, void *src) {
            return detail::get_interface<SaveStateInterface>(obj)->load_state(stype, src);
        }
        static int compare_state(conf_object_t *obj, state_save_kind_t stype, void *src) {
            return detail::get_interface<SaveStateInterface>(obj)->compare_state(stype, src);
        }
        static int print_state(conf_object_t *obj, state_save_kind_t stype, void *src, int symnames, int diff) {
            return detail::get_interface<SaveStateInterface>(obj)->print_state(stype, src, symnames, diff);
        }
        static int save_state_he(conf_object_t *obj, state_save_kind_t stype, void *dest) {
            return detail::get_interface<SaveStateInterface>(obj)->save_state_he(stype, dest);
        }
        static int load_state_he(conf_object_t *obj, state_save_kind_t stype, void *src) {
            return detail::get_interface<SaveStateInterface>(obj)->load_state_he(stype, src);
        }
        static int compare_state_he(conf_object_t *obj, state_save_kind_t stype, void *src) {
            return detail::get_interface<SaveStateInterface>(obj)->compare_state_he(stype, src);
        }
        static int print_state_he(conf_object_t *obj, state_save_kind_t stype, void *src, int symnames, int diff) {
            return detail::get_interface<SaveStateInterface>(obj)->print_state_he(stype, src, symnames, diff);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SaveStateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int get_version() const {
            return iface_->get_version(obj_);
        }
        int get_size(state_save_kind_t stype) const {
            return iface_->get_size(obj_, stype);
        }
        int get_align(state_save_kind_t stype) const {
            return iface_->get_align(obj_, stype);
        }
        int save_state(state_save_kind_t stype, void *dest) const {
            return iface_->save_state(obj_, stype, dest);
        }
        int load_state(state_save_kind_t stype, void *src) const {
            return iface_->load_state(obj_, stype, src);
        }
        int compare_state(state_save_kind_t stype, void *src) const {
            return iface_->compare_state(obj_, stype, src);
        }
        int print_state(state_save_kind_t stype, void *src, int symnames, int diff) const {
            return iface_->print_state(obj_, stype, src, symnames, diff);
        }
        int save_state_he(state_save_kind_t stype, void *dest) const {
            return iface_->save_state_he(obj_, stype, dest);
        }
        int load_state_he(state_save_kind_t stype, void *src) const {
            return iface_->load_state_he(obj_, stype, src);
        }
        int compare_state_he(state_save_kind_t stype, void *src) const {
            return iface_->compare_state_he(obj_, stype, src);
        }
        int print_state_he(state_save_kind_t stype, void *src, int symnames, int diff) const {
            return iface_->print_state_he(obj_, stype, src, symnames, diff);
        }

        const SaveStateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SaveStateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SAVE_STATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SaveStateInterface::ctype funcs {
                FromC::get_version,
                FromC::get_size,
                FromC::get_align,
                FromC::save_state,
                FromC::load_state,
                FromC::compare_state,
                FromC::print_state,
                FromC::save_state_he,
                FromC::load_state_he,
                FromC::compare_state_he,
                FromC::print_state_he,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
