// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_SIGNAL_H
#define SIMICS_CPP_DEVS_SIGNAL_H

#include "simics/devs/signal.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SignalInterface {
  public:
    using ctype = signal_interface_t;

    // Function override and implemented by user
    virtual void signal_raise() = 0;
    virtual void signal_lower() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void signal_raise(conf_object_t *obj) {
            detail::get_interface<SignalInterface>(obj)->signal_raise();
        }
        static void signal_lower(conf_object_t *obj) {
            detail::get_interface<SignalInterface>(obj)->signal_lower();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SignalInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void signal_raise() const {
            iface_->signal_raise(obj_);
        }
        void signal_lower() const {
            iface_->signal_lower(obj_);
        }

        const SignalInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SignalInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SIGNAL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SignalInterface::ctype funcs {
                FromC::signal_raise,
                FromC::signal_lower,
            };
            return &funcs;
        }
    };
};

class MultiLevelSignalInterface {
  public:
    using ctype = multi_level_signal_interface_t;

    // Function override and implemented by user
    virtual void signal_level_change(uint64 level) = 0;
    virtual void signal_current_level(uint64 level) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void signal_level_change(conf_object_t *obj, uint64 level) {
            detail::get_interface<MultiLevelSignalInterface>(obj)->signal_level_change(level);
        }
        static void signal_current_level(conf_object_t *obj, uint64 level) {
            detail::get_interface<MultiLevelSignalInterface>(obj)->signal_current_level(level);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MultiLevelSignalInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void signal_level_change(uint64 level) const {
            iface_->signal_level_change(obj_, level);
        }
        void signal_current_level(uint64 level) const {
            iface_->signal_current_level(obj_, level);
        }

        const MultiLevelSignalInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MultiLevelSignalInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MULTI_LEVEL_SIGNAL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MultiLevelSignalInterface::ctype funcs {
                FromC::signal_level_change,
                FromC::signal_current_level,
            };
            return &funcs;
        }
    };
};

class PulseInterface {
  public:
    using ctype = pulse_interface_t;

    // Function override and implemented by user
    virtual void pulse() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void pulse(conf_object_t *obj) {
            detail::get_interface<PulseInterface>(obj)->pulse();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PulseInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void pulse() const {
            iface_->pulse(obj_);
        }

        const PulseInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PulseInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PULSE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PulseInterface::ctype funcs {
                FromC::pulse,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
