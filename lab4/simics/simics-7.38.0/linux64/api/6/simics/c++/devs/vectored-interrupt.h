// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_VECTORED_INTERRUPT_H
#define SIMICS_CPP_DEVS_VECTORED_INTERRUPT_H

#include "simics/devs/vectored-interrupt.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class VectoredInterruptInterface {
  public:
    using ctype = vectored_interrupt_interface_t;

    // Function override and implemented by user
    virtual void set_level(conf_object_t *source, int level) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_level(conf_object_t *obj, conf_object_t *source, int level) {
            detail::get_interface<VectoredInterruptInterface>(obj)->set_level(source, level);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VectoredInterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_level(conf_object_t *source, int level) const {
            iface_->set_level(obj_, source, level);
        }

        const VectoredInterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VectoredInterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VECTORED_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VectoredInterruptInterface::ctype funcs {
                FromC::set_level,
            };
            return &funcs;
        }
    };
};

class VectoredInterruptSourceInterface {
  public:
    using ctype = vectored_interrupt_source_interface_t;

    // Function override and implemented by user
    virtual int acknowledge(conf_object_t *target, int level) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int acknowledge(conf_object_t *obj, conf_object_t *target, int level) {
            return detail::get_interface<VectoredInterruptSourceInterface>(obj)->acknowledge(target, level);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VectoredInterruptSourceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int acknowledge(conf_object_t *target, int level) const {
            return iface_->acknowledge(obj_, target, level);
        }

        const VectoredInterruptSourceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VectoredInterruptSourceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VECTORED_INTERRUPT_SOURCE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VectoredInterruptSourceInterface::ctype funcs {
                FromC::acknowledge,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
