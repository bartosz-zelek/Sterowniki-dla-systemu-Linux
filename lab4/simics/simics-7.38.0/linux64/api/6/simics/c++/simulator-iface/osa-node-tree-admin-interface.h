// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_NODE_TREE_ADMIN_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_NODE_TREE_ADMIN_INTERFACE_H

#include "simics/simulator-iface/osa-node-tree-admin-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaNodeTreeAdminInterface {
  public:
    using ctype = osa_node_tree_admin_interface_t;

    // Function override and implemented by user
    virtual transaction_id_t begin(conf_object_t *initiator) = 0;
    virtual void end(transaction_id_t transaction_id) = 0;
    virtual node_id_t create(conf_object_t *mapper, attr_value_t props) = 0;
    virtual node_id_t add(node_id_t parent_id, attr_value_t props) = 0;
    virtual void update(node_id_t node_id, attr_value_t props) = 0;
    virtual void remove(node_id_t node_id) = 0;
    virtual void event(node_id_t node_id, const char *event_name, attr_value_t event_data) = 0;
    virtual void activate(node_id_t node_id, conf_object_t *cpu) = 0;
    virtual void deactivate(node_id_t node_id, conf_object_t *cpu) = 0;
    virtual cancel_id_t register_formatter(node_id_t node_id, const char *key, bool recursive, attr_value_t (*formatter)(attr_value_t val)) = 0;
    virtual void unregister_formatter(cancel_id_t node_id) = 0;
    virtual void reset(node_id_t node_id, attr_value_t props) = 0;
    virtual void set_property(node_id_t node_id, const char *key, attr_value_t value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static transaction_id_t begin(conf_object_t *obj, conf_object_t *initiator) {
            return detail::get_interface<OsaNodeTreeAdminInterface>(obj)->begin(initiator);
        }
        static void end(conf_object_t *obj, transaction_id_t transaction_id) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->end(transaction_id);
        }
        static node_id_t create(conf_object_t *obj, conf_object_t *mapper, attr_value_t props) {
            return detail::get_interface<OsaNodeTreeAdminInterface>(obj)->create(mapper, props);
        }
        static node_id_t add(conf_object_t *obj, node_id_t parent_id, attr_value_t props) {
            return detail::get_interface<OsaNodeTreeAdminInterface>(obj)->add(parent_id, props);
        }
        static void update(conf_object_t *obj, node_id_t node_id, attr_value_t props) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->update(node_id, props);
        }
        static void remove(conf_object_t *obj, node_id_t node_id) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->remove(node_id);
        }
        static void event(conf_object_t *obj, node_id_t node_id, const char *event_name, attr_value_t event_data) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->event(node_id, event_name, event_data);
        }
        static void activate(conf_object_t *obj, node_id_t node_id, conf_object_t *cpu) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->activate(node_id, cpu);
        }
        static void deactivate(conf_object_t *obj, node_id_t node_id, conf_object_t *cpu) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->deactivate(node_id, cpu);
        }
        static cancel_id_t register_formatter(conf_object_t *obj, node_id_t node_id, const char *key, bool recursive, attr_value_t (*formatter)(attr_value_t val)) {
            return detail::get_interface<OsaNodeTreeAdminInterface>(obj)->register_formatter(node_id, key, recursive, formatter);
        }
        static void unregister_formatter(conf_object_t *obj, cancel_id_t node_id) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->unregister_formatter(node_id);
        }
        static void reset(conf_object_t *obj, node_id_t node_id, attr_value_t props) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->reset(node_id, props);
        }
        static void set_property(conf_object_t *obj, node_id_t node_id, const char *key, attr_value_t value) {
            detail::get_interface<OsaNodeTreeAdminInterface>(obj)->set_property(node_id, key, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaNodeTreeAdminInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        transaction_id_t begin(conf_object_t *initiator) const {
            return iface_->begin(obj_, initiator);
        }
        void end(transaction_id_t transaction_id) const {
            iface_->end(obj_, transaction_id);
        }
        node_id_t create(conf_object_t *mapper, attr_value_t props) const {
            return iface_->create(obj_, mapper, props);
        }
        node_id_t add(node_id_t parent_id, attr_value_t props) const {
            return iface_->add(obj_, parent_id, props);
        }
        void update(node_id_t node_id, attr_value_t props) const {
            iface_->update(obj_, node_id, props);
        }
        void remove(node_id_t node_id) const {
            iface_->remove(obj_, node_id);
        }
        void event(node_id_t node_id, const char *event_name, attr_value_t event_data) const {
            iface_->event(obj_, node_id, event_name, event_data);
        }
        void activate(node_id_t node_id, conf_object_t *cpu) const {
            iface_->activate(obj_, node_id, cpu);
        }
        void deactivate(node_id_t node_id, conf_object_t *cpu) const {
            iface_->deactivate(obj_, node_id, cpu);
        }
        cancel_id_t register_formatter(node_id_t node_id, const char *key, bool recursive, attr_value_t (*formatter)(attr_value_t val)) const {
            return iface_->register_formatter(obj_, node_id, key, recursive, formatter);
        }
        void unregister_formatter(cancel_id_t node_id) const {
            iface_->unregister_formatter(obj_, node_id);
        }
        void reset(node_id_t node_id, attr_value_t props) const {
            iface_->reset(obj_, node_id, props);
        }
        void set_property(node_id_t node_id, const char *key, attr_value_t value) const {
            iface_->set_property(obj_, node_id, key, value);
        }

        const OsaNodeTreeAdminInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaNodeTreeAdminInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_NODE_TREE_ADMIN_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaNodeTreeAdminInterface::ctype funcs {
                FromC::begin,
                FromC::end,
                FromC::create,
                FromC::add,
                FromC::update,
                FromC::remove,
                FromC::event,
                FromC::activate,
                FromC::deactivate,
                FromC::register_formatter,
                FromC::unregister_formatter,
                FromC::reset,
                FromC::set_property,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
