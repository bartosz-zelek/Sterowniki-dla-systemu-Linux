// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_TRACKER_CONTROL_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_TRACKER_CONTROL_INTERFACE_H

#include "simics/simulator-iface/osa-tracker-control-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaTrackerControlInterface {
  public:
    using ctype = osa_tracker_control_interface_t;

    // Function override and implemented by user
    virtual void disable() = 0;
    virtual bool enable() = 0;
    virtual void clear_state() = 0;
    virtual bool add_processor(conf_object_t *cpu) = 0;
    virtual bool remove_processor(conf_object_t *cpu) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void disable(conf_object_t *obj) {
            detail::get_interface<OsaTrackerControlInterface>(obj)->disable();
        }
        static bool enable(conf_object_t *obj) {
            return detail::get_interface<OsaTrackerControlInterface>(obj)->enable();
        }
        static void clear_state(conf_object_t *obj) {
            detail::get_interface<OsaTrackerControlInterface>(obj)->clear_state();
        }
        static bool add_processor(conf_object_t *obj, conf_object_t *cpu) {
            return detail::get_interface<OsaTrackerControlInterface>(obj)->add_processor(cpu);
        }
        static bool remove_processor(conf_object_t *obj, conf_object_t *cpu) {
            return detail::get_interface<OsaTrackerControlInterface>(obj)->remove_processor(cpu);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaTrackerControlInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void disable() const {
            iface_->disable(obj_);
        }
        bool enable() const {
            return iface_->enable(obj_);
        }
        void clear_state() const {
            iface_->clear_state(obj_);
        }
        bool add_processor(conf_object_t *cpu) const {
            return iface_->add_processor(obj_, cpu);
        }
        bool remove_processor(conf_object_t *cpu) const {
            return iface_->remove_processor(obj_, cpu);
        }

        const OsaTrackerControlInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaTrackerControlInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_TRACKER_CONTROL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaTrackerControlInterface::ctype funcs {
                FromC::disable,
                FromC::enable,
                FromC::clear_state,
                FromC::add_processor,
                FromC::remove_processor,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
