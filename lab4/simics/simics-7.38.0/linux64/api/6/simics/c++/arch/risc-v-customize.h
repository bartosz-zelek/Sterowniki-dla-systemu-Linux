// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_ARCH_RISC_V_CUSTOMIZE_H
#define SIMICS_CPP_ARCH_RISC_V_CUSTOMIZE_H

#include "simics/arch/risc-v-customize.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class RiscvInstructionActionInterface {
  public:
    using ctype = riscv_instruction_action_interface_t;

    // Function override and implemented by user
    virtual uint64 read_x_register(uint32 number) = 0;
    virtual void write_x_register(uint32 number, uint64 value) = 0;
    virtual const char * name_x_register(uint32 number) = 0;
    virtual uint64 read_csr(uint32 address) = 0;
    virtual void write_csr(uint32 address, uint64 value) = 0;
    virtual uint64 read_memory(uint64 address, uint32 size) = 0;
    virtual void write_memory(uint64 address, uint32 size, uint64 value) = 0;
    virtual void load_memory_buf(uint64 address, buffer_t buf) = 0;
    virtual void store_memory_buf(uint64 address, bytes_t buf) = 0;
    virtual riscv_cpu_mode_t get_current_cpu_mode() = 0;
    virtual void raise_exception(uint64 code, uint64 tval) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint64 read_x_register(conf_object_t *cpu, uint32 number) {
            return detail::get_interface<RiscvInstructionActionInterface>(cpu)->read_x_register(number);
        }
        static void write_x_register(conf_object_t *cpu, uint32 number, uint64 value) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->write_x_register(number, value);
        }
        static const char * name_x_register(conf_object_t *cpu, uint32 number) {
            return detail::get_interface<RiscvInstructionActionInterface>(cpu)->name_x_register(number);
        }
        static uint64 read_csr(conf_object_t *cpu, uint32 address) {
            return detail::get_interface<RiscvInstructionActionInterface>(cpu)->read_csr(address);
        }
        static void write_csr(conf_object_t *cpu, uint32 address, uint64 value) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->write_csr(address, value);
        }
        static uint64 read_memory(conf_object_t *cpu, uint64 address, uint32 size) {
            return detail::get_interface<RiscvInstructionActionInterface>(cpu)->read_memory(address, size);
        }
        static void write_memory(conf_object_t *cpu, uint64 address, uint32 size, uint64 value) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->write_memory(address, size, value);
        }
        static void load_memory_buf(conf_object_t *cpu, uint64 address, buffer_t buf) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->load_memory_buf(address, buf);
        }
        static void store_memory_buf(conf_object_t *cpu, uint64 address, bytes_t buf) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->store_memory_buf(address, buf);
        }
        static riscv_cpu_mode_t get_current_cpu_mode(conf_object_t *cpu) {
            return detail::get_interface<RiscvInstructionActionInterface>(cpu)->get_current_cpu_mode();
        }
        static void raise_exception(conf_object_t *cpu, uint64 code, uint64 tval) {
            detail::get_interface<RiscvInstructionActionInterface>(cpu)->raise_exception(code, tval);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvInstructionActionInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint64 read_x_register(uint32 number) const {
            return iface_->read_x_register(obj_, number);
        }
        void write_x_register(uint32 number, uint64 value) const {
            iface_->write_x_register(obj_, number, value);
        }
        const char * name_x_register(uint32 number) const {
            return iface_->name_x_register(obj_, number);
        }
        uint64 read_csr(uint32 address) const {
            return iface_->read_csr(obj_, address);
        }
        void write_csr(uint32 address, uint64 value) const {
            iface_->write_csr(obj_, address, value);
        }
        uint64 read_memory(uint64 address, uint32 size) const {
            return iface_->read_memory(obj_, address, size);
        }
        void write_memory(uint64 address, uint32 size, uint64 value) const {
            iface_->write_memory(obj_, address, size, value);
        }
        void load_memory_buf(uint64 address, buffer_t buf) const {
            iface_->load_memory_buf(obj_, address, buf);
        }
        void store_memory_buf(uint64 address, bytes_t buf) const {
            iface_->store_memory_buf(obj_, address, buf);
        }
        riscv_cpu_mode_t get_current_cpu_mode() const {
            return iface_->get_current_cpu_mode(obj_);
        }
        void raise_exception(uint64 code, uint64 tval) const {
            iface_->raise_exception(obj_, code, tval);
        }

        const RiscvInstructionActionInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvInstructionActionInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_INSTRUCTION_ACTION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvInstructionActionInterface::ctype funcs {
                FromC::read_x_register,
                FromC::write_x_register,
                FromC::name_x_register,
                FromC::read_csr,
                FromC::write_csr,
                FromC::read_memory,
                FromC::write_memory,
                FromC::load_memory_buf,
                FromC::store_memory_buf,
                FromC::get_current_cpu_mode,
                FromC::raise_exception,
            };
            return &funcs;
        }
    };
};

class RiscvCustomCsrInterface {
  public:
    using ctype = riscv_custom_csr_interface_t;

    // Function override and implemented by user
    virtual bool register_csr(conf_object_t *ext_obj, uint32 csr_address, const char *name, const char *description, riscv_csr_access_cb_t access) = 0;
    virtual void register_reset(conf_object_t *csr_obj, riscv_reset_cb_t reset_func) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool register_csr(conf_object_t *cpu, conf_object_t *ext_obj, uint32 csr_address, const char *name, const char *description, riscv_csr_access_cb_t access) {
            return detail::get_interface<RiscvCustomCsrInterface>(cpu)->register_csr(ext_obj, csr_address, name, description, access);
        }
        static void register_reset(conf_object_t *cpu, conf_object_t *csr_obj, riscv_reset_cb_t reset_func) {
            detail::get_interface<RiscvCustomCsrInterface>(cpu)->register_reset(csr_obj, reset_func);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvCustomCsrInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool register_csr(conf_object_t *ext_obj, uint32 csr_address, const char *name, const char *description, riscv_csr_access_cb_t access) const {
            return iface_->register_csr(obj_, ext_obj, csr_address, name, description, access);
        }
        void register_reset(conf_object_t *csr_obj, riscv_reset_cb_t reset_func) const {
            iface_->register_reset(obj_, csr_obj, reset_func);
        }

        const RiscvCustomCsrInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvCustomCsrInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_CUSTOM_CSR_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvCustomCsrInterface::ctype funcs {
                FromC::register_csr,
                FromC::register_reset,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
