// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_TRANSACTION_INSTRUMENTATION_H
#define SIMICS_CPP_MODEL_IFACE_TRANSACTION_INSTRUMENTATION_H

#include "simics/model-iface/transaction-instrumentation.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TransactionSubscribeInterface {
  public:
    using ctype = transaction_subscribe_interface_t;

    // Function override and implemented by user
    virtual void remove_callback(transaction_cb_handle_t *handle) = 0;
    virtual void enable_callback(transaction_cb_handle_t *handle) = 0;
    virtual void disable_callback(transaction_cb_handle_t *handle) = 0;
    virtual transaction_cb_handle_t * register_issue_cb(conf_object_t *conn_obj, transaction_issue_cb_t cb, lang_void *data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void remove_callback(conf_object_t *obj, transaction_cb_handle_t *handle) {
            detail::get_interface<TransactionSubscribeInterface>(obj)->remove_callback(handle);
        }
        static void enable_callback(conf_object_t *obj, transaction_cb_handle_t *handle) {
            detail::get_interface<TransactionSubscribeInterface>(obj)->enable_callback(handle);
        }
        static void disable_callback(conf_object_t *obj, transaction_cb_handle_t *handle) {
            detail::get_interface<TransactionSubscribeInterface>(obj)->disable_callback(handle);
        }
        static transaction_cb_handle_t * register_issue_cb(conf_object_t *obj, conf_object_t *conn_obj, transaction_issue_cb_t cb, lang_void *data) {
            return detail::get_interface<TransactionSubscribeInterface>(obj)->register_issue_cb(conn_obj, cb, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TransactionSubscribeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void remove_callback(transaction_cb_handle_t *handle) const {
            iface_->remove_callback(obj_, handle);
        }
        void enable_callback(transaction_cb_handle_t *handle) const {
            iface_->enable_callback(obj_, handle);
        }
        void disable_callback(transaction_cb_handle_t *handle) const {
            iface_->disable_callback(obj_, handle);
        }
        transaction_cb_handle_t * register_issue_cb(conf_object_t *conn_obj, transaction_issue_cb_t cb, lang_void *data) const {
            return iface_->register_issue_cb(obj_, conn_obj, cb, data);
        }

        const TransactionSubscribeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TransactionSubscribeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TRANSACTION_SUBSCRIBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TransactionSubscribeInterface::ctype funcs {
                FromC::remove_callback,
                FromC::enable_callback,
                FromC::disable_callback,
                FromC::register_issue_cb,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
