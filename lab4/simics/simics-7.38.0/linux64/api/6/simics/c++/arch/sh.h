// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_ARCH_SH_H
#define SIMICS_CPP_ARCH_SH_H

#include "simics/arch/sh.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ShInterruptInterface {
  public:
    using ctype = sh_interrupt_interface_t;

    // Function override and implemented by user
    virtual void change_pending(int level, uint32 intevt, int mod_imask_flag) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void change_pending(conf_object_t *cpu_obj, int level, uint32 intevt, int mod_imask_flag) {
            detail::get_interface<ShInterruptInterface>(cpu_obj)->change_pending(level, intevt, mod_imask_flag);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ShInterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void change_pending(int level, uint32 intevt, int mod_imask_flag) const {
            iface_->change_pending(obj_, level, intevt, mod_imask_flag);
        }

        const ShInterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ShInterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SH_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ShInterruptInterface::ctype funcs {
                FromC::change_pending,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
