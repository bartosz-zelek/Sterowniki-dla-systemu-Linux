// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_INSTRUMENTATION_FILTER_H
#define SIMICS_CPP_SIMULATOR_IFACE_INSTRUMENTATION_FILTER_H

#include "simics/simulator-iface/instrumentation-filter.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class InstrumentationFilterSlaveInterface {
  public:
    using ctype = instrumentation_filter_slave_interface_t;

    // Function override and implemented by user
    virtual void disable(unsigned source_id) = 0;
    virtual void enable(unsigned source_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void disable(conf_object_t *obj, unsigned source_id) {
            detail::get_interface<InstrumentationFilterSlaveInterface>(obj)->disable(source_id);
        }
        static void enable(conf_object_t *obj, unsigned source_id) {
            detail::get_interface<InstrumentationFilterSlaveInterface>(obj)->enable(source_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationFilterSlaveInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void disable(unsigned source_id) const {
            iface_->disable(obj_, source_id);
        }
        void enable(unsigned source_id) const {
            iface_->enable(obj_, source_id);
        }

        const InstrumentationFilterSlaveInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationFilterSlaveInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_FILTER_SLAVE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationFilterSlaveInterface::ctype funcs {
                FromC::disable,
                FromC::enable,
            };
            return &funcs;
        }
    };
};

class InstrumentationFilterStatusInterface {
  public:
    using ctype = instrumentation_filter_status_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_disabled_sources() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_disabled_sources(conf_object_t *obj) {
            return detail::get_interface<InstrumentationFilterStatusInterface>(obj)->get_disabled_sources();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationFilterStatusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_disabled_sources() const {
            return iface_->get_disabled_sources(obj_);
        }

        const InstrumentationFilterStatusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationFilterStatusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_FILTER_STATUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationFilterStatusInterface::ctype funcs {
                FromC::get_disabled_sources,
            };
            return &funcs;
        }
    };
};

class InstrumentationFilterMasterInterface {
  public:
    using ctype = instrumentation_filter_master_interface_t;

    // Function override and implemented by user
    virtual void set_source_id(unsigned source_id) = 0;
    virtual bool add_slave(conf_object_t *slave, conf_object_t *provider_obj) = 0;
    virtual void remove_slave(conf_object_t *slave, conf_object_t *provider_obj) = 0;
    virtual char * short_filter_config() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_source_id(conf_object_t *obj, unsigned source_id) {
            detail::get_interface<InstrumentationFilterMasterInterface>(obj)->set_source_id(source_id);
        }
        static bool add_slave(conf_object_t *obj, conf_object_t *slave, conf_object_t *provider_obj) {
            return detail::get_interface<InstrumentationFilterMasterInterface>(obj)->add_slave(slave, provider_obj);
        }
        static void remove_slave(conf_object_t *obj, conf_object_t *slave, conf_object_t *provider_obj) {
            detail::get_interface<InstrumentationFilterMasterInterface>(obj)->remove_slave(slave, provider_obj);
        }
        static char * short_filter_config(conf_object_t *obj) {
            return detail::get_interface<InstrumentationFilterMasterInterface>(obj)->short_filter_config();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationFilterMasterInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_source_id(unsigned source_id) const {
            iface_->set_source_id(obj_, source_id);
        }
        bool add_slave(conf_object_t *slave, conf_object_t *provider_obj) const {
            return iface_->add_slave(obj_, slave, provider_obj);
        }
        void remove_slave(conf_object_t *slave, conf_object_t *provider_obj) const {
            iface_->remove_slave(obj_, slave, provider_obj);
        }
        char * short_filter_config() const {
            return iface_->short_filter_config(obj_);
        }

        const InstrumentationFilterMasterInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationFilterMasterInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_FILTER_MASTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationFilterMasterInterface::ctype funcs {
                FromC::set_source_id,
                FromC::add_slave,
                FromC::remove_slave,
                FromC::short_filter_config,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
