// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_PREFERENCES_H
#define SIMICS_CPP_SIMULATOR_IFACE_PREFERENCES_H

#include "simics/simulator-iface/preferences.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class PreferenceInterface {
  public:
    using ctype = preference_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_preference_for_module_key(const char *module, const char *key) = 0;
    virtual void set_preference_for_module_key(attr_value_t value, const char *module, const char *key) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_preference_for_module_key(conf_object_t *prefs, const char *module, const char *key) {
            return detail::get_interface<PreferenceInterface>(prefs)->get_preference_for_module_key(module, key);
        }
        static void set_preference_for_module_key(conf_object_t *prefs, attr_value_t value, const char *module, const char *key) {
            detail::get_interface<PreferenceInterface>(prefs)->set_preference_for_module_key(value, module, key);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PreferenceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_preference_for_module_key(const char *module, const char *key) const {
            return iface_->get_preference_for_module_key(obj_, module, key);
        }
        void set_preference_for_module_key(attr_value_t value, const char *module, const char *key) const {
            iface_->set_preference_for_module_key(obj_, value, module, key);
        }

        const PreferenceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PreferenceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PREFERENCE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PreferenceInterface::ctype funcs {
                FromC::get_preference_for_module_key,
                FromC::set_preference_for_module_key,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
