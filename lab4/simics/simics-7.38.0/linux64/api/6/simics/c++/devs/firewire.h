// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_FIREWIRE_H
#define SIMICS_CPP_DEVS_FIREWIRE_H

#include "simics/devs/firewire.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class FirewireBusInterface {
  public:
    using ctype = firewire_bus_interface_t;

    // Function override and implemented by user
    virtual int connect_device(conf_object_t *dev) = 0;
    virtual int disconnect_device(conf_object_t *dev) = 0;
    virtual void set_device_bus_id(conf_object_t *dev, uint16 bus_id) = 0;
    virtual void set_id_mask(conf_object_t *dev, uint16 id_mask) = 0;
    virtual firewire_ack_code_t transfer(conf_object_t *source, dbuffer_t *packet, int crc_calculated) = 0;
    virtual int register_channel(conf_object_t *dev, uint32 channel) = 0;
    virtual int unregister_channel(conf_object_t *dev, uint32 channel) = 0;
    virtual void reset() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int connect_device(conf_object_t *bus, conf_object_t *dev) {
            return detail::get_interface<FirewireBusInterface>(bus)->connect_device(dev);
        }
        static int disconnect_device(conf_object_t *bus, conf_object_t *dev) {
            return detail::get_interface<FirewireBusInterface>(bus)->disconnect_device(dev);
        }
        static void set_device_bus_id(conf_object_t *bus, conf_object_t *dev, uint16 bus_id) {
            detail::get_interface<FirewireBusInterface>(bus)->set_device_bus_id(dev, bus_id);
        }
        static void set_id_mask(conf_object_t *bus, conf_object_t *dev, uint16 id_mask) {
            detail::get_interface<FirewireBusInterface>(bus)->set_id_mask(dev, id_mask);
        }
        static firewire_ack_code_t transfer(conf_object_t *bus, conf_object_t *source, dbuffer_t *packet, int crc_calculated) {
            return detail::get_interface<FirewireBusInterface>(bus)->transfer(source, packet, crc_calculated);
        }
        static int register_channel(conf_object_t *bus, conf_object_t *dev, uint32 channel) {
            return detail::get_interface<FirewireBusInterface>(bus)->register_channel(dev, channel);
        }
        static int unregister_channel(conf_object_t *bus, conf_object_t *dev, uint32 channel) {
            return detail::get_interface<FirewireBusInterface>(bus)->unregister_channel(dev, channel);
        }
        static void reset(conf_object_t *bus) {
            detail::get_interface<FirewireBusInterface>(bus)->reset();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FirewireBusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int connect_device(conf_object_t *dev) const {
            return iface_->connect_device(obj_, dev);
        }
        int disconnect_device(conf_object_t *dev) const {
            return iface_->disconnect_device(obj_, dev);
        }
        void set_device_bus_id(conf_object_t *dev, uint16 bus_id) const {
            iface_->set_device_bus_id(obj_, dev, bus_id);
        }
        void set_id_mask(conf_object_t *dev, uint16 id_mask) const {
            iface_->set_id_mask(obj_, dev, id_mask);
        }
        firewire_ack_code_t transfer(conf_object_t *source, dbuffer_t *packet, int crc_calculated) const {
            return iface_->transfer(obj_, source, packet, crc_calculated);
        }
        int register_channel(conf_object_t *dev, uint32 channel) const {
            return iface_->register_channel(obj_, dev, channel);
        }
        int unregister_channel(conf_object_t *dev, uint32 channel) const {
            return iface_->unregister_channel(obj_, dev, channel);
        }
        void reset() const {
            iface_->reset(obj_);
        }

        const FirewireBusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FirewireBusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FIREWIRE_BUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FirewireBusInterface::ctype funcs {
                FromC::connect_device,
                FromC::disconnect_device,
                FromC::set_device_bus_id,
                FromC::set_id_mask,
                FromC::transfer,
                FromC::register_channel,
                FromC::unregister_channel,
                FromC::reset,
            };
            return &funcs;
        }
    };
};

class FirewireDeviceInterface {
  public:
    using ctype = firewire_device_interface_t;

    // Function override and implemented by user
    virtual firewire_ack_code_t transfer(dbuffer_t *packet, int crc_calculated) = 0;
    virtual void reset(uint16 id, uint8 root_id, uint32_array_t self_ids) = 0;
    virtual uint32 get_self_id_template() = 0;
    virtual int get_rhb() = 0;
    virtual uint8 get_port_count() = 0;
    virtual uint16 get_port_mask() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static firewire_ack_code_t transfer(conf_object_t *dev, dbuffer_t *packet, int crc_calculated) {
            return detail::get_interface<FirewireDeviceInterface>(dev)->transfer(packet, crc_calculated);
        }
        static void reset(conf_object_t *dev, uint16 id, uint8 root_id, uint32_array_t self_ids) {
            detail::get_interface<FirewireDeviceInterface>(dev)->reset(id, root_id, self_ids);
        }
        static uint32 get_self_id_template(conf_object_t *dev) {
            return detail::get_interface<FirewireDeviceInterface>(dev)->get_self_id_template();
        }
        static int get_rhb(conf_object_t *dev) {
            return detail::get_interface<FirewireDeviceInterface>(dev)->get_rhb();
        }
        static uint8 get_port_count(conf_object_t *dev) {
            return detail::get_interface<FirewireDeviceInterface>(dev)->get_port_count();
        }
        static uint16 get_port_mask(conf_object_t *dev) {
            return detail::get_interface<FirewireDeviceInterface>(dev)->get_port_mask();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FirewireDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        firewire_ack_code_t transfer(dbuffer_t *packet, int crc_calculated) const {
            return iface_->transfer(obj_, packet, crc_calculated);
        }
        void reset(uint16 id, uint8 root_id, uint32_array_t self_ids) const {
            iface_->reset(obj_, id, root_id, self_ids);
        }
        uint32 get_self_id_template() const {
            return iface_->get_self_id_template(obj_);
        }
        int get_rhb() const {
            return iface_->get_rhb(obj_);
        }
        uint8 get_port_count() const {
            return iface_->get_port_count(obj_);
        }
        uint16 get_port_mask() const {
            return iface_->get_port_mask(obj_);
        }

        const FirewireDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FirewireDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FIREWIRE_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FirewireDeviceInterface::ctype funcs {
                FromC::transfer,
                FromC::reset,
                FromC::get_self_id_template,
                FromC::get_rhb,
                FromC::get_port_count,
                FromC::get_port_mask,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
