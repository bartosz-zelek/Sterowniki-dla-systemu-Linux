// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_GFX_CONSOLE_H
#define SIMICS_CPP_MODEL_IFACE_GFX_CONSOLE_H

#include "simics/model-iface/gfx-console.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class VgaUpdateInterface {
  public:
    using ctype = vga_update_interface_t;

    // Function override and implemented by user
    virtual void refresh() = 0;
    virtual void refresh_all() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void refresh(conf_object_t *obj) {
            detail::get_interface<VgaUpdateInterface>(obj)->refresh();
        }
        static void refresh_all(conf_object_t *obj) {
            detail::get_interface<VgaUpdateInterface>(obj)->refresh_all();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VgaUpdateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void refresh() const {
            iface_->refresh(obj_);
        }
        void refresh_all() const {
            iface_->refresh_all(obj_);
        }

        const VgaUpdateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VgaUpdateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VGA_UPDATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VgaUpdateInterface::ctype funcs {
                FromC::refresh,
                FromC::refresh_all,
            };
            return &funcs;
        }
    };
};

class GfxConInterface {
  public:
    using ctype = gfx_con_interface_t;

    // Function override and implemented by user
    virtual int set_color(uint8 index, uint8 r, uint8 g, uint8 b) = 0;
    virtual void set_size(int width, int height) = 0;
    virtual void put_pixel(int x, int y, uint8 index) = 0;
    virtual void put_pixel_rgb(int x, int y, uint32 rgb) = 0;
    virtual void put_block_old(uint8 *src, int minx, int miny, int maxx, int maxy, int src_fmt, int src_stride, int unused) = 0;
    virtual void redraw() = 0;
    virtual void update_keyboard_leds(int led_change) = 0;
    virtual void put_pixel_col(int x, int y, int r, int g, int b) = 0;
    virtual void put_block(bytes_t block, int minx, int miny, int maxx, int maxy, gfx_con_pixel_fmt_t src_fmt, int src_stride) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int set_color(conf_object_t *obj, uint8 index, uint8 r, uint8 g, uint8 b) {
            return detail::get_interface<GfxConInterface>(obj)->set_color(index, r, g, b);
        }
        static void set_size(conf_object_t *obj, int width, int height) {
            detail::get_interface<GfxConInterface>(obj)->set_size(width, height);
        }
        static void put_pixel(conf_object_t *obj, int x, int y, uint8 index) {
            detail::get_interface<GfxConInterface>(obj)->put_pixel(x, y, index);
        }
        static void put_pixel_rgb(conf_object_t *obj, int x, int y, uint32 rgb) {
            detail::get_interface<GfxConInterface>(obj)->put_pixel_rgb(x, y, rgb);
        }
        static void put_block_old(conf_object_t *obj, uint8 *src, int minx, int miny, int maxx, int maxy, int src_fmt, int src_stride, int unused) {
            detail::get_interface<GfxConInterface>(obj)->put_block_old(src, minx, miny, maxx, maxy, src_fmt, src_stride, unused);
        }
        static void redraw(conf_object_t *obj) {
            detail::get_interface<GfxConInterface>(obj)->redraw();
        }
        static void update_keyboard_leds(conf_object_t *obj, int led_change) {
            detail::get_interface<GfxConInterface>(obj)->update_keyboard_leds(led_change);
        }
        static void put_pixel_col(conf_object_t *obj, int x, int y, int r, int g, int b) {
            detail::get_interface<GfxConInterface>(obj)->put_pixel_col(x, y, r, g, b);
        }
        static void put_block(conf_object_t *obj, bytes_t block, int minx, int miny, int maxx, int maxy, gfx_con_pixel_fmt_t src_fmt, int src_stride) {
            detail::get_interface<GfxConInterface>(obj)->put_block(block, minx, miny, maxx, maxy, src_fmt, src_stride);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GfxConInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int set_color(uint8 index, uint8 r, uint8 g, uint8 b) const {
            return iface_->set_color(obj_, index, r, g, b);
        }
        void set_size(int width, int height) const {
            iface_->set_size(obj_, width, height);
        }
        void put_pixel(int x, int y, uint8 index) const {
            iface_->put_pixel(obj_, x, y, index);
        }
        void put_pixel_rgb(int x, int y, uint32 rgb) const {
            iface_->put_pixel_rgb(obj_, x, y, rgb);
        }
        void put_block_old(uint8 *src, int minx, int miny, int maxx, int maxy, int src_fmt, int src_stride, int unused) const {
            iface_->put_block_old(obj_, src, minx, miny, maxx, maxy, src_fmt, src_stride, unused);
        }
        void redraw() const {
            iface_->redraw(obj_);
        }
        void update_keyboard_leds(int led_change) const {
            iface_->update_keyboard_leds(obj_, led_change);
        }
        void put_pixel_col(int x, int y, int r, int g, int b) const {
            iface_->put_pixel_col(obj_, x, y, r, g, b);
        }
        void put_block(bytes_t block, int minx, int miny, int maxx, int maxy, gfx_con_pixel_fmt_t src_fmt, int src_stride) const {
            iface_->put_block(obj_, block, minx, miny, maxx, maxy, src_fmt, src_stride);
        }

        const GfxConInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GfxConInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GFX_CON_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GfxConInterface::ctype funcs {
                FromC::set_color,
                FromC::set_size,
                FromC::put_pixel,
                FromC::put_pixel_rgb,
                FromC::put_block_old,
                FromC::redraw,
                FromC::update_keyboard_leds,
                FromC::put_pixel_col,
                FromC::put_block,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
