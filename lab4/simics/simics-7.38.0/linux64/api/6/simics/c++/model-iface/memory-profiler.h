// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_MEMORY_PROFILER_H
#define SIMICS_CPP_MODEL_IFACE_MEMORY_PROFILER_H

#include "simics/model-iface/memory-profiler.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class MemoryProfilerInterface {
  public:
    using ctype = memory_profiler_interface_t;

    // Function override and implemented by user
    virtual conf_object_t * get(read_or_write_t access) = 0;
    virtual bool set(read_or_write_t access, conf_object_t *prof) = 0;
    virtual int get_granularity_log2() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static conf_object_t * get(conf_object_t *obj, read_or_write_t access) {
            return detail::get_interface<MemoryProfilerInterface>(obj)->get(access);
        }
        static bool set(conf_object_t *obj, read_or_write_t access, conf_object_t *prof) {
            return detail::get_interface<MemoryProfilerInterface>(obj)->set(access, prof);
        }
        static int get_granularity_log2(conf_object_t *obj) {
            return detail::get_interface<MemoryProfilerInterface>(obj)->get_granularity_log2();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MemoryProfilerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        conf_object_t * get(read_or_write_t access) const {
            return iface_->get(obj_, access);
        }
        bool set(read_or_write_t access, conf_object_t *prof) const {
            return iface_->set(obj_, access, prof);
        }
        int get_granularity_log2() const {
            return iface_->get_granularity_log2(obj_);
        }

        const MemoryProfilerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MemoryProfilerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MEMORY_PROFILER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MemoryProfilerInterface::ctype funcs {
                FromC::get,
                FromC::set,
                FromC::get_granularity_log2,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
