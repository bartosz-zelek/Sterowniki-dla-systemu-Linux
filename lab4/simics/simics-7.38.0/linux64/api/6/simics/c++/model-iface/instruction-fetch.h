// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_INSTRUCTION_FETCH_H
#define SIMICS_CPP_MODEL_IFACE_INSTRUCTION_FETCH_H

#include "simics/model-iface/instruction-fetch.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class InstructionFetchInterface {
  public:
    using ctype = instruction_fetch_interface_t;

    // Function override and implemented by user
    virtual instruction_fetch_mode_t get_mode() = 0;
    virtual void set_mode(instruction_fetch_mode_t mode) = 0;
    virtual int get_line_size() = 0;
    virtual void set_line_size(int size) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static instruction_fetch_mode_t get_mode(conf_object_t *obj) {
            return detail::get_interface<InstructionFetchInterface>(obj)->get_mode();
        }
        static void set_mode(conf_object_t *obj, instruction_fetch_mode_t mode) {
            detail::get_interface<InstructionFetchInterface>(obj)->set_mode(mode);
        }
        static int get_line_size(conf_object_t *obj) {
            return detail::get_interface<InstructionFetchInterface>(obj)->get_line_size();
        }
        static void set_line_size(conf_object_t *obj, int size) {
            detail::get_interface<InstructionFetchInterface>(obj)->set_line_size(size);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstructionFetchInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        instruction_fetch_mode_t get_mode() const {
            return iface_->get_mode(obj_);
        }
        void set_mode(instruction_fetch_mode_t mode) const {
            iface_->set_mode(obj_, mode);
        }
        int get_line_size() const {
            return iface_->get_line_size(obj_);
        }
        void set_line_size(int size) const {
            iface_->set_line_size(obj_, size);
        }

        const InstructionFetchInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstructionFetchInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUCTION_FETCH_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstructionFetchInterface::ctype funcs {
                FromC::get_mode,
                FromC::set_mode,
                FromC::get_line_size,
                FromC::set_line_size,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
