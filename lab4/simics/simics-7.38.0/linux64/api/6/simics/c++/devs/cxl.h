// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_CXL_H
#define SIMICS_CPP_DEVS_CXL_H

#include "simics/devs/cxl.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CxlMapInterface {
  public:
    using ctype = cxl_map_interface_t;

    // Function override and implemented by user
    virtual void add_map(conf_object_t *map_obj, map_info_t info, cxl_type_t type) = 0;
    virtual void del_map(conf_object_t *map_obj, physical_address_t base, cxl_type_t type) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void add_map(conf_object_t *obj, conf_object_t *map_obj, map_info_t info, cxl_type_t type) {
            detail::get_interface<CxlMapInterface>(obj)->add_map(map_obj, info, type);
        }
        static void del_map(conf_object_t *obj, conf_object_t *map_obj, physical_address_t base, cxl_type_t type) {
            detail::get_interface<CxlMapInterface>(obj)->del_map(map_obj, base, type);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CxlMapInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void add_map(conf_object_t *map_obj, map_info_t info, cxl_type_t type) const {
            iface_->add_map(obj_, map_obj, info, type);
        }
        void del_map(conf_object_t *map_obj, physical_address_t base, cxl_type_t type) const {
            iface_->del_map(obj_, map_obj, base, type);
        }

        const CxlMapInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CxlMapInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CXL_MAP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CxlMapInterface::ctype funcs {
                FromC::add_map,
                FromC::del_map,
            };
            return &funcs;
        }
    };
};

class CxlNonDeviceDecoderHandlingInterface {
  public:
    using ctype = cxl_non_device_decoder_handling_interface_t;

    // Function override and implemented by user
    virtual int enable_decoder(uint8 index, uint8 ig, uint8 iw, uint64 base, uint64 size, uint64 target_list) = 0;
    virtual int disable_decoder(uint8 decoder_index) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int enable_decoder(conf_object_t *obj, uint8 index, uint8 ig, uint8 iw, uint64 base, uint64 size, uint64 target_list) {
            return detail::get_interface<CxlNonDeviceDecoderHandlingInterface>(obj)->enable_decoder(index, ig, iw, base, size, target_list);
        }
        static int disable_decoder(conf_object_t *obj, uint8 decoder_index) {
            return detail::get_interface<CxlNonDeviceDecoderHandlingInterface>(obj)->disable_decoder(decoder_index);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CxlNonDeviceDecoderHandlingInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int enable_decoder(uint8 index, uint8 ig, uint8 iw, uint64 base, uint64 size, uint64 target_list) const {
            return iface_->enable_decoder(obj_, index, ig, iw, base, size, target_list);
        }
        int disable_decoder(uint8 decoder_index) const {
            return iface_->disable_decoder(obj_, decoder_index);
        }

        const CxlNonDeviceDecoderHandlingInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CxlNonDeviceDecoderHandlingInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CXL_NON_DEVICE_DECODER_HANDLING_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CxlNonDeviceDecoderHandlingInterface::ctype funcs {
                FromC::enable_decoder,
                FromC::disable_decoder,
            };
            return &funcs;
        }
    };
};

class CxlMemDownstreamPortManagingInterface {
  public:
    using ctype = cxl_mem_downstream_port_managing_interface_t;

    // Function override and implemented by user
    virtual bool register_port_mem_obj(uint8 port_number, conf_object_t *port_mem_obj) = 0;
    virtual void unregister_port_mem_obj(uint8 port_number) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool register_port_mem_obj(conf_object_t *obj, uint8 port_number, conf_object_t *port_mem_obj) {
            return detail::get_interface<CxlMemDownstreamPortManagingInterface>(obj)->register_port_mem_obj(port_number, port_mem_obj);
        }
        static void unregister_port_mem_obj(conf_object_t *obj, uint8 port_number) {
            detail::get_interface<CxlMemDownstreamPortManagingInterface>(obj)->unregister_port_mem_obj(port_number);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CxlMemDownstreamPortManagingInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool register_port_mem_obj(uint8 port_number, conf_object_t *port_mem_obj) const {
            return iface_->register_port_mem_obj(obj_, port_number, port_mem_obj);
        }
        void unregister_port_mem_obj(uint8 port_number) const {
            iface_->unregister_port_mem_obj(obj_, port_number);
        }

        const CxlMemDownstreamPortManagingInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CxlMemDownstreamPortManagingInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CXL_MEM_DOWNSTREAM_PORT_MANAGING_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CxlMemDownstreamPortManagingInterface::ctype funcs {
                FromC::register_port_mem_obj,
                FromC::unregister_port_mem_obj,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
