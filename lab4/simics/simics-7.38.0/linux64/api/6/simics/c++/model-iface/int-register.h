// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_INT_REGISTER_H
#define SIMICS_CPP_MODEL_IFACE_INT_REGISTER_H

#include "simics/model-iface/int-register.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class IntRegisterInterface {
  public:
    using ctype = int_register_interface_t;

    // Function override and implemented by user
    virtual int get_number(const char *name) = 0;
    virtual const char * get_name(int reg) = 0;
    virtual uint64 read(int reg) = 0;
    virtual void write(int reg, uint64 val) = 0;
    virtual attr_value_t all_registers() = 0;
    virtual int register_info(int reg, ireg_info_t info) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int get_number(conf_object_t *obj, const char *name) {
            return detail::get_interface<IntRegisterInterface>(obj)->get_number(name);
        }
        static const char * get_name(conf_object_t *obj, int reg) {
            return detail::get_interface<IntRegisterInterface>(obj)->get_name(reg);
        }
        static uint64 read(conf_object_t *obj, int reg) {
            return detail::get_interface<IntRegisterInterface>(obj)->read(reg);
        }
        static void write(conf_object_t *obj, int reg, uint64 val) {
            detail::get_interface<IntRegisterInterface>(obj)->write(reg, val);
        }
        static attr_value_t all_registers(conf_object_t *obj) {
            return detail::get_interface<IntRegisterInterface>(obj)->all_registers();
        }
        static int register_info(conf_object_t *obj, int reg, ireg_info_t info) {
            return detail::get_interface<IntRegisterInterface>(obj)->register_info(reg, info);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const IntRegisterInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int get_number(const char *name) const {
            return iface_->get_number(obj_, name);
        }
        const char * get_name(int reg) const {
            return iface_->get_name(obj_, reg);
        }
        uint64 read(int reg) const {
            return iface_->read(obj_, reg);
        }
        void write(int reg, uint64 val) const {
            iface_->write(obj_, reg, val);
        }
        attr_value_t all_registers() const {
            return iface_->all_registers(obj_);
        }
        int register_info(int reg, ireg_info_t info) const {
            return iface_->register_info(obj_, reg, info);
        }

        const IntRegisterInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const IntRegisterInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INT_REGISTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr IntRegisterInterface::ctype funcs {
                FromC::get_number,
                FromC::get_name,
                FromC::read,
                FromC::write,
                FromC::all_registers,
                FromC::register_info,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
