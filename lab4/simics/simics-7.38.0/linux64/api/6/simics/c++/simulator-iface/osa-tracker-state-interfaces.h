// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_TRACKER_STATE_INTERFACES_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_TRACKER_STATE_INTERFACES_H

#include "simics/simulator-iface/osa-tracker-state-interfaces.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaTrackerStateAdminInterface {
  public:
    using ctype = osa_tracker_state_admin_interface_t;

    // Function override and implemented by user
    virtual transaction_id_t begin(conf_object_t *tracker, conf_object_t *initiator) = 0;
    virtual void end(transaction_id_t txid) = 0;
    virtual void add(entity_id_t entity_id, attr_value_t attributes) = 0;
    virtual void remove(entity_id_t entity_id) = 0;
    virtual void remove_all() = 0;
    virtual void set_attribute(entity_id_t entity_id, const char *key, attr_value_t val) = 0;
    virtual void update(entity_id_t entity_id, attr_value_t attributes) = 0;
    virtual void event(entity_id_t entity_id, const char *event_name, attr_value_t event_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static transaction_id_t begin(conf_object_t *obj, conf_object_t *tracker, conf_object_t *initiator) {
            return detail::get_interface<OsaTrackerStateAdminInterface>(obj)->begin(tracker, initiator);
        }
        static void end(conf_object_t *obj, transaction_id_t txid) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->end(txid);
        }
        static void add(conf_object_t *obj, entity_id_t entity_id, attr_value_t attributes) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->add(entity_id, attributes);
        }
        static void remove(conf_object_t *obj, entity_id_t entity_id) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->remove(entity_id);
        }
        static void remove_all(conf_object_t *obj) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->remove_all();
        }
        static void set_attribute(conf_object_t *obj, entity_id_t entity_id, const char *key, attr_value_t val) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->set_attribute(entity_id, key, val);
        }
        static void update(conf_object_t *obj, entity_id_t entity_id, attr_value_t attributes) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->update(entity_id, attributes);
        }
        static void event(conf_object_t *obj, entity_id_t entity_id, const char *event_name, attr_value_t event_data) {
            detail::get_interface<OsaTrackerStateAdminInterface>(obj)->event(entity_id, event_name, event_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaTrackerStateAdminInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        transaction_id_t begin(conf_object_t *tracker, conf_object_t *initiator) const {
            return iface_->begin(obj_, tracker, initiator);
        }
        void end(transaction_id_t txid) const {
            iface_->end(obj_, txid);
        }
        void add(entity_id_t entity_id, attr_value_t attributes) const {
            iface_->add(obj_, entity_id, attributes);
        }
        void remove(entity_id_t entity_id) const {
            iface_->remove(obj_, entity_id);
        }
        void remove_all() const {
            iface_->remove_all(obj_);
        }
        void set_attribute(entity_id_t entity_id, const char *key, attr_value_t val) const {
            iface_->set_attribute(obj_, entity_id, key, val);
        }
        void update(entity_id_t entity_id, attr_value_t attributes) const {
            iface_->update(obj_, entity_id, attributes);
        }
        void event(entity_id_t entity_id, const char *event_name, attr_value_t event_data) const {
            iface_->event(obj_, entity_id, event_name, event_data);
        }

        const OsaTrackerStateAdminInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaTrackerStateAdminInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_TRACKER_STATE_ADMIN_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaTrackerStateAdminInterface::ctype funcs {
                FromC::begin,
                FromC::end,
                FromC::add,
                FromC::remove,
                FromC::remove_all,
                FromC::set_attribute,
                FromC::update,
                FromC::event,
            };
            return &funcs;
        }
    };
};

class OsaTrackerStateNotificationInterface {
  public:
    using ctype = osa_tracker_state_notification_interface_t;

    // Function override and implemented by user
    virtual void subscribe_tracker(conf_object_t *mapper, conf_object_t *tracker) = 0;
    virtual void unsubscribe_tracker(conf_object_t *mapper, conf_object_t *tracker) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void subscribe_tracker(conf_object_t *obj, conf_object_t *mapper, conf_object_t *tracker) {
            detail::get_interface<OsaTrackerStateNotificationInterface>(obj)->subscribe_tracker(mapper, tracker);
        }
        static void unsubscribe_tracker(conf_object_t *obj, conf_object_t *mapper, conf_object_t *tracker) {
            detail::get_interface<OsaTrackerStateNotificationInterface>(obj)->unsubscribe_tracker(mapper, tracker);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaTrackerStateNotificationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void subscribe_tracker(conf_object_t *mapper, conf_object_t *tracker) const {
            iface_->subscribe_tracker(obj_, mapper, tracker);
        }
        void unsubscribe_tracker(conf_object_t *mapper, conf_object_t *tracker) const {
            iface_->unsubscribe_tracker(obj_, mapper, tracker);
        }

        const OsaTrackerStateNotificationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaTrackerStateNotificationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_TRACKER_STATE_NOTIFICATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaTrackerStateNotificationInterface::ctype funcs {
                FromC::subscribe_tracker,
                FromC::unsubscribe_tracker,
            };
            return &funcs;
        }
    };
};

class OsaTrackerStateQueryInterface {
  public:
    using ctype = osa_tracker_state_query_interface_t;

    // Function override and implemented by user
    virtual attr_value_t _deprecated() = 0;
    virtual attr_value_t get_entities(conf_object_t *tracker) = 0;
    virtual attr_value_t get_entity(conf_object_t *tracker, entity_id_t id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t _deprecated(conf_object_t *obj) {
            return detail::get_interface<OsaTrackerStateQueryInterface>(obj)->_deprecated();
        }
        static attr_value_t get_entities(conf_object_t *obj, conf_object_t *tracker) {
            return detail::get_interface<OsaTrackerStateQueryInterface>(obj)->get_entities(tracker);
        }
        static attr_value_t get_entity(conf_object_t *obj, conf_object_t *tracker, entity_id_t id) {
            return detail::get_interface<OsaTrackerStateQueryInterface>(obj)->get_entity(tracker, id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaTrackerStateQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t _deprecated() const {
            return iface_->_deprecated(obj_);
        }
        attr_value_t get_entities(conf_object_t *tracker) const {
            return iface_->get_entities(obj_, tracker);
        }
        attr_value_t get_entity(conf_object_t *tracker, entity_id_t id) const {
            return iface_->get_entity(obj_, tracker, id);
        }

        const OsaTrackerStateQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaTrackerStateQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_TRACKER_STATE_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaTrackerStateQueryInterface::ctype funcs {
                FromC::_deprecated,
                FromC::get_entities,
                FromC::get_entity,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
