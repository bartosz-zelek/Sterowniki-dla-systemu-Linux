
/*
  pcie-glue-bridge.dml

  Â© 2023 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

device legacy_upstream_pcie_adapter;

param classname = "legacy-upstream-pcie-adapter";

import "simics/simulator-api.dml";
import "utility.dml";
import "pci/common.dml";

param desc = "legacy upstream to new style PCIe adapter";


param documentation = "Glue bridge to connect new style PCIe endpoints and /"
                    + " root ports (including multi-function) to old style"
                    + " upstream bridges, switches and root ports. Normally the"
                    + " glue bridge will be connected to a"
                    + " <class>pcie-bus</class>.";

param limitations = "<ul>"
    + "<li>Only supports device number 0</li>"
    + "</ul>";

session uint16 bdf_info_carrier[2];

// When using this adapter to hook new-style PCIe devices into a legacy
// pcie-bus, the adapter has to manually map itself into the conf space
// and hence it needs to know the BDF of the upstream end of the
// adapter
// NOTE: This will only work for trivial PCIe devices that DO NOT
//       use MSI, MSI-X, or DMA
attribute qsp_pcie_bus_mode "Non-NIL when connecting to QSP pcie-bus" {
    param type = "[ii]|n";
    param configuration = "optional";
    param internal = true;
    method get() -> (attr_value_t) {
        if (is_set) {
            return SIM_make_attr_list(2,
                        SIM_make_attr_uint64(bdf_info_carrier[0]),
                        SIM_make_attr_uint64(bdf_info_carrier[1]));
        } else {
            return SIM_make_attr_nil();
        }
    }
    method set(attr_value_t v) throws {
        if (SIM_attr_is_nil(v)) {
            is_set = false;
        } else {
            is_set = true;
            bdf_info_carrier[0] = SIM_attr_integer(SIM_attr_list_item(v, 0));
            bdf_info_carrier[1] = SIM_attr_integer(SIM_attr_list_item(v, 1));
        }
    }
    session bool is_set = false;
}

connect pci_bus is (pci_bus_connect) {
    interface pci_express;    // Ensure that PCI_EXPRESS is supported in pci_bus
}

group impl {
    port downstream {

        connect downstream_port is (init_as_subobj) {
            param classname = "pcie-downstream-port";
            param internal = true;
            session map_target_t *map_target;
            session map_target_t *ecam_map_target;

            method init() {
                local set_error_t err;
                local conf_object_t *port_downstream;
                local conf_object_t *port_ecam;

                default();
                port_downstream = SIM_object_descendant(this.obj,
                                                        "port.downstream");
                if (port_downstream == NULL) {
                    log error: "No downstream port found in obj";
                    assert false;
                }
                map_target = SIM_new_map_target(port_downstream, NULL, NULL);
                if (map_target == NULL) {
                    log error: "Could not create map target for downstream" +
                               " port sub object";
                    return;
                }
                err = SIM_set_attribute_default(obj, "transparent_enabled",
                                                SIM_make_attr_boolean(true));
                if (err != Sim_Set_Ok) {
                    log error: "Could not set transparent_enabled attribute" +
                               " for pcie_downstream_port. Error code: %d", err;
                    assert false;
                }
                err = SIM_set_attribute_default(obj, "transparent_target",
                                                SIM_make_attr_object(parent.obj));
                if (err != Sim_Set_Ok) {
                    log error: "Could not set transparent_target attribute" +
                               " for pcie_downstream_port. Error code: %d", err;
                    assert false;
                }
                err = SIM_set_attribute_default(obj, "upstream_target",
                                                SIM_make_attr_object(NULL));
                if (err != Sim_Set_Ok) {
                    log error: "Could not unset non-transparent" +
                               " upstream_target for pcie_downstream_port." +
                               " Error code: %d", err;
                    assert false;
                }
                port_ecam = SIM_object_descendant(this.obj, "port.ecam");
                if (port_ecam == NULL) {
                    log error: "No ecam port found in downstream port";
                    assert false;
                }
                ecam_map_target = SIM_new_map_target(port_ecam, NULL, NULL);
                if (ecam_map_target == NULL) {
                    log error: "Could not create map target for downstream" +
                                " ecam port sub object";
                    assert false;
                    return;
                }
                after: objects_finalized();
            }

            method objects_finalized() {
                if (qsp_pcie_bus_mode.is_set) {
                    local map_info_t m;
                    m.base = ((bdf_info_carrier[0]<<3) + bdf_info_carrier[1]) << 16;
                    m.start = 0;
                    m.length = 1 << 12;
                    impl.downstream.pcie_map.add_map(dev.obj, m, PCIE_Type_Cfg);
                }
            }

        }
        implement pcie_map {
            method add_map(conf_object_t *mobj, map_info_t nfo,
                           pcie_type_t type) {
                if (pci_bus.obj == NULL) {
                    log error: "No pcie-bus connected. Will not add any"
                             + " mapping";
                    return;
                }

                local int space = pcie_type_to_addr_space(type);
                if (space == -1) {
                    return;
                }
                local int ret;
                if (space == Sim_Addr_Space_Conf) {
                    local map_info_t m_legacy;
                    m_legacy.base[27:12] = nfo.base[31:16];
                    if (qsp_pcie_bus_mode.is_set)
                        m_legacy.start[27:12] = 0;
                    else
                        m_legacy.start[27:12] = nfo.base[31:16];
                    m_legacy.function = 255;
                    m_legacy.length = nfo.length;
                    ret = pci_bus.pci_bus.add_map(dev.obj, space, NULL,
                                                  m_legacy);
                } else {
                    ret = pci_bus.pci_bus.add_map(mobj, space, NULL, nfo);
                }
                if (ret != 1) {
                    log info, 1: "Was not able to place mapping in pci_bus";
                } else {
                    log info, 3: "Added map to pcie-bus. Space: %d, base:"
                               + "  0x%02X, length: %d ", space, nfo.base,
                                                          nfo.length;
                }
            }

            method del_map(conf_object_t *mobj, physical_address_t base,
                           pcie_type_t type) {
                if (pci_bus.obj == NULL) {
                    log error: "No pcie-bus connected. Will not remove any"
                             + " mapping";
                    return;
                }
                local int space = pcie_type_to_addr_space(type);
                if (space == -1) {
                    return;
                }
                local int ret;
                if (space == Sim_Addr_Space_Conf) {
                    local uint64 base_addr;
                    base_addr[27:12] = base[31:16];
                    ret = pci_bus.pci_bus.remove_map(dev.obj, space, 255);
                } else {
                    ret = pci_bus.pci_bus.remove_map(mobj, space, 0);
                }
                if (ret == 1) {
                    log info, 1: "Was not able to remove mapping in pci_bus";
                } else {
                    log info, 3: "Removed map from pcie-bus. Space: %d, base:"
                               + " 0x%02X", space, base;
                }
            }

            method add_function(conf_object_t *mobj, uint16 function_id) {
                assert false;
                // Not used in transparent pcie_downstream_port
            }

            method del_function(conf_object_t *mobj, uint16 function_id) {
                assert false;
                // Not used in transparent pcie_downstream_port
            }

            method enable_function(uint16 function_id) {
                assert false;
                // Not used in transparent pcie_downstream_port
            }

            method disable_function(uint16 function_id) {
                assert false;
                // Not used in transparent pcie_downstream_port
            }

            method get_device_id(conf_object_t *dev_obj) -> (uint16) {
                // Not used in transparent pcie_downstream_port
                assert false;
                return 0;
            }
        }

        implement transaction {
            method issue(transaction_t *t,
                        uint64 addr) -> (exception_type_t) default {
                return handle_upstream(t, addr);
            }
        }
    }
}

attribute devices {
    param documentation = "Connected PCIe device. Format is"
        + " (function_number, object)*)."
        + " Currently only one device is supported, and it must have both"
        + " device number 0 as well as function number 0";

    param type = "[[iio]|[io]|o*]";
    param configuration = "pseudo";

    method set(attr_value_t value) throws {
        for (local int i = 0; i < SIM_attr_list_size(value); ++i) {
            local attr_value_t dev = SIM_attr_list_item(value, i);
            if (SIM_attr_list_size(dev) == 3) {
                local uint64 d = SIM_attr_integer(SIM_attr_list_item(dev, 0));
                local uint64 f = SIM_attr_integer(SIM_attr_list_item(dev, 1));
                if (d != 0) {
                    log error: "The adapter only supports one device with"
                             + " device number 0";
                    throw;
                }
            }
        }

        if (SIM_set_attribute(impl.downstream.downstream_port.obj,
            "devices", &value) != 0) {
                log error: "Failed to set the devices attribute in"
                         + " pcie-downstream-port device";
                throw;
        }
    }
    method get() -> (attr_value_t) {
        return SIM_get_attribute(impl.downstream.downstream_port.obj,
                                 "devices");
    }
}

attribute sec_bus_num is (read_only_attr) "Secondary Bus Number" {
    param type = "i";
    param internal = true;

    method get() -> (attr_value_t) {
        return SIM_get_attribute(impl.downstream.downstream_port.obj,
                                 "sec_bus_num");
    }
}

method handle_upstream_msg(transaction_t *t) -> (exception_type_t) {
    local buffer_t b;
    SIM_get_transaction_bytes(t, b);
    local byte_string_t payload = {
        .str = b.data,
        .len = b.len
    };
    return pci_bus.pci_express.send_message(SIM_transaction_initiator(t),
                                            ATOM_get_transaction_pcie_msg_type(t),
                                            payload);
}

method handle_upstream(transaction_t *transaction,
                       physical_address_t addr) -> (exception_type_t) {
    if (pci_bus.obj == NULL) {
        log info, 1 then 3: "No pci bus connected, won't route upstream" +
                            " request";
        return Sim_PE_IO_Not_Taken;
    }
    log info, 4: "Converting new-style PCIe upstream access of type %d to"
               + " old-style", ATOM_get_transaction_pcie_type(transaction);

    if (ATOM_get_transaction_pcie_type(transaction) == PCIE_Type_Msg) {
        return handle_upstream_msg(transaction);
    }

    local int space;
    space = pcie_type_to_addr_space(ATOM_get_transaction_pcie_type(transaction));
    if (space == -1) {
        return Sim_PE_IO_Not_Taken;
    }

    local uint16 rid = ATOM_get_transaction_pcie_requester_id(transaction);

    local size_t sz = SIM_transaction_size(transaction);
    local buffer_t buffer = {
        .data = new uint8[sz],
        .len = sz
    };
    local bytes_t bytes = {
        .data = buffer.data,
        .len = buffer.len
    };

    local exception_type_t ret;
    local conf_object_t *initiator = SIM_transaction_initiator(transaction);
    if (SIM_transaction_is_write(transaction)) {
        SIM_get_transaction_bytes(transaction, buffer);
        ret = pci_bus.pci_upstream_operation.write(initiator, rid, space, addr,
                                                   bytes);

    } else if (SIM_transaction_is_read(transaction)) {
        ret = pci_bus.pci_upstream_operation.read(initiator, rid, space, addr,
                                                  buffer);
        SIM_set_transaction_bytes(transaction, bytes);
    } else {
        // Inquiry applicable for upstream transactions?
        ret = Sim_PE_IO_Not_Taken;
    }
    delete buffer.data;
    return ret;
}

method update_secondary_bus_number(uint8 secondary_bus_number) {
    saved bool first = true;

    local const pcie_port_control_interface_t *ifc;
    ifc = SIM_c_get_interface(impl.downstream.downstream_port.obj,
                              "pcie_port_control");
    assert(ifc != NULL);
    if ((SIM_attr_integer(sec_bus_num.get()) != secondary_bus_number) || first) {
        log info, 2: "Setting new secondary bus number in pcie_downstream_port:"
                   + " %d", secondary_bus_number;
        ifc->set_secondary_bus_number(impl.downstream.downstream_port.obj,
                                      secondary_bus_number);
    }

    if (first) {
        first = false;
    }
}

// Handles downstream requests
implement translator {
    method translate(physical_address_t addr, access_t acc,
                    const map_target_t *dt) -> (translation_t) {
        log info, 4: "Translating incoming pcie-bus downstream access to ecam";
        local translation_t txl;
        txl.target = impl.downstream.downstream_port.ecam_map_target;
        return txl;
    }
}

implement pcie_adapter_compat {
    method set_secondary_bus_number(int secondary_bus_number) {
        update_secondary_bus_number(secondary_bus_number);
    }
}

implement pci_express {
    // Messages from upstream
    method send_message(conf_object_t *src, pcie_message_type_t type,
                        byte_string_t payload) -> (int) default {
        log info, 3: "Received message over legacy interface. Will try to pass"
                   + " downstream to new endpoint. (Requester ID not set)";
        local exception_type_t exc;
        local transaction_t t;
        // Note that message routing is not supported by legacy lib. We
        // set PCIE_Msg_Route_Broadcast as that is in essence what pci-bus does
        local atom_t atoms[8] = {
            ATOM_pcie_type(PCIE_Type_Msg),
            ATOM_pcie_msg_type(type),
            ATOM_pcie_msg_route(PCIE_Msg_Route_Broadcast),
            ATOM_initiator(src),
            ATOM_flags(Sim_Transaction_Write),
            ATOM_size(payload.len),
            ATOM_data(payload.str),
            ATOM_list_end(0),
        };
        t.atoms = atoms;
        // We can't reliably set the requester id here. Legacy endpoints don't
        // provide us a way of getting their BDF. If we are lucky, the sending
        // device might be among our upstream's pci_bus pci_devices attribute,
        // and we could theory then call pci_bus.pci_bus.get_bus_address(src).
        // Since other scenarios are not supported, we will just skip it for all
        // cases.
        exc = SIM_issue_transaction(impl.downstream.downstream_port.map_target,
                                    &t, 0);
        if (exc != Sim_PE_No_Exception)
            log info, 2: "send_message: unexpected exception %d", exc;
        return 0;
    }
}

// We should never get legacy upstream operations
implement pci_upstream_operation {
    method read(conf_object_t *initiator,
                uint16 rid,
                addr_space_t space,
                physical_address_t address,
                buffer_t buffer) -> (exception_type_t) {
        log info, 1 then 4: "Unexpected pci_upstream_operation read by %s",
            SIM_object_name(initiator);
        return Sim_PE_No_Exception;
    }

    method write(conf_object_t *initiator,
                 uint16 rid,
                 addr_space_t space,
                 physical_address_t address,
                 bytes_t bytes) -> (exception_type_t) {
        log info, 1 then 4: "Unexpected pci_upstream_operation write by %s",
            SIM_object_name(initiator);
        return Sim_PE_No_Exception;
    }
}

implement pci_device {
    method bus_reset() {
        local const pcie_port_control_interface_t *ifc;
        ifc = SIM_c_get_interface(impl.downstream.downstream_port.obj,
                                  "pcie_port_control");
        if (ifc == NULL) {
            log error: "pcie_port_control must be implemented by"
                     + " pcie_downstream_port";
            assert(false);
        }
        ifc->hot_reset(impl.downstream.downstream_port.obj);
        log info, 3: "Hot reset of pcie_downstream_port %s",
            SIM_object_name(impl.downstream.downstream_port.obj);
    }
}

method pcie_type_to_addr_space(pcie_type_t type) -> (int) {
    switch (type) {
    case PCIE_Type_Cfg: return Sim_Addr_Space_Conf;
    case PCIE_Type_IO: return Sim_Addr_Space_IO;
    case PCIE_Type_Mem: return Sim_Addr_Space_Memory;
    case PCIE_Type_Other: return -1;
    default: return -1;
    }
}
