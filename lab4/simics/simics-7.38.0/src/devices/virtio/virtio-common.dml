/*
  virtio-common.dml

  Â© 2022 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

loggroup virtio;

import "simics/util/bitcount.dml";

method umax(uint64 a, uint64 b) -> (uint64) {
    return a > b ? a : b;
}

method umin(uint64 a, uint64 b) -> (uint64) {
    return a < b ? a : b;
}

// A device should put a reasonable limit on the number of virtqueue
// descriptors it supports. 128 seems reasonable, right?
constant QUEUE_NUM_MAX = 128;

// Number of feature registers in the feature bank Can be increased if there is
// a need for higher feature bits.
param N_FEATURE_REGS = 4;
param N_FEATURE_BITS = N_FEATURE_REGS * 4 * 8;  // Feature reg has 4 bytes

// Device type IDs.
param VIRTIO_ID_NET            =  1;
param VIRTIO_ID_BLOCK          =  2;
param VIRTIO_ID_CONSOLE        =  3;
param VIRTIO_ID_RNG            =  4;
param VIRTIO_ID_BALLOON        =  5;
param VIRTIO_ID_RPMSG          =  7;
param VIRTIO_ID_SCSI           =  8;
param VIRTIO_ID_9P             =  9;
param VIRTIO_ID_RPROC_SERIAL   = 11;
param VIRTIO_ID_CAIF           = 12;
param VIRTIO_ID_GPU            = 16;
param VIRTIO_ID_INPUT          = 18;
param VIRTIO_ID_VSOCK          = 19;
param VIRTIO_ID_CRYPTO         = 20;
param VIRTIO_ID_IOMMU          = 23;
param VIRTIO_ID_MEM            = 24;
param VIRTIO_ID_FS             = 26;
param VIRTIO_ID_PMEM           = 27;
param VIRTIO_ID_MAC80211_HWSIM = 29;

// Feature bits
param VIRTIO_F_INDIRECT_DESC     = 28;
param VIRTIO_F_EVENT_IDX         = 29;
param VIRTIO_F_VERSION_1         = 32;
param VIRTIO_F_ACCESS_PLATFORM   = 33;
param VIRTIO_F_RING_PACKED       = 34;
param VIRTIO_F_IN_ORDER          = 35;
param VIRTIO_F_ORDER_PLATFORM    = 36;
param VIRTIO_F_SR_IOV            = 37;
param VIRTIO_F_NOTIFICATION_DATA = 38;
param VIRTIO_F_NOTIF_CONFIG_DATA = 39;
param VIRTIO_F_RING_RESET        = 40;
param VIRTIO_F_ADMIN_VQ          = 41;

// Status register bits.
param VIRTIO_STATUS_ACKNOWLEDGE = 0x01;
param VIRTIO_STATUS_DRIVER      = 0x02;
param VIRTIO_STATUS_DRIVER_OK   = 0x04;
param VIRTIO_STATUS_FEATURES_OK = 0x08;
param VIRTIO_STATUS_NEEDS_RESET = 0x40;
param VIRTIO_STATUS_FAILED      = 0x80;

// Virtqueue descriptor flags.
param VIRTQ_DESC_F_NEXT     = 0x1;
param VIRTQ_DESC_F_WRITE    = 0x2;
param VIRTQ_DESC_F_INDIRECT = 0x4;

// Virtqueue avail ring flags.
param VIRTQ_AVAIL_F_NO_INTERRUPT = 0x1;

// Virtqueue used ring flags.
param VIRTQ_USED_F_NO_NOTIFY = 0x1;

// Number of supported device and driver feature words.
param NUM_FEATURE_WORDS = 2;

// Number of supported virtqueues, depends on the device type.
// Virtqueue descriptor.
typedef layout "little-endian" {
    uint64 addr;
    uint32 len;
    uint16 flags;
    uint16 next;
} virtq_desc_t;

// Virtqueue used ring element.
typedef layout "little-endian" {
    uint32 id;
    uint32 len;
} virtq_used_elem_t;

// List of virtqueue descriptors associated with a request.
typedef struct {
    uint16 num_descs;
    virtq_desc_t descs[QUEUE_NUM_MAX];

    // Number of data bytes described by the descriptors.
    uint64 len;
} virtq_desc_list_t;

typedef layout "little-endian" {
    uint16 flags;
    uint16 idx;
} ring_info_t;

template virtq is (soft_reset, hard_reset) {
    param virtq_idx : uint64;
    param virtio_dev: virtio_device;

    // Data associated to a virtqueue which is not part of any register, namely
    // the queue's current position in the avail and used rings.
    saved uint16 avail_ring_idx;
    saved uint16 used_ring_idx;

    shared method hard_reset() default {
        soft_reset();
    }

    shared method soft_reset() default {
        avail_ring_idx = 0;
        used_ring_idx = 0;
    }

    // Generate the used ring flags associated with the virtqueue.
    // By default returns no flags set.
    shared method get_used_ring_flags() -> (uint16) default {
        return 0;
    }

    // Return the address of the descriptor table of the specified virtqueue.
    shared method desc_table_address() -> (uint64);

    // Return the address of the avail ring of the specified virtqueue.
    shared method avail_ring_address() -> (uint64);

    // Return the address of the used ring of the specified virtqueue.
    shared method used_ring_address() -> (uint64);

    // Return the number of queues
    shared method num_descs() -> (uint32);

    // Acquire the next available buffer as provided by the avail ring.
    // Returns a desc list corresponding to the buffer as well as an id
    // for the buffer
    shared method acquire_buffer() -> (uint32, virtq_desc_list_t) throws;
    method acquire_buffer() -> (uint32, virtq_desc_list_t) throws {
        // Get the addresses of the descriptor table, avail ring,
        // and the number of descriptors used by this virtqueue.
        local uint64 desc_table_addr = desc_table_address();
        local uint64 avail_ring_addr = avail_ring_address();
        local uint32 num_descs = num_descs();

        // Get the start index of the descriptor list used by the
        // request. It is also used as ID when reporting the request in the
        // used ring.
        local uint16 desc_idx;
        virtio_dev.sys_mem_read(
            avail_ring_addr + 4
            + (avail_ring_idx % num_descs) * 2,
            sizeof(desc_idx), &desc_idx);
        local uint32 id = desc_idx;

        // Collect the descriptor list of the request.
        local virtq_desc_list_t desc_list;
        desc_list.num_descs = 0;
        do {
            local virtq_desc_t *desc =
                &desc_list.descs[desc_list.num_descs++];
            local uint64 desc_addr =
                desc_table_addr + desc_idx * sizeoftype(virtq_desc_t);
            virtio_dev.sys_mem_read(desc_addr, sizeof(*desc), desc);
            desc_list.len += desc->len;
            if ((desc->flags & VIRTQ_DESC_F_NEXT) == 0x0)
                break;
            desc_idx = desc->next;
        } while(desc_list.num_descs < QUEUE_NUM_MAX);
        return (id, desc_list);
    }

    // Release an acquired buffer and make it available to the guest
    // by updating the used ring.
    // Any subsequent reads/writes/commits to that buffer by the device
    // is illegal.
    shared method commit_buffer(uint32 id, uint32 used) throws;
    method commit_buffer(uint32 id, uint32 used) throws {
        // Get the addresses of the used ring, and the number of descriptors
        // used by this virtqueue.
        local uint64 used_ring_addr = used_ring_address();
        local uint32 num_descs = num_descs();

        // Add the request ID and the number of used bytes to the used
        // ring.
        virtio_dev.sys_mem_write(
            used_ring_addr + 4
            + (used_ring_idx % num_descs) * 8,
            sizeof(id), &id);
        virtio_dev.sys_mem_write(
            used_ring_addr + 4
            + (used_ring_idx % num_descs) * 8 + 4,
            sizeof(used), &used);

        // Advance the ring indexes. They should wrap at 2^16, which they do
        // naturally
        ++avail_ring_idx;
        ++used_ring_idx;
    }

    shared method get_avail_ring_info() -> (ring_info_t) throws {
        local ring_info_t ring_info;

        // Read the flags and the driver's position in the avail ring.
        virtio_dev.sys_mem_read(avail_ring_address(), sizeof(ring_info), &ring_info);
        return ring_info;
    }

    shared method set_used_ring_info(ring_info_t ring_info) throws {
        // Read the used ring flags and update the used ring index for the
        // driver.
        virtio_dev.sys_mem_write(used_ring_address(), sizeof(ring_info),
                                 &ring_info);
    }

    shared method update_used_ring_info() throws {
        local ring_info_t used_ring_info;
        used_ring_info.flags = get_used_ring_flags();
        used_ring_info.idx = used_ring_idx;

        set_used_ring_info(used_ring_info);
    }

    shared method interrupt_driver() throws;
}

template selector_reg is (write) {
    method write(uint64 value) {
        if (value > N_FEATURE_REGS) {
            log error, 1: "This device only supports %d feature " +
            "registers. Increase N_FEATURE_REGS since software is" +
            "accessing higher feature bits", N_FEATURE_REGS;
            return;
        }
        default(value);
    }
}

template feature {
    param bit : uint64;
}

template feature_bank is (bank, init) {
    register feature[i < N_FEATURE_REGS] size 4 @ 0x4 * i is (read_only,
                                                              no_reset);
    register feature_enable[i < N_FEATURE_REGS] size 4 @ 0x10 + i * 4;

    method init() {
        foreach f in (each feature in (this)) {
            if (f.bit >= N_FEATURE_BITS) {
                log error: "Feature bit %d out range", f.bit;
                assert(false);
            }
            feature[f.bit / 32].val[f.bit % 32] = 1;
        }
    }

    register feature_enable[i < N_FEATURE_REGS] is (write) {
        method write(uint64 value) {
            local uint32 changed = value ^ feature_enable[i].val;
            for (local uint8 j = 0; j < 32; j++) {
                local uint64 feature_bit = (i * 32) + j;
                if (value[j] == 1 && feature[i].val[j] == 0) {
                    log spec_viol: "Trying to enable unsupported feature %s"
                        + " (feature bit %d)",
                        feature_bit_to_string(feature_bit), feature_bit;
                } else if (changed[j] == 1) {
                    if (value[j] == 1) {
                        log info, 3: "Feature %s (feature bit %d) has been"
                            + " enabled", feature_bit_to_string(feature_bit),
                            feature_bit;
                    } else {
                        log info, 3: "Feature %s (feature bit %d) has been"
                            + " disabled", feature_bit_to_string(feature_bit),
                            feature_bit;
                    }
                }
            }
            default(value);
        }
    }
}

template virtio_device is (virtio_feature_bit_strings) {
    param function_index default 0;
    param NUM_QUEUES : uint8;

    #if (NUM_QUEUES > QUEUE_NUM_MAX) {
        error "num_queues greater than QUEUE_NUM_MAX";
    }

    bank features is feature_bank;

    method is_feature_enabled(uint64 feature_bit) -> (bool) {
        if (feature_bit >= N_FEATURE_BITS) {
            log error: "Feature bit %d out range", feature_bit;
            assert(false);
        }
        return features.feature_enable[feature_bit / 32].val[feature_bit % 32] == 1;
    }

    shared method get_virtq(uint16 virtq_idx) -> (virtq);
    shared method sys_mem_read(uint64 addr, size_t len, void *buf) throws;
    shared method sys_mem_write(uint64 addr, size_t len, void *buf) throws;
    // Handle any new requests in the specified virtqueue.
    shared method handle_notify(uint16 virtq_idx) throws;

    // Read from or write to data described by a descriptor list.
    shared method virtq_desc_data_access(virtq_desc_list_t *desc_list,
                                         read_or_write_t rw, uint32 offset,
                                         uint32 len, uint8 *buf) throws {
        local uint32 desc_offset = 0x0;
        local uint16 idx;
        for (idx = 0; idx < desc_list->num_descs; idx++) {
            local virtq_desc_t *desc = &desc_list->descs[idx];
            local uint32 start_offset = umax(offset, desc_offset);
            if (start_offset < desc_offset + desc->len) {
                local bool write_descriptor =
                    (desc->flags & VIRTQ_DESC_F_WRITE) != 0x0;
                local uint32 end_offset =
                    umin(offset + len,desc_offset + desc->len);
                local uint64 access_addr = desc->addr + start_offset - desc_offset;
                local uint32 access_len = end_offset - start_offset;
                local uint8 *access_buf = &buf[start_offset - offset];
                if (rw == Sim_RW_Write) {
                    if (!write_descriptor)
                        log spec_viol, 1 then 2,
                            virtio: "Write to read-only descriptor data.";
                    sys_mem_write(access_addr, access_len, access_buf);
                } else {
                    if (write_descriptor)
                        log spec_viol, 1 then 2,
                            virtio: "Read from write-only descriptor data.";
                    sys_mem_read(access_addr, access_len, access_buf);
                }
            }
            desc_offset += desc->len;
            if (offset + len <= desc_offset)
                return;
        }
        log spec_viol, 1 then 2, virtio:
            "Read or write beyond the end of descriptor data.";
    }

    // Read from data described by a descriptor list.
    shared method virtq_desc_data_read(virtq_desc_list_t *desc_list,
                                       uint32 offset, uint32 len,
                                       void *buf) throws {
        virtq_desc_data_access(desc_list, Sim_RW_Read,
                            offset, len, cast(buf, uint8 *));
    }

    // Write to data described by a descriptor list.
    shared method virtq_desc_data_write(virtq_desc_list_t *desc_list,
                                        uint32 offset, uint32 len,
                                        const void *buf) throws {
        virtq_desc_data_access(desc_list, Sim_RW_Write,
                            offset, len, cast(buf, uint8 *));
    }
}

template virtq_request_handler {
    param virtio_parent : virtio_device;
    param virtio_parent default cast(parent, virtio_device);

    shared method handle_notify(uint16 virtq_idx) throws {
        // Keep track of whether we have processed any requests.
        local bool processed_request = false;

        local virtq queue = virtio_parent.get_virtq(virtq_idx);

        local ring_info_t avail_ring_info;
        avail_ring_info = queue.get_avail_ring_info();
        // Process requests until we catch up with the driver.
        while (queue.avail_ring_idx != avail_ring_info.idx) {
            local uint16 desc_id;
            local virtq_desc_list_t desc_list;
            (desc_id, desc_list) = queue.acquire_buffer();

            // Pass the request to the device implementation.
            local uint32 used;
            used = this.process_request(&desc_list);

            queue.commit_buffer(desc_id, used);

            processed_request = true;
        }

        // Update the used ring index for the driver.
        queue.update_used_ring_info();

        // Raise the interrupt only if some request has been processed.
        if (processed_request) {
            queue.interrupt_driver();
        }
    }

    shared method process_request(virtq_desc_list_t *desc_list)
               -> (uint32) throws;
}

template virtio_feature_bit_strings {
    method feature_bit_to_string(uint64 feature_bit) -> (const char *) default {
        switch (feature_bit) {
        case VIRTIO_F_INDIRECT_DESC:     return "VIRTIO_F_INDIRECT_DESC";
        case VIRTIO_F_EVENT_IDX:         return "VIRTIO_F_EVENT_IDX";
        case VIRTIO_F_VERSION_1:         return "VIRTIO_F_VERSION_1";
        case VIRTIO_F_ACCESS_PLATFORM:   return "VIRTIO_F_ACCESS_PLATFORM";
        case VIRTIO_F_RING_PACKED:       return "VIRTIO_F_RING_PACKED";
        case VIRTIO_F_IN_ORDER:          return "VIRTIO_F_IN_ORDER";
        case VIRTIO_F_ORDER_PLATFORM:    return "VIRTIO_F_ORDER_PLATFORM";
        case VIRTIO_F_SR_IOV:            return "VIRTIO_F_SR_IOV";
        case VIRTIO_F_NOTIFICATION_DATA: return "VIRTIO_F_NOTIFICATION_DATA";
        case VIRTIO_F_NOTIF_CONFIG_DATA: return "VIRTIO_F_NOTIF_CONFIG_DATA";
        case VIRTIO_F_RING_RESET:        return "VIRTIO_F_RING_RESET";
        case VIRTIO_F_ADMIN_VQ:          return "VIRTIO_F_ADMIN_VQ";
        default:                         return "Unknown feature bit";
        }
    }
}
