/*
  virtio-fs-common.dml

  Â© 2023 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

import "utility.dml";
import "virtiofs-fuse-interface.dml";

extern char *strncpy(char *dest, const char *src, size_t n);
extern size_t strnlen(const char *s, size_t maxlen);

// File system device feature bits
param VIRTIO_FS_F_NOTIFICATION = 0;

param MAX_TAG_LEN = 36;

connect chan {
    param configuration = "optional";
    param documentation = "fuse channel";

    interface virtiofs_fuse;
}

attribute tag_name is init {
    param documentation = "The tag name to be used when mounting the device"
                           + " on the guest";
    param type = "s";
    param configuration = "optional";

    session char val[MAX_TAG_LEN + 1];

    method init() {
        memset(this.val, 0x0, MAX_TAG_LEN);
        strncpy(this.val, "simics", MAX_TAG_LEN);
    }

    method set(attr_value_t val) throws {
        local uint16 tag_len = strnlen(SIM_attr_string(val), MAX_TAG_LEN + 1);
        if (tag_len > MAX_TAG_LEN) {
            log error, 2 : "Tag length must not be longer than %d characters",
                MAX_TAG_LEN;
            throw;
        }
        memset(this.val, 0x0, MAX_TAG_LEN);
        strncpy(this.val, SIM_attr_string(val), MAX_TAG_LEN);
    }

    method get() -> (attr_value_t) {
        return SIM_make_attr_string(this.val);
    }
}

template virtio_fs_regs {
    param config_regs_offset : uint64;
    param len = 40;

    register tag[i < 36] size 1 @ config_regs_offset + i "Tag";
    register num_request_queues size 4 @ config_regs_offset + 0x24 "NumRequestQueues";

    register tag[i < 36] is (read, read_only) {
        param configuration = "pseudo";

        method read() -> (uint64) {
            return cast(tag_name.val[i], uint8);
        }
        method get() -> (uint64) {
            return cast(tag_name.val[i], uint8);
        }
    }
    register num_request_queues {
        param init_val = 1;
    }
}

template virtio_fs_device {
    param NUM_QUEUES = 2;

    method handle_notify(uint16 virtq_idx) throws {
        request_q_handler.handle_notify(virtq_idx);
    }

    group request_q_handler is virtq_request_handler {
        method process_request(virtq_desc_list_t *desc_list) ->
                (uint32) throws {
            local uint32 req_len;

            virtq_desc_data_read(desc_list, 0, sizeof(req_len), &req_len);
            local uint8 *req_data = new uint8[req_len];
            if (req_data == NULL) {
                log error, 2: "Could not allocate request buffer for FUSE"
                              + " payload";
                return 0;
            }
            virtq_desc_data_read(desc_list, 0, req_len, req_data);

            local bytes_t req = {
                .data = req_data,
                .len = req_len,
            };

            local buffer_t res = chan.virtiofs_fuse.handle_request(req);
            delete req_data;
            if (res.data == NULL) {
                return 0;
            }
            virtq_desc_data_write(desc_list, req_len, res.len, res.data);
            delete res.data;

            return res.len;
        }
    }
}

template virtio_feature_bit_strings_fs is virtio_feature_bit_strings {
    method feature_bit_to_string(uint64 feature_bit) -> (const char *) {
        switch (feature_bit) {
        case VIRTIO_FS_F_NOTIFICATION: return "VIRTIO_FS_F_NOTIFICATION";
        default:                       return default(feature_bit);
        }
    }
}

is virtio_feature_bit_strings_fs;
in each (virtio_device) {
    is virtio_feature_bit_strings_fs;
}
