/*
  e1000-mac-statistics.dml

  Â© 2012 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

bank csr {
    /* --------------------------------------------------------------
       STATISTICS REGISTERS
       -------------------------------------------------------------- */
    register crcerrs  @ 0x04000 "CRC Error Count";
    register algnerrc @ 0x04004 "Alignment Error Count";
    register symerrs  @ 0x04008 "Symbol Error Count";
    register rxerrc   @ 0x0400c "RX Error Count";
    register mpc      @ 0x04010 "Missed Packets Count";
    register scc      @ 0x04014 "Single Collision Count";
    register ecol     @ 0x04018 "Excessive Collision Count";
    register mcc      @ 0x0401c "Multiple Collision Count";
    register latecol  @ 0x04020 "Late Collision Count";
    register colc     @ 0x04028 "Collision Count";
    register cbtmpc   @ 0x0402c "Circuit Breaker TX manage packet count";
    register dc       @ 0x04030 "Defer Count";
    register tncrs    @ 0x04034 "Transmit - NO CRS";
    register sec      @ 0x04038 "Sequence Error Count";
    if($HAS_CEXTERR_REGISTER) {
        register cexterr @ 0x0403c "Carrier Extension Error Count";
    } else {
        register htdpmc @ 0x0403c "Host Transmit Discard Packets by MAC Count";
    }
    register rlec     @ 0x04040 "Receive Length Error";
    register cbrdpc   @ 0x04044 "Circuit break RX dropped packet";
    register xonrxc   @ 0x04048 "XON Received Count";
    register xontxc   @ 0x0404c "XON Transmitted Count";
    register xoffrxc  @ 0x04050 "XOFF Received Count";
    register xofftxc  @ 0x04054 "XOFF Transmitted Count";
    register fcruc    @ 0x04058 "FC Received Unsupported Count";
    register prc64    @ 0x0405c "Packets Received (64 Bytes) Count";
    register prc127   @ 0x04060 "Packets Received (65-127 Bytes) Count";
    register prc255   @ 0x04064 "Packets Received (128-255 Bytes) Count";
    register prc511   @ 0x04068 "Packets Received (256-511 Bytes) Count";
    register prc1023  @ 0x0406c "Packets Received (512-1023 Bytes) Count";
    register prc1522  @ 0x04070 "Packets Received (1024-Max Bytes) Count";
    register gprc     @ 0x04074 "Good Packets Received Count";
    register bprc     @ 0x04078 "Broadcast Packets Received Count";
    register mprc     @ 0x0407c "Multicast Packets Received Count";
    register gptc     @ 0x04080 "Good Packets Transmitted Count";
    register gorcl    @ 0x04088 "Good Octets Received Count Low";
    register gorch    @ 0x0408c "Good Octets Received Count High";
    register gotcl    @ 0x04090 "Good Octets Transmitted Count Low";
    register gotch    @ 0x04094 "Good Octets Transmitted Count High";
    register rnbc     @ 0x040a0 "Received No Buffer Count";
    register ruc      @ 0x040a4 "Received Undersize Count";
    register rfc      @ 0x040a8 "Received Fragment Count";
    register roc      @ 0x040ac "Received Oversize Count";
    register rjc      @ 0x040b0 "Received Jabber Count";
    register mngprc   @ 0x040b4 "Management Packets Received Count";
    register mngpdc   @ 0x040b8 "Management Packets Dropped Count";
    register mngptc   @ 0x040bc "Management Packets Transmitted Count";
    register torl     @ 0x040c0 "Total Octets Received Low";
    register torh     @ 0x040c4 "Total Octets Received High";
    register totl     @ 0x040c8 "Total Octets Transmitted Low";
    register toth     @ 0x040cc "Total Octets Transmitted High";
    register tpr      @ 0x040d0 "Total Packets Received";
    register tpt      @ 0x040d4 "Total Packets Transmitted";
    register ptc64    @ 0x040d8 "Packets Transmitted (64 Bytes) Count";
    register ptc127   @ 0x040dc "Packets Transmitted (65-127 Bytes) Count";
    register ptc255   @ 0x040e0 "Packets Transmitted (128-255 Bytes) Count";
    register ptc511   @ 0x040e4 "Packets Transmitted (256-511 Bytes) Count";
    register ptc1023  @ 0x040e8 "Packets Transmitted (512-1023 Bytes) Count";
    register ptc1522  @ 0x040ec "Packets Transmitted (1024-Max Bytes) Count";
    register mptc     @ 0x040f0 "Multicast Packets Transmitted Count";
    register bptc     @ 0x040f4 "Broadcast Packets Transmitted Count";
    register tsctc    @ 0x040f8 "TCP Segmentation Context Transmitted Count";
    register rsctfc   @ 0x040fc "TCP Segmentation Count Tx Fail Count";
    register iac      @ 0x04100 "Interrupt Assertion Count";
    if($HAS_INTERRUPT_STATISTICS) {
        register icrxptc  @ 0x04104 "Irq Cause Rx Packet Timer Expire Count";
        register icrxatc  @ 0x04108 "Irq Cause Rx Abs Timer Expire Count";
        register ictxptc  @ 0x0410c "Irq Cause Tx Packet Timer Expire Count";
        register ictxatc  @ 0x04110 "Irq Cause Tx Abs Timer Expire Count";
        register ictxqec  @ 0x04118 "Irq Cause Tx Queue Empty Count";
        register ictxqmtc @ 0x0411c "Irq Cause Tx Queue MinThreshold Count";
        register icrxdmtc @ 0x04120 "Irq Cause Rx Desc MinThreshold Count";
        register icrxoc   @ 0x04124 "Irq Cause Receiver Overrun Count";
    }

    register hgorcl @ 0x04128 "Host good octets received count (lo)";
    register hgorch @ 0x0412c "Host good octets received count (hi)";
    register hgotcl @ 0x04130 "Host good octets transmitted count (lo)";
    register hgotch @ 0x04134 "Host good octets transmitted count (hi)";
    register lenerrs @ 0x04138 "Length errors count";

    register rqdpc[$NUM_RECEIVE_QUEUES] @ 0x0c030 + $i * 0x40 "rx queue drop packet cnt";

    // details
    register crcerrs  is (statistics_register);
    register algnerrc is (statistics_register);
    register symerrs  is (statistics_register);
    register rxerrc   is (statistics_register);
    register mpc      is (statistics_register);
    register scc      is (statistics_register);
    register ecol     is (statistics_register);
    register mcc      is (statistics_register);
    register latecol  is (statistics_register);
    register colc     is (statistics_register);
    register cbtmpc   is (statistics_register);
    register dc       is (statistics_register);
    register tncrs    is (statistics_register);
    register sec      is (undocumented);
    if($HAS_CEXTERR_REGISTER) {
    	register cexterr  is (statistics_register);
    } else {
        register htdpmc  is (statistics_register);
    }
    register rlec     is (statistics_register);
    register xonrxc   is (statistics_register);
    register xontxc   is (statistics_register);
    register xoffrxc  is (statistics_register);
    register xofftxc  is (statistics_register);
    register fcruc    is (statistics_register);
    register prc64    is (statistics_register);
    register prc127   is (statistics_register);
    register prc255   is (statistics_register);
    register prc511   is (statistics_register);
    register prc1023  is (statistics_register);
    register prc1522  is (statistics_register);
    register gprc     is (statistics_register);
    register bprc     is (statistics_register);
    register mprc     is (statistics_register);
    register gptc     is (statistics_register);
    register gorcl    is (statistics_register_lo) { parameter high = $gorch; }
    register gorch    is (statistics_register);
    register gotcl    is (statistics_register_lo) { parameter high = $gotch; }
    register gotch    is (statistics_register);
    register rnbc     is (statistics_register);
    register ruc      is (statistics_register);
    register rfc      is (statistics_register);
    register roc      is (statistics_register);
    register rjc      is (statistics_register);
    register mngprc   is (statistics_register);
    register mngpdc   is (statistics_register);
    register mngptc   is (statistics_register);
    register torl     is (statistics_register_lo) { parameter high = $torh; }
    register torh     is (statistics_register);
    register totl     is (statistics_register_lo) { parameter high = $toth; }
    register toth     is (statistics_register);
    register tpr      is (statistics_register);
    register tpt      is (statistics_register);
    register ptc64    is (statistics_register);
    register ptc127   is (statistics_register);
    register ptc255   is (statistics_register);
    register ptc511   is (statistics_register);
    register ptc1023  is (statistics_register);
    register ptc1522  is (statistics_register);
    register mptc     is (statistics_register);
    register bptc     is (statistics_register);
    register tsctc    is (statistics_register);
    register rsctfc   is (statistics_register);
    register iac      is (statistics_register);
    if($HAS_INTERRUPT_STATISTICS) {
        register icrxptc  is (statistics_register);
        register icrxatc  is (statistics_register);
        register ictxptc  is (statistics_register);
        register ictxatc  is (statistics_register);
        register ictxqec  is (statistics_register);
        register ictxqmtc is (statistics_register);
        register icrxdmtc is (statistics_register);
        register icrxoc   is (statistics_register);
    }

    register hgorcl   is (statistics_register);
    register hgorch   is (statistics_register);
    register hgotcl   is (statistics_register);
    register hgotch   is (statistics_register);
    register lenerrs  is (statistics_register);

    register rqdpc[$NUM_RECEIVE_QUEUES]  is (unimplemented);

    //For half duplex mode
    method count_collision(int turn, bool xmit) default {
        if (xmit) {//transmitted
            if (turn == 1)
                inline $scc.count(1);
            else if (turn < 16)
                inline $mcc.count(1);
        } else
            inline $ecol.count(1);
        inline $colc.count(1);
    }

    method count_no_buffer() default {
        inline $rnbc.count(1);
    }

    method count_good_rx_packet(uint16 length, bool multi, bool bcst) default {
        inline $gorcl.count(length);
        inline $gprc.count(1);

	if (length >= 64) {
	    if (length == 64)
		inline $prc64.count(1);
	    else if (length < 128)
		inline $prc127.count(1);
	    else if (length < 256)
		inline $prc255.count(1);
	    else if (length < 512)
		inline $prc511.count(1);
	    else if (length < 1024)
		inline $prc1023.count(1);
	    else
		inline $prc1522.count(1);
	}

        if (multi)
            inline $mprc.count(1);

        if (bcst)
            inline $bprc.count(1);
    }

    method count_bad_rx_packet(uint16 length) default {
        inline $bprc.count(1);
    }

    method count_total_rx_packet(uint16 length) default {
        inline $torl.count(length);
        inline $tpr.count(1);
    }

    method count_total_tx_packet(uint16 length) default {
        inline $totl.count(length);
        inline $tpt.count(1);
    }

    method count_transmitted_packet(
        uint16 length, bool multi, bool bcst) default {
        inline $gptc.count(1);
        inline $gotcl.count(length);

	if (length >= 64) {
	    if (length == 64)
		inline $ptc64.count(1);
	    else if (length < 128)
		inline $ptc127.count(1);
	    else if (length < 256)
		inline $ptc255.count(1);
	    else if (length < 512)
		inline $ptc511.count(1);
	    else if (length < 1024)
		inline $ptc1023.count(1);
	    else
		inline $ptc1522.count(1);
	}

        if (multi)
            inline $mptc.count(1);
        if (bcst)
            inline $bptc.count(1);
    }
}

template statistics_register {
    is read_only;

    method count(uint32 cnt) default {
        local uint64 sum = $this + cnt;
        if (sum > 0xFFFFFFFF)
            $this = 0xFFFFFFFF;
        else
            $this += cnt;
    }
    method hard_reset() { /* do nothing */ }
    method soft_reset() { /* do nothing */ }
    method read() -> (value) {
        value = $this;
        $this = 0;
    }
}

template statistics_register_lo {
    parameter high default undefined;
    is statistics_register;
    method count(uint32 cnt) {
        local uint64 sum = $this + cnt;
        if (sum < 0xFFFFFFFF) {
            $this += cnt;
        } else if ($high == 0xFFFFFFFF) {
            $this = 0xFFFFFFFF;
        } else {
            $this = sum & 0xFFFFFFFF;
            inline $high.count(1);
        }
    }
}
