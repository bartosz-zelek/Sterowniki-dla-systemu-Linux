/*
  simple-pcie-device.dml - A simple PCIe device that can be used for testing.

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

device simple_pcie_device;

parameter desc = "simple PCIe device";
parameter documentation = "A simple PCIe device that can be used for testing.";

import "simics/utils.dml";
import "pci/common.dml";
is pcie_device;
parameter pci_hotplug = true;

attribute address {
    parameter documentation = "Transaction address in PCI memory.";
    parameter allocate_type = "uint64";
}

attribute size {
    parameter documentation = "Transaction size in PCI memory.";
    parameter allocate_type = "int32";
}

attribute data {
    parameter documentation = "Read/write transaction data from/to PCI memory.";
    parameter type = "d";

    method get -> (attr_value_t value) {
        if ($size == 0) {
            log info, 1: "read aborted, size is 0";
            return;
        }

        log info, 2: "PCI memory read from 0x%llx of size %d", $address, $size;
        local dbuffer_t *buf = new_dbuffer();
        local exception_type_t ex;
        call $pci_data_from_memory(Sim_Addr_Space_Memory,
                dbuffer_append(buf, $size), $address, $size) -> (ex);
        if (ex == Sim_PE_No_Exception) {
            value = SIM_make_attr_data($size, dbuffer_read_all(buf));
            dbuffer_free(buf);
        } else {
            log info, 1:
                "PCI memory read from 0x%llx of size %d failed with %d",
                $address, $size, ex;
            value = SIM_make_attr_nil();
            dbuffer_free(buf);
            throw;
        }
    }

    method set(attr_value_t value) {
        if ($size == 0) {
            log info, 1: "write aborted, size is 0";
            return;
        }

        log info, 2: "PCI memory write to 0x%llx of size %d", $address, $size;
        local exception_type_t ex;
        call $pci_data_to_memory(Sim_Addr_Space_Memory,
                    SIM_attr_data(value), $address, $size) -> (ex);
        if (ex != Sim_PE_No_Exception) {
            log info, 1:
                "PCI memory write to 0x%llx of size %d failed with %d",
                $address, $size, ex;
            throw;
        }
    }
}
