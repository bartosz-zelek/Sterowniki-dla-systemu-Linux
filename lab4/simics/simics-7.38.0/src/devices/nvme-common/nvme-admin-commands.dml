
/*
  nvme-admin-commands.dml

  Â© 2023 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

import "nvme-commands.dml";
import "nvme-admin-id.dml";
import "nvme-admin-features.dml";
import "nvme-admin-log-page.dml";

// Opcodes
param OPC_DELETE_IO_SUBMISSION_QUEUE = 0x00;
param OPC_CREATE_IO_SUBMISSION_QUEUE = 0x01;
param OPC_GET_LOG_PAGE =0x02;
param OPC_DELETE_IO_COMPLETION_QUEUE = 0x04;
param OPC_CREATE_IO_COMPLETION_QUEUE = 0x05;
param OPC_IDENTIFY = 0x06;
param OPC_ABORT = 0x08;
param OPC_SET_FEATURES = 0x09;
param OPC_GET_FEATURES = 0x0A;
param OPC_ASYNC_EVENT_REQUEST = 0x0C;

// Status Codes
param STATUS_INVALID_QUEUE_ID = 0x1;
param STATUS_INVALID_QUEUE_SIZE = 0x2;
param STATUS_INVALID_NAMESPACE_OR_FORMAT = 0x0B;

param ASYNCHRONOUS_EVENT_REQUEST_LIMIT_EXCEEDED = 0x05;

typedef uint8 power_state_desc_t[32];

typedef layout "little-endian" {
    uint32  time_low;
    uint16  time_mid;
    uint16  time_hi_and_version;
    uint8   clock_seq_hi_and_reserved;
    uint8   clock_seq_low;
    uint8   node[6];
} uuid_t;

// Command specific submission structures

typedef bitfields 32 {
    uint16 qsize @ [31:16];
    uint16 qid @ [15:0];
} cdw10_create_io_queue_t;

typedef bitfields 32 {
    uint16 qid @ [15:0];
} cdw10_delete_io_queue_t;

typedef bitfields 32 {
    uint16 iv @ [31:16];
    uint1 ien @ [1];
    uint1 pc @ [0];
} cdw11_create_io_completion_queue_t;

typedef bitfields 32 {
    uint16 cqid @ [31:16];
    uint2 qprio @ [2:1];
    uint1 pc @ [0];
} cdw11_create_io_submission_queue_t;

typedef bitfields 32 {
    uint16 cid @ [31:16];
    uint16 sqid @ [15:0];
} cdw10_abort_t;

template admin_submission_q is submission_q {

    method cmd_handler(uint8 opc) -> (nvme_command_handler) throws {
        foreach handler in (each nvme_admin_command_handler in (this.parent)) {
            if (opc == handler.opc) {
                return cast(handler, nvme_command_handler);
            }
        }
        throw;
    }
}

template nvme_admin_command_handler is nvme_command_handler {}

template standard_admin_commands {

    group identify is nvme_admin_command_handler {
        param opc = OPC_IDENTIFY;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default {
            local cdw10_identify_t cdw10 = cmd->cdw10;
            local uint8 cns = cdw10.cns;
            log info, 4: "Identify command CNS: %d", cns;

            foreach handler in (each nvme_id in (this.parent)) {
                if (cns == handler.cns) {
                    handler.handle_id(cmd, rsp, err);
                    return;
                }
            }
            set_error(STATUS_TYPE_GENERIC, STATUS_INVALID_FIELD,
                      40, 0, rsp, err);
            log unimpl, 1 then 3: "Invalid or unimplemented CNS handler for CNS"
                       + " value %d", cns;
        }
    }

    method feature_cmd(const common_command_format_t *cmd,
                       common_completion_entry_t *rsp,
                       error_information_log_entry_t *err,
                       uint8 type) {
        local cdw10_set_features_t cdw10 = cmd->cdw10;
        local uint8 fid = cdw10.fid;

        log info, 4: "Feature access request with FID: %d", fid;
        foreach handler in (each nvme_feature in (this)) {
            if (fid == handler.fid) {
                handler.handle_feature(cmd, rsp, err, type);
                return;
            }
        }
        log unimpl, 1 then 3: "NVMe host trying to access unimplemented feature"
                            + " with FID %d", fid;
        set_error(STATUS_TYPE_GENERIC, STATUS_INVALID_FIELD,
                    40, 0, rsp, err);
    }

    group set_features is nvme_admin_command_handler {
        param opc = OPC_SET_FEATURES;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            feature_cmd(cmd, rsp, err, FEATURE_SET);
        }
    }

    group get_features is nvme_admin_command_handler {
        param opc = OPC_GET_FEATURES;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            feature_cmd(cmd, rsp, err, FEATURE_GET);
        }
    }

    group get_log_page is nvme_admin_command_handler {
        param opc = OPC_GET_LOG_PAGE;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            local cdw10_get_log_page_t cdw10 = cmd->cdw10;
            local cdw11_get_log_page_t cdw11 = cmd->cdw11;
            local uint8 lid = cdw10.lid;

            local uint32 n_dwords;
            local uint64 offset;
            n_dwords[15:0] = cdw10.numdl;
            n_dwords[31:16] = cdw11.numdu;
            n_dwords += 1;  // 0's based value
            offset[31:0] = cmd->cdw12;
            offset[63:32] = cmd->cdw13;

            log info, 4: "Log page access request with LID: %d", lid;
            foreach handler in (each nvme_log_page in (this.parent)) {
                if (lid == handler.lid) {
                    handler.handle_log_page(cmd, rsp, err, n_dwords, offset);
                    return;
                }
            }
            log info, 1: "NVMe host trying to access unimplemented log page"
                       + " with LID %d", lid;
            set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_LOG_PAGE, 0,
                      0, rsp, err);
        }
    }

    group create_io_completion_queue is nvme_admin_command_handler {
        param opc = OPC_CREATE_IO_COMPLETION_QUEUE;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            // This implementation only supports physically contiguous queues
            assert(properties.CAP.CQR.val == 0b1);

            local cdw10_create_io_queue_t cdw10 = cmd->cdw10;
            local cdw11_create_io_completion_queue_t cdw11 = cmd->cdw11;


            if (!validate_queue_properties(cdw10, cdw11, rsp, err)) {
                return;
            }

            if (io_completion_qs[cdw10.qid - 1].is_created_queue()) {
                log error, 2: "Queue id already in use";
                set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_ID,
                          40, 0, rsp, err);
            }

            io_completion_qs[cdw10.qid - 1].size = cdw10.qsize + 1;
            io_completion_qs[cdw10.qid - 1].base_addr = cmd->dptr_prp1;
            io_completion_qs[cdw10.qid - 1].interrupt_vector = cdw11.iv;
            io_completion_qs[cdw10.qid - 1].interrupts_enabled = cdw11.ien;

            log info, 4: "Created IO completion queue with id %d", cdw10.qid;
        }
    }

    group create_io_submission_queue is nvme_admin_command_handler {
        param opc = OPC_CREATE_IO_SUBMISSION_QUEUE;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            // This implementation only supports physically contiguous queues
            assert(properties.CAP.CQR.val == 0b1);

            local cdw10_create_io_queue_t cdw10 = cmd->cdw10;
            local cdw11_create_io_submission_queue_t cdw11 = cmd->cdw11;

            if (!validate_queue_properties(cdw10, cdw11, rsp, err)) {
                return;
            }

            if (io_submission_qs[cdw10.qid - 1].is_created_queue()) {
                log error, 2: "Queue id already in use";
                set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_ID,
                          40, 0, rsp, err);
            }

            io_submission_qs[cdw10.qid - 1].size = cdw10.qsize + 1;
            io_submission_qs[cdw10.qid - 1].base_addr = cmd->dptr_prp1;
            io_submission_qs[cdw10.qid - 1].cqid = cdw11.cqid;

            log info, 4: "Created IO submission queue with id %d", cdw10.qid;
        }
    }

    group delete_io_submission_queue is nvme_admin_command_handler {
        param opc = OPC_DELETE_IO_SUBMISSION_QUEUE;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            local cdw10_delete_io_queue_t cdw10 = cmd->cdw10;

            if (cdw10.qid == 0 || cdw10.qid > max_ioqpairs
                || !io_submission_qs[cdw10.qid - 1].is_created_queue()) {
                set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_ID, 40, 0,
                        rsp, err);
                return;
            }
            /*% COVERITY overrun-call FALSE %*/
            io_submission_qs[cdw10.qid - 1].reset();
        }
    }

    group delete_io_completion_queue is nvme_admin_command_handler {
        param opc = OPC_DELETE_IO_COMPLETION_QUEUE;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            local cdw10_delete_io_queue_t cdw10 = cmd->cdw10;

            if (cdw10.qid == 0 || cdw10.qid > max_ioqpairs
                || !io_completion_qs[cdw10.qid - 1].is_created_queue()) {
                set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_ID, 40, 0,
                        rsp, err);
                return;
            }
            /*% COVERITY overrun-call FALSE %*/
            io_completion_qs[cdw10.qid - 1].reset();
        }
    }

    group async_event_request is nvme_admin_command_handler {
        param opc = OPC_ASYNC_EVENT_REQUEST;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            try {
                async_event_slots_fifo.push(*cmd);
            } catch {
                log error, 2: "The number of concurrently outstanding"
                            + " Asynchronous Event Request commands has been"
                            + " exceeded.";
                set_error(STATUS_TYPE_COMMAND_SPECIFIC,
                          ASYNCHRONOUS_EVENT_REQUEST_LIMIT_EXCEEDED, 0, 0, rsp,
                          err);
            }
        }
    }

    group abort is nvme_admin_command_handler {
        param opc = OPC_ABORT;
        method handle_command(const common_command_format_t *cmd,
                              common_completion_entry_t *rsp,
                              error_information_log_entry_t *err) default  {
            local cdw10_abort_t cdw10;
            cdw10 = cmd->cdw10;
            log info, 1: "NVMe Host requesting to abort command with CID %d and"
                       + " SQID %d which was already processed",
                        cdw10.cid, cdw10.sqid;
            rsp->dw0[0] = 1;  // Indicate that command was not aborted
        }
    }
}

method validate_queue_properties(cdw10_create_io_queue_t cdw10, uint32 cdw11,
                                 common_completion_entry_t *rsp,
                                 error_information_log_entry_t *err) -> (bool) {
    if ((cdw10.qid > max_ioqpairs) || (cdw10.qid == 0)) {
        log info, 3: "Invalid queue id %d", cdw10.qid;
        set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_ID, 40, 0,
                  rsp, err);
        return false;
    }

    if (cdw10.qsize > properties.CAP.MQES.val) {
        log spec_viol: "NVMe host has requested a queue size (%d) larger " +
                       "than supported (%d)", cdw10.qsize,
                       properties.CAP.MQES.val;
        set_error(STATUS_TYPE_COMMAND_SPECIFIC, STATUS_INVALID_QUEUE_SIZE, 42,
                  0, rsp, err);
        return false;
    }

    // cdw11[0] is pc for both cdw11_create_io_completion_queue_t and
    // cdw11_create_io_submission_queue_t
    if (cdw11[0] == 0) {
        log spec_viol: "NVMe host has placed queue in non physically " +
                       "contiguous memory even though CAP.CQR is set to 1";
        set_error(STATUS_TYPE_GENERIC, STATUS_INVALID_FIELD, 44, 0, rsp, err);
        return false;
    }

    return true;
}
