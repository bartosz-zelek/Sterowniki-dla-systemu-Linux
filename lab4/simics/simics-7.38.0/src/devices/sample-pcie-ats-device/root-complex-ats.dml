/*
  root-complex-ats.dml

  Â© 2024 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

//:: pre base {{
dml 1.4;

device sample_pcie_root_complex_ats;
param classname = "sample-pcie-root-complex-ats";

param use_io_memory = false;

import "utility.dml";
import "pcie/common.dml";
import "simics/util/bitcount.dml";
import "simics/util/interval-set.dml";

param desc = "sample PCIe ATS Root Complex implementation";
param documentation = "Sample Root Complex that implements an ATS/PRS Translation Agent";

is pcie_bridge;
is ats_upstream_translator;

attribute STU is uint64_attr "Smallest Translation Unit";
attribute UNTRANSLATED_AREA is uint64_attr;
attribute TRANSLATED_AREA is uint64_attr;

attribute ENABLE_PASID_CHECK is bool_attr {
    param documentation = "When set to true all ATS translated requests are verified that"
                        + " their PASID value has gone through the Page Request Service"
                        + " for that address range.";
}

// Cache to keep track of PRS pages approved for a given PASID
group pasid_cache is (init) {
    session interval_set_t map;

    method init() {
        init_interval(&map, 1);
    }

    method _pasid_holder(pcie_pasid_info_t pasid) -> (uintptr_t) {
        // Pasid 0 is a valid value, to not be treated as a NULL pointer
        // bit 32 is set to 0
        return cast((1 << 32) | pasid.u32, uintptr_t);
    }
    /* Insert page with PASID into cache */
    method insert(pcie_pasid_info_t pasid, uint64 addr) {
        log info, 4: "Inserting PASID=0x%x @ 0x%08x", pasid.u32, addr;

        local uintptr_t ptr = _pasid_holder(pasid);
        insert_interval(&map, addr, addr + 4096 - 1, cast(ptr, void *));
    }
    /* Evict all cached pages with matching PASID */
    method evict(pcie_pasid_info_t pasid) {
        log info, 4: "Evicting PASID=0x%x", pasid.u32;

        local uintptr_t ptr = _pasid_holder(pasid);
        remove_interval(&map, 0, cast(-1, uint64), cast(ptr, void *));
    }
    /* Check if there is an allocated page */
    method verify(pcie_pasid_info_t pasid, uint64 addr) -> (bool, uint64, uint64) {
        local uint64 base;
        local uint64 base_end;
        local range_node_t *match_list;
        local int match_count = get_interval_vector_and_range(&map,
                                                              addr,
                                                              &match_list,
                                                              &base,
                                                              &base_end);
        log info, 4: "Lookup PASID=0x%x @ 0x%08x, mc=%d",
            pasid.u32, addr, match_count;
        local uint64 size = base_end - base + 1;
        for (local int i = 0; i < match_count; i++) {
            if (cast(match_list[i].ptr, uintptr_t) == _pasid_holder(pasid))
                return (true, base, size);
        }

        log info, 1: "No cached page @ 0x%08x with PASID 0x%x", addr, pasid.u32;
        return (false, base, size);
    }
}

port message {
    group ats_messages is handling_ats_messages {
        method ats_invalidate_completion(transaction_t *t, uint64 addr) -> (bool) {
            local uint32 itag_vec =
                ATOM_get_transaction_pcie_ats_invalidate_completion_itag_vector(t);
            if ((1 << regs.itag.itag.val) == itag_vec) {
                regs.itag_vec.val = itag_vec;
                return true;
            } else {
                return false;
            }
        }
    }
    group prs_messages is (handling_prs_messages) {
        method page_request_received(transaction_t *t, uint64 addr) -> (bool) {
            local pcie_pasid_info_t pasid = {
                .u32 = ATOM_get_transaction_pcie_pasid(t),
                ...
            };

            if (ATOM_get_transaction_pcie_prs_stop_marker(t)) {
                pasid_cache.evict(pasid);
                return true;
            } else if (ATOM_transaction_pcie_prs_page_request(t) != NULL) {
                local pcie_prs_page_request_t msg = {
                    .u64 = ATOM_get_transaction_pcie_prs_page_request(t),
                    ...
                };
                try {
                    local (uint64 base, uint64 start, uint64 size) =
                        translate_address(msg.field.page_addr << 12);
                    local uint64 translated_page = start + (msg.field.page_addr << 12) - base;

                    log info, 4: "pa: 0x%08x, translated pa:0x%08x",
                        msg.field.page_addr << 12, translated_page;
                    pasid_cache.insert(pasid, translated_page);


                    if (msg.field.l == 1) {  // Last page request in group
                        after: prepare_response(ATOM_get_transaction_pcie_device_id(t),
                                                msg.field.prgi,
                                                PCIE_PRS_Response_Success,
                                                pasid);
                    }
                    return true;
                } catch {
                    after: prepare_response(ATOM_get_transaction_pcie_device_id(t),
                                            msg.field.prgi,
                                            PCIE_PRS_Response_Failure,
                                            pasid);
                    return true;
                }
            } else {
                log error: "%s, Expected either ATOM prs_stop_marker or pcie_prs_page_request",
                    this.qname;
                return false;
            }
        }
        method prepare_response(uint16 target_id, uint16 prs_group_idx,
                                pcie_prs_response_code_t response_code, pcie_pasid_info_t pasid) {
            this.page_group_response(downstream_port.map_target, target_id, prs_group_idx,
                                     response_code, &pasid);
        }
    }
}

method translate_address(uint64 addr) -> (
                                          uint64,  // base
                                          uint64,  // start
                                          uint64   // size
                                         ) throws {
    local uint64 size = 0x1000 << STU.val;
    local uint64 base = addr[63:log2_64(size)] << log2_64(size);

    if (base < UNTRANSLATED_AREA.val) {
        log error: "Invalid translation 0x%08X", addr;
        throw;
    }

    local uint64 offset = base - UNTRANSLATED_AREA.val;

    return (base, TRANSLATED_AREA.val + offset, size);
}

bank regs {
    register invalidate_addr size 8 @ 0x0;
    register invalidate_size size 8 @ 0x8;
    register device_id       size 2 @ 0x10;
    register pasid           size 2 @ 0x12;
    register itag            size 1 @ 0x14 {
        field itag @ [4:0];
    }
    register invalidate      size 8 @ 0x20 {
        field invalidate @ [0] is (write) {
            method write(uint64 value) {
                local uint32 p = pasid.val;

                local pcie_error_t ret = ats_invalidate(downstream_port.map_target,
                                                        device_id.val,
                                                        cast(&p, pcie_pasid_info_t*),
                                                        invalidate_addr.val,
                                                        invalidate_size.val,
                                                        false,
                                                        itag.val);
                if (ret == PCIE_Error_No_Error)
                    result.val = 1;
                else
                    result.val = 0x2;
            }
        }
        field result @ [2:1] is (ignore_write);
    }
    register itag_vec       size 4 @ 0x30 is (clear_on_read);
}

/*
 * Memory requests not translated by the ATC arrive here
 * Sample implementation sets address bit 63 and forwards transaction to host memory.
 */
port ats_untranslated {
    implement transaction_translator {
        method translate(uint64 addr,
                         access_t access,
                         transaction_t *t,
                         exception_type_t (*callback)(translation_t txl,
                                                      transaction_t *tx,
                                                      cbdata_call_t cbd),
                         cbdata_register_t cbdata) -> (exception_type_t) {
            local translation_t txl;
            txl.base[63] = addr[63];
            txl.start[63] = 1;
            txl.size[63] = 1;
            txl.target = host_memory.map_target;
            log info: "AT Untranslated -> base 0x%x start 0x%x size 0x%x",
                txl.base, txl.start, txl.size;
            return callback(txl, t, cbdata);
        }
    }
}

/*
 * Memory requests that are already translated by the ATC arrive here
 */
port ats_translated {
    implement transaction_translator {
        method translate(uint64 addr,
                         access_t access,
                         transaction_t *t,
                         exception_type_t (*callback)(translation_t txl,
                                                      transaction_t *tx,
                                                      cbdata_call_t cbd),
                         cbdata_register_t cbdata) -> (exception_type_t) {

            if (ENABLE_PASID_CHECK.val) {
                local translation_t txl;
                local pcie_error_ret_t *pex = ATOM_get_transaction_pcie_error_ret(t);
                if (ATOM_transaction_pcie_pasid(t) == NULL) {
                    log info, 1:
                        "AT translated request @ 0x%08x is missing PASID", addr;
                    if (pex)
                        pex->val = PCIE_Error_Completer_Abort;
                    return callback(txl, t, cbdata);
                }

                local pcie_pasid_info_t pasid = {
                    .u32 = ATOM_get_transaction_pcie_pasid(t),
                    ...
                };
                local (bool valid, uint64 base, uint64 size) = pasid_cache.verify(pasid, addr);
                txl.base = base;
                txl.start = base;
                txl.size = size;
                if (!valid) {
                    log info, 1:
                        "AT translated request @ 0x%08x invalid PASID:0x%x", addr, pasid.u32;
                    if (pex)
                        pex->val = PCIE_Error_Completer_Abort;
                } else {
                    txl.target = host_memory.map_target;
                }
                return callback(txl, t, cbdata);
            }
            log info, 3: "Forwarding ATS translation 0x%08X to host memory", addr;
            return default(addr, access, t, callback, cbdata);
        }
    }
}

/*
 * ATS Translation requests arrive here.
 */
port ats_request {
    implement transaction {
        method issue(transaction_t *t,
                     uint64 addr) -> (exception_type_t) {
            local pcie_error_ret_t *ret =
                ATOM_get_transaction_pcie_error_ret(t);

            local uint64 size = SIM_transaction_size(t);

            local bool no_write = ATOM_get_transaction_pcie_ats_translation_request_no_write(t);
            local int nbr_entries = size / sizeoftype(pcie_ats_translation_completion_entry_t);

            local bool pasid_present = ATOM_transaction_pcie_pasid(t) != NULL;
            local pcie_pasid_info_t pasid = { .u32 = ATOM_get_transaction_pcie_pasid(t), ... };

            local (uint64 base, uint64 start, uint64 txl_size);

            try {
                (base, start, txl_size) = translate_address(addr);
            } catch {
                log info, 1: "Cannot fulfill ATS request";
                if (ret)
                    ret->val = PCIE_Error_Completer_Abort;
                return Sim_PE_IO_Error;
            }

            local pcie_ats_translation_completion_entry_t e[nbr_entries];
            for (local int i = 0; i < nbr_entries; i++) {
                e[i].field.s = txl_size > 4096 ? 1 : 0;
                e[i].field.r = 1;
                e[i].field.w = no_write ? 0 : 1;
                e[i].field.r = 1;
                e[i].field.exe = pasid.field.exe;
                e[i].field.priv = pasid.field.priv;
                e[i].field.translated_addr = (start + (txl_size * i)) >> 12;

                log info, 3: "Translating region 0x%08x-0x%08x to 0x%08x-0x%08x",
                    base + (txl_size * i),
                    base + (txl_size * i) + txl_size - 1,
                    e[i].field.translated_addr << 12,
                    (e[i].field.translated_addr << 12) + txl_size - 1;

                if (e[i].field.s == 1) {
                    // Mark size of translation
                    local int zero_bit = log2_64(txl_size) - 1;
                    e[i].field.translated_addr[zero_bit - 12] = 0;
                    if ((zero_bit - 12) > 0)
                        e[i].field.translated_addr[zero_bit - 12 - 1:0] = cast(-1, uint64);
                }
            }

            local pcie_byte_count_ret_t *bc =
                ATOM_get_transaction_pcie_byte_count_ret(t);
            if (bc)
                bc->val = size;

            local bytes_t bytes = { .data = cast(e, uint8*), .len = size };
            SIM_set_transaction_bytes(t, bytes);
            if (ret)
                ret->val = PCIE_Error_No_Error;

            return Sim_PE_No_Exception;
        }
    }
}
// }}
