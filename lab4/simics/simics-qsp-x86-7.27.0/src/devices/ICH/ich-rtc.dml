/*
  rtc.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "io-memory.dml";
import "utility.dml";
import "simics/devs/interrupt.dml";

import "ich-util.dml";
import "reset-ports.dml";

header %{
    static const uint8 days_of_month[12] = {
        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    };
    static uint8 days_in_month(uint8 year, uint8 month) {
        if (month == 1 && (year % 4) == 0)
            return 29;
        return days_of_month[month];
    }
    static uint8 binary_to_bcd(uint8 bin) {
        return (bin % 10) | ((bin / 10) << 4);
    }
    static uint8 bcd_to_binary(uint8 bcd) {
        return (bcd & 0xf) + 10 * (bcd >> 4);
    }
    static bool is_valid_bcd(uint8 bcd) {
        return ((bcd & 0xf) <= 9 && (bcd >> 4) <= 9);
    }
%}

extern int sprintf(char *str, const char *format, ...);
extern int sscanf(const char *str, const char *format, ...);
extern uint8 days_in_month(uint8 year, uint8 month);
extern uint8 binary_to_bcd(uint8 bin);
extern uint8 bcd_to_binary(uint8 bcd);
extern bool is_valid_bcd(uint8 bcd);

constant RTC_PERIODIC_TIME = 1.2207e-4;
constant RTC_UIP_TIME      = 4.88e-4;
constant RTC_SECOND        = 1.0;
constant RTC_MINUTE        = 60.0;
constant RTC_HOUR          = 3600.0;
constant RTC_DAY           = 86400.0;
constant RTC_IGNORED_ALARM = 0xC0;

constant RTYPE_T           = 0; // time register
constant RTYPE_A           = 1; // alarm register
constant DISABLED_DATE     = 0x3F;

constant RAM_SIZE          = 242;

connect irq_dev is (pirq_connect) {
    parameter documentation = "Connect to serial interrupt controller";
}

attribute irq_level {
    parameter documentation = "Interrupt level for RTC device";
    parameter allocate_type = "uint32";
}

attribute time {
    parameter documentation = "Time of RTC in format \"YY-MM-DD hh:mm:ss\".";
    parameter configuration = "pseudo";
    parameter type = "s";

    method get() -> (attr_value_t val) {
        local char *str;

        if (   $rtc.reg_b.SET == 0
            && $rtc.reg_a.DV  == 0b010
            && SIM_time($dev.obj) >= $next_update_time)
            call $rtc.sync_with_sim_time();
        if ($rtc.reg_b.SET == 1)
            inline $rtc.initiate_time_registers();
        call $get_rtc_time() -> (str);
        val = SIM_make_attr_string(str);
    }

    method set(attr_value_t value) {
        local int params;
        local int tm_year;
        local int tm_month;
        local int tm_date;
        local int tm_hour;
        local int tm_min;
        local int tm_sec;

        params = sscanf(SIM_attr_string(value), "%d-%d-%d %d:%d:%d", &tm_year,
                                                             &tm_month,
                                                             &tm_date,
                                                             &tm_hour,
                                                             &tm_min,
                                                             &tm_sec);
        if (   params != 6 || tm_year < 0  || tm_month < 1 || tm_month > 12
            || tm_date < 1 || tm_date > 31 || tm_hour  < 0 || tm_hour  > 23
            || tm_min  < 0 || tm_min  > 59 || tm_sec   < 0 || tm_sec   > 59) {
            log "error": "configure time with illegal values, ignored";
            return;
        }

        if (tm_date > days_in_month(tm_year, tm_month - 1)) {
            log "error": "configure time with illegal values, ignored";
            return;
        }

        $rtc.tm_year  = tm_year % 100;
        $rtc.tm_month = tm_month - 1;
        $rtc.tm_date  = tm_date - 1;
        $rtc.tm_hour  = tm_hour;
        $rtc.tm_min   = tm_min;
        $rtc.tm_sec   = tm_sec;

        call $rtc.set_time_registers();
    }

    method get_rtc_time() -> (char *str) {
        static char tstr[64];
        sprintf(tstr, "%02llu-%02llu-%02llu %02llu:%02llu:%02llu",
                cast($rtc.tm_year, uint64),
                cast($rtc.tm_month + 1, uint64),
                cast($rtc.tm_date + 1, uint64),
                cast($rtc.tm_hour, uint64),
                cast($rtc.tm_min, uint64),
                cast($rtc.tm_sec, uint64));
        str = tstr;
    }
}

attribute next_update_time {
    parameter documentation = "Simulation time to update ram values again";
    parameter allocate_type = "double";
}

attribute next_alarm_time {
    parameter documentation = "Simulation time to alarm again";
    parameter allocate_type = "double";
}


attribute next_periodic_time {
    parameter documentation = 
        "Simulation time to set periodic interrupt flag bit again";
    parameter allocate_type = "double";
}

// RTC access register in fixed IO bank
bank fixed_io {
    parameter register_size = 1;
    parameter function = 0;

    register rtc_idx0  @ 0x0 "Real-Time Clock Index register 0";
    register rtc_da0   @ 0x1 "Real-Time Clock Data register 0";
    register rtc_idx1  @ 0x2 "Real-Time Clock Index register 1";
    register rtc_da1   @ 0x3 "Real-Time Clock Data register 1";

    register rtc_da0 is (rtc_data_reg) { parameter index_reg = $rtc_idx0; }
    register rtc_da1 is (rtc_data_reg) {
        parameter index_reg = $rtc_idx1;
        parameter base_addr = 0x100;
    }
}

bank rtc {
    parameter documentation = "RTC RAM registers";
    parameter register_size = 1;
    parameter function = 1;

    register seconds     @ 0x0 "Seconds register";
    register sec_alrm    @ 0x1 "Seconds Alarm register";
    register minutes     @ 0x2 "Minutes register";
    register min_alrm    @ 0x3 "Minutes Alarm register";
    register hours       @ 0x4 "Hours register";
    register hour_alrm   @ 0x5 "Hours Alarm register";
    register day_of_week @ 0x6 "Day of Week register";
    register day_of_mon  @ 0x7 "Day of Month register";
    register month       @ 0x8 "Month register";
    register year        @ 0x9 "Year register";
    register reg_a       @ 0xa "Register A";
    register reg_b       @ 0xb "Register B";
    register reg_c       @ 0xc "Register C";
    register reg_d       @ 0xd "Register D";

    //0E ~ FFh, 114 + 128 Bytes of User RAM
    register ram[RAM_SIZE]   @ 0xe + $i
        "Non-volatile RAM Register. See also ram_ctrl.";

    // Unmapped registers
    register volatile_ram[RAM_SIZE] is (unmapped)
        "Volatile RAM Register. Writes to the RAM register will also update"
        + " the corresponding volatile_ram register. See also ram_ctrl.";

    register ram_ctrl[RAM_SIZE] is (unmapped)
        "Volatile RAM Control Register. If an entry in this attribute is non"
        + "-zero a read from the ram register will read the corresponding"
        + " entry in the volatile_ram attribute instead.";

    register irq_raised is (unmapped) "IRQ Raised";

    register tm_year  is (intern_time_reg) "Internal Year, 0~99" {
        parameter range = 100;
    }
    register tm_month is (intern_time_reg) "Internal Month, 0~11" {
        parameter range = 12;
        parameter p_reg = $tm_year;
    }
    register tm_day   is (intern_time_reg) "Internal Week Day, 0~6" {
        parameter range = 7;
    }
    register tm_date  is (intern_time_reg) "Internal Month Day, 0~30" {
        method add_value(uint8 value) {
            local uint8 dim = days_in_month($tm_year, $tm_month);
            $this += value;
            if ($this >= dim) {
                //following looks unreasonable, but it should be correct for one month
                inline $tm_month.add_value($this / dim);
                $this %= dim;
            }
        }
    }
    register tm_hour  is (intern_time_reg) "Internal Hours, 0~23" {
        parameter range = 24;
        method add_value(uint8 value) {
            $this += value;
            if ($this >= $range) {
                inline $tm_date.add_value($this / $range);
                inline $tm_day.add_value($this / $range);
                $this %= $range;
            }
        }
    }
    register tm_min   is (intern_time_reg) "Internal Minute, 0~59" {
        parameter range = 60;
        parameter p_reg = $tm_hour;
    }
    register tm_sec   is (intern_time_reg) "Internal Second, 0~59" {
        parameter range = 60;
        parameter p_reg = $tm_min;
    }

    register tm_sec_alrm is (unmapped);
    register tm_min_alrm is (unmapped);
    register tm_hour_alrm is (unmapped);
    register tm_date_alrm is (unmapped) {
        parameter hard_reset_value = DISABLED_DATE;
    }

    // RTC event
    event rtc_periodic {
        parameter timebase = "seconds";
        method event(void *data) {
            $reg_c.PF = 1;
            call $update_interrupt();
            inline $start_periodic();
        }
        method stop_periodic() default {
            local bool is_posted;
            inline $posted(NULL) -> (is_posted);
            if (is_posted) {
                inline $remove(NULL);
                log "info", 3: "periodic interrupt is stopped";
            }
        }
        method periodic_time() -> (double periodic) {
            if ($reg_a.RS < 3)
                periodic = $reg_a.RS * 3.90625e-3;
            else
                periodic = RTC_PERIODIC_TIME * (1 << ($reg_a.RS - 3));
        }
        method start_periodic() default {
            local double periodic;
            inline $periodic_time() -> (periodic);

            if (periodic > 1.0e-6) {
                if ($reg_b.PIE == 1) {
                    inline $post(periodic, NULL);
                    log "info", 3: "periodic interrupt is started";
                }
                else
                    $next_periodic_time = SIM_time($dev.obj) + periodic;
            }
        }
    }

    event rtc_timer {
        parameter timebase = "seconds";
        method event(void *data) {
            log "info", 3:
                "the alarm timer is triggered at simulation time %f",
                SIM_time($dev.obj);
            // Generate the alarm interrupt
            $reg_c.AF = 1;
            call $update_interrupt();
        }

        method next_alarm() default {
            local bool is_posted;
            inline $posted(NULL) -> (is_posted);
            if (is_posted)
                inline $remove(NULL);
            if ($next_alarm_time > 1.0e-6) {
                local double when = $next_alarm_time - SIM_time($dev.obj);
                inline $post(when, NULL);
                log "info", 4: "post an alarm after %f seconds", when;
            }
        }
    }

    event rtc_update_ended {
        parameter timebase = "seconds";
        method event(void *data) {
            $reg_c.UF = 1;
            call $update_interrupt();
            inline $post(1.0, NULL);
        }
    }

    // Detailed information of registers
    register ram[RAM_SIZE] {
        parameter persistent = true;

        method read() -> (value) {
            if ($ram_ctrl[$i] == 0)
                value = $this;
            else
                value = $volatile_ram[$i];
        }

        method write(value) {
            $this = value;
            $volatile_ram[$i] = value;
        }
    }

    register seconds is (rtc_time_reg) {
        parameter min = 0;
        parameter max = 59;
    }
    register minutes is (rtc_time_reg) {
        parameter min = 0;
        parameter max = 59;
    }
    register hours is (rtc_time_reg) {
        // min and max don't work well for checks: we check hours specially
    }
    register day_of_week is (rtc_time_reg) {
        // TODO: min should be 1 (Sunday), max - 7 (Saturday). For now we
        // set min = 0 to make tests work.
        parameter min = 0;
        parameter max = 7;
    }
    register day_of_mon  is (rtc_time_reg) {
        parameter min = 1;
        parameter max = 31;
    }
    register month is (rtc_time_reg) {
        parameter min = 1;
        parameter max = 12;
    }
    register year is (rtc_time_reg) {
        parameter min = 00;
        parameter max = 99;
    }

    register sec_alrm is (rtc_time_reg) {
        parameter type = RTYPE_A;
        parameter m_reg = $tm_sec_alrm;
    }
    register min_alrm is (rtc_time_reg) {
        parameter type = RTYPE_A;
        parameter m_reg = $tm_min_alrm;
    }
    register hour_alrm is (rtc_time_reg) {
        parameter type = RTYPE_A;
        parameter m_reg = $tm_hour_alrm;
    }

    register reg_a {
        field UIP[7] is (read_write) "Update In Progress" {
            method read() -> (val) {
                // not implemented
                val = 0;
            }
        }

        field DV[6:4] is (read_write) "Division Chain Select" {
            method write(value) {
                local uint3 cur_val = $this;

                $this = value;
                if (cur_val == 0b010 && value != 0b010) {
                    log "info", 4: "oscillator disabled, clock stopped";
                    if (   $reg_b.SET == 0 
                        && SIM_time($dev.obj) > $next_update_time) {
                        // Synchronize time to present newest time in the regs
                        call $sync_with_sim_time();
                    }
                    inline $rtc_update_ended.remove(NULL);
                    inline $rtc_timer.remove(NULL);
                }
                if (cur_val != 0b010 && value == 0b010) {
                    log "info", 4: "oscillator enabled, clock started";
                    if ($reg_b.SET == 0
                        && SIM_time($dev.obj) > $next_update_time) {
                        // Synchronize time to present newest time in the regs
                        call $sync_with_sim_time();
                        if ($reg_b.UIE == 1)
                            inline $rtc_update_ended.post(
                                $next_update_time - SIM_time($dev.obj), NULL);
                    }
                }
            }
        }

        field RS[3:0] is (read_write) "Rate Select";
        method after_write(memop) {
            inline $rtc_periodic.stop_periodic();
            if ($DV == 0b10)
                inline $rtc_periodic.start_periodic();
        }
    }

    register reg_b {
        field SET[7] is (read_write) "Update Cycle Inhibit" {
            data bool initiate_regs = false;
            method write(val) {
                if (val != $this) {
                    if (val == 1) { // 0 -> 1, synchronize the time if needed
                        if (SIM_time($dev.obj) > $next_update_time) {
                            call $sync_with_sim_time();
                            log "info", 3:
                                "sync the simulation time to the registers";
                        }
                    } else { // 1 -> 0
                        // Read the user configured regs into the internal regs.
                        $initiate_regs = true;
                    }
                    $this = val;
                }
            }
        }
        field PIE[6] is (read_write) "Periodic Interrupt Enable" {
            method write(value) {
                local bool  posted;
                local uint1 old_val = $this;

                $this = value;
                if (value == 1 && old_val == 0) {
                    inline $rtc_periodic.posted(NULL) -> (posted);
                    if (!posted) {
                        inline $rtc_periodic.start_periodic();
                    }
                }
            }
        }

        field AIE[5] is (read_write) "Alarm Interrupt Enable";
        field UIE[4] is (read_write) "Update-Ended Interrupt Enable" {
            method write(value) {
                if ($this != value && $reg_a.DV == 0b010) {
                    call $sync_with_sim_time();
                    if ($this == 1 && value == 0)
                        inline $rtc_update_ended.remove(NULL);
                    else
                        inline $rtc_update_ended.post(
                            $next_update_time - SIM_time($dev.obj), NULL);
                    $this = value;
                } else
                    $this = value;
            }
        }
        field SQWE[3]    is (read_write) "Square Wave Enable";
        field DM[2]      is (read_write) "Data Mode";
        field HOURFMT[1] is (read_write) "Hour Format";
        field DSLSWS[0]  is (read_write) "Daylight Savings";

        method after_write(memop) {
            if ($SET.initiate_regs) {
                /* read in registers once all fields in reg_b were set */
                inline $initiate_time_registers();
                log "info", 3:
                    "read the user configured regs into the inner regs";
                $SET.initiate_regs = false;
            }
            call $update_interrupt();
        }

        method hard_reset() {
            call default();
            // TODO: check if this condition should be removed, see SIMICS-9496
            if (!SIM_object_is_configured($dev.obj)) {
                // The following settings have undefined initial value, but set
                // a sensible default
                $HOURFMT = 1;
                $DM = 1;
            }
        }
    }

    register reg_c {
        field IRQF[7] is (clear_on_read) "Interrupt Request Flag";
        field PF[6]   is (clear_on_read) "Periodic Interrupt Flag";
        field AF[5]   is (clear_on_read) "Alarm Flag";
        field UF[4]   is (clear_on_read) "Update-Ended Flag";
        method before_read(memop) {
            local double cur_time = SIM_time($dev.obj);
            if ($reg_b.PIE == 0 && cur_time > $next_periodic_time) {
                inline $sync_periodic_with_sim_time();
            }
            if ($reg_b.UIE == 0) {
                if (cur_time > ($next_update_time + 1.984e-3)) {
                    $UF = 1;
                    call $sync_with_sim_time();
                }
            }
        }
        method after_read(memop) {
            call $update_interrupt();
        }
    }

    register reg_d {
        field VRT[7] is (read_write) "Valid RAM and Time Bit" {
            method read() -> (value) {
                value = 1;//always return 1 for read cycles
            }
        }
        field DA[5:0] is (read_write) "Date Alarm" {
            method write(val) {
                $this = val;
                if (val == 0) {
                    $tm_date_alrm = DISABLED_DATE;
                }
                else if (val > 0x1F) {
                    log "spec_violation", 1:
                        "value %d for %s is larger than %s, adjusted to 31",
                        val, "date alarm", "maximum value";
                    $tm_date_alrm = 30;
                } else {
                    $tm_date_alrm = val - 1;
                }
                call $check_alarm();
            }
        }
    }

    method get_alarm_time() -> (double alarm_time) default {
        local uint8  delta = 0;
        local double tod;
        local double sec_time = 0.0;
        local double min_time = 0.0;
        local double hour_time = 0.0;
        local double day_time = 0.0;

        alarm_time = 0;

        if ($tm_sec_alrm >= RTC_IGNORED_ALARM)
            return;
        alarm_time = RTC_SECOND * ($tm_sec_alrm - $tm_sec);
        if (alarm_time < 0.0) {
            alarm_time += 60 * RTC_SECOND;
            delta = 1;
        }

        if ($tm_min_alrm >= RTC_IGNORED_ALARM)
            return;
        alarm_time += RTC_MINUTE * ($tm_min_alrm - $tm_min - delta);
        delta = 0;
        if (alarm_time < 0.0) {
            alarm_time += 60 * RTC_MINUTE;
            delta = 1;
        }

        if ($tm_hour_alrm >= RTC_IGNORED_ALARM)
            return;
        alarm_time += RTC_HOUR * ($tm_hour_alrm - $tm_hour - delta);
        delta = 0;
        if (alarm_time < 0.0) {
            alarm_time += 24 * RTC_HOUR;
            delta = 1;
        }
        if ($tm_date_alrm == 0x3f)
            return;
        inline $get_date_alarm(alarm_time) -> (tod);
        alarm_time += tod;
    }

    method get_date_alarm(double alarm_time) -> (double time_of_days) {
        if (   ($tm_date_alrm < $tm_date)
            || ($tm_date_alrm == $tm_date && alarm_time < 0.0)) {
            local uint8 dim;
            local uint8 year  = $tm_year;
            local uint8 month = $tm_month + 1;
            local uint16 days
                = days_in_month($tm_year, $tm_month) - $tm_date - 1;
            while (true) {
                dim = days_in_month(year, month);
                if (dim >= ($tm_date_alrm + 1))
                    break;
                days += dim;
                month ++;
                if (month == 12) {
                    month = 0;
                    year ++;
                }
                if (month == $tm_month) {
                    log "spec_violation", 1:
                        "can't get good alarm timing in configured year %d, %s",
                        $tm_year, "alarm may not work well.";
                    break;
                }
            }
            days += $tm_date_alrm;
            time_of_days = RTC_DAY * days;
        }
        else if ($tm_date_alrm > $tm_date)
            time_of_days = RTC_DAY * ($tm_date_alrm - $tm_date);
        else
            time_of_days = 0.0;
    }

    method sync_with_sim_time() {
        local char  *str;
        local uint8  cnt;
        local double delta = SIM_time($dev.obj) - $next_update_time + 1.0;

        if (delta <= 1.0e-6) {
            log "info", 2: "the time synchronization is called %s",
                "before the start of simulation";
        }

        if (delta >= RTC_DAY) {
            cnt = cast(delta / RTC_DAY, uint8);
            inline $tm_date.add_value(cnt);
            inline $tm_day.add_value(cnt);
            delta -= cnt * RTC_DAY;
        }
        if (delta >= RTC_HOUR) {
            cnt = cast(delta / RTC_HOUR, uint8);
            inline $tm_hour.add_value(cnt);
            delta -= cnt * RTC_HOUR;
        }
        if (delta >= RTC_MINUTE) {
            cnt = cast(delta / RTC_MINUTE, uint8);
            inline $tm_min.add_value(cnt);
            delta -= cnt * RTC_MINUTE;
        }
        if (delta >= RTC_SECOND) {
            cnt = cast(delta / RTC_SECOND, uint8);
            inline $tm_sec.add_value(cnt);
            delta -= cnt;
        }

        call $time.get_rtc_time() -> (str);
        log "info", 4: "current RTC time: %s", str;
        call $set_time_registers();
        $next_update_time = SIM_time($dev.obj) - delta + 1.0;
    }

    // Synchronize next periodic time with current simulation time
    method sync_periodic_with_sim_time() {
        local int    cnt;
        local double cur_time = SIM_time($dev.obj);
        local double periodic;

        inline $rtc_periodic.periodic_time() -> (periodic);
        if (cur_time > $next_periodic_time) {
            $reg_c.PF = 1;
            cnt = (cur_time - $next_periodic_time) / periodic;
            $next_periodic_time += (cnt + 1) * periodic;
            call $update_interrupt();
        }
    }

    method check_alarm() {
        local bool   to_update = false;
        local double cur_time  = SIM_time($dev.obj);

        inline $get_alarm_time() -> ($next_alarm_time);

        if ($next_alarm_time < 1.0e-6) {
            log "info", 3: "no alarm now";
            return;
        }

        if (cur_time >= $next_alarm_time) {
            $reg_c.AF = 1;
            to_update = true;
            log "info", 3: "current time %f goes over the alarm time %f",
                cur_time, $next_alarm_time;
        } else {
            inline $rtc_timer.next_alarm();
        }

        if (to_update)
            call $update_interrupt();
    }

    method initiate_time_registers() default {
        local bool is_bcd = ($reg_b.DM == 0);

        /* Documentation says "it is up to the programmer to make sure that
           data stored in these locations is within the reasonable values
           ranges and represents a possible date and time". So we check data
           and, if needed, adjust it and issue spec violation warnings. */
        if (is_bcd) {
            foreach reg in ([$year, $month, $day_of_mon, $day_of_week,
                             $minutes, $seconds]) {
                if (!is_valid_bcd(reg)) {
                    log spec_viol, 1:
                         ("%s: value %#x is not a valid binary-coded"
                          + " decimal and was adjusted"),
                        reg.name, reg;
                    reg = binary_to_bcd(reg.min);
                }
            }
        }
        foreach reg in ([$year, $month, $day_of_week, $minutes, $seconds]) {
            local uint8 value = is_bcd ? bcd_to_binary(reg) : reg;
            if (reg.min > 0 && value < reg.min) {
                log spec_viol, 1:
                    "%s: value %d is less than minimum (%d) and was adjusted",
                    reg.name, value, reg.min;
                    reg = is_bcd ? binary_to_bcd(reg.min) : reg.min;
                 }
                if (reg.max < 0xFF && value > reg.max) {
                    log spec_viol, 1:
                         "%s: value %d exceeds maximum %d and was adjusted",
                         reg.name, value, reg.max;
                     reg = is_bcd ? binary_to_bcd(reg.max) : reg.max;
                }
        }
        /* Special handling for hours */
        local uint8 value_hours = is_bcd
            ? bcd_to_binary($hours[6:0]) : $hours[6:0];
        local bool is_twelve_hour_mode = ($reg_b.HOURFMT == 0);

        if ((is_bcd && !is_valid_bcd($hours[6:0]))
            || (!is_twelve_hour_mode && ($hours[7] == 1 || value_hours > 23))
            || (is_twelve_hour_mode && (value_hours == 0 || value_hours > 12))) {
                log spec_viol, 1:
                    "%s: value %#x is incorrect and was adjusted",
                    $hours.name, $hours;
                $hours = value_hours = 1;
        } else if (is_twelve_hour_mode) {
            local bool is_pm = ($hours[7] == 1);
            if (value_hours == 12 && !is_pm)
                value_hours = 0;  /* midnight is 12 a.m. not 0 */
            if (is_pm && value_hours != 12)
                value_hours += 12;
        }

        /* Special handling for day of month */
        local uint8 value_dom = is_bcd
            ? bcd_to_binary($day_of_mon) : $day_of_mon;
        local uint8 max_dom = is_bcd
            ? days_in_month(bcd_to_binary($year), bcd_to_binary($month)-1)
            : days_in_month($year, $month-1);
        if (value_dom < 1 || value_dom > max_dom) {
            log spec_viol, 1:
                "%s: value %d is not valid was adjusted",
                $day_of_mon.name, value_dom;
            $day_of_mon = 1;
        }

        /* Checks are over: write data to internal registers. */
        if (is_bcd) {
            $tm_year = bcd_to_binary($year);
            $tm_month = bcd_to_binary($month) - 1;
            $tm_date = bcd_to_binary($day_of_mon) - 1;
            $tm_day = bcd_to_binary($day_of_week);
            $tm_hour = value_hours;
            $tm_min = bcd_to_binary($minutes);
            $tm_sec = bcd_to_binary($seconds);
        } else {
            $tm_year = $year;
            $tm_month = $month - 1;
            $tm_date = $day_of_mon - 1;
            $tm_day = $day_of_week;
            $tm_hour = value_hours;
            $tm_min = $minutes;
            $tm_sec = $seconds;
        }
    }

    method set_time_registers() default {
        local bool  pm    = $tm_hour >= 12;
        local uint8 hours = $tm_hour;

        if ($reg_b.HOURFMT == 0) {//12-hour mode
            if (hours == 0)
                hours = 12;  // midnight is 12 a.m. not 0
            if (hours > 12)
                hours = hours % 12;
        }

        if ($reg_b.DM == 0) {//BCD
            $year = binary_to_bcd($tm_year);
            $month = binary_to_bcd($tm_month + 1);
            $day_of_mon = binary_to_bcd($tm_date + 1);
            $day_of_week = binary_to_bcd($tm_day);
            $hours = binary_to_bcd(hours);
            $minutes = binary_to_bcd($tm_min);
            $seconds = binary_to_bcd($tm_sec);
        } else {
            $year = $tm_year;
            $month = $tm_month + 1;
            $day_of_mon = $tm_date + 1;
            $day_of_week = $tm_day;
            $hours = hours;
            $minutes = $tm_min;
            $seconds = $tm_sec;
        }
        if (pm && $reg_b.HOURFMT == 0) {
            $hours[7] = 1;//set PM bit
        }
    }

    method update_interrupt() default {
        $reg_c.IRQF = (  ($reg_c.PF & $reg_b.PIE)
                       | ($reg_c.AF & $reg_b.AIE)
                       | ($reg_c.UF & $reg_b.UIE));
        if ($reg_c.IRQF != $irq_raised) {
            if ($reg_c.IRQF == 0) {
                log "info", 3: "lower interrupt";
                inline $irq_dev.lower($irq_level);
            } else {
                log "info", 3: "raise interrupt";
                inline $irq_dev.raise($irq_level);
            }

            $irq_raised = $reg_c.IRQF;
        }
    }
}

template rtc_data_reg {
    parameter index_reg default undefined;
    parameter base_addr default 0;

    method read_access(generic_transaction_t *memop, msb1, lsb) -> (value) {
        local uint16 addr = $index_reg;

        if (addr[7] == 1) {
            log "info", 2: "a NMI-disabling bit is set";
            $index_reg[7] = 0;
            addr[7] = 0;
        }
        addr += $base_addr;
        inline $rtc.read(memop, addr, 1) -> (value);
    }

    method write_access(generic_transaction_t *memop, msb1, lsb, value) {
        local uint16 addr = $index_reg;

        if (addr[7] == 1) {
            log "info", 2: "a NMI-disabling bit is set";
            $index_reg[7] = 0;
            addr[7] = 0;
        }
        addr += $base_addr;
        inline $rtc.write(memop, addr, 1, value);
    }
}

template rtc_time_reg {
    parameter min   default 0;
    parameter max   default 0xFF;
    parameter type  default RTYPE_T;
    parameter m_reg default undefined; // Mirror register

    method write(value) {
        if ($type == RTYPE_A) {
            $this = value;
            if ($reg_b.DM == 0)
                $m_reg = bcd_to_binary(value);
            else
                $m_reg = value;
            call $check_alarm();
        } else {
            if ($reg_b.SET == 1) {
                $this = value;
            } else {
                log "spec_violation", 1:
                    "ignore configuring time register %s when RTC_REGB.SET = 0",
                    $name;
            }
        }
    }

    method get() -> (value) {
        if ($type == RTYPE_A) {
            if ($reg_b.DM == 0)
                $this = binary_to_bcd($m_reg);
            else
                $this = $m_reg;
        }
        value = $this;
    }

    method read() -> (value) {
        if ($type == RTYPE_T) {
            if ($reg_b.SET == 0 && $reg_a.DV  == 0b010
                && SIM_time($dev.obj) >= $next_update_time)
            call $sync_with_sim_time();
        }
        inline $get() -> (value);
    }
}

template intern_time_reg {
    parameter p_reg default undefined;
    parameter range default undefined;
    parameter persistent = true;
    is unmapped;
    method add_value(uint8 delta) default {
        $this += delta;
        if ($this >= $range) {
            if (defined $p_reg)
                inline $p_reg.add_value($this / $range);
            $this %= $range;
        }
    }
}

method init() {
    $next_update_time = 1.0;
    $irq_level = 8;
}
