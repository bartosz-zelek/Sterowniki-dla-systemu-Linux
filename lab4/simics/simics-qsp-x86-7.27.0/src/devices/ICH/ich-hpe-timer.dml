/*
  hpe-timer.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "simics/devs/interrupt.dml";
import "utility.dml";
import "reset-ports.dml";
import "io-apic.dml";
import "io-memory.dml";
import "simics/devs/memory-space.dml";

import "hpet-msi.dml";

parameter num_of_timer default 4; // Must be 4 or 8

constant COUNTER_CLK_PERIOD     = 6.984127871e-8;
constant FREQ_MHZ               = 14.318179941;
constant MAX64                  = 0xFFFFFFFFFFFFFFFF;
constant MAX32                  = 0x00000000FFFFFFFF;
constant VAL_MASK_32B           = MAX32;

connect intc_8259 {
    parameter documentation =
        "Connection to Intel 8259A Programmable Interrupt Controller.";
    interface simple_interrupt;
}

connect intc_apic {
    parameter documentation = "Connection to APIC interrupt controller.";
    parameter required = true;
    interface ioapic;
}

connect lpc {
    parameter documentation = "LPC bridge used to deliver FSB interrupts." +
        "If no LPC bridge is specified, FSB interrupts will be sent directly" +
        "on the connected memory space.";
    interface hpet_msi;
}

connect memory_space {
    parameter documentation = "Memory space used for FSB interrupt delivery" +
        "used if the LPC bridge is not used for FSB interrupt delivery.";
    interface memory_space;
}



/* forward INT0 and INT8 in non-legacy replacement mode */
implement simple_interrupt {
    method interrupt(int irq) {
        assert (irq == 0 || irq == 8);
        if ($regs.gen_conf.leg_rt_cnf)
            return;
        $intc_apic.ioapic.interrupt((irq == 0) ? 2 : 8);
        $intc_8259.simple_interrupt.interrupt(irq);
    }
    method interrupt_clear(int irq) {
        assert (irq == 0 || irq == 8);
        if ($regs.gen_conf.leg_rt_cnf)
            return;
        $intc_apic.ioapic.interrupt_clear((irq == 0) ? 2 : 8);
        $intc_8259.simple_interrupt.interrupt_clear(irq);
    }
}

attribute start_time {
    parameter documentation = "Latest start time of the main counter";
    parameter allocate_type = "double";
}

attribute comp_write_slow_cycles {
    parameter documentation = "Number of cycles the cpu should be " +
        "stalled when the comparator register is written (performance " +
        "optimization)";
    //parameter allocate_type = "uint32";
    data uint32 val;
    parameter type = "i";
    method get() -> (attr_value_t ret) {
        ret = SIM_make_attr_uint64($val);
    }
    method set(attr_value_t v) {
        $val = SIM_attr_integer(v);
    }
}

// next timer overflow
event tim_event {
    parameter timebase = "seconds";
    method event(void *data) {
        call $regs.on_event();
    }
}

// stall support
extern void do_stall(conf_object_t *obj, uint32 cycles);
header %{
#include <simics/model-iface/step.h>

static void do_stall(conf_object_t *initiator, uint32 cycles) {
    const stall_interface_t *si = SIM_c_get_interface(initiator, "stall");
    // initiator is not required to implement stall interface
    if (si != NULL)
        si->set_stall_cycles(initiator, cycles);
}
%}
method stall(conf_object_t *initiator, uint32 cycles) 
{
    // this is performance opt only, ignore silently
    if (cycles > 0 && initiator != NULL)
        do_stall(initiator, cycles);
}

bank regs {
    parameter register_size = 8;
    parameter partial = true;
    parameter function = 0;

    register gcap_id    @ 0x0  "General Capabilities and Id Register";
    register gen_conf   @ 0x10 "General Configure Register";
    register gintr_sta  @ 0x20 "General Interrupt Status Register";
    register main_cnt   @ 0xF0 "Main Counter Value Register";
    register tim_conf[$num_of_timer] @ (0x100 + $i * 0x20) 
                "Timer n Configuration and Capabilities";
    register tim_comp [$num_of_timer] @ (0x108 + $i * 0x20) 
                "Timer n Comparator Value Register";
    register fsb_int_rout [$num_of_timer] @ (0x110 + $i * 0x20) 
                "Timer n FSB Interrupt Route Register";

    register tim_comp [$num_of_timer] {
        // 0xFFFF-FFFF for 32-bits; 0xFFFF-FFFF-FFFF-FFFF for 64-bits
        parameter hard_reset_value = ($i == 0) ? MAX64 : MAX32;
    }
}

bank regs {
    register gcap_id {
        is read_only;

        field counter_clk   [63:32] "Main Counter Tick Period";
        field vendor_id     [31:16] "Vendor ID Capability";
        field leg_rt        [15]    "Legacy Replacement Rout Capable";
        field count_size    [13]    "Counter Size Capability";
        field num_tim       [12:8]  "Number of Timer Capability";
        field rev_id        [7:0]   "Revision Identification";

        field counter_clk   { parameter hard_reset_value = 69841279; }
        field vendor_id     { parameter hard_reset_value = 0x8086; }
        field leg_rt        { parameter hard_reset_value = 0b1; }
        field count_size    { parameter hard_reset_value = 0b1; }
        field num_tim       { parameter hard_reset_value = $num_of_timer - 1; }
        field rev_id        { parameter hard_reset_value = 0x01; }
    }

    register gen_conf {
        field leg_rt_cnf    [1] "Legacy Replacement Rout";
        field enable_cnf    [0] "Overall Enable";

        field leg_rt_cnf {
            method write(value) {
                if (value == $this)
                    return;
                call $clear_irq_pin(0);
                call $clear_irq_pin(1);
                $this = value;
            }
        }

        field enable_cnf {
            method write(value) {
                log "info", 3 : "writing overall-enable field to: %d", value;
                if ($this == value)
                    return;
                if (value == 1) {
                    // main counter start
                    $start_time = SIM_time($dev.obj);
                } else {
                    // main counter stop
                    inline $main_cnt.on_before_stop();
                }
                $this = value;
            }
        }
        method after_write(value) {
            call $update_interrupts;
            call $update_event;
        }
    }

    register gintr_sta {
        field status[$num_of_timer - 1:0] "Timer interrupt status" {
            method write(value) {
                $this &= ~value;
                call $update_interrupts;
            }
        }
    }

    register main_cnt {
        method write(value) {
            log "info", 3: "main counter set to: 0x%x", value;
            $this = $handled_tick = value;

            if ($gen_conf.enable_cnf == 1) { 
                log "spec_violation", 2: 
                    "main counter written while counter is running";
                call $update_event;
            }
        }
        method read() -> (value) {
            call $get_main_cnt() -> (value);
            if (cast($handled_tick - value, int64) > 0) {
                // ensure the counter is monotonically increasing with
                // respect to already handled comparator matches
                value = $handled_tick;
            }
        }
        method get() -> (value) {
            value = $this;
        }

        // get the running main cnt value
        method get_main_cnt() -> (uint64 value) {
            value = $this;
            if ($gen_conf.enable_cnf != 0) {
                local double delta = SIM_time($dev.obj) - $start_time + 1.0e-8;
                local uint64 cnt = cast(delta / COUNTER_CLK_PERIOD, uint64);
                value += cnt;
            }
        }
        // renormalize counter to keep precision
        method renormalize_main_cnt() {
            call $get_main_cnt() -> ($this);
            $start_time = SIM_time($dev.obj);
        }
        
        method on_before_stop() {
            call $get_main_cnt() -> ($this);
        }
    }

    register running_main_cnt {
        parameter configuration = "pseudo";
        is unmapped;
        method get() -> (value) {
            call $main_cnt.get_main_cnt() -> (value);
        }
    }

    register fsb_int_rout[$num_of_timer] {
        field fsb_int_addr          [63:32] "FSB Interrupt Address";
        field fsb_int_val           [31:0]  "FSB Interrupt Value";
    }

    register tim_conf[$num_of_timer] {
        field timer_intr_rout_cap   [63:32] "Timer Interrupt Route Capability";
        field timer_fsb_int_del_cap [15]    "FSB Interrupt Delivery Capability";
        field timer_fsb_en_cnf      [14]    "FSB Interrupt Enable";
        field timer_intr_rout_cnf   [13:9]  "Interrupt Rout";
        field timer_32mode_cnf      [8]     "Timer 32-bit Mode";
        field timer_val_set_cnf     [6]     "Timer Value Set";
        field timer_size_cap        [5]     "Timer Size";
        field timer_period_intr_cap [4]     "Timer Periodic Interrupt Capable";
        field timer_type_cnf        [3]     "Timer Type";
        field timer_intr_en_cnf     [2]     "Timer Interrupt Enable";
        field timer_intr_type       [1]     "Timer Interrupt Type";

        field timer_intr_rout_cap {
            is read_only;
            parameter hard_reset_value = 
                ($i < 2) ? (0xf << 20) :
                ($i == 2) ? (0xf << 20) | (1 << 11) :
                ($i == 3) ? (0xf << 20) | (1 << 12) :
                0 /* only FSB delivery for timer 4-7 */;
        }
        field timer_fsb_int_del_cap {
            is read_only; parameter hard_reset_value = 1;
        }
        field timer_size_cap {
            is read_only; parameter hard_reset_value = ($i == 0) ? 1 : 0;
        }
        field timer_period_intr_cap {
            is read_only; parameter hard_reset_value = ($i == 0) ? 1 : 0;
        }

        field timer_intr_type { 
            method write(value) {
                if ($i >= 4 && value != 0) {
                    log "spec_violation", 1: "invalid interrupt type";
                    return;
                }
                if ($this == value)
                    return;
                $this = value;
                call $clear_irq_pin($i);
            }
        }

        field timer_intr_en_cnf {
            method write(value) {
                if ($this == value)
                    return;
                $this = value;
                call $clear_irq_pin($i);
            }
        }

        field timer_fsb_en_cnf {
            method write(value) {
                if ($this == value)
                    return;
                $this = value;
                call $clear_irq_pin($i);
            }
        }

        field timer_intr_rout_cnf {
            method write(value) {
                if (value != 0 && $timer_intr_rout_cap[value] == 0) {
                    log "spec_violation", 1: "invalid interrupt routing";
                    return;
                }
                if ($this == value)
                    return;
                $this = value;
                call $clear_irq_pin($i);
            }
        }

        field timer_32mode_cnf  {
            method write(value) {
                // only supported for 64-bit timers
                if ($tim_conf[$i].timer_size_cap != 1)
                    return;

                if (($this == 0) && (value == 1))
                    $tim_comp[$i] &= VAL_MASK_32B;
                $this = value;
            }
        }

        field timer_val_set_cnf {
            method write(value) {
                // only supported for periodical timers
                if ($tim_conf[$i].timer_period_intr_cap == 1)
                    $this = value;
            }
        }

        field timer_type_cnf {
            method write(value) {
                //only supported for periodical timer
                if ($tim_conf[$i].timer_period_intr_cap == 1)
                    $this = value;
            }
        }

        method after_write(memop) {
            local uint64 regVal;
            inline $this.get() -> (regVal);
            log "info", 2 : "setting timer %d conf reg to 0x%x", $i, regVal;
            call $update_event;
            // raise newly enabled interrupts
            call $update_interrupt($i);
        }
    }

    register tim_comp[$num_of_timer] {
        data bool stall_mop;

        method write(value) {
            $stall_mop = false;
            log "info", 3 : "writing timer %d comparator to: 0x%x", $i, value;

            local uint64 mask;
            inline $get_mask($i) -> (mask);
            value &= mask;

            local bool is_periodic;
            inline $is_periodic($i) -> (is_periodic);

            if (is_periodic) {
                if ($tim_conf[$i].timer_val_set_cnf) {
                    $tim_conf[$i].timer_val_set_cnf = 0;
                    $this = value;
                    // the specs are not crystal clear - it may be that
                    // the period should be set here too, simultaneously
                } else {
                    $tim_period[$i] = value;
                }
            } else {
                $stall_mop = true;
                $this = value;
            }
            call $update_event;
        }

        method after_write(mem_op) {
            if ($stall_mop) {
                inline $stall(SIM_get_mem_op_initiator(mem_op),
                              $comp_write_slow_cycles.val);
            }
        }
    }

    register irq_pins[$num_of_timer] is (unmapped) 
        "Timer n IRQ output state (level interrupts only)" { 
        field apic_irq[7:0];
        field i8259_irq[15:8];
        field raised[16];
        
        method hard_reset() {
            call $clear_irq_pin($i);
        }
    }

    // highest main counter tick which has been handled. Also
    // used as a lower bound for main counter reads (rounding
    // error protection)
    register handled_tick is (unmapped);

    // timer period (valid for periodic timers only)
    register tim_period[$num_of_timer] is (unmapped);

    // main counter tick corresponding to the posted event
    register event_tick {
        is unmapped;
        data bool posted;       // event_tick value valid
        method after_set() {
            call $tim_event.posted(NULL) -> ($posted);
        }
        method hard_reset() {
            if (SIM_object_is_configured($dev.obj))
                call $tim_event.remove(NULL);
            $posted = false;
            $this = 0;
        }
    }

    // find next comparator match tick
    method next_match_tick() -> (uint64 match_tick) {
        local uint64 now;
        call $main_cnt.get_main_cnt() -> (now);

        local uint64 offs = MAX64;
        local int i;
        for (i = 0; i < $num_of_timer; i++) {
            local uint64 diff = $regs.tim_comp[i] - now;
            local uint64 mask;
            inline $get_mask(i) -> (mask);
            diff &= mask;

            // already handled?
            if (cast(now + diff - $handled_tick, int64) <= 0) {
                if (mask < offs)
                    offs = mask + 1;
                continue;
            }

            if (diff < offs)
                offs = diff;
        }
        match_tick = now + offs;
    }

    // move event to the next comparator match
    method update_event() {
        if ($gen_conf.enable_cnf != 1) {
            if ($event_tick.posted) {
                call $tim_event.remove(NULL);
                $event_tick.posted = false;
            }
            return;
        }
        local uint64 match_tick;
        call $next_match_tick() -> (match_tick);

        if ($event_tick.posted) {
            // avoid reposting the same event
            if ($event_tick == match_tick)
                return;
            call $tim_event.remove(NULL);
        }
        
        // post new event
        local uint64 offs = match_tick - $main_cnt;
        local double delay = (offs * COUNTER_CLK_PERIOD
                              - (SIM_time($dev.obj) - $start_time));
        // delay can actually become slightly negative...
        if (delay < 0)
            delay = 0;

        log "info", 4: "posting event at tick 0x%x (expires in %fs)",
            match_tick, delay;
        inline $tim_event.post(delay, NULL);

        $event_tick.posted = true;
        $event_tick = match_tick;
    }

    // comparator match event
    method on_event() {
        log "info", 4: "comparator match at tick 0x%lx", $event_tick;
        $event_tick.posted = false;

        // trigger all comparator matches in the interval [event_tick, now]
        local uint64 now;
        call $main_cnt.get_main_cnt() -> (now);
        call $main_cnt.renormalize_main_cnt();    // improves precision
        local uint64 start = ($event_tick < now) ? $event_tick : now;
        local uint64 end = ($event_tick > now) ? $event_tick : now;
        local uint64 xdiff = end - start;

        local int i;
        for (i = 0; i < $num_of_timer; i++) {
            local uint64 mask;
            inline $get_mask(i) -> (mask);
            local uint64 diff = ($tim_comp[i] - start) & mask;
            if (diff <= xdiff)
                inline $comparator_match(i);
        }
        $handled_tick = end;
        call $update_event;
    }

    method comparator_match(int index) {
        // update comparator for periodic interrupts
        local bool is_periodic;
        inline $is_periodic(index) -> (is_periodic);
        if (is_periodic) {
            local uint64 mask;
            inline $get_mask(index) -> (mask);
            $tim_comp[index] += $tim_period[index] & mask;
        }

        // set interrupt status for level interrupts
        local bool is_level;
        inline $is_level(index) -> (is_level);
        if (is_level) {
            if ($gintr_sta.status[index] == 1)
                return;
            $gintr_sta.status[index] = 1;
        }
        if ($tim_conf[index].timer_intr_en_cnf == 1)
            call $send_interrupt(index);
    }

    method update_interrupt(int index) {
        assert index < $num_of_timer;
        local bool is_level;
        inline $is_level(index) -> (is_level);
        local bool enabled = $gen_conf.enable_cnf 
            && $tim_conf[index].timer_intr_en_cnf == 1;
        local bool active;

        if (is_level)
            active = enabled && ($gintr_sta.status[index] == 1);
        else {
            // pin status should not be changed for edge
            // triggered interrupts (unless the irq is disabled)
            active = enabled && $irq_pins[index].raised;
        }

        if ($irq_pins[index].raised != cast(active, uint1)) {
            if (active)
                call $set_irq_pin(index);
            else
                call $clear_irq_pin(index);
        }
    }

    method update_interrupts() {
        local int i;
        for (i = 0; i < $num_of_timer; i++)
            call $update_interrupt(i);
    }

    method send_fsb_int(int index) {
        local uint32 val = $fsb_int_rout[index].fsb_int_val;
        local physical_address_t dst = $fsb_int_rout[index].fsb_int_addr;

        // Forward to LPC, if connected
        if ($lpc.obj) {
            $lpc.hpet_msi.send(index, dst, val);
            return;
        }

        if (!$memory_space.obj) {
            log "error":
                "Error sending HPET MSI (LPC/memory_space not connected)";
            return;
        }

        local exception_type_t ex = $memory_space.memory_space.access_simple(
            $dev.obj, dst, cast(&val, uint8 *), 4, Sim_RW_Write,
            Sim_Endian_Host_From_LE);
        if (ex != Sim_PE_No_Exception) {
            log "error":
                "An error occurred when writing to memory @ 0x%x: %d",
                dst, cast(ex, int);
            throw;
        }
        log "info", 3 : "timer %d sent an FSB interrupt (0x%x @ %08lx)",
            index, val, dst;
    }

    // all enable flags handling etc should have been done previously
    method send_interrupt(int index) {
        // FSB delivery (MSI)
        if ($tim_conf[index].timer_fsb_en_cnf) {
            inline $send_fsb_int(index);
            return;
        }

        local bool is_level;
        inline $is_level(index) -> (is_level);

        // edge interrupts: clear interrupt line and raise immediately
        if (!is_level)
            call $clear_irq_pin(index);

        call $set_irq_pin(index);
    }
    
    method set_irq_pin(int index) {
        local uint32 apic_no;
        local uint32 i8259_no;
        call $get_irq_route(index) -> (i8259_no, apic_no);

        // don't raise interrupts if there IRQ routing is set to 0
        if (apic_no == 0) {
            log "spec_violation", 1 : 
                "Can't raise IRQ for timer %d (no IRQ routing set)", index;
            return;
        }

        // new output pin state
        $irq_pins[index].apic_irq = apic_no;
        $irq_pins[index].i8259_irq = i8259_no;
        $irq_pins[index].raised = true;

        // to IOAPIC
        $intc_apic.ioapic.interrupt(apic_no);

        // to 8259
        if (i8259_no < 16) {
            $intc_8259.simple_interrupt.interrupt(i8259_no);

            log "info", 3 :
                "timer %d raised interrupt %d/%d (8259/APIC)",
                index, i8259_no, apic_no;
        } else {
            log "info", 3 :
                "timer %d raised interrupt %d (8259/APIC)",
                index, apic_no;
        }
    }

    // lower (level) interrupt, if raised
    method clear_irq_pin(int i) {
        assert i < $num_of_timer;
        if ($irq_pins[i].raised) {
            $intc_apic.ioapic.interrupt_clear($irq_pins[i].apic_irq);
            local uint32 i8259_no = $irq_pins[i].i8259_irq;
            if (i8259_no < 16)
                $intc_8259.simple_interrupt.interrupt_clear(i8259_no);
            $irq_pins[i].raised = 0;
        }
    }

    // helpers
    method get_irq_route(uint32 index) -> (uint32 i8259_no, uint32 apic_no) {
        if ($gen_conf.leg_rt_cnf == 1 && index < 2) {
            apic_no = (index == 0) ? 2 : 8;
            i8259_no = (index == 0) ? 0 : 8;
        } else {
            i8259_no = apic_no = $tim_conf[index].timer_intr_rout_cnf;
        }
    }

    method is_periodic(int i) -> (bool value)  {
        value = $tim_conf[i].timer_type_cnf == 1;
    }

    method is_level(int i) -> (bool value) {
        value = ($tim_conf[i].timer_intr_type == 1
                 && $tim_conf[i].timer_fsb_en_cnf == 0);
    }
    
    method get_mask(int i) -> (uint64 value) {
        value = (($tim_conf[i].timer_size_cap == 1)
                 && $tim_conf[i].timer_32mode_cnf == 0) ?
            MAX64 : MAX32;
    }
}
