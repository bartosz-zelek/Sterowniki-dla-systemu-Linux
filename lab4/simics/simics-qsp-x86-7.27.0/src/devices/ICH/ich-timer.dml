/*
  © 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "io-memory.dml";
import "utility.dml";
import "reset-ports.dml";
import "ich-util.dml";

constant NUM_OF_COUNTER     = 3;

constant TIMER_CYCLE_PERIOD = 838.0e-9; // 838 ns per cycle
constant TIMER_RW_LSB       = 1;
constant TIMER_RW_MSB       = 2;
constant TIMER_RW_SEQ       = 3;

connect output[NUM_OF_COUNTER] {
    parameter documentation = "Output signal of 8245 timer";
    is pirq_connect;
}

attribute irq_level[NUM_OF_COUNTER] {
    parameter documentation = "Level for output signal";
    parameter allocate_type = "uint32";
}

template timer_status {
    is unmapped;
    field CO[7]       is (read_only) "Counter OUT pin State";
    field CRS[6]      is (read_only) "Counter Register Status";
    field RWS[5:4]    is (read_only) "Read/write Selection Status";
    field MODSEL[3:1] is (read_only) "Mode Selection Status";
    field BCD[0]      is (read_only) "Countdown Type Status";
}

template counter_event {
    parameter timebase = "seconds";
    parameter counter_index default -1;

    method event(void * data) {
        call $trigger_counter($counter_index);
    }
}

//mapped at fixed IO space (0x40 ~ 0x43) and (0x50 ~ 0x53)
bank fixed_io {
    parameter register_size = 1;
    parameter function      = 0;
    // Timer I/O registers
    register sts_acc[3] @ $i
        "Counter status byte/access port registers";
    register timer_tcw @ 3 "Timer Control Word register";

    group counters [c in 0 .. (NUM_OF_COUNTER - 1)] {
        is timer_counter;
        parameter out_signal = $output[$c];
        parameter out_level = $irq_level[$c];
    }

    register counter_on_next_cycle is (unmapped)
                "The counters will be triggered on next cycle";

    // Detailed Information for Intel® 8254 timer registers
    register sts_acc[NUM_OF_COUNTER] {
        method read() -> (value) {
            if ($counters[$i].status.RBC) {
                $counters[$i].status.RBC = 0;
                inline $counters[$i].read_latched(true) -> (value);
            }
            else if ($counters[$i].status.CLC) {
                $counters[$i].status.CLC = 0;
                inline $counters[$i].read_latched(false) -> (value);
            }
            else {
                inline $counters[$i].read_latched(false) -> (value);
            }
        }
        method write(value) {
            if (   $counters[$i].status.RBC == 1 
                || $counters[$i].status.CLC == 1) {
                log "spec_violation", 1:
                    "register %s is read-only for %s and %s.",
                    $name, "Read-back command", "Counter latch command";
            }
            else {
                inline $counters[$i].write_count(value);
            }
        }
    }

    register timer_tcw {
        field CSEL[7:6] is (read_zero) "Counter Select";
        field CMD[5:0]  is (read_zero) "Data bits of control word";

        method after_write(memop) {
            local int i;
            local const char *latched;

            if ($CSEL == 3) { // Read Back Command
                for (i = 0; i < 3; i++) {
                    if (($CMD & (2 << i)) != 0) {
                        if ($counters[i].status.RBC == 1)
                            log "info", 3:
                                "repeated read back cmd to counter %d", i;
                        else {
                            $counters[i].status.RBC = 1;
                            call $counters[i].do_read_back_command(
                                                $CMD[5], $CMD[4]);
                            latched = "none";
                            if ($CMD[5] == 1 && $CMD[4] == 1)
                                latched = "count and status";
                            else if ($CMD[5] == 1 && $CMD[4] == 0)
                                latched = "count";
                            else if ($CMD[5] == 0 && $CMD[4] == 1)
                                latched = "status";
                            log "info", 3:
                                "latched %s of counter %d",
                                latched, i;
                        }
                    }
                }
            }
            else if ($CMD[5:4] == 0) { // Counter Latch Command
                if ($counters[$CSEL].status.CLC == 1)
                    log "info", 3:
                        "repeated counter latch cmd to counter %d", $CSEL;
                else {
                    $counters[$CSEL].status.CLC = 1;
                    call $counters[$CSEL].do_counter_latch_command();
                    log "info", 3: "latched count of counter %d", $CSEL;
                }
            } else { // Timer Control
                inline $counters[$CSEL].timer_control($CMD[5:4],
                                                     $CMD[3:1], $CMD[0]);
            }
        }
    }

    event counter_event1 {
        parameter counter_index = 0;
        is counter_event;
    }

    event counter_event2 {
        parameter counter_index = 1;
        is counter_event;
    }

    event counter_event3 {
        parameter counter_index = 2;
        is counter_event;
    }

    event one_cycle {
        parameter timebase = "seconds";
        method event(void *data) {
            local int i;
            for (i = 0; i < NUM_OF_COUNTER; i++) {
                if ($counter_on_next_cycle[i] == 1) {
                    if ($counters[i].status.CO == 0)
                        inline $counters[i].raise();
                    else
                        inline $counters[i].lower();
                    // Maybe the counter needs to be reloaded
                    if ($counters[i].status.MODSEL == 2)
                        inline $reload_timer(i);
                    $counter_on_next_cycle[i] = 0;
                }
            }
        }
    }

    parameter events = [$counter_event1, $counter_event2, $counter_event3];

    method start_countdown(int c, uint16 count_val) {
        local bool is_posted;

        if (c >= NUM_OF_COUNTER)
            return;

        select event in ($events)
            where (event.counter_index == c) {
            inline event.posted(NULL) -> (is_posted);
            if (is_posted)
                inline event.remove(NULL);
            if (count_val != 0) {
                log "info", 3: "start countdown with count 0x%x", count_val;
                switch ($counters[c].status.MODSEL) {
                case 0:
                case 1:
                    inline $counters[c].lower();
                    break;
                case 2:
                case 3:
                    inline $counters[c].raise();
                    break;
                case 4:
                case 5:
                    count_val++;
                    inline $counters[c].raise();
                    break;
                default:
                    assert(false);
                    break;
                }
                inline event.post(TIMER_CYCLE_PERIOD * count_val, NULL);
                $counters[c].reload = count_val;
                $counters[c].status.CRS = 1;
            }
        }
        else {
        }
    }

    method trigger_counter(int c) {
        $counters[c].counter = 0;
        switch ($counters[c].status.MODSEL) {
        case 0:
            inline $counters[c].raise();
            break;
        case 1:
            inline $counters[c].raise();
            $counter_on_next_cycle[c] = 1;
            inline $one_cycle.post(TIMER_CYCLE_PERIOD, NULL);
            break;
        case 2:
            inline $counters[c].lower();
            $counter_on_next_cycle[c] = 1;
            inline $one_cycle.post(TIMER_CYCLE_PERIOD, NULL);
            break;
        case 3:
            if ($counters[c].status.CO == 0)
                inline $counters[c].raise();
            else
                inline $counters[c].lower();
            inline $reload_timer(c);
            break;
        case 4:
        case 5:
            inline $counters[c].lower();
            break;
        default:
            assert(false);
            break;
        }
    }

    method is_started(int c) -> (bool started) {
        select event in ($events) where (event.counter_index == c) {
            inline event.posted(NULL) -> (started);
        }
        else {
            assert(false);
        }
    }

    method get_remained(int c) -> (double seconds) {
        seconds = 0.0;
        select event in ($events) where (event.counter_index == c) {
            inline event.next(NULL) -> (seconds);
            if (seconds <= 0.0)
                seconds = 0.0;
        }
        else {
        }
    }

    method reload_timer(int c) {
        local bool posted;

        select event in ($events)
                where (event.counter_index == c) {
            inline event.posted(NULL) -> (posted);
            if (posted)
                inline event.remove(NULL);
            inline event.post(
                    $counters[c].reload * TIMER_CYCLE_PERIOD, NULL);
            log "info", 4: "reloaded the counter %d with count value 0x%x",
                    c, $counters[c].reload;
        }
        else {
        }
    }
}

template timer_counter {
    parameter out_signal default undefined;
    parameter out_level  default undefined;

    register counter size 2 is (unmapped) "Timer counter register" {
        method get() -> (value) {
            local bool started;
            inline $is_started($c) -> (started);
            if (started) {
                local double remained;
                inline $get_remained($c) -> (remained);
                $this = cast(remained / TIMER_CYCLE_PERIOD, uint16);
                if ((remained - TIMER_CYCLE_PERIOD * $this) > 1.0e-6)
                    $this += 1;
                if ($status.MODSEL == 4 || $status.MODSEL == 5)
                    $this -= 1;
            }
            value = $this;
        }
    }
    register reload size 2 is (unmapped)     "Counter for reload";
    register status size 2 is (timer_status) "Timer status register" {
        field LMSB[13] is (read_only) "Latched MSB";
        field LLSB[12] is (read_only) "Latched LSB";
        field LS[11]   is (read_only) "Latched Status";
        field RBC[10]  is (read_only) "Read-back command bit";
        field CLC[9]   is (read_only) "Counter latch command bit";
        field POS[8]   is (read_only) "Read/write position";
    }

    register latch_counter size 2 is (unmapped)     "Counter Latch register";
    register latch_status size 1  is (timer_status) "Latched status register";

    method bcd_to_value(uint16 bcd) -> (uint16 value) {
        value = (bcd[15:12] * 1000
                 + bcd[11:8] * 100 + bcd[7:4] * 10 + bcd[3:0]);
    }

    method value_to_bcd(uint16 value) -> (uint16 bcd) {
        bcd[15:12] = value / 1000;
        bcd[11:8] = (value % 1000) / 100;
        bcd[7:4] = (value % 100) / 10;
        bcd[3:0] = value % 10;
    }

    method do_read_back_command(uint1 lc, uint1 ls) {
        if (lc == 1)
            inline $do_counter_latch_command();
        if (ls == 1) {
            $latch_status.CO = $status.CO;
            $latch_status.BCD = $status.BCD;
            $latch_status.CRS = $status.CRS;
            $latch_status.RWS = $status.RWS;
            $latch_status.MODSEL = $status.MODSEL;
            $status.LS = 1;
        }
    }

    method do_counter_latch_command() {
        local uint16 count;

        inline $counter.get() -> (count);
        if ($status.BCD == 1)
            inline $value_to_bcd(count) -> ($latch_counter);
        else
            $latch_counter = count;

        if ($status.RWS == TIMER_RW_LSB)
            $status.LLSB = 1;
        else if ($status.RWS == TIMER_RW_MSB)
            $status.LMSB = 1;
        else if ($status.RWS == TIMER_RW_SEQ) {
            $status.LMSB = 1;
            $status.LLSB = 1;
        }

    }

    method timer_control(uint2 rw, uint3 mode, uint1 bcd) {
        $status.RWS = rw;
        $status.MODSEL = mode > 5 ? mode - 4 : mode;
        $status.BCD = bcd;
        $status.RBC = 0;
        $status.CLC = 0;
        $status.CRS = 0;
        $status.POS = $status.RWS == TIMER_RW_MSB ? 1 : 0;
        log "info", 4:
            "timer control word with rws %d, mode %d, bcd %d",
            rw, mode, bcd;
    }

    method write_count(uint8 value) {
        log "info", 4:
            "write counter (byte %d: 0x%x)", $status.POS, value;

        if ($status.RWS == TIMER_RW_LSB) {
            $counter = value;
        }
        else if ($status.RWS == TIMER_RW_MSB) {
            $counter = cast(value, uint16) << 8;
        }
        else {
            $counter[$status.POS * 8 + 7 : $status.POS * 8] = value;
            $status.POS = 1 - $status.POS;
        }

        if ($status.RWS != TIMER_RW_SEQ || $status.POS == 0) {
            if ($status.BCD == 1)
                inline $bcd_to_value($counter) -> ($counter);
            call $start_countdown($c, $counter);
        }
    }

    method read_latched(bool is_rbc) -> (uint8 value) {
        if (is_rbc && $status.LS == 1) {
            $status.LS = 0;
            inline $latch_status.get() -> (value);
            log "info", 4: "read status (0x%x)", value;
        }
        else if ($status.LLSB == 1) {
            $status.LLSB = 0;
            value = $latch_counter[7:0];
            log "info", 4:
                "read counter latch (byte 0: 0x%x)", value;
        }
        else if ($status.LMSB == 1) {
            $status.LMSB = 0;
            value = $latch_counter[15:8];
            log "info", 4:
                "read counter latch (byte 1: 0x%x)", value;
        }
        else {
            local uint16 count;
            inline $counter.get() -> (count);
            if ($status.BCD == 1)
                inline $value_to_bcd(count) -> (count);
            if ($status.POS == 1)
                value = count >> 8;
            else
                value = count & 0xFF;
            log "info", 4:
                "simple read counter (byte %d: 0x%x)", $status.POS, value;
        }
    }

    method raise() {
        log "info", 3: "raise %s %d output signal", $name, $c;
        inline $out_signal.raise($out_level);
        $status.CO = 1;
    }

    method lower() {
        log "info", 3: "lower %s  %d output signal", $name, $c;
        inline $out_signal.lower($out_level);
        $status.CO = 0;
    }
}
