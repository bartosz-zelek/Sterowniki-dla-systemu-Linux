/*
  ich-lpc-intr.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "io-apic.dml";
import "serial_interrupt_interface.dml";

connect irq_dev {
    parameter documentation
        = "Connect to 8259 which is the destination object of PIRQs routing";
    interface simple_interrupt;//connect to 8259
}

connect ioapic {
    parameter documentation = "IOAPIC receiving PCI interrupt";
    parameter configuration = "required";
    interface ioapic {
        parameter required = true;
    }
}

attribute irq_level[8] {
    parameter documentation = "Raise count for PIRQ[A-H]";
    parameter allocate_type = "int32";
}


//PIRQ 0 ~ 7
implement pci_interrupt {
    method raise_interrupt(conf_object_t *obj, int dev, int pin) {
        assert 0 <= pin && pin < 4;

        local int phys_pin;
        call $route_interrupt(dev, pin)->(phys_pin);
        assert 0 <= phys_pin && phys_pin < 8;

        log "info", 3: "raise PIRQ; device %d, pin %d, phys_pin %d", 
            dev, pin, phys_pin;

        $irq_level[phys_pin] += 1;
        if ($irq_level[phys_pin] == 1) {
            $ioapic.ioapic.interrupt(16 + phys_pin);
            call $pci_config.pirq_rout[phys_pin].raise();
        }
    }

    method lower_interrupt(conf_object_t *obj, int dev, int pin) {
        assert 0 <= pin && pin < 4;

        local int phys_pin;
        call $route_interrupt(dev, pin)->(phys_pin);
        assert 0 <= phys_pin && phys_pin < 8;

        log "info", 3: "lower PIRQ; device %d, pin %d, phys_pin %d",
            dev, pin, phys_pin;

        $irq_level[phys_pin] -= 1;
        if ($irq_level[phys_pin] == 0) {
            $ioapic.ioapic.interrupt_clear(16 + phys_pin);
            call $pci_config.pirq_rout[phys_pin].lower();
        }
    }

}
method route_interrupt(int dev, int pin)->(int phys_pin) {
    switch (dev) {
        case 31: phys_pin = $cs_conf.d31r[pin*4+2:pin*4];
                 break;
        case 29: phys_pin = $cs_conf.d29r[pin*4+2:pin*4];
                 break;
        case 28: phys_pin = $cs_conf.d28r[pin*4+2:pin*4];
                 break;
        case 27: phys_pin = $cs_conf.d27r[pin*4+2:pin*4];
                 break;
        case 26: phys_pin = $cs_conf.d26r[pin*4+2:pin*4];
                 break;
        case 25: phys_pin = $cs_conf.d25r[pin*4+2:pin*4];
                 break;
        default: phys_pin = pin;
    }
}

implement serial_interrupt_master {
    method start_request() {
        log "info", 3: "received start frame initiation request.";

        if ($pci_config.sirq_cntl.sirqen == 1)
            inline $SERIRQ_slave.serial_interrupt_cycles();
    }
}

connect SERIRQ_slave {
    parameter documentation =
        "connects to slave device of serial interrupt transfer cycles";
    interface serial_interrupt_slave;

    method serial_interrupt_cycles() {
        if (!$obj) {
            log "error":
                "there isn't SERIRQ slave attached to fetch data frame";
            return;
        }

        if (!$irq_dev.obj) {
            log "error": "no irq_dev to forward serial interrupt request to";
            return;
        }

        local int i;
        $serial_interrupt_slave.start();
        for (i = 0; i < 21; i++) {
            local int level = $serial_interrupt_slave.fetch();
            if (i == 0 || i == 8 || i == 13 || i == 16)
                continue;

            if (level != $pci_config.sirq_levels[i]) {
                if (level == 1) {
                    $irq_dev.simple_interrupt.interrupt_clear(i);
                    $ioapic.ioapic.interrupt_clear(i);
                } else {
                    $irq_dev.simple_interrupt.interrupt(i);
                    $ioapic.ioapic.interrupt(i);
                }
                $pci_config.sirq_levels[i] = level;
            }
        }
        $serial_interrupt_slave.stop($pci_config.sirq_cntl.sirqmd);

        log "info", 3: "finished serial interrupt transfer cycles";
    }
}

port pirqe "port for PIRQE" { is pirq_input; parameter irq_index = 4; }
port pirqf "port for PIRQF" { is pirq_input; parameter irq_index = 5; }
port pirqg "port for PIRQG" { is pirq_input; parameter irq_index = 6; }
port pirqh "port for PIRQH" { is pirq_input; parameter irq_index = 7; }

port pirq  "port for PIRQ input" { is pirq_input_legacy; }

bank pci_config {
    register pirq_rout[8] size 1 "PIRQ Routing Control Registers" {
        parameter offset = 0x60 + ($i % 4) + 8 * ($i / 4);
        parameter hard_reset_value = 0x80;
        field irqen[7] is (read_write) "Interrupt Routing Enable";
        field routing[3:0] is (read_write) "IRQ Routing";

        method raise() {
            if ($irqen == 1) {
                log "info", 3: "irq disabled, PIRQ not routed to 8259";
                return;
            }
            if ($irq_dev.obj == NULL) {
                log "error": "no irq_dev to forward PIRQ to";
                return;
            }
            if (!($routing < 3 || $routing == 8 || $routing == 13)) {
                log "info", 3: "raised interrupt %d to %s",
                    $routing, SIM_object_name($irq_dev.obj);
                $irq_dev.simple_interrupt.interrupt($routing);
            } else {
                log "info", 3: "PIRQ route to %d not allowed", $routing;
            }
        }
        method lower() {
            if ($irqen == 1) {
                log "info", 3: "irq disabled, PIRQ not routed to 8259";
                return;
            }
            if ($irq_dev.obj == NULL) {
                log "error": "no irq_dev to forward PIRQ to";
                return;
            }
            if (!($routing < 3 || $routing == 8 || $routing == 13)) {
                log "info", 3: "lowered interrupt %d to %s",
                    $routing, SIM_object_name($irq_dev.obj);
                $irq_dev.simple_interrupt.interrupt_clear($routing);
            } else {
                log "info", 3: "PIRQ route to %d not allowed", $routing;
            }
        }
    }
    register sirq_cntl size 1 @ 0x64 "Serial IRQ Control Register" {
        parameter hard_reset_value = 0x10;
        field sirqen[7]   is (read_write) "Serial IRQ Enable";
        field sirqmd[6]   is (read_write) "Serial IRQ Mode Select";
        field sirqsz[5:2] is (read_only)  "Serial IRQ Frame Size";
        field sfpw[1:0]   is (read_write) "Start Frame Pulse Width";
    }
    register pic_b1h size 1 @ 0xb1 is (unimplemented) "ICW[2:4]/OCW1";
    register sirq_levels[21] size 1 "Serial interrupt request levels" {
        /* Active low */
        is unmapped;
        parameter hard_reset_value = 1;
    }
}

template pirq_input {
    parameter irq_index default undefined;

    implement signal {
        method signal_raise() {
            call $pci_config.pirq_rout[$irq_index].raise();
        }
        method signal_lower() {
            call $pci_config.pirq_rout[$irq_index].lower();
        }
    }
}

template pirq_input_legacy {
    implement simple_interrupt {
        method interrupt(int level) {
            if (level < 8)
                call $pci_config.pirq_rout[level].raise();
        }
        method interrupt_clear(int level) {
            if (level < 8)
                call $pci_config.pirq_rout[level].lower();
        }
    }
}
