/*
  ich-smbus.dml - SMBus

  Â© 2024 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

param uses_i2c_v2               = true;
import "ich-smbus-common.dml";

// we need to separate master and slave side to ensure they get individual
// endpoints. Otherwise the smbus controller could not write to itself
port master_side {
    connect i2c_link_v2 {
        param documentation = "The I2C-bus.";
        param configuration = "optional";
        interface i2c_master_v2 {
            param required = true;
        }
        interface i2c_slave_v2 {
            param required = true;
        }
    }

    implement i2c_master_v2 {
        method acknowledge(i2c_ack_t ack) {
            if (smbus_func.ma_state.val == SMBus_Master_St_Write_Requested) {
                log info, 4:
                    "i2c master IF: write acknowledge with ack=%d", ack;
                smbus_func.ma_event.val = SMBus_Master_Ev_Write_Response;
                smbus_func.ma_write_res.val = cast(ack, uint8);
                smbus_func.proc_cmd_event.post(0.0);
            }
            else if (smbus_func.ma_state.val == SMBus_Master_St_Started){
                log info, 4:
                    "i2c master IF: start acknowledge with ack=%d", ack;
                smbus_func.ma_event.val = SMBus_Master_Ev_Start_Response;
                smbus_func.ma_start_res.val = cast(ack, uint8);
                smbus_func.proc_cmd_event.post(0.0);
            } else {
                log error:
                    "i2c master IF: unexpected acknowledge with ack=%d", ack;
            }
        }

        method read_response(uint8 value) {
            log info, 4:
                "i2c master IF: a read response with 0x%02x", value;
            smbus_func.ma_event.val = SMBus_Master_Ev_Read_Response;
            smbus_func.ma_read_byte.val = value;
            smbus_func.proc_cmd_event.post(0.0);
        }
    }
}

port slave_side {
    connect i2c_link_v2 {
        param documentation = "The I2C-bus.";
        param configuration = "optional";
        interface i2c_master_v2 {
            param required = true;
        }
        interface i2c_slave_v2 {
            param required = true;
        }
    }

    implement i2c_slave_v2 {
        method start(uint8 address) {
            log info, 4:
                "i2c slave IF: a start request with an address 0x%x", address;
            if ((address >> 1) != smbus_func.rcv_slva.val) {
                slave_side.i2c_link_v2.i2c_master_v2.acknowledge(I2C_noack);
            } else {
                if (smbus_func.sl_state.val != SMBus_Slave_St_Idle) {
                    log spec_viol, 3:
                        "slave state %d is not idle state when a start request",
                        smbus_func.sl_state.val;
                }
                slave_side.i2c_link_v2.i2c_master_v2.acknowledge(I2C_ack);
                smbus_func.sl_state.val = SMBus_Slave_St_Started;
            }
        }

        method read() {
            log info, 4: "i2c slave IF: a read request";
            // No data to be read, so always gives 0
            if (smbus_func.sl_state.val != SMBus_Slave_St_Started) {
                log spec_viol, 3:
                    "slave state %d is not started when a read request",
                    smbus_func.sl_state.val;
            }
            slave_side.i2c_link_v2.i2c_master_v2.read_response(0);
            smbus_func.sl_state.val = SMBus_Slave_St_Idle;        
        }


        method write(uint8 value) {
            log info, 4:
                "i2c slave IF: a write request with a byte 0x%x", value;
            if (smbus_func.sl_state.val != SMBus_Slave_St_Started) {
                log spec_viol, 3:
                    "slave state %d is not started when a write request",
                    smbus_func.sl_state.val;
            }
            smbus_func.sl_wr_repeats.val++;
            if (smbus_func.sl_wr_repeats.val == 1)
                smbus_func.slv_data.data_msg0.val = value;
            else {
                smbus_func.slv_data.data_msg1.val = value;
                smbus_func.sl_wr_repeats.val = 0;
            }
            slave_side.i2c_link_v2.i2c_master_v2.acknowledge(I2C_ack);
        }

        method stop() {
            log info, 4:
                "i2c slave IF: stop";
            smbus_func.sl_state.val = SMBus_Slave_St_Idle;
        }
        
        method addresses() -> (attr_value_t) {
            return SIM_make_attr_list(2, SIM_make_attr_int64(smbus_func.rcv_slva.val*2)
                                     , SIM_make_attr_int64(smbus_func.rcv_slva.val*2+1));
        }
    }
}

bank smbus_func {
    method i2c_start(uint8 addr) {
        master_side.i2c_link_v2.i2c_slave_v2.start(addr);
    }

    method i2c_restart(uint8 addr) {
        master_side.i2c_link_v2.i2c_slave_v2.stop();
        master_side.i2c_link_v2.i2c_slave_v2.start(addr);
    }
    
    method i2c_write(uint8 value) {
        master_side.i2c_link_v2.i2c_slave_v2.write(value);
    }

    method i2c_read() {
        master_side.i2c_link_v2.i2c_slave_v2.read();
    }

    method i2c_stop() {
        master_side.i2c_link_v2.i2c_slave_v2.stop();
    }

    method i2c_on_read_request() {
        action_in_read_ack_requested(false);
    }
}
