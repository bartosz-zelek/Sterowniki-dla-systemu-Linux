local $system = (params.get system:name)
local $original_prompt_re = (params.get linux:grml:prompt:original_re)
local $graphics_console = (params.get graphics_console).con
local $serial_console = (params.get serial_console).con
local $enter_uefi_menu = (params.get firmware:uefi:enter_menu)
local $enter_grub_menu = (params.get firmware:grub:enter_menu)
local $enter_grub_shell = (params.get firmware:grub:enter_shell)
local $agent_start = (params.get simics:simics_agent:auto_start)
local $agent_args = (params.get simics:simics_agent:arguments)
local $agent_name = (params.get simics:simics_agent:name)
local $rt_mode_after_login = (params.get simics:real_time_mode_after_login)
local $grub_param_serial = (params.get linux:grml:boot_parameters:serial)
local $grub_param_extra = (params.get linux:grml:boot_parameters:extra)
local $configure_root = (params.get linux:grml:configure_root)
local $stop_after_login = (params.get simics:stop_after_login)
local $create_osa_top = (params.get simics:os_awareness:create_top)
local $osa_params = (params.get simics:os_awareness:tracker_params)
local $osa_tracker = (params.get simics:os_awareness:tracker_type)

local $grub_params = $grub_param_serial + " " + $grub_param_extra

# This is the prompt that will be used after logging in. The prompt is simple to
# waiting for it without using regular expressions.
local $prompt = "# "

# This hap is used to signal that auto-login is done.
@hap_id = simics.SIM_hap_add_type("Firststeps_Logged_In", "", "", None,
                                  "Hap triggered when logging in", 0)

# Set a time quantum that provides reasonable performance
set-time-quantum cell = $system.cell seconds = 0.0001

if $create_osa_top {
        load-module os-awareness
        local $osa = (create-os-awareness name = $system + ".software")
        if ($osa_params) {
                $osa.load-parameters file = $osa_params
        } else if ($osa_tracker) {
                $osa.insert-tracker tracker = $osa_tracker
        }
}

if $enter_uefi_menu {
        script-branch "firststeps-uefi-enter-menu" {
                bp.console_string.wait-for $serial_console "Press ESC to enter BIOS menu"
                $serial_console.input -e "Esc"
        }
}

script-branch "firststeps-grub-init" {
        local $gfx_bp = "%simics%/targets/qsp-x86/images/grml64-full_2024.02.iso.serial.console.brk"
        local $con = $graphics_console

        bp.time.wait-for seconds = 5.0
        bp.gfx.wait-for object = $con filename = $gfx_bp interval = 0.1 timeout = 10.0

        if $enter_grub_menu {
                $con.input "e\n"
        } else if $enter_grub_shell {
                $con.input "c\n"
        } else {
                $con.input "e\n"
                $con.input -e "Down"
                bp.time.wait-for seconds = 0.01
                $con.input -e "Down"
                bp.time.wait-for seconds = 0.01
                $con.input -e "Down"
                bp.time.wait-for seconds = 0.01
                $con.input -e "Down"
                bp.time.wait-for seconds = 0.01
                $con.input -e "C-e"
                bp.time.wait-for seconds = 0.01
                $con.input -e "C-e"
                bp.time.wait-for seconds = 0.01
                $con.input $grub_params
                bp.time.wait-for seconds = 0.01
                $con.input -e "C-x"
        }
}

if $configure_root {
        script-branch "firststeps-linux-init" {
                local $con=$serial_console
                alias wait ($system + ".serconsole.con.bp-wait-for-console-string")
                alias input $con.input
                
                # wait for first prompt
                wait -regexp $original_prompt_re

                # mount empty disk on /disk0
                input "mkdir /disk0\n"
                wait -regexp $original_prompt_re
                input ("mount -t ext4 /dev/disk/by-uuid/"
                       + "36b9aa00-39af-4490-a8f3-9c89cd263643"
                       + " /disk0 -o rw\n")
                wait -regexp $original_prompt_re

                # mount simics-agent image on /simics
                input "mkdir /simics\n"
                wait -regexp $original_prompt_re
                input ("mount -t vfat /dev/disk/by-uuid/31AB-5572"
                       + " /simics -o rw\n")
                wait -regexp $original_prompt_re

                # disable cursor blinking in graphics console since this
                # affects the performance of both terminals (SIMICS-21617).
                input "echo 0 > /sys/class/graphics/fbcon/cursor_blink\n"
                wait -regexp $original_prompt_re

                # put customizations in /root/.bashrc
                local $bashrc = "/root/.bashrc"
                input "echo 'alias simics-agent=/simics/simics_agent_x86_linux64' >> " + $bashrc + "\n"
                wait -regexp $original_prompt_re
                local $set_ps1 = "echo 'export PS1=\"" + $prompt + "\"'"
                input $set_ps1 + " >> " + $bashrc + "\n"
                wait -regexp $original_prompt_re

                # start a new bash to get the additional settings
                input "bash\n"
                wait $prompt

                # input an extra new-line to get passed some out-of-order GRML output
                input "\n"
                wait $prompt

                # start a simics-agent
                if $agent_start {
                        $cmd = "simics-agent"
                        $cmd = $cmd + " " + $agent_args
                        $cmd = $cmd + " --name=" + $agent_name
                        $cmd = $cmd + " &\n"
                        input $cmd
                        wait -regexp "[\\d*].*$"
                        wait -regexp $prompt
                }

                # send hap to signaling that login is ready.
                @simics.SIM_hap_occurred(hap_id, None, 0, [])
        }
}

if $rt_mode_after_login {
        script-branch "firststeps-set-real-time-mode" {
                bp.hap.wait-for name = Firststeps_Logged_In
                enable-real-time-mode
        }
}

if $stop_after_login {
        bp.hap.break -once name = Firststeps_Logged_In
}
