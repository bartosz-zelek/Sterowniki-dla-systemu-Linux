run-script "%simics%/targets/common/ethernet-setup.yml" namespace = network:switch
local $ethernet_switch = (params.get network:switch:ethernet_switch:name)

# Run single machine hardware setup
foreach $i in (range `params['num_machines']`) {
        local $ns = "qsp[%d]" % $i
        params.setdefault ("%s:machine:hardware:name" % $ns) ("qsp%d" % $i)
        run-script "%script%/clear-linux-setup.yml" namespace = "%s:machine" % $ns
        connect ($ethernet_switch.get-free-connector) (params.get "%s:machine:hardware:output:eth_slot" % $ns)

        ## This check avoids low-memory issues that are very difficult to diagnose.
        ## See SIMICS-17854
        if (params.get ("%s:machine:hardware:memory_megs" % $ns)) < 4096 {
                interrupt-script -error (("*** The value of memory_megs (%d) is lower than "
                                          + "the minimum of 4096") % [$memory_megs])
        }
}

instantiate-components $ethernet_switch

# Create single service node for the multi-machine
run-script "%simics%/targets/common/sn-setup.yml" namespace = network:service_node

local $service_node = (params.get network:service_node:name)
local $sn = ($service_node.sn)

# Run single machine software setup
foreach $i in (range `params['num_machines']`) {
        local $ns = "qsp[%d]" % $i
        $ip_address = ($sn.get-ip-address-from-pool)

        ($sn.add-host
         name = (params.get "%s:machine:hardware:name" % $ns)
         ip = $ip_address
         domain = (params.get network:service_node:dhcp:domain)
         mac = (params.get "%s:machine:hardware:output:mac_address" % $ns))
}
