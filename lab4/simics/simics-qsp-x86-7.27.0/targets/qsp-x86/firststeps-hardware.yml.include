load-module pci-comp
load-module std-comp

local $cpu_class_arg = "processor-" + (params.get processor:class)

# Load correct component to create the processor component
load-module class = $cpu_class_arg

load-module x58-ich10-comp
load-module memory-comp
load-module textcon
load-module graphcon
load-module console-components

local $machine_name = (params.get system:name)
if object-exists $machine_name {
        (interrupt-script -error
         (("*** It looks like the machine '%s' already exists. Please specify"
           + " a different machine name with the 'machine:hardware:name'"
           + " parameter.") % [$machine_name]))
}
$system = (create-chassis-qsp-x86 name = $machine_name)

local $lan_bios_image = (params.get firmware:lan_bios)
if not $lan_bios_image {
        $lan_bios_image = ""
}

local $mac_address = (params.get nic:mac_address)
if $mac_address == "auto" {
        $mac_address = (get-auto-mac-address)
}
params.setdefault output:mac_address $mac_address

@import time

# Use current host time: bad for repeatability, good for usability
local $rtc_time = (params.get rtc:time)
if $rtc_time == "auto" {
        $rtc_time = `time.strftime("%Y-%m-%d %H:%M:%S")`
}

run-script "%script%/apic_bus_helper.py"

# SIMICS-21732
local $lvl = sim->deprecation_level
sim->deprecation_level = 0

# motherboard
local $mb = (create-motherboard-x58-ich10
             $system.mb
             rtc_time = $rtc_time
             acpi = TRUE
             break_on_reboot = (params.get simulation:enable_break_on_reboot)
             bios = (params.get firmware:bios)
             lan_bios = $lan_bios_image
             mac_address = $mac_address
             spi_flash = (params.get firmware:spi_flash)
             system_clock = (params.get simulation:system_clock:enable)
             system_clock_class = (params.get simulation:system_clock:class)
             apic_bus_class = (params.get apic_bus:class))

sim->deprecation_level = $lvl
local $southbridge = $mb.sb
params.setdefault output:eth_slot $southbridge.eth_slot

# processors
local $create_processor = "create-" + $cpu_class_arg
local $heterogenous = (in-list "n_cores_big"
                       (get-command-args $create_processor))

local $num_threads_small = (params.get processor:num_threads_small)
local $num_cores_small = (params.get processor:num_cores_small)
local $use_vmp = (params.get simulation:use_vmp)
local $detected_apic_bus_class = NIL
local $cpu = NIL

foreach $count in (range (params.get processor:num_slots)) {
	if $heterogenous  {
                if $num_threads_small == 0 {
                        $num_threads_small = 1
                }
		$cpu = (exec $create_processor
			+ " $mb.cpu + $count"
			+ " freq_mhz = " + (params.get processor:freq_mhz)
			+ " apic_freq_mhz = " + (params.get processor:apic_freq_mhz)
			+ " use_vmp = $use_vmp"
			+ " cpi = " + (params.get processor:cpi)
			+ " n_cores_big = " + (params.get processor:num_cores)
			+ " n_cores_small = $num_cores_small"
			+ " n_threads_big = (params.get processor:num_threads)"
			+ " n_threads_small = $num_threads_small")
	} else {
                if $num_cores_small > 0 or $num_threads_small > 0 {
                        (interrupt-script -error
                          ("*** The cpu component class %s is not"
                           + " heterogenous and hence does not support"
                           + " positive values for the num_cores_small"
                           + " (%d) and num_threads_small (%d)"
                           + " parameters.") % [$cpu_comp_class,
                                                $num_cores_small,
                                                $num_threads_small])
                }
		$cpu = (exec $create_processor
			+ " $mb.cpu + $count"
			+ " freq_mhz = " + (params.get processor:freq_mhz)
			+ " apic_freq_mhz = " + (params.get processor:apic_freq_mhz)
			+ " use_vmp = $use_vmp"
			+ " cpi = " + (params.get processor:cpi)
			+ " n_cores = " + (params.get processor:num_cores)
			+ " n_threads = " + (params.get processor:num_threads))
	}

        if (params.get apic_bus:class) == "auto_apic_bus" {
                python "from simics import SIM_get_object"

                local $next_detected_apic_bus_class = (python ("extract_needed_apic_bus_class('" + $cpu + "')"))
                if $detected_apic_bus_class {
                        if $next_detected_apic_bus_class != $detected_apic_bus_class {
                                echo ("Error: Processors in '" + $mb + "' require different apic bus classes.")
                                echo ("       Previously detected bus class is " + $detected_apic_bus_class)
                                echo ("       bus class detected on " + $cpu + " is " + $next_detected_apic_bus_class)
                                interrupt-script
                        }
                } else {
                        # set apic bus class to what the first apic told us
                        python ("SIM_get_object('" + $mb + "').iface.component.get_slot_value('apic_bus').__class_name__ = '"
                                + $next_detected_apic_bus_class + "'")
                }
                $detected_apic_bus_class = $next_detected_apic_bus_class
        }
        connect $mb.socket[$count] $cpu.socket
}

# memory
local $dimm = (create-simple-memory-module $mb.memory
               memory_megs = (params.get memory_megs))
               connect $mb.dimm[0] $dimm.mem_bus

# GPU
local $vga = (create-pci-accel-vga-v2-comp name = $mb.gpu bios = "")
connect $mb.nb.gpu $vga.pci_bus

# consoles
if (params.get consoles:gfx_con:create) {
        local $visible = (params.get consoles:gfx_con:show)
        local $console = (create-gfx-console-comp $system.console
                          visible = $visible)
        connect $console.mouse $southbridge.mse_console
        connect $console.keyboard $southbridge.kbd_console
        connect $console.device $vga.console
        params.setdefault output:graphics_console $console
}

if (params.get consoles:con0:create) {
        local $visible = (params.get consoles:con0:show)
        local $console = (create-txt-console-comp $system.serconsole
                          visible = $visible
                          bg_color = (params.get consoles:con0:bg_color)
                          fg_color = (params.get consoles:con0:fg_color)
                          width = (params.get consoles:con0:width)
                          height = (params.get consoles:con0:height))
        connect $console.serial $southbridge.serial[0]
        params.setdefault output:serial_console $console
}

# Create disks and CD-ROM
params.setdefault storage:disk0:name ($system + ".disk0")
params.setdefault storage:disk0:slot ($mb + ".sb.sata_slot[0]")
if (params.get storage:disk0:create) {
        (run-script "%simics%/targets/common/disk-ide-sata.yml"
         namespace = storage:disk0)
}
params.setdefault storage:disk1:name ($system + ".disk1")
params.setdefault storage:disk1:slot ($mb + ".sb.sata_slot[1]")
if (params.get storage:disk1:create) {
        (run-script "%simics%/targets/common/disk-ide-sata.yml"
         namespace = storage:disk1)
}

params.setdefault storage:usb_disk:device:name ($system + ".usb_disk")
params.setdefault storage:usb_disk:device:slot $system

if (params.get storage:usb_disk:device:create) {
        run-script "%simics%/targets/common/usb-disk.yml" namespace = storage:usb_disk:device
}

# USB Tablet
if (params.get usb_tablet:create) {
        load-module usb-comp
        $tablet = (create-usb-tablet-component $system.tablet)
        $tablet.connect-to $system.mb.sb
        if (params.get output:graphics_console) {
                $tablet.connect-to $console
        }
}

instantiate-components $system

# Disable irrelevant logs and warnings
if (params.get simulation:silence_logs) {
        log-type -disable unimpl
        log-type -disable spec-viol
        sim->deprecation_level = 0

        # Disable logging caused by reading from non-existent MSR
        foreach $cpu in ($mb->cpu_list) {
                log-filter object = $cpu substr = "Reading from unknown MSR"
        }
}

