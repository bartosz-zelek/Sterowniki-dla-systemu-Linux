if sim->build_id < 7035 {
    interrupt-script -error (
            "*** The riscv package requires Simics-Base"
            + " version 7.19.0 or newer.")
}

## Create hardware
run-script "%script%/hardware.yml" namespace = hardware
## Pick up the name of the hardware created
local $system  = (params.get hardware:output:system)
local $console = (params.get hardware:output:console)

instantiate-components [$system, $console]

local $dtb_address = (params.get software:firmware:dtb_address)
$system->system_info = (params.get system_info)

$system.phys_mem.load-file filename = (params.get software:firmware:dtb_image) offset = $dtb_address
$system.phys_mem.load-file filename = (params.get software:linux:kernel_image) offset = (params.get software:linux:kernel_address)

# Fill in info data for open-sbi fw_dynmaic boot loader
$system.phys_mem.set address = 0x1000 size = 8 value = 0x4942534f  # Magic
$system.phys_mem.set address = 0x1008 size = 8 value = 0x0         # Info version
$system.phys_mem.set address = 0x1010 size = 8 value = (params.get software:linux:kernel_address)
$system.phys_mem.set address = 0x1018 size = 8 value = 0x1         # Start kernel in S-mode

local $entry = ($system.hart[0].load-binary (params.get software:firmware:bl_image))
foreach $cpu in ($system->cpu_list) {
        $cpu.set-pc $entry
        write-reg $cpu a1 $dtb_address
        write-reg $cpu a2 0x1000
}

if (params.get software:linux:auto_login) {
    script-branch {
        bp.console_string.wait-for object = $system.console.con string = "buildroot login"
        $system.hart[0].bp-wait-for-time 1
        $system.console.con.input "root\r\n"
    }
}

# Set cpu switch time to something reasonable (100us)
cpu-switch-time seconds = 0.0001
