/*
  sata-bm.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

connect ide[2] {
    parameter documentation = "Connections to two IDE controllers";
    interface ide_dma_v2 {
        parameter required = true;
    }
}

bank bm {
    parameter desc = "bus master IDE I/O registers";
    parameter overlapping = true;
    parameter partial = true;

    parameter function = 0;
    parameter byte_order = "little-endian";
    parameter register_size = 1;

    group ch [2] {
        register bmic_old @ undefined {
            parameter configuration = "pseudo";
            field start [0:0];
            field rwc   [3:3];
        }

        register dma_active @ undefined;
        register bmidea @ undefined;

        register bmic size 1 @ ($i * 8) {
            parameter desc = "Command Register";
            field start [0:0] {
                method write(value) {
                    $bmic_old.start = $this;
                    $this = value;
                }
            }
            field rwc   [3:3] {
                method write(value) {
                    $bmic_old.rwc = $this;
                    $this = value;
                }
            }
            method after_write(mop) {
                if ($rwc != $bmic_old.rwc && $dma_active == 1)
                    log "spec_violation", 1, 0:
                    "bmic.rwc changed during DMA operation";

                if ($start && $bmic_old.start == 0) {
                    log "info", 2, 0: "bus master operation enabled";

                    $ide[$i].ide_dma_v2.dma_ready();
                    $bmidea = 1;
                    $dma_active = 1;
                } else if (!$start
                           && $bmidea == 1
                           && $dma_active == 1) {
                    log "info", 1, 0: "bus master abort";
                    $ide[$i].ide_dma_v2.dma_not_ready();
                    $bmidea = 0;
                    $dma_active = 0;
                } else if (!$start
                           && $bmidea == 1) {
                    $bmidea = 0;
                }
            }
        }
        register res1 @ ($i*8 + 1) is (ignore);
        register bmis @ ($i*8 + 2) {
            parameter desc = "Bus Master IDE Status Register";
            field prd_is [7:7] is (write_1_clears);
            field d1dma  [6:6] is (read_write);
            field d0dma  [5:5] is (read_write);
            field intr   [2:2] is (write_1_clears);
            field err    [1:1] is (write_1_clears);
            field act    [0:0] is (read_only);
            method before_read (memop) {
                    $act = $dma_active;
            }
        }
        register res2 @ ($i*8 + 3) is (ignore);
        register bmid size 4 @ ($i * 8 + 4) {
            parameter desc = "Bus Master IDE Descriptor Table Pointer";
            method write(value) {
                $this = value & ~3;
            }
        }
    }
}

implement bus_master_ide {
    method transfer_dma(int channel, int drive, uint8 *buf, uint32 len)
        -> (uint32 timing) {
        local read_or_write_t rw =
            ($bm.ch[channel].bmic.rwc == 0) ? Sim_RW_Read : Sim_RW_Write;

        if (buf)
            log "info", 3, 0: "bus master DMA %s (%s), length = 0x%x",
                (rw == Sim_RW_Read) ? "read" : "write",
                channel != 0 ? "secondary" : "primary", len;
        else
            log "info", 3, 0: "bus master DMA (%s) transfer finished",
                channel != 0 ? "secondary" : "primary";

        if (buf != NULL) {
            local uint32 mrpba;
            local uint32 count;
            local bool eot;
            local bool all_descriptors_used = false;
            local uint32 next_prd_addr = $bm.ch[channel].bmid;

            while (len > 0) {
                local uint32 transfer_count;
                local uint32 prd_word[2];
                local exception_type_t ex;

                /* Read a PRD from physical memory */
                call $pci_value_from_memory(
                    Sim_Addr_Space_Memory, next_prd_addr, 4)
                    -> (prd_word[0], ex);
                if (ex != Sim_PE_No_Exception) {
                    log "error":
                        "unknown exception (%d) on reading PRD at address 0x%x",
                        cast (ex, int), next_prd_addr;
                    return;
                }

                call $pci_value_from_memory(
                    Sim_Addr_Space_Memory, next_prd_addr + 4, 4)
                    -> (prd_word[1], ex);
                if (ex != Sim_PE_No_Exception) {
                    log "error":
                        "unknown exception (%d) on reading PRD at address 0x%x",
                        cast (ex, int), next_prd_addr + 4;
                    return;
                }

                /* Parse */
                mrpba = prd_word[0] & 0xFFFFFFFE;
                count = prd_word[1] & 0xFFFE;
                if (count == 0)
                    count = 64 * 1024;
                eot = prd_word[1][31];
                if (eot && len == count) {
                    all_descriptors_used = true;
                } else if (eot && len > count) {
                    log "error", 1, 0: "disk transfer larger than DMA transfer";
                }
                transfer_count = (count > len) ? len : count;

                log "info", 3: 
                    "bus master DMA %s (%s) (address 0x%x, bytes 0x%x)",
                    (rw == Sim_RW_Read) ? "read" : "write",
                    channel != 0 ? "secondary" : "primary",
                    mrpba, transfer_count;

                /* Perform actual transfer */
                if (rw == Sim_RW_Read) {
                    /* Read from main memory to device */
                    call $pci_data_from_memory(
                        Sim_Addr_Space_Memory,
                        buf, mrpba,
                        transfer_count) -> (ex);
                } else {
                    /* Write to main memory from device */
                    call $pci_data_to_memory(
                        Sim_Addr_Space_Memory,
                        buf, mrpba, transfer_count) -> (ex);
                }

                if (ex != Sim_PE_No_Exception) {
                    log "error":
                        "%s (%d) on %s %s (%s) (address 0x%x, bytes %d)",
                        "unknown exception", cast (ex, int), "bus master DMA",
                        (rw == Sim_RW_Read) ? "read" : "write",
                        channel != 0 ? "secondary" : "primary",
                        mrpba, transfer_count;
                    return;
                }

                /* Step variables */
                len -= transfer_count;
                buf += transfer_count;
                next_prd_addr += 8;
            }

            if (all_descriptors_used) {
                $bm.ch[channel].bmidea = 0;
                $bm.ch[channel].dma_active = 0;
            } else {
                log "info", 3, 0:
                "all descriptors not used, BMIDEA still set";
            }

            log "info", 3, 0: "bus master DMA transfer complete";
        } else {
            $bm.ch[channel].dma_active = 0;
        }

        timing = 0; // not used (obsolete)
    }

    method interrupt(int channel) -> (int handled) {
        local bool ide_mode;

        handled = 0;
        $bm.ch[channel].bmis.intr = 1;
        inline $sata_is_ide_controller() -> (ide_mode);
        if (ide_mode && $pci_config.class_code[channel * 2] == 1) {
            log "info", 3: "bus master IDE interrupt in native mode, raise PCI interrupt";
            call $pci_config.pci_raise_interrupt();
            handled = 1;
        } else if (!ide_mode)
            log "error": "received bus master IDE interrupt in non-IDE mode";
    }
    method interrupt_clear(int channel) -> (int handled) {
        local bool ide_mode;

        handled = 0;
        inline $sata_is_ide_controller() -> (ide_mode);
        if (ide_mode && $pci_config.class_code[channel * 2] == 1) {
            log "info", 3: "bus master IDE interrupt in native mode, lower PCI interrupt";
            call $pci_config.pci_lower_interrupt();
            handled = 1;
        } else if (!ide_mode)
            log "error": "received bus master IDE interrupt in non-IDE mode";
    }
}
