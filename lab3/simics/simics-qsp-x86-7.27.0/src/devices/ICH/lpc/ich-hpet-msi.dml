/*
  ich-hpet-msi.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "simics/arch/x86.dml";
import "io-apic.dml";
import "hpet-msi.dml";
import "io-memory.dml";

// ICH10 and later has this functionality
parameter lpc_has_hpet_bdf default false;

if ($lpc_has_hpet_bdf) {
    bank pci_config {
        register hpet_bdf[8] size 2 @ (0x70 + $i * 0x2) is (read_write)
            "HPET n Bus Device Function.";
    }

    implement hpet_msi {
        method send(int hpet_num, physical_address_t addr, uint32 val) {
            log "info", 3: "sending HPET-%d MSI (0x%x) -> 0x%lx",
                hpet_num, val, addr;

            local pci_memory_transaction_t trans;
            memset(&trans, 0, sizeof(trans));

            local layout "little-endian" {
                uint32 val;
            } msi;
            msi.val = val;

            SIM_set_mem_op_physical_address(&trans._internal_s, addr);
            SIM_set_mem_op_type(&trans._internal_s, Sim_Trans_Store);
            trans._internal_s.size = 4;
            trans._internal_s.block_STC = 1;
            trans._internal_s.may_stall = 0;

            SIM_set_mem_op_initiator(&trans._internal_s,
                                     Sim_Initiator_PCI_Device, $dev.obj);
            trans._internal_s.real_address = cast(&msi.val, void *);

            trans._internal_bus_address = $pci_config.hpet_bdf[hpet_num];

            local map_info_t info;
            memset(&info, 0, sizeoftype(map_info_t));
            info.function = Sim_Addr_Space_Memory;
        
            local exception_type_t ex;
            ex = $pci_bus.io_memory.operation(&trans._internal_s, info);
            if (ex == Sim_PE_No_Exception)
                return;
            if (ex == Sim_PE_IO_Not_Taken) {
                log "info", 1: "Master Abort while sending MSI to %lx", addr;
            } else if (ex == Sim_PE_IO_Error) {
                log "info", 1: "Target Abort while sending MSI to %lx", addr;
            } else {
                log "info", 1: "Unknown exception while sending MSI to %lx", 
                    addr;
            }
        }
    }
}

