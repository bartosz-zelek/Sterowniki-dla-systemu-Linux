/*
  Â© 2022 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

/*
----------------------------------------------------------------------------------

  p-toggle : A toggle for the panel in DML

  Configured using
  - x, y
  - p-output-image object that holds images, connected over uint64_state
    - Image #0: first state
    - Image #1: changing state
    - Image #2: second state
    (size of image retrieved from the object)
  - object to communicate the current state to  

*/

dml 1.4;

device p_toggle;

param desc = "panel button";

param documentation = "Button for use in the display panel.";

import "utility.dml";

import "simics/simulator-api.dml";
import "simics/model-iface/state.dml"; 

import "p-control-button-interface.dml";
import "p-image-properties-interface.dml";


//----------------------------------------------------------------------
//
// Extent in the drawing canvas: X, Y, width, height
// 
// All values retrieved from the connected output image
// Only cached here. 
//
//----------------------------------------------------------------------

template report_uint64_attr {
    session uint64 val;
    is (read_only_attr);
    param type= "i";          
    method get() -> (attr_value_t) {
        return SIM_make_attr_uint64(this.val);
    }        
}

attribute x is (report_uint64_attr) "X coordinate of the toggle";
attribute y is (report_uint64_attr) "Y coordinate of the toggle";
attribute width  is (report_uint64_attr) "Width of toggle";
attribute height is (report_uint64_attr) "Height of toggle";


//----------------------------------------------------------------------
//
// Connect to the p-output-image
//   Use fixed roles for images number 0 (idle) and 1 (active)
// 
//----------------------------------------------------------------------

connect output_image  {
    param desc = "p-output-image object to use to draw the button";
    param configuration = "optional";
    param internal = false; 
    interface uint64_state; 
    interface p_image_properties;

    method set_image_on() {
        if(obj) {
            log info, 3 : "Driving toggle image to on";
            uint64_state.set(2);
        } else {
            log error : "No image object configured (%s)", this.qname;
        }
    }

    method set_image_change() {
        if(obj) {
            log info, 3 : "Driving toggle image to change state";
            uint64_state.set(1);
        } else {
            log error : "No image object configured (%s)", this.qname;
        }
    }

    method set_image_off() {
        if(obj) {
            log info, 3 : "Driving toggle image to off";
            uint64_state.set(0);
        } else {
            log error : "No image object configured (%s)", this.qname;
        }
    }

    method get_output_image_extents() -> () {
        if(this.obj != NULL) {
            // Change cached values
            x.val = p_image_properties.get_x();
            y.val = p_image_properties.get_y();
            width.val = p_image_properties.get_width();
            height.val = p_image_properties.get_height();
            log info, 3 : "Retrieved extents from output image: x=%d y=%d width=%d height=%d",
                          x.val, y.val, width.val, height.val;            
        } else {
            log info, 3 : "No output-image configured, cannot get extents!";
            x.val = 0;
            y.val = 0;            
            width.val  = 0;
            height.val = 0;        
        }
    }

     // Utility to send the right image 
    method set_image_from_state() {
        if(toggle_state.val == false) {
            set_image_off();
        } else {
            set_image_on();
        }
    }            
}

//----------------------------------------------------------------------
//
// State of the toggle, attribute
// - More than just a "saved bool" since there is documentation attached
//
// - Make sure to initialize the receiver of the toggle values as a 
//   
// 
//----------------------------------------------------------------------
attribute toggle_state is (bool_attr, init) {
    param documentation = "Current state of toggle, on or off (on=True)";
    param configuration = "optional";
    method init() {
      this.val = false;  // Init to false
    }
}

//----------------------------------------------------------------------
//
// Connect to the signal target
// - When the toggle changes state, send corresponding lower or raise 
// 
//----------------------------------------------------------------------

connect output  {
    param desc = "output value, using signal interface";
    param configuration = "optional";
    param internal = false; 
    interface uint64_state; 

    // Send the toggle state to the receiver
    // -  on = true  = 1
    // - off = false = 0
    method send_toggle_state() {
        // And send to the connected object, if there is one
        if(obj) {
            local uint64 val = toggle_state.val ? 1 : 0;
            log info, 3 : "Sending toggle state (%d)", val;
            uint64_state.set(val);
        } else {
            log info, 2 : "No object to communicate state to (%s)", this.qname;
        }
    }
}


//----------------------------------------------------------------------
//
// The button control interface, as interpreted by a toggle
// 
//----------------------------------------------------------------------
port control {
    implement p_control_button {

        // Is this a hit in this button?
        method hit(int px, int py) -> (bool) {
            if(px < x.val) return false;
            if(py < y.val) return false;            
            if(px >= x.val + width.val) return false;
            if(py >= y.val + height.val) return false;            
            log info, 3 : "Hit in this button (coordinate %d,%d)!", px, py;            
            return true;
        }

        // Draw the current state of the toggle 
        method initial_state() {
            log info, 3 : "initial state called";   

            // Communicate state to receiver
            output.send_toggle_state();
            // Set image to current state
            output_image.set_image_from_state();
        }

        // A button press process is starting targeting this button.
        method start_press() {
            log info, 3 : "start press called";                        
            // Set image to change state
            output_image.set_image_change();
        }

        // The press ended and we take action!
        method end_press() {
            log info, 3 : "End press called";            

            // Toggle state
            toggle_state.val = ! toggle_state.val; 
            log info, 3 : "Toggling state to %s", (toggle_state.val ? "on" : "off");

            // Communicate state
            output.send_toggle_state();
            output_image.set_image_from_state();
        }   

        // The press was cancelled
        method cancel_press() {
            log info, 3 : "Cancel press called";            

            // Communicate state
            output.send_toggle_state();
            output_image.set_image_from_state();
        }

        // Still pressed, but mouse pointer moved outside 
        method down_outside() {
            log info, 3 : "Outside the button";
            output_image.set_image_from_state();
        }

        // Still pressed, and inside the button
        method down_in() {
            log info, 3 : "Inside the button";                       
            output_image.set_image_change();
        }

    }
}

//----------------------------------------------------------------------
//
// post_init
// - Called after all attributes have been set
//   in this and other objects.  Safe to fetch size from
//   output_image object.
// 
//----------------------------------------------------------------------

method post_init () {
    output_image.get_output_image_extents();
    output.send_toggle_state();
}
