# Â© 2014 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.


import sys
from os.path import dirname, abspath, join
from simicsutils.host import host_type

simics_base = dirname(dirname(dirname(abspath(__file__))))
simics_packages = join(simics_base, host_type(), "bin", "py3")

def generate(fname, classes):
    with open(fname, 'w') as f:
        class_seq = ', '.join(map(repr, classes))
        f.write(f'''\
# Generated by Simics builder, do not edit!
import os
import sys
sys.path.append({repr(simics_packages)})
sys.path.append(os.path.join(
        os.getenv('SIMICS_PYTHON_PACKAGE'), {repr(host_type())}, 'bin',
        'py3', 'site-packages'))
sys.path.append(os.path.join(
        os.environ['SIMICS_BASE_PACKAGE'], {repr(host_type())}, 'bin',
        'data-directory', 'python'))
from dml import device
for cls in [{class_seq}]:
    device.gdb_load_dml_device(cls)
''')

if __name__ == '__main__':
    if len(sys.argv) < 3:
        raise Exception('Invalid arguments, usage: '
                        + '< program> target_file class0 [class1 ... classN]')
    f = sys.argv[1]
    cls = sys.argv[2:]
    generate(f, cls)
