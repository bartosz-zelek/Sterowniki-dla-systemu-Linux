# Â© 2025 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.

api_help_py = {
  'cli.CliError' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>CliError</b> &mdash; error in CLI command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>CliError(args)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This exception can be raised whenever a command can\n'
    'not complete successfully.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   CliError --- error in CLI command\n'
    '\n'
    'Synopsis\n'
    '   CliError(args)\n'
    '\n'
    'Description\n'
    '   This exception can be raised whenever a command can not complete\n'
    '   successfully.\n'
    '\n'
    '\n') ),

  'cli.arg' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>arg</b> &mdash; class defining a command argument</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>            arg(handler, name = "", spec = "1", default = None,\n'
    '            data = None, doc = "", expander = None, pars = [])</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a CLI command argument when using <fun>new_command</fun>. A\n'
    'complete explanation of <fun>new_command</fun> and <fun>arg</fun> is\n'
    "available in <cite>Simics Model Builder User's Guide</cite>, in the\n"
    '<cite>Adding New Commands</cite> chapter.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   arg --- class defining a command argument\n'
    '\n'
    'Synopsis\n'
    '               arg(handler, name = "", spec = "1", default = None,\n'
    '               data = None, doc = "", expander = None, pars = [])\n'
    '\n'
    'Description\n'
    '   Define a CLI command argument when using new_command. A complete\n'
    '   explanation of new_command and arg is available in Simics Model\n'
    "   Builder User's Guide, in the Adding New Commands chapter.\n"
    '\n'
    '\n') ),

  'cli.command_quiet_return' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>command_quiet_return</b> &mdash; suppress interactive messages from commands</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>command_quiet_return(value)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Use this class to return from a command that returns a value but should\n'
    'not print anything when used interactively.\n'
    '\n'
    '<param>value</param> should either be the value returned, or a function\n'
    'taking no arguments that returns the actual value.\n'
    '\n'
    'Note that <param>value</param> can only be of types directly supported by\n'
    'CLI.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.command_return</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   command_quiet_return --- suppress interactive messages from\n'
    '   commands\n'
    '\n'
    'Synopsis\n'
    '   command_quiet_return(value)\n'
    '\n'
    'Description\n'
    '   Use this class to return from a command that returns a value but\n'
    '   should not print anything when used interactively.\n'
    '\n'
    '   value should either be the value returned, or a function taking no\n'
    '   arguments that returns the actual value.\n'
    '\n'
    '   Note that value can only be of types directly supported by CLI.\n'
    '\n'
    'See Also\n'
    '   cli.command_return\n'
    '\n'
    '\n') ),

  'cli.command_return' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>command_return</b> &mdash; return interactive messages from commands</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>            command_return(message = None, value = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Use this class to return from a command that returns one value\n'
    '(<param>value</param>) but (may) print something else\n'
    '(<param>message</param>) when run interactive.\n'
    '\n'
    '<param>message</param> and <param>value</param> may both be functions that\n'
    'take no arguments and return the message (a string) or a value,\n'
    'respectively.\n'
    '\n'
    'If it is a function, <param>message</param> is only evaluated if needed.\n'
    '\n'
    'Note that <param>value</param> (or, when a function, its return value) can\n'
    'only be of types directly supported by CLI.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.command_quiet_return, cli.command_verbose_return</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   command_return --- return interactive messages from commands\n'
    '\n'
    'Synopsis\n'
    '               command_return(message = None, value = None)\n'
    '\n'
    'Description\n'
    '   Use this class to return from a command that returns one value\n'
    '   (value) but (may) print something else (message) when run\n'
    '   interactive.\n'
    '\n'
    '   message and value may both be functions that take no arguments and\n'
    '   return the message (a string) or a value, respectively.\n'
    '\n'
    '   If it is a function, message is only evaluated if needed.\n'
    '\n'
    '   Note that value (or, when a function, its return value) can only be\n'
    '   of types directly supported by CLI.\n'
    '\n'
    'See Also\n'
    '   cli.command_quiet_return, cli.command_verbose_return\n'
    '\n'
    '\n') ),

  'cli.command_verbose_return' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>command_verbose_return</b> &mdash; always print return messages from commands</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>command_verbose_return(message = None, value = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Use this class to return from a command that returns a value or message\n'
    'that should be printed even when used non-interactively, but not when used\n'
    'in an expression.\n'
    '\n'
    'The <param>value</param> and <param>message</param> parameters are\n'
    'identical to the same as for <class>cli.command_return</class>.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.command_return</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   command_verbose_return --- always print return messages from\n'
    '   commands\n'
    '\n'
    'Synopsis\n'
    '   command_verbose_return(message = None, value = None)\n'
    '\n'
    'Description\n'
    '   Use this class to return from a command that returns a value or\n'
    '   message that should be printed even when used non-interactively,\n'
    '   but not when used in an expression.\n'
    '\n'
    '   The value and message parameters are identical to the same as for\n'
    '   cli.command_return.\n'
    '\n'
    'See Also\n'
    '   cli.command_return\n'
    '\n'
    '\n') ),

  'cli.get_available_object_name' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_available_object_name</b> &mdash; return a non-allocated object name</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_available_object_name(prefix)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return an object name suitable for creating a new object (i.e., that has\n'
    'not been used yet) by adding a suffix to <param>prefix</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_available_object_name --- return a non-allocated object name\n'
    '\n'
    'Synopsis\n'
    '   get_available_object_name(prefix)\n'
    '\n'
    'Description\n'
    '   Return an object name suitable for creating a new object (i.e.,\n'
    '   that has not been used yet) by adding a suffix to prefix.\n'
    '\n'
    '\n') ),

  'cli.get_component_object' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_component_object</b> &mdash; return an object in a component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_component_object(cmp_obj, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return the object named <param>slot</param> inside the\n'
    '<param>cmp_obj</param> component. The <param>slot</param> parameter is\n'
    'the name by which the component knows the object, not the global name of\n'
    'the object.\n'
    '\n'
    'The function will raise a <em>CliError</em> if the object can not be found\n'
    'in the component.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>object or pre-object</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_component_object --- return an object in a component\n'
    '\n'
    'Synopsis\n'
    '   get_component_object(cmp_obj, slot)\n'
    '\n'
    'Description\n'
    '   Return the object named slot inside the cmp_obj component. The slot\n'
    '   parameter is the name by which the component knows the object, not\n'
    '   the global name of the object.\n'
    '\n'
    '   The function will raise a CliError if the object can not be found\n'
    '   in the component.\n'
    '\n'
    'Return Value\n'
    '   object or pre-object\n'
    '\n'
    '\n') ),

  'cli.global_cmds' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>global_cmds</b> &mdash; Namespace with functions to run global CLI commands</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>global_cmds.<i>wrapper_function(...)</i></pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The namespace provides wrapper Python functions to run global\n'
    'Simics CLI commands. A wrapper function name\n'
    'is usually the same as a name of the command it executes\n'
    'with hyphens replaced with underscores. The parameters of\n'
    'the wrapper functions are the same as of the corresponding command (again,\n'
    'with hyphens replaced with underscores). Command flags (the names of\n'
    'the corresponding function parameters start with an underscore)\n'
    'could be passes as Python Boolean values. In the rare cases that a wrapper\n'
    'function name or a wrapper function parameter name turns out to be\n'
    'a Python keyword, the <tt>_cmd</tt> suffix is added\n'
    'to the wrapper function name\n'
    'and the function parameter gets the <tt>_</tt> suffix.\n'
    'Wrapper functions return the value returned by the command\n'
    'which they execute.\n'
    '\n'
    'Please consult the docstring\n'
    'of the wrapper function and the respective command documentation\n'
    'for the information about function arguments and the returned value.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   global_cmds --- Namespace with functions to run global CLI commands\n'
    '\n'
    'Synopsis\n'
    '   global_cmds.wrapper_function(...)\n'
    '\n'
    'Description\n'
    '   The namespace provides wrapper Python functions to run global\n'
    '   Simics CLI commands. A wrapper function name is usually the same as\n'
    '   a name of the command it executes with hyphens replaced with\n'
    '   underscores. The parameters of the wrapper functions are the same\n'
    '   as of the corresponding command (again, with hyphens replaced with\n'
    '   underscores). Command flags (the names of the corresponding\n'
    '   function parameters start with an underscore) could be passes as\n'
    '   Python Boolean values. In the rare cases that a wrapper function\n'
    '   name or a wrapper function parameter name turns out to be a Python\n'
    '   keyword, the _cmd suffix is added to the wrapper function name and\n'
    '   the function parameter gets the _ suffix. Wrapper functions return\n'
    '   the value returned by the command which they execute.\n'
    '\n'
    '   Please consult the docstring of the wrapper function and the\n'
    '   respective command documentation for the information about function\n'
    '   arguments and the returned value.\n'
    '\n'
    '\n') ),

  'cli.interactive_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>interactive_command</b> &mdash; check if current command is run interactively</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>interactive_command()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Returns true if the current command was run interactively by the user\n'
    'and false if run from a script. This function may only be called by CLI\n'
    'commands.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   interactive_command --- check if current command is run\n'
    '   interactively\n'
    '\n'
    'Synopsis\n'
    '   interactive_command()\n'
    '\n'
    'Description\n'
    '   Returns true if the current command was run interactively by the\n'
    '   user and false if run from a script. This function may only be\n'
    '   called by CLI commands.\n'
    '\n'
    '\n') ),

  'cli.new_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_command</b> &mdash; define a new CLI command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_command(name, fun, args = [], **kwargs)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a new CLI command. A complete explanation of\n'
    '<fun>new_command</fun> and its parameters is available in\n'
    "<cite>Simics Model Builder User's Guide</cite>, in the\n"
    '<cite>Adding New Commands</cite> chapter.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_command --- define a new CLI command\n'
    '\n'
    'Synopsis\n'
    '   new_command(name, fun, args = [], **kwargs)\n'
    '\n'
    'Description\n'
    '   Define a new CLI command. A complete explanation of new_command and\n'
    "   its parameters is available in Simics Model Builder User's Guide,\n"
    '   in the Adding New Commands chapter.\n'
    '\n'
    '\n') ),

  'cli.new_info_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_info_command</b> &mdash; define a new info command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_info_command(cls, get_info, ctype = None, doc = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a new <cmd>info</cmd> command for a given object.\n'
    '<param>cls</param> is the class for which the <cmd>info</cmd> command\n'
    'should be registered. <param>get_info</param> is a function returning the\n'
    'information to be printed. <param>get_info()</param> should return a data\n'
    'structure of the following kind:\n'
    '<pre>\n'
    '  [(SectionName1, [(DataName1.1, DataValue1.1),\n'
    '                   (DataName1.2, DataValue1.2), ...]),\n'
    '   (SectionName2, [(DataName2.1, DataValue2.1),\n'
    '                   (DataName2.2, DataValue2.2), ...]),\n'
    '   ...]</pre>\n'
    '\n'
    'Each section will be printed separately. Each piece of data will be printed\n'
    'on one line. If no sections are necessary, just provide <tt>None</tt> as\n'
    "the only section's name, followed by the list of data.</dd>\n"
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.new_status_command</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_info_command --- define a new info command\n'
    '\n'
    'Synopsis\n'
    '   new_info_command(cls, get_info, ctype = None, doc = None)\n'
    '\n'
    'Description\n'
    '   Define a new info command for a given object. cls is the class for\n'
    '   which the info command should be registered. get_info is a function\n'
    '   returning the information to be printed. get_info() should return a\n'
    '   data structure of the following kind:\n'
    '     [(SectionName1, [(DataName1.1, DataValue1.1),\n'
    '                      (DataName1.2, DataValue1.2), ...]),\n'
    '      (SectionName2, [(DataName2.1, DataValue2.1),\n'
    '                      (DataName2.2, DataValue2.2), ...]),\n'
    '      ...]\n'
    '\n'
    '   Each section will be printed separately. Each piece of data will be\n'
    '   printed on one line. If no sections are necessary, just provide\n'
    "   None as the only section's name, followed by the list of data.\n"
    '\n'
    'See Also\n'
    '   cli.new_status_command\n'
    '\n'
    '\n') ),

  'cli.new_status_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_status_command</b> &mdash; define a new status command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_status_command(cls, get_status, ctype = None, doc = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a new <cmd>status</cmd> command for a given object.\n'
    '<param>cls</param> is the class for which the <cmd>status</cmd> command\n'
    'should be registered. <param>get_status</param> is a function returning the\n'
    'information to be printed. <param>get_status()</param> should return a data\n'
    'structure of the same kind as in <fun>new_info_command()</fun>.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.new_info_command</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_status_command --- define a new status command\n'
    '\n'
    'Synopsis\n'
    '   new_status_command(cls, get_status, ctype = None, doc = None)\n'
    '\n'
    'Description\n'
    '   Define a new status command for a given object. cls is the class\n'
    '   for which the status command should be registered. get_status is a\n'
    '   function returning the information to be printed. get_status()\n'
    '   should return a data structure of the same kind as in\n'
    '   new_info_command().\n'
    '\n'
    'See Also\n'
    '   cli.new_info_command\n'
    '\n'
    '\n') ),

  'cli.new_tech_preview_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_tech_preview_command</b> &mdash; define a new CLI tech preview command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_tech_preview_command(name, feature, fun, args=[], doc="", **kwargs)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a new tech preview CLI command.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_tech_preview_command --- define a new CLI tech preview command\n'
    '\n'
    'Synopsis\n'
    '   new_tech_preview_command(name, feature, fun, args=[], doc="", **kwargs)\n'
    '\n'
    'Description\n'
    '   Define a new tech preview CLI command.\n'
    '\n'
    '\n') ),

  'cli.new_unsupported_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_unsupported_command</b> &mdash; define a new unsupported CLI command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_unsupported_command(name, feature, fun, args = [], doc = "", **kwargs)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Define a new unsupported CLI command.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_unsupported_command --- define a new unsupported CLI command\n'
    '\n'
    'Synopsis\n'
    '   new_unsupported_command(name, feature, fun, args = [], doc = "", **kwargs)\n'
    '\n'
    'Description\n'
    '   Define a new unsupported CLI command.\n'
    '\n'
    '\n') ),

  'cli.number_str' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>number_str</b> &mdash; return a ready-to-print representation of a number</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>number_str(val, radix=None, group=None, use_prefix=True, precision=1)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return a ready-to-print representation of the number\n'
    '<param>val</param> in a given base (<param>radix</param>) or the\n'
    'current base by default, using the current settings for number\n'
    'representation as set by the <cmd>output-radix</cmd> and\n'
    '<cmd>digit-grouping</cmd> commands.\n'
    '\n'
    'The default digit grouping can be overridden with the\n'
    '<param>group</param> parameter, where 0 means no grouping.\n'
    'The radix prefix can be removed\n'
    'by specifying <param>use_prefix</param> as <tt>False</tt>.\n'
    '\n'
    'The minimum number of digits to be printed is specified by\n'
    '<param>precision</param>. If <param>precision</param> is negative,\n'
    'the precision is taken to be zero. Regardless of the radix, a\n'
    'value of zero with zero precision will always return the empty\n'
    'string.\n'
    '\n'
    'Negative numbers that fit in a signed 64-bit integer are treated\n'
    'as such. Other negative numbers are prefixed with a minus\n'
    '("-").</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>A string representing the number.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.str_number</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   number_str --- return a ready-to-print representation of a number\n'
    '\n'
    'Synopsis\n'
    '   number_str(val, radix=None, group=None, use_prefix=True, precision=1)\n'
    '\n'
    'Description\n'
    '   Return a ready-to-print representation of the number val in a given\n'
    '   base (radix) or the current base by default, using the current\n'
    '   settings for number representation as set by the output-radix and\n'
    '   digit-grouping commands.\n'
    '\n'
    '   The default digit grouping can be overridden with the group\n'
    '   parameter, where 0 means no grouping. The radix prefix can be\n'
    '   removed by specifying use_prefix as False.\n'
    '\n'
    '   The minimum number of digits to be printed is specified by\n'
    '   precision. If precision is negative, the precision is taken to be\n'
    '   zero. Regardless of the radix, a value of zero with zero precision\n'
    '   will always return the empty string.\n'
    '\n'
    '   Negative numbers that fit in a signed 64-bit integer are treated as\n'
    '   such. Other negative numbers are prefixed with a minus ("-").\n'
    '\n'
    'Return Value\n'
    '   A string representing the number.\n'
    '\n'
    'See Also\n'
    '   cli.str_number\n'
    '\n'
    '\n') ),

  'cli.object_expander' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>object_expander</b> &mdash; standard expander for an object argument</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>object_expander(kind)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>For command writing: standard expander that can be use to provide\n'
    'argument completion on all objects of a given class or matching a given\n'
    'interface (<param>kind</param>).\n'
    '\n'
    'For example, to expand a string with the list of processor available in the\n'
    'machine, you would write:\n'
    '<pre>\n'
    '  arg(str_t, "cpu", expander =  object_expander("processor_info"))\n'
    '</pre>\n'
    '\n'
    'To expand a string to all <class>gcache</class> objects:\n'
    '<pre>\n'
    '  arg(str_t, "cache", expander = object_expander("gcache"))\n'
    '</pre></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   object_expander --- standard expander for an object argument\n'
    '\n'
    'Synopsis\n'
    '   object_expander(kind)\n'
    '\n'
    'Description\n'
    '   For command writing: standard expander that can be use to provide\n'
    '   argument completion on all objects of a given class or matching a\n'
    '   given interface (kind).\n'
    '\n'
    '   For example, to expand a string with the list of processor\n'
    '   available in the machine, you would write:\n'
    '     arg(str_t, "cpu", expander =  object_expander("processor_info"))\n'
    '\n'
    '   To expand a string to all gcache objects:\n'
    '     arg(str_t, "cache", expander = object_expander("gcache"))\n'
    '\n'
    '\n') ),

  'cli.quiet_run_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>quiet_run_command</b> &mdash; run a CLI command and return output</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>quiet_run_command(text, output_mode = output_modes.formatted_text)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Runs a CLI command, or a CLI expression, as if it has been\n'
    'entered at the prompt. Errors are reported using CliError\n'
    'exception.\n'
    '\n'
    'The <fun>quiet_run_command</fun> function is similar to\n'
    '<fun>run_command</fun> but returns a tuple with the command\n'
    'return value as first entry, and the command output text as the second.\n'
    'Please note that sometimes unrelated output might be included, e.g.,\n'
    'for commands that advance the virtual time or in some other way may allow\n'
    'other commands to run in parallel with them.\n'
    '\n'
    "Set 'output_mode' to one of the output modes:\n"
    '<dl>\n'
    '  <dt><b>output_modes.regular</b></dt>\n'
    '    <dd>formatted text with Simics-internal markup</dd>\n'
    '  <dt><b>output_modes.formatted_text</b></dt>\n'
    '    <dd>formatted text without markup</dd>\n'
    '  <dt><b>output_modes.unformatted_text</b></dt>\n'
    '    <dd>unformatted text without markup</dd>\n'
    '</dl></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   quiet_run_command --- run a CLI command and return output\n'
    '\n'
    'Synopsis\n'
    '   quiet_run_command(text, output_mode = output_modes.formatted_text)\n'
    '\n'
    'Description\n'
    '   Runs a CLI command, or a CLI expression, as if it has been entered\n'
    '   at the prompt. Errors are reported using CliError exception.\n'
    '\n'
    '   The quiet_run_command function is similar to run_command but\n'
    '   returns a tuple with the command return value as first entry, and\n'
    '   the command output text as the second. Please note that sometimes\n'
    '   unrelated output might be included, e.g., for commands that advance\n'
    '   the virtual time or in some other way may allow other commands to\n'
    '   run in parallel with them.\n'
    '\n'
    "   Set 'output_mode' to one of the output modes:\n"
    '\n'
    '   output_modes.regular\n'
    '      formatted text with Simics-internal markup\n'
    '\n'
    '   output_modes.formatted_text\n'
    '      formatted text without markup\n'
    '\n'
    '   output_modes.unformatted_text\n'
    '      unformatted text without markup\n'
    '\n'
    '\n') ),

  'cli.register_command_category' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>register_command_category</b> &mdash; register a command category</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>register_command_category(name = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    "    <dd>Register a command category for the 'type' argument given to the\n"
    '<fun>new_command</fun> function. Command categories are optional but may\n'
    'be useful if many commands are defined for a particular use case that is\n'
    'of general interest.\n'
    '\n'
    '<param>name</param> should be at least 3 characters long and preferably\n'
    'just one capitalized word, a noun.\n'
    '\n'
    '<em>Notice</em>: Do not register any command category for a class, as those\n'
    'are listed on the class itself.\n'
    '\n'
    'Invoke this function without any argument to print the standard\n'
    'categories, assuming no modules or targets have been loaded.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   register_command_category --- register a command category\n'
    '\n'
    'Synopsis\n'
    '   register_command_category(name = None)\n'
    '\n'
    'Description\n'
    "   Register a command category for the 'type' argument given to the\n"
    '   new_command function. Command categories are optional but may be\n'
    '   useful if many commands are defined for a particular use case that\n'
    '   is of general interest.\n'
    '\n'
    '   name should be at least 3 characters long and preferably just one\n'
    '   capitalized word, a noun.\n'
    '\n'
    '   Notice: Do not register any command category for a class, as those\n'
    '   are listed on the class itself.\n'
    '\n'
    '   Invoke this function without any argument to print the standard\n'
    '   categories, assuming no modules or targets have been loaded.\n'
    '\n'
    '\n') ),

  'cli.run_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>run_command</b> &mdash; run a CLI command</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>run_command(text)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Runs a CLI command, or a CLI expression, as if it has been entered at the\n'
    'prompt. Errors are reported using CliError exception, and any return value\n'
    'from the command is returned by this function to Python.\n'
    '\n'
    'Use <fun>quiet_run_command</fun> if you need to suppress or catch\n'
    'messages printed.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   run_command --- run a CLI command\n'
    '\n'
    'Synopsis\n'
    '   run_command(text)\n'
    '\n'
    'Description\n'
    '   Runs a CLI command, or a CLI expression, as if it has been entered\n'
    '   at the prompt. Errors are reported using CliError exception, and\n'
    '   any return value from the command is returned by this function to\n'
    '   Python.\n'
    '\n'
    '   Use quiet_run_command if you need to suppress or catch messages\n'
    '   printed.\n'
    '\n'
    '\n') ),

  'cli.simenv' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>simenv</b> &mdash; CLI variable namespace</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>simenv.<i>variable</i></pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>simenv</class> namespace provides access to the CLI variables\n'
    'in the Simics Python interpreter. If the variable <var>$foo</var> was\n'
    'defined in CLI, <var>simenv.foo</var> will represent the same variable in\n'
    'Python.\n'
    '\n'
    'Running <tt>del simenv.foo</tt> will unset that variable. The return value\n'
    'from the <fun>dir</fun> function will also include defined variables. The\n'
    '<fun>repr</fun> function will return the dictionary of variable and value\n'
    'pairs as a string.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   simenv --- CLI variable namespace\n'
    '\n'
    'Synopsis\n'
    '   simenv.variable\n'
    '\n'
    'Description\n'
    '   The simenv namespace provides access to the CLI variables in the\n'
    '   Simics Python interpreter. If the variable $foo was defined in CLI,\n'
    '   simenv.foo will represent the same variable in Python.\n'
    '\n'
    '   Running del simenv.foo will unset that variable. The return value\n'
    '   from the dir function will also include defined variables. The repr\n'
    '   function will return the dictionary of variable and value pairs as\n'
    '   a string.\n'
    '\n'
    '\n') ),

  'cli.str_number' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>str_number</b> &mdash; convert a string to a number</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>str_number(text)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Converts a string returned from <fun>number_str</fun> back to\n'
    'an integer.\n'
    '\n'
    'Raises ValueError for invalid arguments.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>A number representing the string.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.number_str</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   str_number --- convert a string to a number\n'
    '\n'
    'Synopsis\n'
    '   str_number(text)\n'
    '\n'
    'Description\n'
    '   Converts a string returned from number_str back to an integer.\n'
    '\n'
    '   Raises ValueError for invalid arguments.\n'
    '\n'
    'Return Value\n'
    '   A number representing the string.\n'
    '\n'
    'See Also\n'
    '   cli.number_str\n'
    '\n'
    '\n') ),

  'comp.ConfigAttribute' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>ConfigAttribute</b> &mdash; component configuration attribute</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>ConfigAttribute</class> class inherits the\n'
    '<class>pyobj.Attribute</class> class. The\n'
    '<class>ConfigAttribute</class> class just adds the special property\n'
    'to the <class>pyobj.Attribute</class> class that it is a config\n'
    'attribute.\n'
    '\n'
    'A config attribute defines how the component should be\n'
    'configured. Therefore, all config attributes are also arguments to the\n'
    '<cmd>new-</cmd> and <cmd>create-</cmd> commands that are used to\n'
    'instantiate the component.\n'
    '\n'
    'Because of this, the config attribute must always be documented\n'
    'and the default value of the <var>attrattr</var> member is\n'
    '<tt>Sim_Attr_Optional</tt>.\n'
    '\n'
    'The <class>ConfigAttribute</class> class contains the\n'
    '<var>valid</var> member, which is a list of valid values for the\n'
    'config attribute. The list gives the user a hint about valid\n'
    'values when creating a component. There is no check that the value\n'
    'written to the attribute is a value in the list of valid values.\n'
    'The list of valid value(s) does not need to contain the default\n'
    'initial value for the config attribute, but it usually does. The\n'
    'valid list should at least contain one valid value even if several\n'
    'values are valid.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class foo(ConfigAttribute):\n'
    '    """The foo attribute."""\n'
    '    valid = [667, 4711]\n'
    '    def _initialize(self): self.val = 4711\n'
    '    def getter(self): return self.val\n'
    '    def setter(self, val): self.val = val</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Attribute</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   ConfigAttribute --- component configuration attribute\n'
    '\n'
    'Description\n'
    '   The ConfigAttribute class inherits the pyobj.Attribute class. The\n'
    '   ConfigAttribute class just adds the special property to the\n'
    '   pyobj.Attribute class that it is a config attribute.\n'
    '\n'
    '   A config attribute defines how the component should be configured.\n'
    '   Therefore, all config attributes are also arguments to the new- and\n'
    '   create- commands that are used to instantiate the component.\n'
    '\n'
    '   Because of this, the config attribute must always be documented and\n'
    '   the default value of the attrattr member is Sim_Attr_Optional.\n'
    '\n'
    '   The ConfigAttribute class contains the valid member, which is a\n'
    '   list of valid values for the config attribute. The list gives the\n'
    '   user a hint about valid values when creating a component. There is\n'
    '   no check that the value written to the attribute is a value in the\n'
    '   list of valid values. The list of valid value(s) does not need to\n'
    '   contain the default initial value for the config attribute, but it\n'
    '   usually does. The valid list should at least contain one valid\n'
    '   value even if several values are valid.\n'
    '\n'
    'Example\n'
    '   class foo(ConfigAttribute):\n'
    '       """The foo attribute."""\n'
    '       valid = [667, 4711]\n'
    '       def _initialize(self): self.val = 4711\n'
    '       def getter(self): return self.val\n'
    '       def setter(self, val): self.val = val\n'
    '\n'
    'See Also\n'
    '   pyobj.Attribute\n'
    '\n'
    '\n') ),

  'comp.SimpleConfigAttribute' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SimpleConfigAttribute</b> &mdash; simple component configuration attribute</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>SimpleConfigAttribute(init, type, attr = simics.Sim_Attr_Optional, val = [])</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <fun>pyobj.SimpleConfigAttribute</fun> method creates an\n'
    'attribute using the <class>comp.ConfigAttribute</class> class. The\n'
    'purpose of the method is to make it easier and faster to create a\n'
    'simple config attribute.\n'
    '\n'
    'A config attribute defines how the component should be\n'
    'configured. Therefore, all config attributes are also arguments to the\n'
    '<cmd>new-</cmd> and <cmd>create-</cmd> commands that are used to\n'
    'instantiate the component.\n'
    '\n'
    'The <arg>init</arg> argument is the initial value for the\n'
    'attribute. The type of the attribute is defined by the\n'
    "<arg>type</arg> string (currently objects 'o' and dictionaries 'D'\n"
    'are not supported). The <arg>attr</arg> argument sets the\n'
    'attribute kind. The default value for <arg>attr</arg> is\n'
    '<tt>Sim_Attr_Optional</tt>.\n'
    'The valid value(s) for the\n'
    '<class>comp.ConfigAttribute</class> class is set by the\n'
    '<arg>val</arg> argument. See the documentation for\n'
    '<fun>SIM_register_attribute</fun> for more information about\n'
    'the arguments.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>comp.ConfigAttribute class</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class cpu_frequency(SimpleConfigAttribute(\n'
    "        None, 'i', simics.Sim_Attr_Required)):\n"
    '    """Processor frequency in MHz."""</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Attribute, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SimpleConfigAttribute --- simple component configuration attribute\n'
    '\n'
    'Synopsis\n'
    '   SimpleConfigAttribute(init, type, attr = simics.Sim_Attr_Optional, val = [])\n'
    '\n'
    'Description\n'
    '   The pyobj.SimpleConfigAttribute method creates an attribute using\n'
    '   the comp.ConfigAttribute class. The purpose of the method is to\n'
    '   make it easier and faster to create a simple config attribute.\n'
    '\n'
    '   A config attribute defines how the component should be configured.\n'
    '   Therefore, all config attributes are also arguments to the new- and\n'
    '   create- commands that are used to instantiate the component.\n'
    '\n'
    '   The init argument is the initial value for the attribute. The type\n'
    '   of the attribute is defined by the type string (currently objects\n'
    "   'o' and dictionaries 'D' are not supported). The attr argument sets\n"
    '   the attribute kind. The default value for attr is\n'
    '   Sim_Attr_Optional. The valid value(s) for the comp.ConfigAttribute\n'
    '   class is set by the val argument. See the documentation for\n'
    '   SIM_register_attribute for more information about the arguments.\n'
    '\n'
    'Return Value\n'
    '   comp.ConfigAttribute class\n'
    '\n'
    'Example\n'
    '   class cpu_frequency(SimpleConfigAttribute(\n'
    "           None, 'i', simics.Sim_Attr_Required)):\n"
    '       """Processor frequency in MHz."""\n'
    '\n'
    'See Also\n'
    '   pyobj.Attribute, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'comp.StandardComponent' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>StandardComponent</b> &mdash; base class for components</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>StandardComponent</class> class is the base class for\n'
    'components written in Python. It is a subclass of\n'
    '<class>pyobj.ConfObject</class>.\n'
    '\n'
    'The class will automatically register the\n'
    'required component attributes. Any attribute may be overridden;\n'
    'however, overriding the internal attributes is not recommended.\n'
    '\n'
    'The automatically registered attributes are:\n'
    '<dl>\n'
    ' <dt>basename</dt><dd>String to prepend to component name when creating\n'
    ' components when not specifying name.</dd>\n'
    ' <dt>component_icon</dt><dd>String with the name of the component\n'
    ' icon.</dd>\n'
    ' <dt>component_queue</dt><dd>The default queue object for this\n'
    ' component.</dd>\n'
    ' <dt>top_level</dt><dd>Default set to <tt>False</tt>.</dd>\n'
    ' <dt>system_icon</dt><dd>The system icon.</dd>\n'
    ' <dt>machine_icon</dt><dd>The machine icon.</dd>\n'
    ' <dt>cpu_list</dt><dd>List of processors in the component tree.</dd>\n'
    ' <dt>static_slots</dt><dd>Internal.</dd>\n'
    ' <dt>dynamic_slots</dt><dd>Internal.</dd>\n'
    ' <dt>object_list</dt><dd>Internal.</dd>\n'
    ' <dt>object_prefix</dt><dd>Internal.</dd>\n'
    ' <dt>top_component</dt><dd>Internal.</dd>\n'
    ' <dt>instantiated</dt><dd>Internal.</dd>\n'
    ' <dt>pending_cell_object_factories</dt><dd>Internal.</dd>\n'
    ' <dt>config_attributes</dt><dd>Internal.</dd>\n'
    ' <dt>system_info</dt><dd>Internal.</dd>\n'
    ' <dt>components</dt><dd>Internal.</dd>\n'
    ' <dt>domain</dt><dd>Internal.</dd>\n'
    '</dl>\n'
    '\n'
    'The class will automatically implement the <iface>component</iface>\n'
    'interface. The individual methods of this interface are user-overridable.\n'
    '\n'
    'Components will automatically get <cmd>new-</cmd> and <cmd>create-</cmd>\n'
    'commands that can be used to create and instantiate the component. It is\n'
    'possible to override this by setting <em>_no_create_command</em> or\n'
    '<em>_no_new_command</em> to <em>object()</em> to avoid to automatically get\n'
    '<cmd>create-</cmd> or <cmd>new-</cmd> commands.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class my_comp(StandardComponent):\n'
    '    """The my_comp component."""\n'
    '    _class_desc = "my_comp"\n'
    '\n'
    '    class bar(SimpleConfigAttribute(\n'
    "            None, 'i', simics.Sim_Attr_Required)):\n"
    '        """My favorite bar."""\n'
    '\n'
    'class my_comp(StandardComponent):\n'
    '    """The my_comp component."""\n'
    '    _class_desc = "my_comp"\n'
    '    _no_create_command = object()</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   StandardComponent --- base class for components\n'
    '\n'
    'Description\n'
    '   The StandardComponent class is the base class for components\n'
    '   written in Python. It is a subclass of pyobj.ConfObject.\n'
    '\n'
    '   The class will automatically register the required component\n'
    '   attributes. Any attribute may be overridden; however, overriding\n'
    '   the internal attributes is not recommended.\n'
    '\n'
    '   The automatically registered attributes are:\n'
    '\n'
    '   basename\n'
    '      String to prepend to component name when creating components\n'
    '      when not specifying name.\n'
    '\n'
    '   component_icon\n'
    '      String with the name of the component icon.\n'
    '\n'
    '   component_queue\n'
    '      The default queue object for this component.\n'
    '\n'
    '   top_level\n'
    '      Default set to False.\n'
    '\n'
    '   system_icon\n'
    '      The system icon.\n'
    '\n'
    '   machine_icon\n'
    '      The machine icon.\n'
    '\n'
    '   cpu_list\n'
    '      List of processors in the component tree.\n'
    '\n'
    '   static_slots\n'
    '      Internal.\n'
    '\n'
    '   dynamic_slots\n'
    '      Internal.\n'
    '\n'
    '   object_list\n'
    '      Internal.\n'
    '\n'
    '   object_prefix\n'
    '      Internal.\n'
    '\n'
    '   top_component\n'
    '      Internal.\n'
    '\n'
    '   instantiated\n'
    '      Internal.\n'
    '\n'
    '   pending_cell_object_factories\n'
    '      Internal.\n'
    '\n'
    '   config_attributes\n'
    '      Internal.\n'
    '\n'
    '   system_info\n'
    '      Internal.\n'
    '\n'
    '   components\n'
    '      Internal.\n'
    '\n'
    '   domain\n'
    '      Internal.\n'
    '\n'
    '   The class will automatically implement the component interface. The\n'
    '   individual methods of this interface are user-overridable.\n'
    '\n'
    '   Components will automatically get new- and create- commands that\n'
    '   can be used to create and instantiate the component. It is possible\n'
    '   to override this by setting _no_create_command or _no_new_command\n'
    '   to object() to avoid to automatically get create- or new- commands.\n'
    '\n'
    'Example\n'
    '   class my_comp(StandardComponent):\n'
    '       """The my_comp component."""\n'
    '       _class_desc = "my_comp"\n'
    '\n'
    '       class bar(SimpleConfigAttribute(\n'
    "               None, 'i', simics.Sim_Attr_Required)):\n"
    '           """My favorite bar."""\n'
    '\n'
    '   class my_comp(StandardComponent):\n'
    '       """The my_comp component."""\n'
    '       _class_desc = "my_comp"\n'
    '       _no_create_command = object()\n'
    '\n'
    'See Also\n'
    '   pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'comp.StandardConnectorComponent' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>StandardConnectorComponent</b> &mdash; convenience class for connector components</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>StandardConnectorComponent</class> is a convenience class for\n'
    'connector components. It is a subclass of\n'
    '<class>comp.StandardComponent</class> and implements the\n'
    '<iface>component_connector</iface> interface.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>comp.StandardComponent</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   StandardConnectorComponent --- convenience class for connector\n'
    '   components\n'
    '\n'
    'Description\n'
    '   The StandardConnectorComponent is a convenience class for connector\n'
    '   components. It is a subclass of comp.StandardComponent and\n'
    '   implements the component_connector interface.\n'
    '\n'
    'See Also\n'
    '   comp.StandardComponent\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.add_component' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_component</b> &mdash; add sub component to component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    "    <dd><pre>add_component(self, slot, cls, attr, name = '')</pre></dd>\n"
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Add a subcomponent or arrays of subcomponents to the\n'
    'component. The subcomponent(s) will be created immediately when\n'
    'the method is called.\n'
    '\n'
    'The <arg>slot</arg> argument is the slot name concatenated with\n'
    'a nested array string, defining the number of subcomponents to\n'
    'create. Setting <arg>slot</arg> to <em>foo</em> will create one\n'
    'subcomponent in the slot <em>foo</em>, setting <arg>slot</arg>\n'
    'to <em>foo[3]</em> will create an array of three subcomponents\n'
    'in the slot <em>foo</em>, setting <arg>slot</arg> to\n'
    '<em>foo[3][2]</em> will create an array of three arrays of two\n'
    'arrays with subcomponents in the slot <em>foo</em>.\n'
    '\n'
    'The <arg>cls</arg> is the component class, <arg>attr</arg> is\n'
    'arguments to the component, and <arg>name</arg> is an optional\n'
    'name.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>arrays of conf_object_t component object</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_component --- add sub component to component\n'
    '\n'
    'Synopsis\n'
    "   add_component(self, slot, cls, attr, name = '')\n"
    '\n'
    'Description\n'
    '   Add a subcomponent or arrays of subcomponents to the component. The\n'
    '   subcomponent(s) will be created immediately when the method is\n'
    '   called.\n'
    '\n'
    '   The slot argument is the slot name concatenated with a nested array\n'
    '   string, defining the number of subcomponents to create. Setting\n'
    '   slot to foo will create one subcomponent in the slot foo, setting\n'
    '   slot to foo[3] will create an array of three subcomponents in the\n'
    '   slot foo, setting slot to foo[3][2] will create an array of three\n'
    '   arrays of two arrays with subcomponents in the slot foo.\n'
    '\n'
    '   The cls is the component class, attr is arguments to the component,\n'
    '   and name is an optional name.\n'
    '\n'
    'Return Value\n'
    '   arrays of conf_object_t component object\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.add_connector' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_connector</b> &mdash; add connector to component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_connector(self, slot, type, hotpluggable, required,\n'
    '              multi, direction)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Add a connector or nested array of connectors to the component. The\n'
    'connector(s) will be created immediately when the method is called.\n'
    '\n'
    'The <arg>slot</arg> argument is the slot name concatenated with a\n'
    'nested array string, defining the number of connectors to create.\n'
    'Setting <arg>slot</arg> to <em>foo</em> will create one connector in\n'
    'the slot <em>foo</em>, setting <arg>slot</arg> to <em>foo[3]</em> will\n'
    'create an array of three connectors in the slot <em>foo</em>, setting\n'
    '<arg>slot</arg> to <em>foo[3][2]</em> will create an array of three\n'
    'arrays of two arrays with connectors in the slot <em>foo</em>.\n'
    '\n'
    'The <arg>type</arg> is the type of connection as a string,\n'
    '<arg>hotpluggable</arg> is <tt>True</tt> or <tt>False</tt> depending on\n'
    'whether the connector is hot-pluggable, <arg>required</arg> is\n'
    '<tt>True</tt> if the connector must be connected before the component\n'
    'is instantiated, <arg>multi</arg> is <tt>True</tt> if the connector\n'
    'supports multiple connections, <arg>direction</arg> is a\n'
    '<type>connector_direction_t</type> which is <tt>up</tt>, <tt>down</tt>,\n'
    'or <tt>any</tt>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>arrays of conf_object connector objects</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>comp.StandardComponent.get_slot</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_connector --- add connector to component\n'
    '\n'
    'Synopsis\n'
    '   add_connector(self, slot, type, hotpluggable, required,\n'
    '                 multi, direction)\n'
    '\n'
    'Description\n'
    '   Add a connector or nested array of connectors to the component. The\n'
    '   connector(s) will be created immediately when the method is called.\n'
    '\n'
    '   The slot argument is the slot name concatenated with a nested array\n'
    '   string, defining the number of connectors to create. Setting slot\n'
    '   to foo will create one connector in the slot foo, setting slot to\n'
    '   foo[3] will create an array of three connectors in the slot foo,\n'
    '   setting slot to foo[3][2] will create an array of three arrays of\n'
    '   two arrays with connectors in the slot foo.\n'
    '\n'
    '   The type is the type of connection as a string, hotpluggable is\n'
    '   True or False depending on whether the connector is hot-pluggable,\n'
    '   required is True if the connector must be connected before the\n'
    '   component is instantiated, multi is True if the connector supports\n'
    '   multiple connections, direction is a connector_direction_t which is\n'
    '   up, down, or any.\n'
    '\n'
    'Return Value\n'
    '   arrays of conf_object connector objects\n'
    '\n'
    'See Also\n'
    '   comp.StandardComponent.get_slot\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.add_pre_obj' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_pre_obj</b> &mdash; add pre_conf_obj to component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    "    <dd><pre>add_pre_obj(self, slot, cls, name = '', **attr)</pre></dd>\n"
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Add pre conf objects to the component. The pre conf objects will\n'
    'be converted to regular conf objects when the component is\n'
    'instantiated.\n'
    '\n'
    'The <arg>slot</arg> argument is the slot name concatenated with\n'
    'a nested array string, defining the number of pre objects to\n'
    'create. Setting <arg>slot</arg> to <em>foo</em> will create one\n'
    'pre object in the slot <em>foo</em>, setting <arg>slot</arg> to\n'
    '<em>foo[3]</em> will create an array of three pre objects in\n'
    'the slot <em>foo</em>, setting <arg>slot</arg> to\n'
    '<em>foo[3][2]</em> will create an array of three arrays of two\n'
    'arrays with pre objects in the slot <em>foo</em>. The\n'
    '<arg>cls</arg> argument is the type of object class to\n'
    'create. The <arg>name</arg> argument is deprecated. The\n'
    '<arg>attr</arg> argument is optional attribute values for the\n'
    'object(s).</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>arrays of pre conf objects</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_pre_obj --- add pre_conf_obj to component\n'
    '\n'
    'Synopsis\n'
    "   add_pre_obj(self, slot, cls, name = '', **attr)\n"
    '\n'
    'Description\n'
    '   Add pre conf objects to the component. The pre conf objects will be\n'
    '   converted to regular conf objects when the component is\n'
    '   instantiated.\n'
    '\n'
    '   The slot argument is the slot name concatenated with a nested array\n'
    '   string, defining the number of pre objects to create. Setting slot\n'
    '   to foo will create one pre object in the slot foo, setting slot to\n'
    '   foo[3] will create an array of three pre objects in the slot foo,\n'
    '   setting slot to foo[3][2] will create an array of three arrays of\n'
    '   two arrays with pre objects in the slot foo. The cls argument is\n'
    '   the type of object class to create. The name argument is\n'
    '   deprecated. The attr argument is optional attribute values for the\n'
    '   object(s).\n'
    '\n'
    'Return Value\n'
    '   arrays of pre conf objects\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.add_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_slot</b> &mdash; add slot to component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_slot(self, slot, val)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Add a slot to the component. <arg>slot</arg> is the slot name and\n'
    '<arg>val</arg> is the value. The value must be a conf object,\n'
    'a pre conf object, or None, or nested lists of these types.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>new slot value, i.e. <arg>val</arg></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_slot --- add slot to component\n'
    '\n'
    'Synopsis\n'
    '   add_slot(self, slot, val)\n'
    '\n'
    'Description\n'
    '   Add a slot to the component. slot is the slot name and val is the\n'
    '   value. The value must be a conf object, a pre conf object, or None,\n'
    '   or nested lists of these types.\n'
    '\n'
    'Return Value\n'
    '   new slot value, i.e. val\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.connect' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>connect</b> &mdash; connect connectors</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>connect(self, cnt0, cnt1)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Connect two connectors <arg>cnt0</arg> and <arg>cnt1</arg>. The\n'
    'connectors must be connector objects. A <tt>CompException</tt>\n'
    'exception will be raised if the connection failed.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   connect --- connect connectors\n'
    '\n'
    'Synopsis\n'
    '   connect(self, cnt0, cnt1)\n'
    '\n'
    'Description\n'
    '   Connect two connectors cnt0 and cnt1. The connectors must be\n'
    '   connector objects. A CompException exception will be raised if the\n'
    '   connection failed.\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.copy_connector' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>copy_connector</b> &mdash; copy connector to component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>copy_connector(self, slot, src)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Copy connectors from another component. The <arg>slot</arg> argument\n'
    'is the new slot name for the connector in this component. The\n'
    '<arg>src</arg> argument is the name of the slot with connectors to\n'
    'copy. The <arg>src</arg> can be a relative slot name, see the\n'
    '<fun>get_slot</fun> method.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>arrays of conf_object connector objects</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>comp.StandardComponent.get_slot</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   copy_connector --- copy connector to component\n'
    '\n'
    'Synopsis\n'
    '   copy_connector(self, slot, src)\n'
    '\n'
    'Description\n'
    '   Copy connectors from another component. The slot argument is the\n'
    '   new slot name for the connector in this component. The src argument\n'
    '   is the name of the slot with connectors to copy. The src can be a\n'
    '   relative slot name, see the get_slot method.\n'
    '\n'
    'Return Value\n'
    '   arrays of conf_object connector objects\n'
    '\n'
    'See Also\n'
    '   comp.StandardComponent.get_slot\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.del_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>del_slot</b> &mdash; delete slot in component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>del_slot(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Delete slot in component. The <arg>slot</arg> argument is the\n'
    'slot name. The function returns the slot value if the slot\n'
    'exists. All connectors in the slot will be converted to pre conf\n'
    'objects and the original connectors will be deleted when\n'
    'returning the slot value. A <tt>CompException</tt> exception\n'
    'will be raised if the slot does not exist, the slot contains\n'
    'non connector conf objects, or the slot contains connectors that\n'
    'have been copied with the <fun>copy_connector</fun>\n'
    'method. Slots with sub components can not be deleted.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   del_slot --- delete slot in component\n'
    '\n'
    'Synopsis\n'
    '   del_slot(self, slot)\n'
    '\n'
    'Description\n'
    '   Delete slot in component. The slot argument is the slot name. The\n'
    '   function returns the slot value if the slot exists. All connectors\n'
    '   in the slot will be converted to pre conf objects and the original\n'
    '   connectors will be deleted when returning the slot value. A\n'
    '   CompException exception will be raised if the slot does not exist,\n'
    '   the slot contains non connector conf objects, or the slot contains\n'
    '   connectors that have been copied with the copy_connector method.\n'
    '   Slots with sub components can not be deleted.\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.get_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_slot</b> &mdash; get slot from component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_slot(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Get a slot from the component. <arg>slot</arg> is the slot name.\n'
    '<arg>slot</arg> can be a slot in this component or a\n'
    'hierarchical slot; e.g., looking up <attr>foo.bar</attr> will\n'
    'return the slot <attr>bar</attr> from the component in slot\n'
    '<attr>foo</attr> from this component. If the lookup fails, a\n'
    '<tt>CompException</tt> exception will be raised.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>slot value</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_slot --- get slot from component\n'
    '\n'
    'Synopsis\n'
    '   get_slot(self, slot)\n'
    '\n'
    'Description\n'
    '   Get a slot from the component. slot is the slot name. slot can be a\n'
    '   slot in this component or a hierarchical slot; e.g., looking up\n'
    '   foo.bar will return the slot bar from the component in slot foo\n'
    '   from this component. If the lookup fails, a CompException exception\n'
    '   will be raised.\n'
    '\n'
    'Return Value\n'
    '   slot value\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.add_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_slot</b> &mdash; add slot</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_slot(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function adds a dynamic slot named <arg>slot</arg>\n'
    'if it does not already exist. It returns <tt>True</tt> if it could\n'
    'add the slot.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd><const>True</const> or <const>False</const></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_slot --- add slot\n'
    '\n'
    'Synopsis\n'
    '   add_slot(self, slot)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   adds a dynamic slot named slot if it does not already exist. It\n'
    '   returns True if it could add the slot.\n'
    '\n'
    'Return Value\n'
    '   True or False\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.create_cell' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>create_cell</b> &mdash; create cell for component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>create_cell(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Returns cell creation status for component. The default behavior\n'
    'depends on the <attr>automatic_cell_partition</attr> attribute in\n'
    'the <obj>sim</obj> object and if the component is a top-level\n'
    'component.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>Returns <tt>True</tt> if automatic cell\n'
    'partitioning is enabled and the component is a top-level\n'
    'component, otherwise it returns <tt>False</tt>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   create_cell --- create cell for component\n'
    '\n'
    'Synopsis\n'
    '   create_cell(self)\n'
    '\n'
    'Description\n'
    '   Returns cell creation status for component. The default behavior\n'
    '   depends on the automatic_cell_partition attribute in the sim object\n'
    '   and if the component is a top-level component.\n'
    '\n'
    'Return Value\n'
    '   Returns True if automatic cell partitioning is enabled and the\n'
    '   component is a top-level component, otherwise it returns False.\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.del_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>del_slot</b> &mdash; delete slot</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>del_slot(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function deletes the dynamic slot named\n'
    '<arg>slot</arg>. The function returns <tt>True</tt> if it could\n'
    'remove the slot, otherwise it returns <tt>False</tt>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd><const>True</const> or <const>False</const></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   del_slot --- delete slot\n'
    '\n'
    'Synopsis\n'
    '   del_slot(self, slot)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   deletes the dynamic slot named slot. The function returns True if\n'
    '   it could remove the slot, otherwise it returns False.\n'
    '\n'
    'Return Value\n'
    '   True or False\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.get_slot_objects' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_slot_objects</b> &mdash; get slot objects</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_slot_objects(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function will return all objects in the static and\n'
    'dynamic slots.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>list of objects</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_slot_objects --- get slot objects\n'
    '\n'
    'Synopsis\n'
    '   get_slot_objects(self)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   will return all objects in the static and dynamic slots.\n'
    '\n'
    'Return Value\n'
    '   list of objects\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.get_slot_value' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_slot_value</b> &mdash; get slot</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_slot_value(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function will return the slot value for the slot\n'
    'named <arg>slot</arg>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>value in slot</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_slot_value --- get slot\n'
    '\n'
    'Synopsis\n'
    '   get_slot_value(self, slot)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   will return the slot value for the slot named slot.\n'
    '\n'
    'Return Value\n'
    '   value in slot\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.get_slots' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_slots</b> &mdash; get slot dictionary</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_slots(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function will return all static and dynamic slots as\n'
    'a dictionary.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>dictionary with all slots</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_slots --- get slot dictionary\n'
    '\n'
    'Synopsis\n'
    '   get_slots(self)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   will return all static and dynamic slots as a dictionary.\n'
    '\n'
    'Return Value\n'
    '   dictionary with all slots\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.has_slot' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>has_slot</b> &mdash; check if valid slot</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>has_slot(self, slot)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function returns <tt>True</tt> if there exists a\n'
    'static or dynamic slot named <arg>slot</arg> in the component,\n'
    'otherwise it returns <tt>False</tt>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd><const>True</const> or <const>False</const></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   has_slot --- check if valid slot\n'
    '\n'
    'Synopsis\n'
    '   has_slot(self, slot)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   returns True if there exists a static or dynamic slot named slot in\n'
    '   the component, otherwise it returns False.\n'
    '\n'
    'Return Value\n'
    '   True or False\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.post_instantiate' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>post_instantiate</b> &mdash; post instantiation functionality</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>post_instantiate(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The function will be called when the component has been\n'
    'instantiated.\n'
    '\n'
    'The default behavior is to do nothing.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   post_instantiate --- post instantiation functionality\n'
    '\n'
    'Synopsis\n'
    '   post_instantiate(self)\n'
    '\n'
    'Description\n'
    '   The function will be called when the component has been\n'
    '   instantiated.\n'
    '\n'
    '   The default behavior is to do nothing.\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.pre_instantiate' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>pre_instantiate</b> &mdash; instantiate component status</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>pre_instantiate(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Should return <tt>True</tt> if component is allowed to be\n'
    'instantiated, <tt>False</tt> otherwise. The default behavior is to\n'
    'return <tt>TRUE</tt>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd><const>True</const></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   pre_instantiate --- instantiate component status\n'
    '\n'
    'Synopsis\n'
    '   pre_instantiate(self)\n'
    '\n'
    'Description\n'
    '   Should return True if component is allowed to be instantiated,\n'
    '   False otherwise. The default behavior is to return TRUE.\n'
    '\n'
    'Return Value\n'
    '   True\n'
    '\n'
    '\n') ),

  'comp.StandardComponent.component.set_slot_value' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>set_slot_value</b> &mdash; set slot</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>set_slot_value(self, slot, val)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Standard implementation, see the <iface>component</iface>\n'
    'interface. The function sets the slot named <arg>slot</arg> to\n'
    '<arg>val</arg>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   set_slot_value --- set slot\n'
    '\n'
    'Synopsis\n'
    '   set_slot_value(self, slot, val)\n'
    '\n'
    'Description\n'
    '   Standard implementation, see the component interface. The function\n'
    '   sets the slot named slot to val.\n'
    '\n'
    '\n') ),

  'comp.StandardConnectorComponent.add_connector' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_connector</b> &mdash; create a connector component</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_connector(self, slot, cls)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Create a connector component.\n'
    '\n'
    'The <arg>slot</arg> argument is the slot name for the connector.\n'
    '\n'
    'The <arg>cls</arg> argument is an instance of a connector class.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>the conf_object connector component</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_connector --- create a connector component\n'
    '\n'
    'Synopsis\n'
    '   add_connector(self, slot, cls)\n'
    '\n'
    'Description\n'
    '   Create a connector component.\n'
    '\n'
    '   The slot argument is the slot name for the connector.\n'
    '\n'
    '   The cls argument is an instance of a connector class.\n'
    '\n'
    'Return Value\n'
    '   the conf_object connector component\n'
    '\n'
    '\n') ),

  'configuration.OBJ' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>OBJ</b> &mdash; class for referring to another object, existing or not</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>OBJ(name)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd><fun>OBJ</fun> is only used together with the\n'
    '<fun>SIM_set_configuration</fun> API function. <fun>OBJ</fun> is\n'
    'used when a configuration attribute needs to refer to another\n'
    'object. The other object can either be present in an existing\n'
    'configuration, or it can be an object that will be created as a\n'
    'result of the same call to <fun>SIM_set_configuration</fun>. See\n'
    '<fun>SIM_set_configuration</fun> for an example.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd><fun>SIM_set_configuration</fun></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   OBJ --- class for referring to another object, existing or not\n'
    '\n'
    'Synopsis\n'
    '   OBJ(name)\n'
    '\n'
    'Description\n'
    '   OBJ is only used together with the SIM_set_configuration API\n'
    '   function. OBJ is used when a configuration attribute needs to refer\n'
    '   to another object. The other object can either be present in an\n'
    '   existing configuration, or it can be an object that will be created\n'
    '   as a result of the same call to SIM_set_configuration. See\n'
    '   SIM_set_configuration for an example.\n'
    '\n'
    'See Also\n'
    '   SIM_set_configuration\n'
    '\n'
    '\n') ),

  'flash_memory.flash_add_model' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>flash_add_model</b> &mdash; add a new flash model</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>flash_add_model(product_no, config, complete_func)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Adds a new flash model. Instances of the new flash can then be created\n'
    'with the <fun>flash_create_memory</fun> and\n'
    '<fun>flash_create_memory_anon</fun> functions.\n'
    '\n'
    'These are the arguments:\n'
    '<dl>\n'
    '  <dt><param>product_no</param></dt>\n'
    '    <dd>Product number; e.g., "28F___C3_". Underscores act as wild cards\n'
    '        and will match any character.</dd>\n'
    '  <dt><param>config</param></dt>\n'
    '     <dd>Dictionary containing <attr>attribute</attr>: value pairs. These\n'
    '         attributes are <class>generic-flash-memory</class> attributes;\n'
    '         information on available attributes and how to configure them can\n'
    '         be found in the reference manual.</dd>\n'
    '  <dt><param>complete_fun</param></dt>\n'
    '     <dd>Function of type <fun>complete_fun(product_no, config)</fun> that\n'
    '         will be called just before a flash memory is instantiated.\n'
    '         <param>product_no</param> is the product number specified by the\n'
    '         user. <param>config</param> is the same <param>config</param>\n'
    '         dictionary as passed to the <fun>flash_add_model</fun> function.\n'
    '         The <fun>complete_fun</fun> can modify the attribute values, add\n'
    '         new attributes or remove attributes from the configuration, based\n'
    '         on e.g. the <param>product_no</param>. The <fun>complete_fun</fun>\n'
    '         should return either an error message (i.e. a string), or a tuple\n'
    '         (<param>updated_config</param>, <param>size</param>) where\n'
    '         <param>size</param> is the size of one flash chip, in bytes.</dd>\n'
    '</dl></dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>True if the flash model was successfully added,\n'
    'or False if it failed.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   flash_add_model --- add a new flash model\n'
    '\n'
    'Synopsis\n'
    '   flash_add_model(product_no, config, complete_func)\n'
    '\n'
    'Description\n'
    '   Adds a new flash model. Instances of the new flash can then be\n'
    '   created with the flash_create_memory and flash_create_memory_anon\n'
    '   functions.\n'
    '\n'
    '   These are the arguments:\n'
    '\n'
    '   product_no\n'
    '      Product number; e.g., "28F___C3_". Underscores act as wild cards\n'
    '      and will match any character.\n'
    '\n'
    '   config\n'
    '      Dictionary containing attribute: value pairs. These attributes\n'
    '      are generic-flash-memory attributes; information on available\n'
    '      attributes and how to configure them can be found in the\n'
    '      reference manual.\n'
    '\n'
    '   complete_fun\n'
    '      Function of type complete_fun(product_no, config) that will be\n'
    '      called just before a flash memory is instantiated. product_no is\n'
    '      the product number specified by the user. config is the same\n'
    '      config dictionary as passed to the flash_add_model function. The\n'
    '      complete_fun can modify the attribute values, add new attributes\n'
    '      or remove attributes from the configuration, based on e.g. the\n'
    '      product_no. The complete_fun should return either an error\n'
    '      message (i.e. a string), or a tuple (updated_config, size) where\n'
    '      size is the size of one flash chip, in bytes.\n'
    '\n'
    'Return Value\n'
    '   True if the flash model was successfully added, or False if it\n'
    '   failed.\n'
    '\n'
    '\n') ),

  'flash_memory.flash_create_memory' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>flash_create_memory</b> &mdash; create a list of objects representing a flash memory</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>flash_create_memory(name, product_no, interleave, bus_width,\n'
    '                    files = [],\n'
    '                    queue = None,\n'
    '                    accept_smaller_reads = 1,\n'
    '                    accept_smaller_writes = 0,\n'
    '                    big_endian = 0)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Returns a list of pre_objects suitable as input for\n'
    '<fun>SIM_add_configuration</fun> and the total size in bytes of the flash\n'
    'memory. The list and the size is returned as a tuple.\n'
    '\n'
    'The flash objects will be named, which makes them suitable for use in legacy\n'
    'components. New components should use the function\n'
    '<fun>flash_create_memory_anon</fun> instead.\n'
    '\n'
    'Function arguments:\n'
    '<dl>\n'
    '  <dt><param>name</param></dt>\n'
    '     <dd>Base name for all objects (flash, ram, and image).</dd>\n'
    '  <dt><param>product_no</param></dt>\n'
    '     <dd>Product name; e.g., "28F160C3T".</dd>\n'
    '  <dt><param>interleave</param></dt>\n'
    '     <dd>Byte interleaving; one of 1, 2, 4, and 8.</dd>\n'
    '  <dt><param>bus_width</param></dt>\n'
    '     <dd>Bus width; one of 8, 16, 32, and 64.</dd>\n'
    '  <dt><param>files</param></dt>\n'
    '     <dd>Same as the <attr>file</attr> attribute of <class>image</class>\n'
    '     objects. Defaults to the empty list.</dd>\n'
    '  <dt><param>queue</param></dt>\n'
    '     <dd>Queue object to use.</dd>\n'
    '  <dt><param>accept_smaller_reads</param></dt>\n'
    '     <dd>If 1 (default), the flash device will accept reads smaller than\n'
    '         the bus width. if 0, the flash device will complain when receiving\n'
    '         smaller reads.\n'
    '     </dd>\n'
    '  <dt><param>accept_smaller_writes</param></dt>\n'
    '     <dd>If 1, the flash device will accept writes smaller than the bus\n'
    '         width. If 0 (default), the flash device will complain when\n'
    '         receiving smaller writes.\n'
    '     </dd>\n'
    '  <dt><param>big_endian</param></dt>\n'
    '     <dd>If set, the flash device will behave as a big endian device. If\n'
    '         not set (default), it will behave as a little endian device.\n'
    '     </dd>\n'
    '</dl></dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>tuple(object dict, total size in bytes)</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   flash_create_memory --- create a list of objects representing a\n'
    '   flash memory\n'
    '\n'
    'Synopsis\n'
    '   flash_create_memory(name, product_no, interleave, bus_width,\n'
    '                       files = [],\n'
    '                       queue = None,\n'
    '                       accept_smaller_reads = 1,\n'
    '                       accept_smaller_writes = 0,\n'
    '                       big_endian = 0)\n'
    '\n'
    'Description\n'
    '   Returns a list of pre_objects suitable as input for\n'
    '   SIM_add_configuration and the total size in bytes of the flash\n'
    '   memory. The list and the size is returned as a tuple.\n'
    '\n'
    '   The flash objects will be named, which makes them suitable for use\n'
    '   in legacy components. New components should use the function\n'
    '   flash_create_memory_anon instead.\n'
    '\n'
    '   Function arguments:\n'
    '\n'
    '   name\n'
    '      Base name for all objects (flash, ram, and image).\n'
    '\n'
    '   product_no\n'
    '      Product name; e.g., "28F160C3T".\n'
    '\n'
    '   interleave\n'
    '      Byte interleaving; one of 1, 2, 4, and 8.\n'
    '\n'
    '   bus_width\n'
    '      Bus width; one of 8, 16, 32, and 64.\n'
    '\n'
    '   files\n'
    '      Same as the file attribute of image objects. Defaults to the\n'
    '      empty list.\n'
    '\n'
    '   queue\n'
    '      Queue object to use.\n'
    '\n'
    '   accept_smaller_reads\n'
    '      If 1 (default), the flash device will accept reads smaller than\n'
    '      the bus width. if 0, the flash device will complain when\n'
    '      receiving smaller reads.\n'
    '\n'
    '   accept_smaller_writes\n'
    '      If 1, the flash device will accept writes smaller than the bus\n'
    '      width. If 0 (default), the flash device will complain when\n'
    '      receiving smaller writes.\n'
    '\n'
    '   big_endian\n'
    '      If set, the flash device will behave as a big endian device. If\n'
    '      not set (default), it will behave as a little endian device.\n'
    '\n'
    'Return Value\n'
    '   tuple(object dict, total size in bytes)\n'
    '\n'
    '\n') ),

  'flash_memory.flash_create_memory_anon' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>flash_create_memory_anon</b> &mdash; create a list of objects representing a flash memory</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>flash_create_memory_anon(product_no, interleave, bus_width,\n'
    '                         files = [],\n'
    '                         queue = None,\n'
    '                         accept_smaller_reads = 1,\n'
    '                         accept_smaller_writes = 0,\n'
    '                         big_endian = 0)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Returns an list of pre_objects suitable as input for\n'
    '<fun>SIM_add_configuration</fun> and the total size in bytes of the flash\n'
    'memory. The list and the size is returned as a tuple.\n'
    '\n'
    'The flash objects will be anonymous, which makes them suitable for use in\n'
    'new components. Legacy components should use the function\n'
    '<fun>flash_create_memory</fun> instead.\n'
    '\n'
    'Function arguments:\n'
    '<dl>\n'
    '  <dt><param>product_no</param></dt>\n'
    '     <dd>Product name; e.g., "28F160C3T".</dd>\n'
    '  <dt><param>interleave</param></dt>\n'
    '     <dd>Byte interleaving; one of 1, 2, 4, and 8.</dd>\n'
    '  <dt><param>bus_width</param></dt>\n'
    '     <dd>Bus width; one of 8, 16, 32, and 64.</dd>\n'
    '  <dt><param>files</param></dt>\n'
    '     <dd>Same as the <attr>file</attr> attribute of <class>image</class>\n'
    '     objects. Defaults to the empty list.</dd>\n'
    '  <dt><param>queue</param></dt>\n'
    '     <dd>Queue object to use.</dd>\n'
    '  <dt><param>accept_smaller_reads</param></dt>\n'
    '     <dd>If 1 (default), the flash device will accept reads smaller than\n'
    '         the bus width. if 0, the flash device will complain when receiving\n'
    '         smaller reads.\n'
    '     </dd>\n'
    '  <dt><param>accept_smaller_writes</param></dt>\n'
    '     <dd>If 1, the flash device will accept writes smaller than the bus\n'
    '         width. If 0 (default), the flash device will complain when\n'
    '         receiving smaller writes.\n'
    '     </dd>\n'
    '  <dt><param>big_endian</param></dt>\n'
    '     <dd>If set, the flash device will behave as a big endian device. If\n'
    '         not set (default), it will behave as a little endian device.\n'
    '     </dd>\n'
    '</dl></dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>tuple(object list, total size in bytes)</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   flash_create_memory_anon --- create a list of objects representing\n'
    '   a flash memory\n'
    '\n'
    'Synopsis\n'
    '   flash_create_memory_anon(product_no, interleave, bus_width,\n'
    '                            files = [],\n'
    '                            queue = None,\n'
    '                            accept_smaller_reads = 1,\n'
    '                            accept_smaller_writes = 0,\n'
    '                            big_endian = 0)\n'
    '\n'
    'Description\n'
    '   Returns an list of pre_objects suitable as input for\n'
    '   SIM_add_configuration and the total size in bytes of the flash\n'
    '   memory. The list and the size is returned as a tuple.\n'
    '\n'
    '   The flash objects will be anonymous, which makes them suitable for\n'
    '   use in new components. Legacy components should use the function\n'
    '   flash_create_memory instead.\n'
    '\n'
    '   Function arguments:\n'
    '\n'
    '   product_no\n'
    '      Product name; e.g., "28F160C3T".\n'
    '\n'
    '   interleave\n'
    '      Byte interleaving; one of 1, 2, 4, and 8.\n'
    '\n'
    '   bus_width\n'
    '      Bus width; one of 8, 16, 32, and 64.\n'
    '\n'
    '   files\n'
    '      Same as the file attribute of image objects. Defaults to the\n'
    '      empty list.\n'
    '\n'
    '   queue\n'
    '      Queue object to use.\n'
    '\n'
    '   accept_smaller_reads\n'
    '      If 1 (default), the flash device will accept reads smaller than\n'
    '      the bus width. if 0, the flash device will complain when\n'
    '      receiving smaller reads.\n'
    '\n'
    '   accept_smaller_writes\n'
    '      If 1, the flash device will accept writes smaller than the bus\n'
    '      width. If 0 (default), the flash device will complain when\n'
    '      receiving smaller writes.\n'
    '\n'
    '   big_endian\n'
    '      If set, the flash device will behave as a big endian device. If\n'
    '      not set (default), it will behave as a little endian device.\n'
    '\n'
    'Return Value\n'
    '   tuple(object list, total size in bytes)\n'
    '\n'
    '\n') ),

  'instrumentation.delete_filter' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>delete_filter</b> &mdash; Python function which removes a filter</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>delete_filter(filter_obj)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Used by a filter when a filter object removes itself. Needed to\n'
    'keep the instrumentation framework consistent in regards of which\n'
    'filters that are associated with tools.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   delete_filter --- Python function which removes a filter\n'
    '\n'
    'Synopsis\n'
    '   delete_filter(filter_obj)\n'
    '\n'
    'Description\n'
    '   Used by a filter when a filter object removes itself. Needed to\n'
    '   keep the instrumentation framework consistent in regards of which\n'
    '   filters that are associated with tools.\n'
    '\n'
    '\n') ),

  'instrumentation.get_filter_source' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_filter_source</b> &mdash; Python function to get hold of a unique filter id</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_filter_source(fname)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>For a given name, which could be the filter object name,\n'
    'return an unique number which identifies this filter.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_filter_source --- Python function to get hold of a unique\n'
    '   filter id\n'
    '\n'
    'Synopsis\n'
    '   get_filter_source(fname)\n'
    '\n'
    'Description\n'
    '   For a given name, which could be the filter object name, return an\n'
    '   unique number which identifies this filter.\n'
    '\n'
    '\n') ),

  'instrumentation.make_tool_commands' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>make_tool_commands</b> &mdash; Python function which creates commands for instrumentation tools</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>make_tool_commands(simics_class,\n'
    '                   object_prefix,\n'
    '                   provider_requirements,\n'
    '                   tied_to_class = None,\n'
    '                   provider_names = ("provider", "providers"),\n'
    '                   cmd_type = None,\n'
    '                   # Which commands that should be created\n'
    '                   make_new_cmd = True,\n'
    '                   make_add_instrumentation_cmd = True,\n'
    '                   make_remove_instrumentation_cmd = True,\n'
    '                   make_enable_cmd = True,\n'
    '                   make_disable_cmd = True,\n'
    '                   make_info_cmd = True,\n'
    '                   make_status_cmd = True,\n'
    '                   make_delete_cmd = True,\n'
    '                   make_filter_cmds = True,\n'
    '\n'
    '                   new_cmd_name = None,\n'
    '                   new_cmd_extra_args = ([], None),    # (args, fn)\n'
    '                   new_cmd_can_connect = True,\n'
    '                   new_cmd_doc = "",\n'
    '\n'
    '                   connect_extra_args = ([], None, ""), # (args, fn, doc)\n'
    '                   connect_all_flag = True,\n'
    '\n'
    '                   info_cmd_extend_fn = None,\n'
    '                   status_cmd_extend_fn = None,\n'
    '                   unsupported = False)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This factory function creates several useful commands for an\n'
    'instrumentation tool. Using this function will assert that all\n'
    'instrumentation tools works in an uniform manner. The following\n'
    'commands are created:<ul>\n'
    '\n'
    '<li><cmd>new-&lt;tool&gt;</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.add-instrumentation</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.remove-instrumentation</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.enable-instrumentation</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.disable-instrumentation</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.info</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.status</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.delete</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.add-filter</cmd></li>\n'
    '<li><cmd>&lt;tool&gt;.remove-filter</cmd></li>\n'
    '</ul>\n'
    '\n'
    "The function should be called from the tool's <file>simics_start.py</file>\n"
    'file (read at Simics start-up time, before the module is loaded).\n'
    'The <cmd>new-&lt;tool&gt;</cmd> will be created directly while the\n'
    "other commands will appear once the tool's module has been loaded.\n"
    '\n'
    'For the simplest case, only the <arg>simics_class</arg>,\n'
    '<arg>object_prefix</arg> and <arg>provider_requirements</arg>\n'
    'parameters needs to be specified. The rest of the parameters can\n'
    'be used to make tool specific adaptations for the commands created.\n'
    '\n'
    'By default, all commands useful for an instrumentation tool are created.\n'
    'However, if certain commands should be omitted, the corresponding\n'
    '<arg>make_*</arg> parameters can be set to False.\n'
    '\n'
    '<b><cmd>new-&lt;tool&gt;</cmd></b>: This command creates a Simics object\n'
    'for the given class. The command will be called\n'
    '<tt>new-&lt;simics_class&gt;</tt> where any underscores are replaced with\n'
    'hyphens. The <arg>object_prefix</arg> is used to create an automatic name\n'
    'for the object, by concatenating the prefix with a serial number. This\n'
    'automatic name can be overridden by supplying the <arg>name</arg> command\n'
    'argument.\n'
    '\n'
    'The <arg>provider_requirements</arg> specifies what interface(s) the\n'
    'tool depends on from the provider in order to connect, two variants\n'
    'can be used.\n'
    '<ul>\n'
    '<li>A string with the interface requirement. For example,\n'
    '<tt>cpu_instrumentation_subscribe</tt> (when this interface is needed)\n'
    'or more complex such as\n'
    '<tt>cpu_instrumentation_subscribe &amp; x86_instrumentation_subscribe</tt>\n'
    'when both interfaces must be available.\n'
    '</li>\n'
    '<li>A Python function acting as a filter function, which takes an object\n'
    'as argument and returns True if it was accepted or False if it should not\n'
    'be connected.</li>\n'
    '</ul>\n'
    '\n'
    'By default, the <cmd>new-&lt;tool&gt;</cmd> command is created in the\n'
    'Simics global namespace. The optional <arg>tied_to_class</arg> creates\n'
    "the <cmd>new-&lt;tool&gt;</cmd> command in the class's namespace, i.e. it\n"
    'will be invoked as <cmd>&lt;class&gt;.new-&lt;tool&gt;</cmd>.\n'
    '\n'
    'The <arg>provider_names</arg> parameter should be a tuple of two strings,\n'
    'where the first part is the singular name of the provider and the second\n'
    'the plural. This can be used to give a more descriptive name for the\n'
    "provider objects, e.g., ('processor', 'processors') or ('mouse', 'mice').\n"
    'This is used in both the argument description and the commands associated\n'
    'help text. If the tool can only be connected to one object, <tt>None</tt>\n'
    'can be specified as the plural argument.\n'
    '\n'
    'By default, the <cmd>new-&lt;tool&gt;</cmd> command uses simics_class as\n'
    'the command name. Other name can be used by setting the optional\n'
    '<arg>new_cmd_name</arg>.\n'
    '\n'
    'If the tool needs additional arguments when created, for instance to be\n'
    'able to set required attributes, the <arg>new_cmd_extra_args</arg>\n'
    'parameter can be used. This parameter is a tuple with two elements; the\n'
    'first specifies additional CLI arguments added to the command and the\n'
    'second element specifies a function that will be called to create the\n'
    'object. The function takes the class of the tool, the name of the object,\n'
    'and then user added parameters corresponding to the CLI arguments. The\n'
    'function should return the created object. The following example\n'
    'illustrates how this can be done:\n'
    '\n'
    '<pre size="smaller">\n'
    'import instrumentation\n'
    'def create_logger(tool_class, name, filename):\n'
    '    return SIM_create_object(tool_class, name, log_file=filename)\n'
    '\n'
    'instrumentation.make_tool_commands(\n'
    "    'logger_tool', 'logger',\n"
    "    new_cmd_extra_args = ([(filename_t(), 'log-file', '?', 'default.log')],\n"
    '                          create_logger),\n'
    "    new_cmd_doc = 'The log-file argument sets the log file to write to')\n"
    '</pre>\n'
    '\n'
    'The optional <arg>cmd_type</arg> may specify a list of help categories for\n'
    'the created commands. If not specified, all commands\n'
    'will be added to the "Instrumentation" category.\n'
    '\n'
    'By default, the <cmd>new-&lt;tool&gt;</cmd> command will get the same\n'
    'connection arguments as the <cmd>&lt;tool&gt;.add-instrumentation</cmd>\n'
    'command, see below. However, the <arg>new_cmd_can_connect</arg> can be set\n'
    'to False to remove the connection arguments.  The\n'
    '<arg>new_cmd_doc</arg> can be set to improve and customize the help text\n'
    'for the command.\n'
    '\n'
    '<b><cmd>&lt;tool&gt;.add-instrumentation</cmd></b>: This command\n'
    'connects the tool to one or several providers.\n'
    '\n'
    'The <arg>connect_all_flag</arg> which is set to True by default adds a\n'
    '<i>-connect-all</i> command switch to the\n'
    '<cmd>add-instrumentation</cmd> command. This is a convenient way to\n'
    'connect to all compatible providers in the system.\n'
    '\n'
    'When using <cmd>add-instrumentation</cmd>, each connection to a\n'
    'provider can be configured differently, allowing the tool to instrument\n'
    'different aspects of the system.\n'
    'Tools that supports this, should use the <arg>connect_extra_args</arg>\n'
    'parameter to add additional arguments to the command. This\n'
    'parameter is a tuple with three elements:\n'
    '<ul>\n'
    '<li>The additional CLI arguments as a list.</li>\n'
    '<li>A pre-connect function (called prior to connecting to the provider),\n'
    'which takes the parameters: (tool_object, provider_object,\n'
    '*additional_cli_args).\n'
    'The function should return a tuple with two elements; the argument\n'
    "list which will be passed to the tool's <fun>connect()</fun> method,\n"
    'followed by a textual description of the arguments used, this string\n'
    'is used as a short description of the connection and will for instance\n'
    'be used by the <cmd>list-instrumentation</cmd> command.\n'
    'Any errors in the additional arguments can raise a <tt>cli.CliError</tt>\n'
    'exception, causing the connection to be discarded.</li>\n'
    '<li>Additional documentation for the arguments added to the\n'
    '<cmd>add-instrumentation</cmd> command, found in the help text\n'
    'of the command.</li>\n'
    '</ul>\n'
    '\n'
    'The provider can be <tt>None</tt> if the tool is created without\n'
    'any connection(s).  This allows the tool to signal an error if\n'
    'arguments are given which do not have any effect.\n'
    '\n'
    'The following code is an example of how to use the\n'
    '<arg>connect_extra_args</arg>:\n'
    '\n'
    '<pre size="smaller">\n'
    'import instrumentation\n'
    'def pre_connect(obj, provider, verbose_flag, reg_num):\n'
    '    if provider == None and (verbose_flag or reg_num != None):\n'
    '        raise cli.CliError("Connect arguments given without a provider")\n'
    '\n'
    '    args = [["verbose", verbose_flag],\n'
    '            ["reg_num", reg_num]]\n'
    "    desc = 'Traces reg-%d %s' % (\n"
    "        reg_num, '-verbose' if verbose_flag else '')\n"
    '    return (args, desc)\n'
    '\n'
    'instrumentation.make_tool_commands(\n'
    "    'reg-trazer', 'traze',\n"
    '    connect_extra_args = (\n'
    "        [cli.arg(cli.flag_t, '-v'),\n"
    '         cli.arg(cli.int_t, \'reg-num\', "?", None)],\n'
    '        pre_connect,\n'
    "        '-v for verbose mode. The reg-num sets which register to trace.'))\n"
    '</pre>\n'
    '\n'
    'The <cmd>add-instrumentation</cmd> command also gets a <arg>group</arg>\n'
    'argument that can be set to add the connection to an instrumentation\n'
    'group. See the <cmd>add-instrumentation-group</cmd> command for more\n'
    'information.\n'
    '\n'
    '<b><cmd>&lt;tool&gt;.remove-instrumentation</cmd></b>: This command\n'
    'removes connections previously established.\n'
    '\n'
    '<b><cmd>&lt;tool&gt;.info</cmd></b> and\n'
    '<b><cmd>&lt;tool&gt;.status</cmd></b>: These commands displays some\n'
    'simple generic instrumentation information.\n'
    'It is also possible to extend the output of the info/status\n'
    'commands by passing a Python function in the\n'
    '<arg>info_cmd_extend_fn</arg> and <arg>status_cmd_extend_fn</arg>\n'
    'parameters. These functions takes the tool objects as parameter\n'
    'and should return a list of the following format:\n'
    '\n'
    '<tt>[(heading, [(tag, value), ...]), ...]</tt>\n'
    '\n'
    'This gives the following output to the info/status command: <pre>\n'
    'heading:\n'
    '   tag1 : value1\n'
    '   tag2 : value2\n'
    '   ...\n'
    '...\n'
    '</pre>\n'
    '\n'
    '<b><cmd>&lt;tool&gt;.disable-instrumentation</cmd></b> and\n'
    '<b><cmd>&lt;tool&gt;.enable-instrumentation</cmd></b>: These commands\n'
    'allows the user to disable and enable the tools connections.\n'
    '\n'
    '<b><cmd>&lt;tool&gt;.add-filter</cmd></b> and\n'
    '<b><cmd>&lt;tool&gt;.remove-filter</cmd></b>: These commands add\n'
    'or remove a filter associated with the tool. A filter can disable and\n'
    'enable the tools connection during execution.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   make_tool_commands --- Python function which creates commands for\n'
    '   instrumentation tools\n'
    '\n'
    'Synopsis\n'
    '   make_tool_commands(simics_class,\n'
    '                      object_prefix,\n'
    '                      provider_requirements,\n'
    '                      tied_to_class = None,\n'
    '                      provider_names = ("provider", "providers"),\n'
    '                      cmd_type = None,\n'
    '                      # Which commands that should be created\n'
    '                      make_new_cmd = True,\n'
    '                      make_add_instrumentation_cmd = True,\n'
    '                      make_remove_instrumentation_cmd = True,\n'
    '                      make_enable_cmd = True,\n'
    '                      make_disable_cmd = True,\n'
    '                      make_info_cmd = True,\n'
    '                      make_status_cmd = True,\n'
    '                      make_delete_cmd = True,\n'
    '                      make_filter_cmds = True,\n'
    '\n'
    '                      new_cmd_name = None,\n'
    '                      new_cmd_extra_args = ([], None),    # (args, fn)\n'
    '                      new_cmd_can_connect = True,\n'
    '                      new_cmd_doc = "",\n'
    '\n'
    '                      connect_extra_args = ([], None, ""), # (args, fn, doc)\n'
    '                      connect_all_flag = True,\n'
    '\n'
    '                      info_cmd_extend_fn = None,\n'
    '                      status_cmd_extend_fn = None,\n'
    '                      unsupported = False)\n'
    '\n'
    'Description\n'
    '   This factory function creates several useful commands for an\n'
    '   instrumentation tool. Using this function will assert that all\n'
    '   instrumentation tools works in an uniform manner. The following\n'
    '   commands are created:\n'
    '\n'
    '   * new-<tool>\n'
    '   * <tool>.add-instrumentation\n'
    '   * <tool>.remove-instrumentation\n'
    '   * <tool>.enable-instrumentation\n'
    '   * <tool>.disable-instrumentation\n'
    '   * <tool>.info\n'
    '   * <tool>.status\n'
    '   * <tool>.delete\n'
    '   * <tool>.add-filter\n'
    '   * <tool>.remove-filter\n'
    '\n'
    "   The function should be called from the tool's simics_start.py file\n"
    '   (read at Simics start-up time, before the module is loaded). The\n'
    '   new-<tool> will be created directly while the other commands will\n'
    "   appear once the tool's module has been loaded.\n"
    '\n'
    '   For the simplest case, only the simics_class, object_prefix and\n'
    '   provider_requirements parameters needs to be specified. The rest of\n'
    '   the parameters can be used to make tool specific adaptations for\n'
    '   the commands created.\n'
    '\n'
    '   By default, all commands useful for an instrumentation tool are\n'
    '   created. However, if certain commands should be omitted, the\n'
    '   corresponding make_* parameters can be set to False.\n'
    '\n'
    '   new-<tool>: This command creates a Simics object for the given\n'
    '   class. The command will be called new-<simics_class> where any\n'
    '   underscores are replaced with hyphens. The object_prefix is used to\n'
    '   create an automatic name for the object, by concatenating the\n'
    '   prefix with a serial number. This automatic name can be overridden\n'
    '   by supplying the name command argument.\n'
    '\n'
    '   The provider_requirements specifies what interface(s) the tool\n'
    '   depends on from the provider in order to connect, two variants can\n'
    '   be used.\n'
    '   * A string with the interface requirement. For example,\n'
    '     cpu_instrumentation_subscribe (when this interface is needed) or\n'
    '     more complex such as cpu_instrumentation_subscribe &\n'
    '     x86_instrumentation_subscribe when both interfaces must be\n'
    '     available.\n'
    '   * A Python function acting as a filter function, which takes an\n'
    '     object as argument and returns True if it was accepted or False\n'
    '     if it should not be connected.\n'
    '\n'
    '   By default, the new-<tool> command is created in the Simics global\n'
    '   namespace. The optional tied_to_class creates the new-<tool>\n'
    "   command in the class's namespace, i.e. it will be invoked as\n"
    '   <class>.new-<tool>.\n'
    '\n'
    '   The provider_names parameter should be a tuple of two strings,\n'
    '   where the first part is the singular name of the provider and the\n'
    '   second the plural. This can be used to give a more descriptive name\n'
    "   for the provider objects, e.g., ('processor', 'processors') or\n"
    "   ('mouse', 'mice'). This is used in both the argument description\n"
    '   and the commands associated help text. If the tool can only be\n'
    '   connected to one object, None can be specified as the plural\n'
    '   argument.\n'
    '\n'
    '   By default, the new-<tool> command uses simics_class as the command\n'
    '   name. Other name can be used by setting the optional new_cmd_name.\n'
    '\n'
    '   If the tool needs additional arguments when created, for instance\n'
    '   to be able to set required attributes, the new_cmd_extra_args\n'
    '   parameter can be used. This parameter is a tuple with two elements;\n'
    '   the first specifies additional CLI arguments added to the command\n'
    '   and the second element specifies a function that will be called to\n'
    '   create the object. The function takes the class of the tool, the\n'
    '   name of the object, and then user added parameters corresponding to\n'
    '   the CLI arguments. The function should return the created object.\n'
    '   The following example illustrates how this can be done:\n'
    '\n'
    '\n'
    '   import instrumentation\n'
    '   def create_logger(tool_class, name, filename):\n'
    '       return SIM_create_object(tool_class, name, log_file=filename)\n'
    '\n'
    '   instrumentation.make_tool_commands(\n'
    "       'logger_tool', 'logger',\n"
    "       new_cmd_extra_args = ([(filename_t(), 'log-file', '?', 'default.log')],\n"
    '                             create_logger),\n'
    "       new_cmd_doc = 'The log-file argument sets the log file to write to')\n"
    '\n'
    '   The optional cmd_type may specify a list of help categories for the\n'
    '   created commands. If not specified, all commands will be added to\n'
    '   the "Instrumentation" category.\n'
    '\n'
    '   By default, the new-<tool> command will get the same connection\n'
    '   arguments as the <tool>.add-instrumentation command, see below.\n'
    '   However, the new_cmd_can_connect can be set to False to remove the\n'
    '   connection arguments. The new_cmd_doc can be set to improve and\n'
    '   customize the help text for the command.\n'
    '\n'
    '   <tool>.add-instrumentation: This command connects the tool to one\n'
    '   or several providers.\n'
    '\n'
    '   The connect_all_flag which is set to True by default adds a\n'
    '   -connect-all command switch to the add-instrumentation command.\n'
    '   This is a convenient way to connect to all compatible providers in\n'
    '   the system.\n'
    '\n'
    '   When using add-instrumentation, each connection to a provider can\n'
    '   be configured differently, allowing the tool to instrument\n'
    '   different aspects of the system. Tools that supports this, should\n'
    '   use the connect_extra_args parameter to add additional arguments to\n'
    '   the command. This parameter is a tuple with three elements:\n'
    '   * The additional CLI arguments as a list.\n'
    '   * A pre-connect function (called prior to connecting to the\n'
    '     provider), which takes the parameters: (tool_object,\n'
    '     provider_object, *additional_cli_args). The function should\n'
    '     return a tuple with two elements; the argument list which will be\n'
    "     passed to the tool's connect() method, followed by a textual\n"
    '     description of the arguments used, this string is used as a short\n'
    '     description of the connection and will for instance be used by\n'
    '     the list-instrumentation command. Any errors in the additional\n'
    '     arguments can raise a cli.CliError exception, causing the\n'
    '     connection to be discarded.\n'
    '   * Additional documentation for the arguments added to the\n'
    '     add-instrumentation command, found in the help text of the\n'
    '     command.\n'
    '\n'
    '   The provider can be None if the tool is created without any\n'
    '   connection(s). This allows the tool to signal an error if arguments\n'
    '   are given which do not have any effect.\n'
    '\n'
    '   The following code is an example of how to use the\n'
    '   connect_extra_args:\n'
    '\n'
    '\n'
    '   import instrumentation\n'
    '   def pre_connect(obj, provider, verbose_flag, reg_num):\n'
    '       if provider == None and (verbose_flag or reg_num != None):\n'
    '           raise cli.CliError("Connect arguments given without a provider")\n'
    '\n'
    '       args = [["verbose", verbose_flag],\n'
    '               ["reg_num", reg_num]]\n'
    "       desc = 'Traces reg-%d %s' % (\n"
    "           reg_num, '-verbose' if verbose_flag else '')\n"
    '       return (args, desc)\n'
    '\n'
    '   instrumentation.make_tool_commands(\n'
    "       'reg-trazer', 'traze',\n"
    '       connect_extra_args = (\n'
    "           [cli.arg(cli.flag_t, '-v'),\n"
    '            cli.arg(cli.int_t, \'reg-num\', "?", None)],\n'
    '           pre_connect,\n'
    "           '-v for verbose mode. The reg-num sets which register to trace.'))\n"
    '\n'
    '   The add-instrumentation command also gets a group argument that can\n'
    '   be set to add the connection to an instrumentation group. See the\n'
    '   add-instrumentation-group command for more information.\n'
    '\n'
    '   <tool>.remove-instrumentation: This command removes connections\n'
    '   previously established.\n'
    '\n'
    '   <tool>.info and <tool>.status: These commands displays some simple\n'
    '   generic instrumentation information. It is also possible to extend\n'
    '   the output of the info/status commands by passing a Python function\n'
    '   in the info_cmd_extend_fn and status_cmd_extend_fn parameters.\n'
    '   These functions takes the tool objects as parameter and should\n'
    '   return a list of the following format:\n'
    '\n'
    '   [(heading, [(tag, value), ...]), ...]\n'
    '\n'
    '   This gives the following output to the info/status command:\n'
    '   heading:\n'
    '      tag1 : value1\n'
    '      tag2 : value2\n'
    '      ...\n'
    '   ...\n'
    '\n'
    '   <tool>.disable-instrumentation and <tool>.enable-instrumentation:\n'
    '   These commands allows the user to disable and enable the tools\n'
    '   connections.\n'
    '\n'
    '   <tool>.add-filter and <tool>.remove-filter: These commands add or\n'
    '   remove a filter associated with the tool. A filter can disable and\n'
    '   enable the tools connection during execution.\n'
    '\n'
    '\n') ),

  'link_components.create_simple' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>create_simple</b> &mdash; create a simple link component class</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>create_simple(link_class, endpoint_class, connector_type,\n'
    '              class_desc, basename = None, help_categories = [])</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Create a simple link component class based on the following parameters:\n'
    '\n'
    '<dl>\n'
    '\n'
    '  <dt>link_class</dt> <dd>Name of the link implementation class</dd>\n'
    '\n'
    '  <dt>endpoint_class</dt> <dd>Name of the link endpoint class</dd>\n'
    '\n'
    '  <dt>connector_type</dt> <dd>Name of the connector type for component\n'
    '                             connections</dd>\n'
    '\n'
    '  <dt>class_desc</dt> <dd>Component description</dd>\n'
    '\n'
    '  <dt>basename</dt> <dd>Prefix used to create new component names when none\n'
    '                       is provided</dd>\n'
    '\n'
    '</dl></dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>A new component class from which to inherit</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   create_simple --- create a simple link component class\n'
    '\n'
    'Synopsis\n'
    '   create_simple(link_class, endpoint_class, connector_type,\n'
    '                 class_desc, basename = None, help_categories = [])\n'
    '\n'
    'Description\n'
    '   Create a simple link component class based on the following\n'
    '   parameters:\n'
    '\n'
    '   link_class\n'
    '      Name of the link implementation class\n'
    '\n'
    '   endpoint_class\n'
    '      Name of the link endpoint class\n'
    '\n'
    '   connector_type\n'
    '      Name of the connector type for component connections\n'
    '\n'
    '   class_desc\n'
    '      Component description\n'
    '\n'
    '   basename\n'
    '      Prefix used to create new component names when none is provided\n'
    '\n'
    'Return Value\n'
    '   A new component class from which to inherit\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>link_component</b> &mdash; link components base class</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Class from which to inherit when creating a new custom link component.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   link_component --- link components base class\n'
    '\n'
    'Description\n'
    '   Class from which to inherit when creating a new custom link\n'
    '   component.\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component.add_link_connector' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_link_connector</b> &mdash; add a new initial connector</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_link_connector(self, slot_template, cnt_tmpl)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Add a new initial connector. The <param>slot_template</param>\n'
    'argument is the name of the connector in the component. The\n'
    '<param>cnt_tmpl</param> argument is the template used for the\n'
    'connector, previously registered with\n'
    '<fun>add_connector_template()</fun>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>None</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_link_connector --- add a new initial connector\n'
    '\n'
    'Synopsis\n'
    '   add_link_connector(self, slot_template, cnt_tmpl)\n'
    '\n'
    'Description\n'
    '   Add a new initial connector. The slot_template argument is the name\n'
    '   of the connector in the component. The cnt_tmpl argument is the\n'
    '   template used for the connector, previously registered with\n'
    '   add_connector_template().\n'
    '\n'
    'Return Value\n'
    '   None\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component.add_link_connector_template' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_link_connector_template</b> &mdash; add a link connector template</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_link_connector_template(self, name, type, growing,\n'
    '                            create_unconnected_endpoint,\n'
    '                            get_check_data    = None,\n'
    '                            get_connect_data  = None,\n'
    '                            check             = None,\n'
    '                            connect           = None,\n'
    '                            disconnect        = None,\n'
    '                            allow_new_cnt     = lambda: True,\n'
    '                            allow_destroy_cnt = lambda: True)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function registers a new connector template for the component.\n'
    'From this template, connectors will be created either statically, via\n'
    'the <fun>add_objects()</fun> function, or dynamically if requested.\n'
    'Component templates can be customized through the parameters of\n'
    '<fun>add_link_connector_template()</fun>:\n'
    '\n'
    '<dl>\n'
    '\n'
    '  <dt>name</dt> <dd>is the name of the template, which will be saved in\n'
    '  each connector, so that they can find out from which template they\n'
    '  were created.</dd>\n'
    '\n'
    '  <dt>type</dt> <dd>is the connector type.</dd>\n'
    '\n'
    '  <dt>growing</dt> <dd>indicates whether the connector is static, or\n'
    '  should grow dynamically as connections are made. Static connectors\n'
    '  must be created in <fun>add_objects()</fun>, and will act as classic\n'
    '  component connectors. A dynamic connector will make sure that there\n'
    '  is always a free connector of that template available, by increasing\n'
    '  or decreasing the number of connectors of this template in the link.\n'
    '  Note that several templates can have the same connector type. Each\n'
    '  template will make sure that its connectors grow or shrink\n'
    '  separately.</dd>\n'
    '\n'
    '  <dt>create_unconnected_endpoint</dt> <dd>is the function to call when\n'
    '  a new endpoint pre-conf-object must be created. This endpoint is not\n'
    '  yet connected to a device.</dd>\n'
    '\n'
    '  <dt>get_check_data</dt> <dd>(optional) is called whenever the\n'
    '  standard <fun>get_check_data()</fun> is called. It may return any\n'
    '  <em>additional</em> data necessary for the check() call. The standard\n'
    '  <fun>get_check_data()</fun> will already return the endpoint\n'
    '  object.</dd>\n'
    '\n'
    '  <dt>get_connect_data</dt> <dd>(optional) is similar to\n'
    '  <fun>get_check_data</fun>, but for the <fun>connect()</fun>\n'
    '  call.</dd>\n'
    '\n'
    '  <dt>check</dt> <dd>(optional) is called whenever the standard\n'
    '  <fun>check()</fun> is called. It may return <const>True</const>\n'
    '  (connection accepted) or <const>False</const> (connection refused).\n'
    '  The standard implementation returns always <const>True</const>.</dd>\n'
    '\n'
    '  <dt>connect</dt> <dd>(optional) is called whenever the standard\n'
    '  <fun>connect()</fun> is called. The standard <fun>connect()</fun>\n'
    '  will set the device attribute in the endpoint. <fun>connect</fun> may\n'
    '  take any additional action it deems necessary.</dd>\n'
    '\n'
    '  <dt>disconnect</dt> <dd>(optional) is called whenever the standard\n'
    '  <fun>disconnect()</fun> is called. The standard\n'
    '  <fun>disconnect()</fun> does not do anything as the endpoint object\n'
    '  will be destroyed soon after. <fun>disconnect()</fun> may take any\n'
    '  additional action for the disconnection to succeed.</dd>\n'
    '\n'
    '  <dt>allow_new_nct</dt> <dd>(optional) is used only for growing\n'
    '  connectors. It is called every time a new connection is made to ask\n'
    '  if creating a new empty connector is allowed. It may return\n'
    '  <const>True</const> (new connector allowed) or <const>False</const>\n'
    '  (no new connector). The default function always returns\n'
    '  <const>True</const> (unlimited number of connectors allowed, with\n'
    '  always one free).</dd>\n'
    '\n'
    '  <dt>allow_destroy_cnt</dt> <dd>(optional) is used only for growing\n'
    '  connectors. It is called every time a connection is severed to ask if\n'
    '  the connector being disconnected should be destroyed. It may return\n'
    '  <const>True</const> (destroy the connector) or <const>False</const>\n'
    '  (let the connector). The endpoint object associated will be\n'
    '  automatically destroyed with the connector, or replaced if the\n'
    '  connector is left. The default function returns always\n'
    '  <const>True</const> (unlimited number of connectors allowed, with\n'
    '  always one free).</dd>\n'
    '\n'
    '</dl></dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>The registered connector template</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_link_connector_template --- add a link connector template\n'
    '\n'
    'Synopsis\n'
    '   add_link_connector_template(self, name, type, growing,\n'
    '                               create_unconnected_endpoint,\n'
    '                               get_check_data    = None,\n'
    '                               get_connect_data  = None,\n'
    '                               check             = None,\n'
    '                               connect           = None,\n'
    '                               disconnect        = None,\n'
    '                               allow_new_cnt     = lambda: True,\n'
    '                               allow_destroy_cnt = lambda: True)\n'
    '\n'
    'Description\n'
    '   This function registers a new connector template for the component.\n'
    '   From this template, connectors will be created either statically,\n'
    '   via the add_objects() function, or dynamically if requested.\n'
    '   Component templates can be customized through the parameters of\n'
    '   add_link_connector_template():\n'
    '\n'
    '   name\n'
    '      is the name of the template, which will be saved in each\n'
    '      connector, so that they can find out from which template they\n'
    '      were created.\n'
    '\n'
    '   type\n'
    '      is the connector type.\n'
    '\n'
    '   growing\n'
    '      indicates whether the connector is static, or should grow\n'
    '      dynamically as connections are made. Static connectors must be\n'
    '      created in add_objects(), and will act as classic component\n'
    '      connectors. A dynamic connector will make sure that there is\n'
    '      always a free connector of that template available, by\n'
    '      increasing or decreasing the number of connectors of this\n'
    '      template in the link. Note that several templates can have the\n'
    '      same connector type. Each template will make sure that its\n'
    '      connectors grow or shrink separately.\n'
    '\n'
    '   create_unconnected_endpoint\n'
    '      is the function to call when a new endpoint pre-conf-object must\n'
    '      be created. This endpoint is not yet connected to a device.\n'
    '\n'
    '   get_check_data\n'
    '      (optional) is called whenever the standard get_check_data() is\n'
    '      called. It may return any additional data necessary for the\n'
    '      check() call. The standard get_check_data() will already return\n'
    '      the endpoint object.\n'
    '\n'
    '   get_connect_data\n'
    '      (optional) is similar to get_check_data, but for the connect()\n'
    '      call.\n'
    '\n'
    '   check\n'
    '      (optional) is called whenever the standard check() is called. It\n'
    '      may return True (connection accepted) or False (connection\n'
    '      refused). The standard implementation returns always True.\n'
    '\n'
    '   connect\n'
    '      (optional) is called whenever the standard connect() is called.\n'
    '      The standard connect() will set the device attribute in the\n'
    '      endpoint. connect may take any additional action it deems\n'
    '      necessary.\n'
    '\n'
    '   disconnect\n'
    '      (optional) is called whenever the standard disconnect() is\n'
    '      called. The standard disconnect() does not do anything as the\n'
    '      endpoint object will be destroyed soon after. disconnect() may\n'
    '      take any additional action for the disconnection to succeed.\n'
    '\n'
    '   allow_new_nct\n'
    '      (optional) is used only for growing connectors. It is called\n'
    '      every time a new connection is made to ask if creating a new\n'
    '      empty connector is allowed. It may return True (new connector\n'
    '      allowed) or False (no new connector). The default function\n'
    '      always returns True (unlimited number of connectors allowed,\n'
    '      with always one free).\n'
    '\n'
    '   allow_destroy_cnt\n'
    '      (optional) is used only for growing connectors. It is called\n'
    '      every time a connection is severed to ask if the connector being\n'
    '      disconnected should be destroyed. It may return True (destroy\n'
    '      the connector) or False (let the connector). The endpoint object\n'
    '      associated will be automatically destroyed with the connector,\n'
    '      or replaced if the connector is left. The default function\n'
    '      returns always True (unlimited number of connectors allowed,\n'
    '      with always one free).\n'
    '\n'
    'Return Value\n'
    '   The registered connector template\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component.add_objects' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>add_objects</b> &mdash; add link object and initial connectors</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>add_objects(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should be overridden when inheriting from\n'
    '<class>link_component</class>. It is expected to create a\n'
    'pre-conf-object for the link and to add the initial connectors of the\n'
    'component using <fun>link_component.add_link_connector()</fun>.\n'
    '<fun>add_objects()</fun> is only called when creating a component from\n'
    'scratch; when restoring a checkpoint, objects are assumed to have\n'
    'already been created.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>None</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   add_objects --- add link object and initial connectors\n'
    '\n'
    'Synopsis\n'
    '   add_objects(self)\n'
    '\n'
    'Description\n'
    '   This function should be overridden when inheriting from\n'
    '   link_component. It is expected to create a pre-conf-object for the\n'
    '   link and to add the initial connectors of the component using\n'
    '   link_component.add_link_connector(). add_objects() is only called\n'
    '   when creating a component from scratch; when restoring a\n'
    '   checkpoint, objects are assumed to have already been created.\n'
    '\n'
    'Return Value\n'
    '   None\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component.get_link_object_name' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_link_object_name</b> &mdash; return a unique link object name</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_link_object_name(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return a unique link object name based on the link component name.\n'
    'This is useful for ensuring that all link components with the same name\n'
    'in a distributed simulation will indeed represent the same link.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>A unique link name</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_link_object_name --- return a unique link object name\n'
    '\n'
    'Synopsis\n'
    '   get_link_object_name(self)\n'
    '\n'
    'Description\n'
    '   Return a unique link object name based on the link component name.\n'
    '   This is useful for ensuring that all link components with the same\n'
    '   name in a distributed simulation will indeed represent the same\n'
    '   link.\n'
    '\n'
    'Return Value\n'
    '   A unique link name\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'link_components.link_component.register_connector_templates' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>register_connector_templates</b> &mdash; register connector templates</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>register_connector_templates(self)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should be overridden when inheriting from\n'
    '<class>link_component</class>. It is expected to register the connector\n'
    'templates that will be used in <fun>add_objects()</fun>. Unlike\n'
    '<fun>add_objects()</fun>, this function is always called when creating\n'
    'the component, either from scratch or when restoring a checkpoint.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>None</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd>See separate manual.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   register_connector_templates --- register connector templates\n'
    '\n'
    'Synopsis\n'
    '   register_connector_templates(self)\n'
    '\n'
    'Description\n'
    '   This function should be overridden when inheriting from\n'
    '   link_component. It is expected to register the connector templates\n'
    '   that will be used in add_objects(). Unlike add_objects(), this\n'
    '   function is always called when creating the component, either from\n'
    '   scratch or when restoring a checkpoint.\n'
    '\n'
    'Return Value\n'
    '   None\n'
    '\n'
    'Example\n'
    '   See separate manual.\n'
    '\n'
    '\n') ),

  'probes.CellFormatter' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>CellFormatter</b> &mdash; helper object for various format properties</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Helper Class for summary-probe formatting. Simply holds various\n'
    'formatting properties together, in one class object.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   CellFormatter --- helper object for various format properties\n'
    '\n'
    'Description\n'
    '   Helper Class for summary-probe formatting. Simply holds various\n'
    '   formatting properties together, in one class object.\n'
    '\n'
    '\n') ),

  'probes.ProbeProxy' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>ProbeProxy</b> &mdash; wrapper class of probes that exists in Simics</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The ProbeProxy class represents a Python object for the detected\n'
    'probes in the system. The object wrapping allows easier access\n'
    'to the probe objects through the different probe interfaces.\n'
    '\n'
    'Object implementing the indexed probe interface, will get a\n'
    'dedicated ProbeProxy object per index.\n'
    '\n'
    'The formatting of the different types of probes are also\n'
    'automatically handled by this class.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   ProbeProxy --- wrapper class of probes that exists in Simics\n'
    '\n'
    'Description\n'
    '   The ProbeProxy class represents a Python object for the detected\n'
    '   probes in the system. The object wrapping allows easier access to\n'
    '   the probe objects through the different probe interfaces.\n'
    '\n'
    '   Object implementing the indexed probe interface, will get a\n'
    '   dedicated ProbeProxy object per index.\n'
    '\n'
    '   The formatting of the different types of probes are also\n'
    '   automatically handled by this class.\n'
    '\n'
    '\n') ),

  'probes.get_all_probe_kinds' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_all_probe_kinds</b> &mdash; get all registered probe-kinds in the system</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_all_probe_kinds()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Returns all registered probe-kinds in the system. The probe-kind is\n'
    'the unique probe identifier, not including the objects associated\n'
    'with it.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.get_probes, probes.get_all_probes</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_all_probe_kinds --- get all registered probe-kinds in the\n'
    '   system\n'
    '\n'
    'Synopsis\n'
    '   get_all_probe_kinds()\n'
    '\n'
    'Description\n'
    '   Returns all registered probe-kinds in the system. The probe-kind is\n'
    '   the unique probe identifier, not including the objects associated\n'
    '   with it.\n'
    '\n'
    'See Also\n'
    '   probes.get_probes, probes.get_all_probes\n'
    '\n'
    '\n') ),

  'probes.get_all_probes' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_all_probes</b> &mdash; get all ProbeProxy instances</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_all_probes()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    "    <dd>Returns all Python 'ProbeProxy' objects that exists currently.\n"
    'These objects can be used to access the probe interfaces in a\n'
    'convenient way by using methods in them.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.get_all_probe_kinds, probes.get_probes</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_all_probes --- get all ProbeProxy instances\n'
    '\n'
    'Synopsis\n'
    '   get_all_probes()\n'
    '\n'
    'Description\n'
    "   Returns all Python 'ProbeProxy' objects that exists currently.\n"
    '   These objects can be used to access the probe interfaces in a\n'
    '   convenient way by using methods in them.\n'
    '\n'
    'See Also\n'
    '   probes.get_all_probe_kinds, probes.get_probes\n'
    '\n'
    '\n') ),

  'probes.get_probe_by_object' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_probe_by_object</b> &mdash; get the ProbeProxy instance for an object </dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_probe_by_object(kind, obj)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    "    <dd>Returns the 'ProbeProxy' Python object for a probe-kind in a\n"
    'specific conf object.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.get_all_probe_kinds, probes.get_probes</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_probe_by_object --- get the ProbeProxy instance for an object\n'
    '\n'
    'Synopsis\n'
    '   get_probe_by_object(kind, obj)\n'
    '\n'
    'Description\n'
    "   Returns the 'ProbeProxy' Python object for a probe-kind in a\n"
    '   specific conf object.\n'
    '\n'
    'See Also\n'
    '   probes.get_all_probe_kinds, probes.get_probes\n'
    '\n'
    '\n') ),

  'probes.get_probes' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_probes</b> &mdash; get hold of all ProbeProxy instances implementing a specific probe-kind</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_probes(kind)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    "    <dd>Returns the Python 'ProbeProxy' objects, for probes matching the specific\n"
    'probe-kind.\n'
    'These objects can be used to access the probe interfaces in a\n'
    'convenient way by using methods in them.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.get_all_probe_kinds, probes.get_all_probes</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_probes --- get hold of all ProbeProxy instances implementing a\n'
    '   specific probe-kind\n'
    '\n'
    'Synopsis\n'
    '   get_probes(kind)\n'
    '\n'
    'Description\n'
    "   Returns the Python 'ProbeProxy' objects, for probes matching the\n"
    '   specific probe-kind. These objects can be used to access the probe\n'
    '   interfaces in a convenient way by using methods in them.\n'
    '\n'
    'See Also\n'
    '   probes.get_all_probe_kinds, probes.get_all_probes\n'
    '\n'
    '\n') ),

  'probes.register_probe_delete_cb' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>register_probe_delete_cb</b> &mdash; request a callback when a probe is deleted</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>register_probe_delete_cb(cb)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Register a function which will be called when a probe is deleted from\n'
    'the system. The function only takes a single argument; the ProbeProxy\n'
    'instances that is about to be deleted.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.unregister_probe_delete_cb</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   register_probe_delete_cb --- request a callback when a probe is\n'
    '   deleted\n'
    '\n'
    'Synopsis\n'
    '   register_probe_delete_cb(cb)\n'
    '\n'
    'Description\n'
    '   Register a function which will be called when a probe is deleted\n'
    '   from the system. The function only takes a single argument; the\n'
    '   ProbeProxy instances that is about to be deleted.\n'
    '\n'
    'See Also\n'
    '   probes.unregister_probe_delete_cb\n'
    '\n'
    '\n') ),

  'probes.unregister_probe_delete_cb' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>unregister_probe_delete_cb</b> &mdash; cancel a callback for probe deletion</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>unregister_probe_delete_cb(cb)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Unregister a function callback when probes are deleted.\n'
    'Typically needed when a python module itself is removed.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>probes.register_probe_delete_cb</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   unregister_probe_delete_cb --- cancel a callback for probe deletion\n'
    '\n'
    'Synopsis\n'
    '   unregister_probe_delete_cb(cb)\n'
    '\n'
    'Description\n'
    '   Unregister a function callback when probes are deleted. Typically\n'
    '   needed when a python module itself is removed.\n'
    '\n'
    'See Also\n'
    '   probes.register_probe_delete_cb\n'
    '\n'
    '\n') ),

  'pyobj.Attribute' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Attribute</b> &mdash; a Simics attribute</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>pyobj.Attribute</class> class defines an attribute that will\n'
    'be registered for the containing <class>ConfObject</class> class. The\n'
    'attribute will be registered with Simics using the\n'
    '<fun>SIM_register_attribute</fun> function. See documentation for\n'
    '<fun>SIM_register_attribute</fun> for detailed information about\n'
    'attributes.\n'
    '\n'
    'The arguments to <fun>SIM_register_attribute</fun> is taken from the\n'
    'class members. The <var>attrattr</var> member is an\n'
    '<type>attr_attr_t</type> type and its default value is\n'
    '<tt>Sim_Attr_Optional</tt>. The <var>attrtype</var> member is a string\n'
    "defining the type of the attribute, default value is <em>'a'</em>.\n"
    '\n'
    'The class methods named <fun>getter</fun> and <fun>setter</fun> will be\n'
    'used as <fun>get_attr</fun> and <fun>set_attr</fun> functions when\n'
    'registering the attribute. The methods are optional. An attribute without a\n'
    '<fun>getter</fun> can not be read. An attribute without a <fun>setter</fun>\n'
    'can not be written.\n'
    '\n'
    'The attribute description is the same as the Python class description.\n'
    '\n'
    'The <fun>_initialize</fun> method can be defined if special initialization\n'
    'behavior is required. This can for instance be used to set the default\n'
    'value.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class wee(pyobj.Attribute):\n'
    '    """Documentation for the attribute goes here."""\n'
    '    attrattr = simics.Sim_Attr_Pseudo\n'
    "    attrtype = 'i'\n"
    '    def _initialize(self):\n'
    '        self.val = 4711\n'
    '    def getter(self):\n'
    '        self.val += 3\n'
    '        return self.val\n'
    '    def setter(self, val):\n'
    '        self.val = val</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.SimpleAttribute, pyobj.ClassAttribute, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Attribute --- a Simics attribute\n'
    '\n'
    'Description\n'
    '   The pyobj.Attribute class defines an attribute that will be\n'
    '   registered for the containing ConfObject class. The attribute will\n'
    '   be registered with Simics using the SIM_register_attribute\n'
    '   function. See documentation for SIM_register_attribute for detailed\n'
    '   information about attributes.\n'
    '\n'
    '   The arguments to SIM_register_attribute is taken from the class\n'
    '   members. The attrattr member is an attr_attr_t type and its default\n'
    '   value is Sim_Attr_Optional. The attrtype member is a string\n'
    "   defining the type of the attribute, default value is 'a'.\n"
    '\n'
    '   The class methods named getter and setter will be used as get_attr\n'
    '   and set_attr functions when registering the attribute. The methods\n'
    '   are optional. An attribute without a getter can not be read. An\n'
    '   attribute without a setter can not be written.\n'
    '\n'
    '   The attribute description is the same as the Python class\n'
    '   description.\n'
    '\n'
    '   The _initialize method can be defined if special initialization\n'
    '   behavior is required. This can for instance be used to set the\n'
    '   default value.\n'
    '\n'
    'Example\n'
    '   class wee(pyobj.Attribute):\n'
    '       """Documentation for the attribute goes here."""\n'
    '       attrattr = simics.Sim_Attr_Pseudo\n'
    "       attrtype = 'i'\n"
    '       def _initialize(self):\n'
    '           self.val = 4711\n'
    '       def getter(self):\n'
    '           self.val += 3\n'
    '           return self.val\n'
    '       def setter(self, val):\n'
    '           self.val = val\n'
    '\n'
    'See Also\n'
    '   pyobj.SimpleAttribute, pyobj.ClassAttribute, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.ClassAttribute' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>ClassAttribute</b> &mdash; a Simics class attribute</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>pyobj.ClassAttribute</class> class defines an attribute that\n'
    'will be registered for the containing <class>ConfObject</class> class. The\n'
    'attribute will be registered with Simics using the\n'
    '<fun>SIM_register_class_attribute</fun> function. See documentation\n'
    'for <fun>SIM_register_class_attribute</fun> for detailed information\n'
    'about class attributes.\n'
    '\n'
    'The value stored in the class should always be stored in the\n'
    'attribute named <tt>val</tt>. This is to avoid problems when a\n'
    'class that defines a <class>pyobj.Attribute</class> class is\n'
    'inherited by more than one class.\n'
    '\n'
    'The <class>pyobj.ClassAttribute</class> class is very similar to the\n'
    '<class>pyobj.Attribute</class> class. See the documentation for the\n'
    '<class>pyobj.Attribute</class> class for how to use this class.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class wee(pyobj.ClassAttribute):\n'
    '    """Documentation for the attribute goes here."""\n'
    "    attrtype = 'i'\n"
    '    val = 4711\n'
    '    @classmethod\n'
    '    def getter(cls): return cls.val\n'
    '    @classmethod\n'
    '    def setter(cls, val): cls.val = val</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Attribute, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   ClassAttribute --- a Simics class attribute\n'
    '\n'
    'Description\n'
    '   The pyobj.ClassAttribute class defines an attribute that will be\n'
    '   registered for the containing ConfObject class. The attribute will\n'
    '   be registered with Simics using the SIM_register_class_attribute\n'
    '   function. See documentation for SIM_register_class_attribute for\n'
    '   detailed information about class attributes.\n'
    '\n'
    '   The value stored in the class should always be stored in the\n'
    '   attribute named val. This is to avoid problems when a class that\n'
    '   defines a pyobj.Attribute class is inherited by more than one\n'
    '   class.\n'
    '\n'
    '   The pyobj.ClassAttribute class is very similar to the\n'
    '   pyobj.Attribute class. See the documentation for the\n'
    '   pyobj.Attribute class for how to use this class.\n'
    '\n'
    'Example\n'
    '   class wee(pyobj.ClassAttribute):\n'
    '       """Documentation for the attribute goes here."""\n'
    "       attrtype = 'i'\n"
    '       val = 4711\n'
    '       @classmethod\n'
    '       def getter(cls): return cls.val\n'
    '       @classmethod\n'
    '       def setter(cls, val): cls.val = val\n'
    '\n'
    'See Also\n'
    '   pyobj.Attribute, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.ConfObject' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>ConfObject</b> &mdash; a Simics configuration object</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>pyobj.ConfObject</class> class defines a new Simics class\n'
    'using the <fun>SIM_register_class</fun> function. You could call\n'
    '<fun>SIM_register_class</fun> and all the related functions for\n'
    'attribute and interface registration yourself, but\n'
    '<class>ConfObject</class> will make your code much more concise.\n'
    '\n'
    'The name of the Simics class is identical to the Python\n'
    'class. The class description is the same as the Python class\n'
    'description.\n'
    '\n'
    'The class implements the methods <fun>_initialize</fun>,\n'
    '<fun>_finalize</fun>, <fun>_pre_delete</fun>, <fun>_info</fun>, and\n'
    '<fun>_status</fun>. All of these methods can be overridden if\n'
    'required.\n'
    '\n'
    'The <fun>_initialize</fun> method is called when an object of the\n'
    'class is instantiated. The <fun>_finalize</fun> method is called\n'
    'when the object is finalized. The <fun>_pre_delete</fun> method is\n'
    'called right before an object of the class is deleted.\n'
    '\n'
    'The <fun>_info</fun> and <fun>_status</fun> methods provide data for\n'
    "the class's <cmd>info</cmd> and <cmd>status</cmd> commands; the\n"
    'format of their return value is documented with\n'
    '<fun>cli.new_info_command</fun> and\n'
    '<fun>cli.new_status_command</fun>.\n'
    '\n'
    'If you need to get hold of the Simics <tt>conf_object_t</tt> object\n'
    'associated with a <class>ConfObject</class> instance&mdash;for\n'
    'example, in order to call a Simics API function&mdash;you can find\n'
    'it in the <var>obj</var> member.\n'
    '\n'
    'The <class>pyobj.ConfObject</class> class can contain inner classes\n'
    'that define attributes, interfaces, etc. See\n'
    '<class>pyobj.Port</class>, <class>pyobj.Attribute</class>,\n'
    '<class>pyobj.ClassAttribute</class>, and\n'
    '<class>pyobj.Interface</class> for more documentation. An inner\n'
    'class has a reference to the class that contains it in its\n'
    '<var>_up</var> member.\n'
    '\n'
    'By default, a Simics class is registered automatically whenever a\n'
    'subclass of <class>pyobj.ConfObject</class> is declared. Sometimes\n'
    'this is not desirable; e.g., the class may be a base class, or you\n'
    'may want to allow importing the containing Python file without\n'
    'side-effects. The automatic registration of a Simics class can\n'
    'then be suppressed by setting the member <tt>_do_not_init</tt> to\n'
    '<tt>object()</tt>. That will cause it to not be registered as a\n'
    'Simics class (but its subclasses will be, unless they too employ\n'
    'the same trick).\n'
    '\n'
    'The class method <fun>register</fun> may be called once on each\n'
    '<class>pyobj.ConfObject</class> subclass, to register the Simics\n'
    "class. For a class that doesn't suppress automatic registration, the\n"
    'method currently does nothing.\n'
    '\n'
    'In future Simics versions, a Simics class will no longer be\n'
    'registered automatically, and an explicit call to the\n'
    '<fun>register</fun> method will be required for that.\n'
    '\n'
    'The <var>_class_kind</var> member tells Simics whether objects of\n'
    'this class should be saved when a checkpoint is created.\n'
    'The value is passed to <fun>SIM_register_class</fun>, as the\n'
    '<var>kind</var> field of the <type>class_data_t</type> structure.\n'
    'The default value is <type>Sim_Class_Kind_Vanilla</type>.\n'
    'See the documentation of <fun>SIM_register_class</fun> for details.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class foo(pyobj.ConfObject):\n'
    '    """This is the long-winded documentation for this Simics class.\n'
    '    It can be as long as you want."""\n'
    "    _class_desc = 'One-line doc for the class'\n"
    '\n'
    '    def _initialize(self):\n'
    '        super()._initialize()\n'
    '        self.my_val = 4711\n'
    '\n'
    '    def _info(self):\n'
    '         return [("Python device info", [("my_val", self.my_val)])]\n'
    '\n'
    '    def _status(self):\n'
    '         return [("Python device status",\n'
    '                  [("woot", self.woot.val),\n'
    '                   ("signal", self.signal.val)])]\n'
    '\n'
    "    class woot(pyobj.SimpleAttribute(0, 'i|n')):\n"
    '        """A four-letter attribute"""\n'
    '\n'
    '    class lost(pyobj.Attribute):\n'
    '        """A pseudo attribute"""\n'
    '        attrattr = simics.Sim_Attr_Pseudo\n'
    '        def getter(self):\n'
    '            return self._up.my_val\n'
    '\n'
    '    class signal(pyobj.Interface):\n'
    '        def signal_raise(self): self.val = True\n'
    '        def signal_lower(self): self.val = False\n'
    '        def _initialize(self): self.val = False</pre></dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   ConfObject --- a Simics configuration object\n'
    '\n'
    'Description\n'
    '   The pyobj.ConfObject class defines a new Simics class using the\n'
    '   SIM_register_class function. You could call SIM_register_class and\n'
    '   all the related functions for attribute and interface registration\n'
    '   yourself, but ConfObject will make your code much more concise.\n'
    '\n'
    '   The name of the Simics class is identical to the Python class. The\n'
    '   class description is the same as the Python class description.\n'
    '\n'
    '   The class implements the methods _initialize, _finalize,\n'
    '   _pre_delete, _info, and _status. All of these methods can be\n'
    '   overridden if required.\n'
    '\n'
    '   The _initialize method is called when an object of the class is\n'
    '   instantiated. The _finalize method is called when the object is\n'
    '   finalized. The _pre_delete method is called right before an object\n'
    '   of the class is deleted.\n'
    '\n'
    "   The _info and _status methods provide data for the class's info and\n"
    '   status commands; the format of their return value is documented\n'
    '   with cli.new_info_command and cli.new_status_command.\n'
    '\n'
    '   If you need to get hold of the Simics conf_object_t object\n'
    '   associated with a ConfObject instance---for example, in order to\n'
    '   call a Simics API function---you can find it in the obj member.\n'
    '\n'
    '   The pyobj.ConfObject class can contain inner classes that define\n'
    '   attributes, interfaces, etc. See pyobj.Port, pyobj.Attribute,\n'
    '   pyobj.ClassAttribute, and pyobj.Interface for more documentation.\n'
    '   An inner class has a reference to the class that contains it in its\n'
    '   _up member.\n'
    '\n'
    '   By default, a Simics class is registered automatically whenever a\n'
    '   subclass of pyobj.ConfObject is declared. Sometimes this is not\n'
    '   desirable; e.g., the class may be a base class, or you may want to\n'
    '   allow importing the containing Python file without side-effects.\n'
    '   The automatic registration of a Simics class can then be suppressed\n'
    '   by setting the member _do_not_init to object(). That will cause it\n'
    '   to not be registered as a Simics class (but its subclasses will be,\n'
    '   unless they too employ the same trick).\n'
    '\n'
    '   The class method register may be called once on each\n'
    '   pyobj.ConfObject subclass, to register the Simics class. For a\n'
    "   class that doesn't suppress automatic registration, the method\n"
    '   currently does nothing.\n'
    '\n'
    '   In future Simics versions, a Simics class will no longer be\n'
    '   registered automatically, and an explicit call to the register\n'
    '   method will be required for that.\n'
    '\n'
    '   The _class_kind member tells Simics whether objects of this class\n'
    '   should be saved when a checkpoint is created. The value is passed\n'
    '   to SIM_register_class, as the kind field of the class_data_t\n'
    '   structure. The default value is Sim_Class_Kind_Vanilla. See the\n'
    '   documentation of SIM_register_class for details.\n'
    '\n'
    'Example\n'
    '   class foo(pyobj.ConfObject):\n'
    '       """This is the long-winded documentation for this Simics class.\n'
    '       It can be as long as you want."""\n'
    "       _class_desc = 'One-line doc for the class'\n"
    '\n'
    '       def _initialize(self):\n'
    '           super()._initialize()\n'
    '           self.my_val = 4711\n'
    '\n'
    '       def _info(self):\n'
    '            return [("Python device info", [("my_val", self.my_val)])]\n'
    '\n'
    '       def _status(self):\n'
    '            return [("Python device status",\n'
    '                     [("woot", self.woot.val),\n'
    '                      ("signal", self.signal.val)])]\n'
    '\n'
    "       class woot(pyobj.SimpleAttribute(0, 'i|n')):\n"
    '           """A four-letter attribute"""\n'
    '\n'
    '       class lost(pyobj.Attribute):\n'
    '           """A pseudo attribute"""\n'
    '           attrattr = simics.Sim_Attr_Pseudo\n'
    '           def getter(self):\n'
    '               return self._up.my_val\n'
    '\n'
    '       class signal(pyobj.Interface):\n'
    '           def signal_raise(self): self.val = True\n'
    '           def signal_lower(self): self.val = False\n'
    '           def _initialize(self): self.val = False\n'
    '\n'
    '\n') ),

  'pyobj.Event' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Event</b> &mdash; a Simics event</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd><class>pyobj.Event</class> defines an event that will be registered\n'
    'for the containing <class>ConfObject</class> class. Internally,\n'
    'registration is done with <fun>SIM_register_event</fun>; see the\n'
    'documentation for that API function for detailed information.\n'
    '\n'
    'Events are posted with the <fun>post(clock, data,\n'
    '&lt;duration&gt;)</fun> method. <arg>clock</arg> determines which\n'
    'clock the event is posted on, and <arg>data</arg> is the event\n'
    'data. The duration is the number of <arg>seconds</arg>,\n'
    '<arg>cycles</arg>, or <arg>steps</arg> until the event triggers,\n'
    'specified with the appropriate keyword argument:\n'
    '\n'
    '<pre>\n'
    'ev.post(a_clock, some_data, seconds=4.711)\n'
    'ev.post(a_clock, some_data, cycles=4711)\n'
    'ev.post(a_clock, some_data, steps=4711)\n'
    '</pre>\n'
    '\n'
    'Events can be cancelled before they trigger with either\n'
    '<fun>cancel_time(clock, match_fun)</fun> or <fun>cancel_step(clock,\n'
    'match_fun)</fun> (depending on whether the event duration was\n'
    'specified in steps or not). The <arg>match_fun</arg> argument is\n'
    'optional: if given, it should be a function that accepts an event\n'
    'data parameter, and returns true for the events that should be\n'
    'cancelled; if not given, all events are cancelled.\n'
    '\n'
    'A subclass may define the following methods:\n'
    '\n'
    '<dl>\n'
    '\n'
    '<dt><fun>callback(data)</fun></dt> <dd>Called when the event\n'
    'triggers. Overriding this method is not optional.</dd>\n'
    '\n'
    '<dt><fun>destroy(data)</fun></dt> <dd>Called when the event is\n'
    'removed from the queue without being called. The method is not\n'
    'allowed to use any event API calls; it is mainly intended for\n'
    'freeing event data.</dd>\n'
    '\n'
    '<dt><fun>get_value(data)</fun> and <fun>set_value(val)</fun></dt>\n'
    '<dd>Converts the given event data to an <tt>attr_value_t</tt> value,\n'
    'and the other way around. If the event carries no data that needs\n'
    'checkpointing, you may omit these methods.</dd>\n'
    '\n'
    '<dt><fun>describe(data)</fun></dt> <dd>Called to generate a\n'
    'human-readable description of the event to be used in the\n'
    'print-event-queue command. If you do not supply this method, the\n'
    "event's name will be used.</dd>\n"
    '\n'
    '</dl>\n'
    '\n'
    'Additionally, it may set the <var>flags</var> parameter to\n'
    '<tt>Sim_EC_Notsaved</tt>, if the event should not be checkpointed.\n'
    'In this case, neither <fun>get_value</fun> nor <fun>set_value</fun>\n'
    'should be defined.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class foo(pyobj.ConfObject):\n'
    '    class ev1(pyobj.Event):\n'
    '        def callback(self, data):\n'
    '            do_something(data)\n'
    '    class ev2(pyobj.Event):\n'
    '        def callback(self, data):\n'
    '            self.do_something_else(data)\n'
    '        def get_value(self, data):\n'
    '            return str(data)\n'
    '        def set_value(self, val):\n'
    '            return int(val)\n'
    '        def describe(self, data):\n'
    "            return 'ev2 with %s' % data\n"
    '    class ev3(pyobj.Event):\n'
    '        flags = simics.Sim_EC_Notsaved\n'
    '        def callback(self, data):\n'
    '            self._up.do_this_third_thing(data)</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>SIM_register_event, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Event --- a Simics event\n'
    '\n'
    'Description\n'
    '   pyobj.Event defines an event that will be registered for the\n'
    '   containing ConfObject class. Internally, registration is done with\n'
    '   SIM_register_event; see the documentation for that API function for\n'
    '   detailed information.\n'
    '\n'
    '   Events are posted with the post(clock, data, <duration>) method.\n'
    '   clock determines which clock the event is posted on, and data is\n'
    '   the event data. The duration is the number of seconds, cycles, or\n'
    '   steps until the event triggers, specified with the appropriate\n'
    '   keyword argument:\n'
    '\n'
    '\n'
    '   ev.post(a_clock, some_data, seconds=4.711)\n'
    '   ev.post(a_clock, some_data, cycles=4711)\n'
    '   ev.post(a_clock, some_data, steps=4711)\n'
    '\n'
    '   Events can be cancelled before they trigger with either\n'
    '   cancel_time(clock, match_fun) or cancel_step(clock, match_fun)\n'
    '   (depending on whether the event duration was specified in steps or\n'
    '   not). The match_fun argument is optional: if given, it should be a\n'
    '   function that accepts an event data parameter, and returns true for\n'
    '   the events that should be cancelled; if not given, all events are\n'
    '   cancelled.\n'
    '\n'
    '   A subclass may define the following methods:\n'
    '\n'
    '   callback(data)\n'
    '      Called when the event triggers. Overriding this method is not\n'
    '      optional.\n'
    '\n'
    '   destroy(data)\n'
    '      Called when the event is removed from the queue without being\n'
    '      called. The method is not allowed to use any event API calls; it\n'
    '      is mainly intended for freeing event data.\n'
    '\n'
    '   get_value(data) and set_value(val)\n'
    '      Converts the given event data to an attr_value_t value, and the\n'
    '      other way around. If the event carries no data that needs\n'
    '      checkpointing, you may omit these methods.\n'
    '\n'
    '   describe(data)\n'
    '      Called to generate a human-readable description of the event to\n'
    '      be used in the print-event-queue command. If you do not supply\n'
    "      this method, the event's name will be used.\n"
    '\n'
    '   Additionally, it may set the flags parameter to Sim_EC_Notsaved, if\n'
    '   the event should not be checkpointed. In this case, neither\n'
    '   get_value nor set_value should be defined.\n'
    '\n'
    'Example\n'
    '   class foo(pyobj.ConfObject):\n'
    '       class ev1(pyobj.Event):\n'
    '           def callback(self, data):\n'
    '               do_something(data)\n'
    '       class ev2(pyobj.Event):\n'
    '           def callback(self, data):\n'
    '               self.do_something_else(data)\n'
    '           def get_value(self, data):\n'
    '               return str(data)\n'
    '           def set_value(self, val):\n'
    '               return int(val)\n'
    '           def describe(self, data):\n'
    "               return 'ev2 with %s' % data\n"
    '       class ev3(pyobj.Event):\n'
    '           flags = simics.Sim_EC_Notsaved\n'
    '           def callback(self, data):\n'
    '               self._up.do_this_third_thing(data)\n'
    '\n'
    'See Also\n'
    '   SIM_register_event, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.Interface' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Interface</b> &mdash; a Simics interface</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>pyobj.Interface</class> class implements a Simics\n'
    'interface for the containing <class>ConfObject</class> class. The\n'
    'interface is registered using the <fun>SIM_register_interface</fun>\n'
    'function. The interface name is taken from the class name.\n'
    '\n'
    'The <fun>_initialize</fun> method can be overridden if special\n'
    'initialization behavior is required.\n'
    '\n'
    'To implement port interfaces instead of regular interfaces, place\n'
    'one or more <class>pyobj.Interface</class> subclasses inside a\n'
    '<class>pyobj.Port</class> class.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class signal(pyobj.Interface):\n'
    '    def signal_raise(self): self.val = True\n'
    '    def signal_lower(self): self.val = False\n'
    '    def _initialize(self): self.val = False</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Port, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Interface --- a Simics interface\n'
    '\n'
    'Description\n'
    '   The pyobj.Interface class implements a Simics interface for the\n'
    '   containing ConfObject class. The interface is registered using the\n'
    '   SIM_register_interface function. The interface name is taken from\n'
    '   the class name.\n'
    '\n'
    '   The _initialize method can be overridden if special initialization\n'
    '   behavior is required.\n'
    '\n'
    '   To implement port interfaces instead of regular interfaces, place\n'
    '   one or more pyobj.Interface subclasses inside a pyobj.Port class.\n'
    '\n'
    'Example\n'
    '   class signal(pyobj.Interface):\n'
    '       def signal_raise(self): self.val = True\n'
    '       def signal_lower(self): self.val = False\n'
    '       def _initialize(self): self.val = False\n'
    '\n'
    'See Also\n'
    '   pyobj.Port, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.Port' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Port</b> &mdash; a Simics port</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>To have your <class>ConfObject</class>-based Simics object implement\n'
    'port interfaces, put a subclass of <class>pyobj.Port</class> as an inner\n'
    'class of your <class>ConfObject</class>, and put one or more\n'
    '<class>pyobj.Interface</class> subclasses inside it. The\n'
    '<class>pyobj.Interface</class> subclasses will work just as if they were at\n'
    'the top level, except that they will be registered with\n'
    '<fun>SIM_register_port_interface</fun> instead of\n'
    '<fun>SIM_register_interface</fun>.\n'
    '\n'
    'The <fun>_initialize</fun> method can be overridden if special\n'
    'initialization behavior is required.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class wee(pyobj.Port):\n'
    '    class signal(pyobj.Interface):\n'
    '        def signal_raise(self): self.val = 2\n'
    '        def signal_lower(self): self.val = 1\n'
    '        def _initialize(self): self.val = 0</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Interface, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Port --- a Simics port\n'
    '\n'
    'Description\n'
    '   To have your ConfObject-based Simics object implement port\n'
    '   interfaces, put a subclass of pyobj.Port as an inner class of your\n'
    '   ConfObject, and put one or more pyobj.Interface subclasses inside\n'
    '   it. The pyobj.Interface subclasses will work just as if they were\n'
    '   at the top level, except that they will be registered with\n'
    '   SIM_register_port_interface instead of SIM_register_interface.\n'
    '\n'
    '   The _initialize method can be overridden if special initialization\n'
    '   behavior is required.\n'
    '\n'
    'Example\n'
    '   class wee(pyobj.Port):\n'
    '       class signal(pyobj.Interface):\n'
    '           def signal_raise(self): self.val = 2\n'
    '           def signal_lower(self): self.val = 1\n'
    '           def _initialize(self): self.val = 0\n'
    '\n'
    'See Also\n'
    '   pyobj.Interface, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.PortObject' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>PortObject</b> &mdash; a Simics port object</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <class>pyobj.PortObject</class> class defines a port object class\n'
    'that will be registered as a port object for the containing\n'
    '<class>ConfObject</class> class.\n'
    '\n'
    'The port object will be registered with the name "port.&lt;name&gt;",\n'
    'but this can be changed by defining <var>namespace</var> to something other\n'
    'than "port". One possibility is the empty string.\n'
    '\n'
    'If <var>classname</var> is set, then the port object will be\n'
    'an instance of this external class rather than defining the class\n'
    'locally. The external class cannot be modified by adding e.g.\n'
    'an interface definition inside the <class>PortObject</class> definition.</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class portname(pyobj.PortObject):\n'
    '    """Documentation for the port object goes here."""\n'
    '    class signal(pyobj.Interface):\n'
    '        def signal_raise(self): self.val = 2\n'
    '        def signal_lower(self): self.val = 1\n'
    '        def _initialize(self): self.val = 0</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   PortObject --- a Simics port object\n'
    '\n'
    'Description\n'
    '   The pyobj.PortObject class defines a port object class that will be\n'
    '   registered as a port object for the containing ConfObject class.\n'
    '\n'
    '   The port object will be registered with the name "port.<name>", but\n'
    '   this can be changed by defining namespace to something other than\n'
    '   "port". One possibility is the empty string.\n'
    '\n'
    '   If classname is set, then the port object will be an instance of\n'
    '   this external class rather than defining the class locally. The\n'
    '   external class cannot be modified by adding e.g. an interface\n'
    '   definition inside the PortObject definition.\n'
    '\n'
    'Example\n'
    '   class portname(pyobj.PortObject):\n'
    '       """Documentation for the port object goes here."""\n'
    '       class signal(pyobj.Interface):\n'
    '           def signal_raise(self): self.val = 2\n'
    '           def signal_lower(self): self.val = 1\n'
    '           def _initialize(self): self.val = 0\n'
    '\n'
    'See Also\n'
    '   pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'pyobj.SimpleAttribute' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SimpleAttribute</b> &mdash; a simple Simics attribute</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    "    <dd><pre>SimpleAttribute(init, type = 'a', attr = simics.Sim_Attr_Optional)</pre></dd>\n"
    '  <dt><b>Description</b></dt>\n'
    '    <dd>The <fun>pyobj.SimpleAttribute</fun> function returns a new subclass of\n'
    '<class>pyobj.Attribute</class>, with predefined getter and setter functions\n'
    'that simply store and retrieve the value without further side effects. The\n'
    'value is stored in the <tt>val</tt> member.\n'
    '\n'
    'The <arg>init</arg> argument is the initial value, <arg>type</arg> is the\n'
    'attribute type string, <arg>attr</arg> is the attribute type. If\n'
    '<arg>init</arg> is callable, it will be called, and the return value is the\n'
    'initial value; otherwise, <arg>init</arg> itself is the initial value.\n'
    '\n'
    'The attribute value is stored in the <var>val</var> member of the class.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>pyobj.Attribute class</dd>\n'
    '  <dt><b>Example</b></dt>\n'
    '    <dd><pre size="small">class wee(pyobj.SimpleAttribute(17, \'i\')):\n'
    '    """Documentation for the attribute goes here."""</pre></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>pyobj.Attribute, pyobj.ConfObject</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SimpleAttribute --- a simple Simics attribute\n'
    '\n'
    'Synopsis\n'
    "   SimpleAttribute(init, type = 'a', attr = simics.Sim_Attr_Optional)\n"
    '\n'
    'Description\n'
    '   The pyobj.SimpleAttribute function returns a new subclass of\n'
    '   pyobj.Attribute, with predefined getter and setter functions that\n'
    '   simply store and retrieve the value without further side effects.\n'
    '   The value is stored in the val member.\n'
    '\n'
    '   The init argument is the initial value, type is the attribute type\n'
    '   string, attr is the attribute type. If init is callable, it will be\n'
    '   called, and the return value is the initial value; otherwise, init\n'
    '   itself is the initial value.\n'
    '\n'
    '   The attribute value is stored in the val member of the class.\n'
    '\n'
    'Return Value\n'
    '   pyobj.Attribute class\n'
    '\n'
    'Example\n'
    "   class wee(pyobj.SimpleAttribute(17, 'i')):\n"
    '       """Documentation for the attribute goes here."""\n'
    '\n'
    'See Also\n'
    '   pyobj.Attribute, pyobj.ConfObject\n'
    '\n'
    '\n') ),

  'script_branch.sb_create' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_create</b> &mdash; create a script branch</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_create(func, desc = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Create a script branch that will start executing <arg>func</arg>\n'
    '(which should not take any arguments). The <fun>sb_create</fun>\n'
    'function returns a unique script-branch identifier, that can be\n'
    'used with <fun>sb_interrupt_branch</fun>. It may be called from a\n'
    'script branch to create a new parallel branch. The current branch\n'
    'will resume execution when the new script branch is suspended.\n'
    '\n'
    'The optional <arg>desc</arg> argument will be displayed by\n'
    '<cmd>list-script-branches</cmd> as a description of the script\n'
    'branch.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>script-branch identifier</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_wait, script_branch.sb_interrupt_branch, script_branch.sb_run_in_main_branch</dd>\n'
    '  <dt><b>Execution context</b></dt>\n'
    '    <dd>Global Context</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_create --- create a script branch\n'
    '\n'
    'Synopsis\n'
    '   sb_create(func, desc = None)\n'
    '\n'
    'Description\n'
    '   Create a script branch that will start executing func (which should\n'
    '   not take any arguments). The sb_create function returns a unique\n'
    '   script-branch identifier, that can be used with\n'
    '   sb_interrupt_branch. It may be called from a script branch to\n'
    '   create a new parallel branch. The current branch will resume\n'
    '   execution when the new script branch is suspended.\n'
    '\n'
    '   The optional desc argument will be displayed by\n'
    '   list-script-branches as a description of the script branch.\n'
    '\n'
    'Return Value\n'
    '   script-branch identifier\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_wait, script_branch.sb_interrupt_branch,\n'
    '   script_branch.sb_run_in_main_branch\n'
    '\n'
    'Execution context\n'
    '   Global Context\n'
    '\n'
    '\n') ),

  'script_branch.sb_get_wait_id' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_get_wait_id</b> &mdash; obtain script branch wait ID</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_get_wait_id()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return a new unique script-branch wait-identifier that can be\n'
    'used when suspending a script-branch using <fun>sb_wait</fun>.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>script branch wait-identifier</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_wait, script_branch.sb_signal_waiting</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_get_wait_id --- obtain script branch wait ID\n'
    '\n'
    'Synopsis\n'
    '   sb_get_wait_id()\n'
    '\n'
    'Description\n'
    '   Return a new unique script-branch wait-identifier that can be used\n'
    '   when suspending a script-branch using sb_wait.\n'
    '\n'
    'Return Value\n'
    '   script branch wait-identifier\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_wait, script_branch.sb_signal_waiting\n'
    '\n'
    '\n') ),

  'script_branch.sb_in_main_branch' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_in_main_branch</b> &mdash; indicate if the main branch is running</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_in_main_branch()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return <tt>true</tt> if the main branch is currently active, and not\n'
    'one of the script branches.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_run_in_main_branch</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_in_main_branch --- indicate if the main branch is running\n'
    '\n'
    'Synopsis\n'
    '   sb_in_main_branch()\n'
    '\n'
    'Description\n'
    '   Return true if the main branch is currently active, and not one of\n'
    '   the script branches.\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_run_in_main_branch\n'
    '\n'
    '\n') ),

  'script_branch.sb_interrupt_branch' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_interrupt_branch</b> &mdash; interrupt suspended script branch</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_interrupt_branch(branch_id)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Interrupt a script branch that is currently suspended. The\n'
    '<arg>branch_id</arg> should be the script-branch identifier\n'
    '(returned by <fun>sb_create</fun>) of a suspended script branch,\n'
    'otherwise an exception is raised.\n'
    '\n'
    'As a side effect, the <fun>sb_wait</fun> function called in the\n'
    'script branch will raise a <tt>CliQuietError</tt> exception.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_create, script_branch.sb_wait</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_interrupt_branch --- interrupt suspended script branch\n'
    '\n'
    'Synopsis\n'
    '   sb_interrupt_branch(branch_id)\n'
    '\n'
    'Description\n'
    '   Interrupt a script branch that is currently suspended. The\n'
    '   branch_id should be the script-branch identifier (returned by\n'
    '   sb_create) of a suspended script branch, otherwise an exception is\n'
    '   raised.\n'
    '\n'
    '   As a side effect, the sb_wait function called in the script branch\n'
    '   will raise a CliQuietError exception.\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_create, script_branch.sb_wait\n'
    '\n'
    '\n') ),

  'script_branch.sb_run_in_main_branch' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_run_in_main_branch</b> &mdash; run function in the main thread</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_run_in_main_branch(command, func)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Schedule <arg>func</arg> (which should not take\n'
    'any arguments) to run in the main thread and block the calling script-branch\n'
    'thread until the function has run. A <tt>CliError</tt> exception will\n'
    'be raised if an error occurs while running <arg>func</arg>, otherwise\n'
    'its return value is returned.</dd>\n'
    '  <dt><b>Return Value</b></dt>\n'
    '    <dd>return value of <arg>func</arg></dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_create, script_branch.sb_in_main_branch</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_run_in_main_branch --- run function in the main thread\n'
    '\n'
    'Synopsis\n'
    '   sb_run_in_main_branch(command, func)\n'
    '\n'
    'Description\n'
    '   Schedule func (which should not take any arguments) to run in the\n'
    '   main thread and block the calling script-branch thread until the\n'
    '   function has run. A CliError exception will be raised if an error\n'
    '   occurs while running func, otherwise its return value is returned.\n'
    '\n'
    'Return Value\n'
    '   return value of func\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_create, script_branch.sb_in_main_branch\n'
    '\n'
    '\n') ),

  'script_branch.sb_signal_waiting' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_signal_waiting</b> &mdash; wake up a suspended script branch</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_signal_waiting(wait_id)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Wake up a suspended script-branch, with <arg>wait_id</arg> as wait\n'
    'identifier, letting it run again.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_wait, script_branch.sb_get_wait_id</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_signal_waiting --- wake up a suspended script branch\n'
    '\n'
    'Synopsis\n'
    '   sb_signal_waiting(wait_id)\n'
    '\n'
    'Description\n'
    '   Wake up a suspended script-branch, with wait_id as wait identifier,\n'
    '   letting it run again.\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_wait, script_branch.sb_get_wait_id\n'
    '\n'
    '\n') ),

  'script_branch.sb_wait' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>sb_wait</b> &mdash; suspend a script branch</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>sb_wait(command, wait_id, reverse=None, always=None, wait_data=None,\n'
    '        use_obj=None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Suspend a script branch in the <arg>command</arg> command (a\n'
    'descriptive string) until <fun>sb_signal_waiting</fun> is called\n'
    'with <arg>wait_id</arg> as argument. The <arg>reverse</arg> and\n'
    '<arg>always</arg> should not be used. The <arg>wait_data</arg> argument\n'
    'is a string describing the data being waited for, or\n'
    '<tt>None</tt>. The <arg>use_obj</arg> argument is deprecated and\n'
    'should never be specified.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>script_branch.sb_create, script_branch.sb_get_wait_id, script_branch.sb_signal_waiting</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   sb_wait --- suspend a script branch\n'
    '\n'
    'Synopsis\n'
    '   sb_wait(command, wait_id, reverse=None, always=None, wait_data=None,\n'
    '           use_obj=None)\n'
    '\n'
    'Description\n'
    '   Suspend a script branch in the command command (a descriptive\n'
    '   string) until sb_signal_waiting is called with wait_id as argument.\n'
    '   The reverse and always should not be used. The wait_data argument\n'
    '   is a string describing the data being waited for, or None. The\n'
    '   use_obj argument is deprecated and should never be specified.\n'
    '\n'
    'See Also\n'
    '   script_branch.sb_create, script_branch.sb_get_wait_id,\n'
    '   script_branch.sb_signal_waiting\n'
    '\n'
    '\n') ),

  'simics.CriticalErrors' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>CriticalErrors</b> &mdash; represents critical errors caused by C code called from Python</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>CriticalErrors(args)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This exception is raised when returning to Python from a C function\n'
    'that directly or indirectly caused one or more serious, but\n'
    'recoverable, errors. Elaborate error descriptions are\n'
    'printed when the errors occur, but because of error recovery, the\n'
    'C function will be able to continue without being aware of the error.\n'
    '\n'
    'A C function can cause more than one error; all these are combined\n'
    'into a single Python exception. The main purpose of the exception\n'
    'is to aid debugging, usually by providing a nice Python traceback.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   CriticalErrors --- represents critical errors caused by C code\n'
    '   called from Python\n'
    '\n'
    'Synopsis\n'
    '   CriticalErrors(args)\n'
    '\n'
    'Description\n'
    '   This exception is raised when returning to Python from a C function\n'
    '   that directly or indirectly caused one or more serious, but\n'
    '   recoverable, errors. Elaborate error descriptions are printed when\n'
    '   the errors occur, but because of error recovery, the C function\n'
    '   will be able to continue without being aware of the error.\n'
    '\n'
    '   A C function can cause more than one error; all these are combined\n'
    '   into a single Python exception. The main purpose of the exception\n'
    '   is to aid debugging, usually by providing a nice Python traceback.\n'
    '\n'
    '\n') ),

  'simics.pre_conf_object' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>pre_conf_object</b> &mdash; class for Simics configuration object to instantiate</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>pre_conf_object(object_name, class_name, build_id = None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A class representing a future Simics configuration object named\n'
    '<param>object_name</param>, of class <param>class_name</param>. If\n'
    '<param>object_name</param> is <tt>None</tt>, a unique name will be\n'
    'generated.\n'
    '\n'
    'The <param>build-id</param> of the object can be specified when using the\n'
    '<type>pre_conf_object</type> class during checkpoints update. Refer to\n'
    "<cite>Model Builder User's Guide</cite> for more information.\n"
    '\n'
    'Future configuration attributes are set using normal Python class members:\n'
    '<pre>\n'
    '  a = pre_conf_object("test_object", "test-class")\n'
    '  a.value = 42</pre>\n'
    '\n'
    'After using a <class>pre_conf_object</class> object to create a\n'
    'configuration object, the created object can be obtained by passing the\n'
    "<class>pre_conf_object</class>'s <tt>name</tt> member to\n"
    '<fun>SIM_get_object()</fun>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   pre_conf_object --- class for Simics configuration object to\n'
    '   instantiate\n'
    '\n'
    'Synopsis\n'
    '   pre_conf_object(object_name, class_name, build_id = None)\n'
    '\n'
    'Description\n'
    '   A class representing a future Simics configuration object named\n'
    '   object_name, of class class_name. If object_name is None, a unique\n'
    '   name will be generated.\n'
    '\n'
    '   The build-id of the object can be specified when using the\n'
    '   pre_conf_object class during checkpoints update. Refer to Model\n'
    "   Builder User's Guide for more information.\n"
    '\n'
    '   Future configuration attributes are set using normal Python class\n'
    '   members:\n'
    '     a = pre_conf_object("test_object", "test-class")\n'
    '     a.value = 42\n'
    '\n'
    '   After using a pre_conf_object object to create a configuration\n'
    '   object, the created object can be obtained by passing the\n'
    "   pre_conf_object's name member to SIM_get_object().\n"
    '\n'
    '\n') ),

  'systempanel.SystemPanel' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SystemPanel</b> &mdash; Base class for system panel components</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A base class for system panels. A system panel class should\n'
    "inherit from this and set the 'layout' class variable to describe\n"
    'the contents of the panel.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SystemPanel --- Base class for system panel components\n'
    '\n'
    'Description\n'
    '   A base class for system panels. A system panel class should inherit\n'
    "   from this and set the 'layout' class variable to describe the\n"
    '   contents of the panel.\n'
    '\n'
    '\n') ),

  'systempanel.SystemPanelException' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SystemPanelException</b> &mdash; System panel error</dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Exception thrown for various errors in the system_panel module</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SystemPanelException --- System panel error\n'
    '\n'
    'Description\n'
    '   Exception thrown for various errors in the system_panel module\n'
    '\n'
    '\n') ),

  'systempanel.widgets.BitfieldImageOutput' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>BitfieldImageOutput</b> &mdash; Multiple two-state image outputs driven by a single integer state</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>BitfieldImageOutput(obj_name, contents)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An output consisting of multiple two-state images, driven by a\n'
    'single integer state. such that each two-state image is driven by\n'
    'a single bit in the integer.  Useful e.g. when creating 7-segment\n'
    'displays.\n'
    '\n'
    'The <param>contents</param> parameter is a list of tuples <tt>(mask, x, y,\n'
    '[off_filename, on_filename])</tt>, where the integer <tt>mask</tt> is a\n'
    'power of two, <tt>x</tt> and <tt>y</tt> are integer offsets, and\n'
    '<tt>off_filename</tt> and <tt>on_filename</tt> are file names given on the\n'
    'same form as in the <class>Image</class> class. The <tt>off_filename</tt>\n'
    'image is shown at the given offset whenever the bit indicated by\n'
    '<tt>mask</tt> is 0; <tt>on_filename</tt> is shown otherwise.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   BitfieldImageOutput --- Multiple two-state image outputs driven by\n'
    '   a single integer state\n'
    '\n'
    'Synopsis\n'
    '   BitfieldImageOutput(obj_name, contents)\n'
    '\n'
    'Description\n'
    '   An output consisting of multiple two-state images, driven by a\n'
    '   single integer state. such that each two-state image is driven by a\n'
    '   single bit in the integer. Useful e.g. when creating 7-segment\n'
    '   displays.\n'
    '\n'
    '   The contents parameter is a list of tuples (mask, x, y,\n'
    '   [off_filename, on_filename]), where the integer mask is a power of\n'
    '   two, x and y are integer offsets, and off_filename and on_filename\n'
    '   are file names given on the same form as in the Image class. The\n'
    '   off_filename image is shown at the given offset whenever the bit\n'
    '   indicated by mask is 0; on_filename is shown otherwise.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.BitmapButton' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>BitmapButton</b> &mdash; A bitmap-based button</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>BitmapButton(obj_name, off_bitmap, on_bitmap)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A bitmap-based button. Similar to the standard <class>Button</class>\n'
    'class, but can be put inside a <class>Canvas</class>, and the appearance is\n'
    'based on custom images. The bitmap parameters are filenames of the same\n'
    'type as in the <class>Image</class> class.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   BitmapButton --- A bitmap-based button\n'
    '\n'
    'Synopsis\n'
    '   BitmapButton(obj_name, off_bitmap, on_bitmap)\n'
    '\n'
    'Description\n'
    '   A bitmap-based button. Similar to the standard Button class, but\n'
    '   can be put inside a Canvas, and the appearance is based on custom\n'
    '   images. The bitmap parameters are filenames of the same type as in\n'
    '   the Image class.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.BitmapLed' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>BitmapLed</b> &mdash; A bitmap-based LED</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>BitmapLed(obj_name, off_bitmap, on_bitmap)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A bitmap-based LED. Same as the standard <class>Led</class> class, but\n'
    'can be put inside a <class>Canvas</class>, and custom images can be\n'
    'supplied.  The bitmap constructor parameters are file names of the same\n'
    'type as in the <class>Image</class> class.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   BitmapLed --- A bitmap-based LED\n'
    '\n'
    'Synopsis\n'
    '   BitmapLed(obj_name, off_bitmap, on_bitmap)\n'
    '\n'
    'Description\n'
    '   A bitmap-based LED. Same as the standard Led class, but can be put\n'
    '   inside a Canvas, and custom images can be supplied. The bitmap\n'
    '   constructor parameters are file names of the same type as in the\n'
    '   Image class.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.BitmapToggleButton' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>BitmapToggleButton</b> &mdash; A bitmap-based toggle button</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>BitmapToggleButton(obj_name, off_bitmap, on_bitmap)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A bitmap-based toggle button. Similar to the standard\n'
    '<class>ToggleButton</class> class, but can be put inside a\n'
    '<class>Canvas</class>, and the appearance is based on custom images. The\n'
    'bitmap parameters are file names of the same type as in the\n'
    '<class>Image</class> class.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   BitmapToggleButton --- A bitmap-based toggle button\n'
    '\n'
    'Synopsis\n'
    '   BitmapToggleButton(obj_name, off_bitmap, on_bitmap)\n'
    '\n'
    'Description\n'
    '   A bitmap-based toggle button. Similar to the standard ToggleButton\n'
    '   class, but can be put inside a Canvas, and the appearance is based\n'
    '   on custom images. The bitmap parameters are file names of the same\n'
    '   type as in the Image class.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Button' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Button</b> &mdash; A standard button</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Button(obj_name, label)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A button, that can be pressed. The button state is propagated using the\n'
    '<iface>signal</iface> interface, and can be raised or lowered. Raising and\n'
    'lowering the signal is frontend specific.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Button --- A standard button\n'
    '\n'
    'Synopsis\n'
    '   Button(obj_name, label)\n'
    '\n'
    'Description\n'
    '   A button, that can be pressed. The button state is propagated using\n'
    '   the signal interface, and can be raised or lowered. Raising and\n'
    '   lowering the signal is frontend specific.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Canvas' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Canvas</b> &mdash; A canvas (i.e bitmap container)</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Canvas(contents)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A canvas for painting bitmap-based widgets.  A canvas contains multiple\n'
    'bitmap-based widgets, each drawn at a specified offset.  The\n'
    '<param>contents</param> parameter is a list of elements on the form\n'
    '<param>(x, y, widget)</param>.  Here <param>x</param> and <param>y</param>\n'
    'are integers, and <param>widget</param> is an instance of one of\n'
    '<class>Image</class>, <class>BitmapLed</class>, <class>BitmapButton</class>,\n'
    '<class>BitmapToggleButton</class>,\n'
    '<class>MultiImageOutput</class>, <class>Canvas</class>, or a subclass\n'
    'thereof.  The items are rendered in the same order as they appear in the\n'
    'list; this means that if any widgets overlap, the last one will be drawn on\n'
    'top.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Canvas --- A canvas (i.e bitmap container)\n'
    '\n'
    'Synopsis\n'
    '   Canvas(contents)\n'
    '\n'
    'Description\n'
    '   A canvas for painting bitmap-based widgets. A canvas contains\n'
    '   multiple bitmap-based widgets, each drawn at a specified offset.\n'
    '   The contents parameter is a list of elements on the form (x, y,\n'
    '   widget). Here x and y are integers, and widget is an instance of\n'
    '   one of Image, BitmapLed, BitmapButton, BitmapToggleButton,\n'
    '   MultiImageOutput, Canvas, or a subclass thereof. The items are\n'
    '   rendered in the same order as they appear in the list; this means\n'
    '   that if any widgets overlap, the last one will be drawn on top.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Column' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Column</b> &mdash; A one-dimensional widget container</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Column(contents)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A container for normal (non bitmap-based) widgets. The\n'
    '<class>Column</class> container is a special case of <class>Grid</class>\n'
    'container; the contained widgets are laid out vertically.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Column --- A one-dimensional widget container\n'
    '\n'
    'Synopsis\n'
    '   Column(contents)\n'
    '\n'
    'Description\n'
    '   A container for normal (non bitmap-based) widgets. The Column\n'
    '   container is a special case of Grid container; the contained\n'
    '   widgets are laid out vertically.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Empty' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Empty</b> &mdash; An empty widget</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Empty()</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An empty widget, used to fill containers for layout purposes.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Empty --- An empty widget\n'
    '\n'
    'Synopsis\n'
    '   Empty()\n'
    '\n'
    'Description\n'
    '   An empty widget, used to fill containers for layout purposes.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Grid' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Grid</b> &mdash; A two-dimensional widget container</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Grid(contents, columns)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A two-dimensional widget container.  Containers are used to group other\n'
    'widgets, and enforce a specific layout scheme.  The <param>contents</param>\n'
    'constructor parameter is a list of widget objects; it can contain any other\n'
    'widget except for bitmap-based ones.  Widgets are laid out from left to\n'
    'right, top to bottom. Use the <class>Empty</class> class to fill empty\n'
    'cells. The number of rows in a <class>Grid</class> container is implicitly\n'
    'defined by the length of the <param>contents</param> list and the number of\n'
    'columns specified when creating the container.  See also the\n'
    '<class>Column</class> and <class>Row</class> containers, which are\n'
    'convenience classes for the one-dimensional cases. Containers can contain\n'
    'other containers.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Grid --- A two-dimensional widget container\n'
    '\n'
    'Synopsis\n'
    '   Grid(contents, columns)\n'
    '\n'
    'Description\n'
    '   A two-dimensional widget container. Containers are used to group\n'
    '   other widgets, and enforce a specific layout scheme. The contents\n'
    '   constructor parameter is a list of widget objects; it can contain\n'
    '   any other widget except for bitmap-based ones. Widgets are laid out\n'
    '   from left to right, top to bottom. Use the Empty class to fill\n'
    '   empty cells. The number of rows in a Grid container is implicitly\n'
    '   defined by the length of the contents list and the number of\n'
    '   columns specified when creating the container. See also the Column\n'
    '   and Row containers, which are convenience classes for the\n'
    '   one-dimensional cases. Containers can contain other containers.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Image' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Image</b> &mdash; An image</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Image(filename)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An image, that can be put inside a <class>Canvas</class>\n'
    'class. Currently the only supported file format is PNG, but with full\n'
    'support for transparency. See <class>Canvas</class> class for more\n'
    'information.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Image --- An image\n'
    '\n'
    'Synopsis\n'
    '   Image(filename)\n'
    '\n'
    'Description\n'
    '   An image, that can be put inside a Canvas class. Currently the only\n'
    '   supported file format is PNG, but with full support for\n'
    '   transparency. See Canvas class for more information.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Label' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Label</b> &mdash; An label</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Label(label)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A label, used to present static text.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Label --- An label\n'
    '\n'
    'Synopsis\n'
    '   Label(label)\n'
    '\n'
    'Description\n'
    '   A label, used to present static text.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.LabeledBox' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>LabeledBox</b> &mdash; A container with a label and box drawn around it</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>LabeledBox(label, container)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A single-element container with a text label and a box drawn around\n'
    'it. The single widget given by the <param>container</param> parameter can\n'
    'be of any widget type, but it is typically of a container type.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   LabeledBox --- A container with a label and box drawn around it\n'
    '\n'
    'Synopsis\n'
    '   LabeledBox(label, container)\n'
    '\n'
    'Description\n'
    '   A single-element container with a text label and a box drawn around\n'
    '   it. The single widget given by the container parameter can be of\n'
    '   any widget type, but it is typically of a container type.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Led' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Led</b> &mdash; A standard LED</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Led(obj_name, color=None)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A LED, which can be on or off. Driven by the <iface>signal</iface>\n'
    'interface. The parameter <param>color</param> specifies the color of\n'
    'the LED, all supported colors are described in <cite>Standard Widgets\n'
    'Colors</cite>. The look-and-feel of the LED is frontend specific.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>Standard Widgets Colors</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Led --- A standard LED\n'
    '\n'
    'Synopsis\n'
    '   Led(obj_name, color=None)\n'
    '\n'
    'Description\n'
    '   A LED, which can be on or off. Driven by the signal interface. The\n'
    '   parameter color specifies the color of the LED, all supported\n'
    '   colors are described in Standard Widgets Colors. The look-and-feel\n'
    '   of the LED is frontend specific.\n'
    '\n'
    'See Also\n'
    '   Standard Widgets Colors\n'
    '\n'
    '\n') ),

  'systempanel.widgets.MultiImageOutput' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>MultiImageOutput</b> &mdash; A bitmap-based output that toggles between multiple images</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>MultiImageOutput(obj_name, images)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An output that toggles between multiple custom images.  This\n'
    'can be used, among other things, for multi-coloured LEDs or\n'
    'seven-segment display elements.  The <param>images</param>\n'
    'parameter is a list of paths to image filenames, each one given on\n'
    'the same form as in the <class>Image</class> class.  Numeric input\n'
    'to the panel object via the <iface>uint64_state</iface> interface\n'
    'is used as a 0-based index in the image list.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   MultiImageOutput --- A bitmap-based output that toggles between\n'
    '   multiple images\n'
    '\n'
    'Synopsis\n'
    '   MultiImageOutput(obj_name, images)\n'
    '\n'
    'Description\n'
    '   An output that toggles between multiple custom images. This can be\n'
    '   used, among other things, for multi-coloured LEDs or seven-segment\n'
    '   display elements. The images parameter is a list of paths to image\n'
    '   filenames, each one given on the same form as in the Image class.\n'
    '   Numeric input to the panel object via the uint64_state interface is\n'
    '   used as a 0-based index in the image list.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.NumberInput' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>NumberInput</b> &mdash; An input text field for integer numbers</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>NumberInput(obj_name)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An input text field for integer numbers, provided by the panel user. The\n'
    'value is propagated to the model using the <iface>uint64_state</iface>\n'
    'interface.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   NumberInput --- An input text field for integer numbers\n'
    '\n'
    'Synopsis\n'
    '   NumberInput(obj_name)\n'
    '\n'
    'Description\n'
    '   An input text field for integer numbers, provided by the panel\n'
    '   user. The value is propagated to the model using the uint64_state\n'
    '   interface.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.NumberOutput' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>NumberOutput</b> &mdash; An output text field for integer numbers</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>NumberOutput(obj_name)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>An output text field for integer numbers, presenting integer state from\n'
    'the model. Driven by the <iface>uint64_state</iface> interface.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   NumberOutput --- An output text field for integer numbers\n'
    '\n'
    'Synopsis\n'
    '   NumberOutput(obj_name)\n'
    '\n'
    'Description\n'
    '   An output text field for integer numbers, presenting integer state\n'
    '   from the model. Driven by the uint64_state interface.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.Row' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>Row</b> &mdash; A one-dimensional widget container</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>Row(contents)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A container for normal (non bitmap-based) widgets. The\n'
    '<class>Row</class> container is a special case of <class>Grid</class>\n'
    'container; the contained widgets are laid out horizontally.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   Row --- A one-dimensional widget container\n'
    '\n'
    'Synopsis\n'
    '   Row(contents)\n'
    '\n'
    'Description\n'
    '   A container for normal (non bitmap-based) widgets. The Row\n'
    '   container is a special case of Grid container; the contained\n'
    '   widgets are laid out horizontally.\n'
    '\n'
    '\n') ),

  'systempanel.widgets.ToggleButton' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>ToggleButton</b> &mdash; A toggle button</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>ToggleButton(obj_name, label)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>A toggle button, that can be pressed or released. The button state is\n'
    'propagated using the <iface>signal</iface> interface. When button is\n'
    'pressed, signal is raised. When button is released, signal is lowered. The\n'
    'button must have a label indicating its purpose.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   ToggleButton --- A toggle button\n'
    '\n'
    'Synopsis\n'
    '   ToggleButton(obj_name, label)\n'
    '\n'
    'Description\n'
    '   A toggle button, that can be pressed or released. The button state\n'
    '   is propagated using the signal interface. When button is pressed,\n'
    '   signal is raised. When button is released, signal is lowered. The\n'
    '   button must have a label indicating its purpose.\n'
    '\n'
    '\n') ),

  'table.column_names' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>column_names</b> &mdash; get hold of column names from a property list</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>column_names(prop_list)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Help function to retrieve the column names embedded in\n'
    'the list of table properties.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>table.show</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   column_names --- get hold of column names from a property list\n'
    '\n'
    'Synopsis\n'
    '   column_names(prop_list)\n'
    '\n'
    'Description\n'
    '   Help function to retrieve the column names embedded in the list of\n'
    '   table properties.\n'
    '\n'
    'See Also\n'
    '   table.show\n'
    '\n'
    '\n') ),

  'table.default_table_args' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>default_table_args</b> &mdash; get default table arguments</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>default_table_args(set_dict={})</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Return the tuple representing the default table arguments. The\n'
    'set_dict can contain key/value elements overriding the default\n'
    'value. The key is the same as the name of the table argument in\n'
    'the command.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>table.new_table_command, table.get</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   default_table_args --- get default table arguments\n'
    '\n'
    'Synopsis\n'
    '   default_table_args(set_dict={})\n'
    '\n'
    'Description\n'
    '   Return the tuple representing the default table arguments. The\n'
    '   set_dict can contain key/value elements overriding the default\n'
    '   value. The key is the same as the name of the table argument in the\n'
    '   command.\n'
    '\n'
    'See Also\n'
    '   table.new_table_command, table.get\n'
    '\n'
    '\n') ),

  'table.get' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get</b> &mdash; fetch the formatted table</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get(properties, data, *table_args)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Similar to the <fun>table.show</fun> but this function returns the\n'
    'table as a multi-line string.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>table.new_table_command, table.get</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get --- fetch the formatted table\n'
    '\n'
    'Synopsis\n'
    '   get(properties, data, *table_args)\n'
    '\n'
    'Description\n'
    '   Similar to the table.show but this function returns the table as a\n'
    '   multi-line string.\n'
    '\n'
    'See Also\n'
    '   table.new_table_command, table.get\n'
    '\n'
    '\n') ),

  'table.get_table_arg_value' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>get_table_arg_value</b> &mdash; retrieve the value for a table command argument</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>get_table_arg_value(arg, table_values)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Allows the user command to look at a certain named parameter to get\n'
    'its value. For example, to internally make use of the\n'
    '<tt>-verbose</tt> flag.\n'
    'The <arg>arg</arg> argument specifies the argument to fetch the\n'
    'value of. The <arg>table_values</arg> argument is the tuple of table\n'
    'arguments received in the <fun>table.new_table_command()</fun>\n'
    'callback function.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   get_table_arg_value --- retrieve the value for a table command\n'
    '   argument\n'
    '\n'
    'Synopsis\n'
    '   get_table_arg_value(arg, table_values)\n'
    '\n'
    'Description\n'
    '   Allows the user command to look at a certain named parameter to get\n'
    '   its value. For example, to internally make use of the -verbose\n'
    '   flag. The arg argument specifies the argument to fetch the value\n'
    '   of. The table_values argument is the tuple of table arguments\n'
    '   received in the table.new_table_command() callback function.\n'
    '\n'
    '\n') ),

  'table.new_table_command' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>new_table_command</b> &mdash; register a new command which prints a table</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>new_table_command(command_name,\n'
    '                  cmd_func,\n'
    '                  args = None,\n'
    '                  doc = "",\n'
    '                  sortable_columns = None,\n'
    '                  **kwargs)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Register a specific command for printing the table, with\n'
    'all the command arguments from the <cmd class="table">print-table</cmd>\n'
    'commands, but extendable with personalized argument handling.\n'
    'For example, a dedicated command could print out additional data, or\n'
    'filter out certain rows from the table and only print those.\n'
    '\n'
    'All arguments here are similar to the <fun>cli.new_command()</fun> function\n'
    'except the <arg>sortable_columns</arg> argument.\n'
    '\n'
    'The <arg>cmd_func</arg> function will be called with additional table\n'
    'argument last. The function should use the <fun>table.show()</fun>\n'
    'to produce the table output according to the user arguments.\n'
    '\n'
    'If the <arg>sortable_columns</arg> argument is supplied, it should contain\n'
    'a list of the column namnes which can be used for sorting. This is\n'
    'only used for the expander function. If this argument is not set, the\n'
    'default expander will try to use the table interface to retrieve the\n'
    'column names.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>cli.new_command, table.show</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   new_table_command --- register a new command which prints a table\n'
    '\n'
    'Synopsis\n'
    '   new_table_command(command_name,\n'
    '                     cmd_func,\n'
    '                     args = None,\n'
    '                     doc = "",\n'
    '                     sortable_columns = None,\n'
    '                     **kwargs)\n'
    '\n'
    'Description\n'
    '   Register a specific command for printing the table, with all the\n'
    '   command arguments from the <table>.print-table commands, but\n'
    '   extendable with personalized argument handling. For example, a\n'
    '   dedicated command could print out additional data, or filter out\n'
    '   certain rows from the table and only print those.\n'
    '\n'
    '   All arguments here are similar to the cli.new_command() function\n'
    '   except the sortable_columns argument.\n'
    '\n'
    '   The cmd_func function will be called with additional table argument\n'
    '   last. The function should use the table.show() to produce the table\n'
    '   output according to the user arguments.\n'
    '\n'
    '   If the sortable_columns argument is supplied, it should contain a\n'
    '   list of the column namnes which can be used for sorting. This is\n'
    '   only used for the expander function. If this argument is not set,\n'
    '   the default expander will try to use the table interface to\n'
    '   retrieve the column names.\n'
    '\n'
    'See Also\n'
    '   cli.new_command, table.show\n'
    '\n'
    '\n') ),

  'table.show' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>show</b> &mdash; format and print the table</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>show(properties, data, *table_args)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should be used from a command function registered\n'
    'through the <fun>table.new_table_command()</fun> function to\n'
    'print out the table according to the user arguments.\n'
    'The <arg>properties</arg> argument is a list of key/value pairs\n'
    'setting table properties for the table.\n'
    'The <arg>data</arg> argument contains the two-dimensional data\n'
    'to be printed where the inner list contains the columns and the\n'
    'outer list the rows of the table.\n'
    'See the <iface>table</iface> interface for more information.\n'
    '\n'
    'The <arg>*table_args</arg> argument represents the standard table\n'
    'arguments, received last in the <fun>table.new_table_command()</fun>\n'
    'callback function.</dd>\n'
    '  <dt><b>See Also</b></dt>\n'
    '    <dd>table.new_table_command, table.get</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   show --- format and print the table\n'
    '\n'
    'Synopsis\n'
    '   show(properties, data, *table_args)\n'
    '\n'
    'Description\n'
    '   This function should be used from a command function registered\n'
    '   through the table.new_table_command() function to print out the\n'
    '   table according to the user arguments. The properties argument is a\n'
    '   list of key/value pairs setting table properties for the table. The\n'
    '   data argument contains the two-dimensional data to be printed where\n'
    '   the inner list contains the columns and the outer list the rows of\n'
    '   the table. See the table interface for more information.\n'
    '\n'
    '   The *table_args argument represents the standard table arguments,\n'
    '   received last in the table.new_table_command() callback function.\n'
    '\n'
    'See Also\n'
    '   table.new_table_command, table.get\n'
    '\n'
    '\n') ),

  'update_checkpoint.SIM_register_class_update' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SIM_register_class_update</b> &mdash; register a class update function</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>SIM_register_class_update(build_id, classname, function)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Register the class update function <param>function</param> for class\n'
    '<param>classname</param>, to be run when updating a checkpoint to build-id\n'
    '<param>build_id</param>.\n'
    '\n'
    'The <param>function</param> acts on a single object of a given class. It\n'
    'will be called for all matching objects with the current object as\n'
    "argument. It doesn't need to return anything, however it can't create or\n"
    'destroy objects, only change the attributes of the object it got as\n'
    'parameter, except the object name.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SIM_register_class_update --- register a class update function\n'
    '\n'
    'Synopsis\n'
    '   SIM_register_class_update(build_id, classname, function)\n'
    '\n'
    'Description\n'
    '   Register the class update function function for class classname, to\n'
    '   be run when updating a checkpoint to build-id build_id.\n'
    '\n'
    '   The function acts on a single object of a given class. It will be\n'
    '   called for all matching objects with the current object as\n'
    "   argument. It doesn't need to return anything, however it can't\n"
    '   create or destroy objects, only change the attributes of the object\n'
    '   it got as parameter, except the object name.\n'
    '\n'
    '\n') ),

  'update_checkpoint.SIM_register_generic_update' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SIM_register_generic_update</b> &mdash; register a generic update function</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>SIM_register_generic_update(build_id, function)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Register the generic update function <param>function</param> to be run\n'
    'when updating a checkpoint to build-id <param>build_id</param>. The\n'
    '<param>function</param> acts on one or several objects of various classes,\n'
    'and may rename, create or destroy objects. When the checkpoint reaches the\n'
    'required build-id, the <param>function</param> will be called once with the\n'
    'complete set of objects that constitute the checkpoint as a parameter. It\n'
    'is expected to return three lists of pre_conf_objects: (deleted objects,\n'
    'changed objects, added objects). Deleted objects must have been removed\n'
    'from the configuration, changed objects can have any attribute changed\n'
    '(including their class or their name). Added objects must have been added\n'
    'to the configuration.\n'
    '\n'
    'When renaming an object, the <param>function</param> is expected to remove\n'
    'the object from the checkpoint set under its old name and to add it again\n'
    'under its new name. The object should be reported in the changed object\n'
    'list.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SIM_register_generic_update --- register a generic update function\n'
    '\n'
    'Synopsis\n'
    '   SIM_register_generic_update(build_id, function)\n'
    '\n'
    'Description\n'
    '   Register the generic update function function to be run when\n'
    '   updating a checkpoint to build-id build_id. The function acts on\n'
    '   one or several objects of various classes, and may rename, create\n'
    '   or destroy objects. When the checkpoint reaches the required\n'
    '   build-id, the function will be called once with the complete set of\n'
    '   objects that constitute the checkpoint as a parameter. It is\n'
    '   expected to return three lists of pre_conf_objects: (deleted\n'
    '   objects, changed objects, added objects). Deleted objects must have\n'
    '   been removed from the configuration, changed objects can have any\n'
    '   attribute changed (including their class or their name). Added\n'
    '   objects must have been added to the configuration.\n'
    '\n'
    '   When renaming an object, the function is expected to remove the\n'
    '   object from the checkpoint set under its old name and to add it\n'
    '   again under its new name. The object should be reported in the\n'
    '   changed object list.\n'
    '\n'
    '\n') ),

  'update_checkpoint.SIM_register_post_update' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>SIM_register_post_update</b> &mdash; register a generic update function</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>SIM_register_post_update(function)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>Register the generic update function <param>function</param> to be run\n'
    'when updating a checkpoint to build-id <param>build_id</param>. after all\n'
    'build-id based update functions have run, but before the checkpoint is\n'
    'loaded. The <param>function</param> should behave as functions added with\n'
    '<fun>SIM_register_generic_update</fun>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   SIM_register_post_update --- register a generic update function\n'
    '\n'
    'Synopsis\n'
    '   SIM_register_post_update(function)\n'
    '\n'
    'Description\n'
    '   Register the generic update function function to be run when\n'
    '   updating a checkpoint to build-id build_id. after all build-id\n'
    '   based update functions have run, but before the checkpoint is\n'
    '   loaded. The function should behave as functions added with\n'
    '   SIM_register_generic_update.\n'
    '\n'
    '\n') ),

  'update_checkpoint.all_objects' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>all_objects</b> &mdash; return all objects of a given class</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>all_objects(set, classname)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'Return a list of all objects of class <param>classname</param> present in\n'
    'the checkpoint <param>set</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   all_objects --- return all objects of a given class\n'
    '\n'
    'Synopsis\n'
    '   all_objects(set, classname)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   Return a list of all objects of class classname present in the\n'
    '   checkpoint set.\n'
    '\n'
    '\n') ),

  'update_checkpoint.for_all_objects' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>for_all_objects</b> &mdash; apply a function on all objects of a given class</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>for_all_objects(set, classname, function)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'Apply the function <param>function</param> on all objects of class\n'
    '<param>classname</param> present in <param>set</param>.\n'
    '<param>function</param> is defined as:\n'
    '\n'
    '<pre>function(config, object)</pre>\n'
    '\n'
    'where <param>config</param> is the Python dictionary containing all\n'
    'objects, and object is an object of class <param>classname</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   for_all_objects --- apply a function on all objects of a given\n'
    '   class\n'
    '\n'
    'Synopsis\n'
    '   for_all_objects(set, classname, function)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   Apply the function function on all objects of class classname\n'
    '   present in set. function is defined as:\n'
    '\n'
    '   function(config, object)\n'
    '\n'
    '   where config is the Python dictionary containing all objects, and\n'
    '   object is an object of class classname.\n'
    '\n'
    '\n') ),

  'update_checkpoint.remove_attr' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>remove_attr</b> &mdash; remove an attribute</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>remove_attr(obj, name)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'Remove the attribute <param>name</param> from the object\n'
    '<param>obj</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   remove_attr --- remove an attribute\n'
    '\n'
    'Synopsis\n'
    '   remove_attr(obj, name)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   Remove the attribute name from the object obj.\n'
    '\n'
    '\n') ),

  'update_checkpoint.remove_class' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>remove_class</b> &mdash; remove all instances of a class</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>remove_class(set, classname)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'In the checkpoint <param>set</param>, remove all objects of class\n'
    '<param>classname</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   remove_class --- remove all instances of a class\n'
    '\n'
    'Synopsis\n'
    '   remove_class(set, classname)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   In the checkpoint set, remove all objects of class classname.\n'
    '\n'
    '\n') ),

  'update_checkpoint.remove_class_attr' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>remove_class_attr</b> &mdash; remove a class attribute</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>remove_class_attr(set, classname, name)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'In the checkpoint <param>set</param>, remove the class attribute\n'
    '<param>name</param> from all objects of class <param>classname</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   remove_class_attr --- remove a class attribute\n'
    '\n'
    'Synopsis\n'
    '   remove_class_attr(set, classname, name)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   In the checkpoint set, remove the class attribute name from all\n'
    '   objects of class classname.\n'
    '\n'
    '\n') ),

  'update_checkpoint.rename_attr' : ( (''
    '<dl>\n'
    '  <dt><b>Name</b></dt>\n'
    '    <dd><b>rename_attr</b> &mdash; rename an attribute</dd>\n'
    '  <dt><b>Synopsis</b></dt>\n'
    '    <dd><pre>rename_attr(obj, new_attr, old_attr)</pre></dd>\n'
    '  <dt><b>Description</b></dt>\n'
    '    <dd>This function should only be used while updating checkpoints, as\n'
    "described in <cite>Model Builder User's Guide</cite>, in the\n"
    '<cite>Checkpoint Compatibility</cite> chapter.\n'
    '\n'
    'Rename the attribute <param>old_attr</param> to <param>new_attr</param> in\n'
    'the object <param>obj</param>.</dd>\n'
    '</dl>\n'),
    (''
    'Name\n'
    '   rename_attr --- rename an attribute\n'
    '\n'
    'Synopsis\n'
    '   rename_attr(obj, new_attr, old_attr)\n'
    '\n'
    'Description\n'
    '   This function should only be used while updating checkpoints, as\n'
    "   described in Model Builder User's Guide, in the Checkpoint\n"
    '   Compatibility chapter.\n'
    '\n'
    '   Rename the attribute old_attr to new_attr in the object obj.\n'
    '\n'
    '\n') ),

}
