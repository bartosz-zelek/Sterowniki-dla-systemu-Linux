// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_BREAKPOINTS_H
#define SIMICS_CPP_MODEL_IFACE_BREAKPOINTS_H

#include "simics/model-iface/breakpoints.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class BreakpointInterface {
  public:
    using ctype = breakpoint_interface_t;

    // Function override and implemented by user
    virtual void insert_breakpoint(conf_object_t *caller, breakpoint_handle_t handle, access_t access, generic_address_t start, generic_address_t end) = 0;
    virtual void remove_breakpoint(breakpoint_handle_t handle) = 0;
    virtual breakpoint_info_t get_breakpoint(breakpoint_handle_t handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void insert_breakpoint(conf_object_t *object, conf_object_t *caller, breakpoint_handle_t handle, access_t access, generic_address_t start, generic_address_t end) {
            detail::get_interface<BreakpointInterface>(object)->insert_breakpoint(caller, handle, access, start, end);
        }
        static void remove_breakpoint(conf_object_t *object, breakpoint_handle_t handle) {
            detail::get_interface<BreakpointInterface>(object)->remove_breakpoint(handle);
        }
        static breakpoint_info_t get_breakpoint(conf_object_t *obj, breakpoint_handle_t handle) {
            return detail::get_interface<BreakpointInterface>(obj)->get_breakpoint(handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakpointInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void insert_breakpoint(conf_object_t *caller, breakpoint_handle_t handle, access_t access, generic_address_t start, generic_address_t end) const {
            iface_->insert_breakpoint(obj_, caller, handle, access, start, end);
        }
        void remove_breakpoint(breakpoint_handle_t handle) const {
            iface_->remove_breakpoint(obj_, handle);
        }
        breakpoint_info_t get_breakpoint(breakpoint_handle_t handle) const {
            return iface_->get_breakpoint(obj_, handle);
        }

        const BreakpointInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakpointInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAKPOINT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakpointInterface::ctype funcs {
                FromC::insert_breakpoint,
                FromC::remove_breakpoint,
                FromC::get_breakpoint,
            };
            return &funcs;
        }
    };
};

class BreakpointChangeInterface {
  public:
    using ctype = breakpoint_change_interface_t;

    // Function override and implemented by user
    virtual void breakpoint_added(conf_object_t *bp_obj, breakpoint_handle_t handle) = 0;
    virtual void breakpoint_removed(conf_object_t *bp_obj, breakpoint_handle_t handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void breakpoint_added(conf_object_t *obj, conf_object_t *bp_obj, breakpoint_handle_t handle) {
            detail::get_interface<BreakpointChangeInterface>(obj)->breakpoint_added(bp_obj, handle);
        }
        static void breakpoint_removed(conf_object_t *obj, conf_object_t *bp_obj, breakpoint_handle_t handle) {
            detail::get_interface<BreakpointChangeInterface>(obj)->breakpoint_removed(bp_obj, handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakpointChangeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void breakpoint_added(conf_object_t *bp_obj, breakpoint_handle_t handle) const {
            iface_->breakpoint_added(obj_, bp_obj, handle);
        }
        void breakpoint_removed(conf_object_t *bp_obj, breakpoint_handle_t handle) const {
            iface_->breakpoint_removed(obj_, bp_obj, handle);
        }

        const BreakpointChangeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakpointChangeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAKPOINT_CHANGE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakpointChangeInterface::ctype funcs {
                FromC::breakpoint_added,
                FromC::breakpoint_removed,
            };
            return &funcs;
        }
    };
};

class BreakpointQueryV2Interface {
  public:
    using ctype = breakpoint_query_v2_interface_t;

    // Function override and implemented by user
    virtual breakpoint_set_t get_breakpoints(access_t read_write_execute, generic_address_t start, generic_address_t end) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static breakpoint_set_t get_breakpoints(conf_object_t *obj, access_t read_write_execute, generic_address_t start, generic_address_t end) {
            return detail::get_interface<BreakpointQueryV2Interface>(obj)->get_breakpoints(read_write_execute, start, end);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakpointQueryV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        breakpoint_set_t get_breakpoints(access_t read_write_execute, generic_address_t start, generic_address_t end) const {
            return iface_->get_breakpoints(obj_, read_write_execute, start, end);
        }

        const BreakpointQueryV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakpointQueryV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAKPOINT_QUERY_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakpointQueryV2Interface::ctype funcs {
                FromC::get_breakpoints,
            };
            return &funcs;
        }
    };
};

class BreakpointTriggerInterface {
  public:
    using ctype = breakpoint_trigger_interface_t;

    // Function override and implemented by user
    virtual void trigger_breakpoint(conf_object_t *initiator_obj, breakpoint_handle_t handle, generic_address_t address, generic_address_t size, access_t access, uint8 *data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void trigger_breakpoint(conf_object_t *obj, conf_object_t *initiator_obj, breakpoint_handle_t handle, generic_address_t address, generic_address_t size, access_t access, uint8 *data) {
            detail::get_interface<BreakpointTriggerInterface>(obj)->trigger_breakpoint(initiator_obj, handle, address, size, access, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakpointTriggerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void trigger_breakpoint(conf_object_t *initiator_obj, breakpoint_handle_t handle, generic_address_t address, generic_address_t size, access_t access, uint8 *data) const {
            iface_->trigger_breakpoint(obj_, initiator_obj, handle, address, size, access, data);
        }

        const BreakpointTriggerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakpointTriggerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAKPOINT_TRIGGER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakpointTriggerInterface::ctype funcs {
                FromC::trigger_breakpoint,
            };
            return &funcs;
        }
    };
};

class VirtualDataBreakpointInterface {
  public:
    using ctype = virtual_data_breakpoint_interface_t;

    // Function override and implemented by user
    virtual virtual_data_bp_handle_t * add_read(generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, unsigned size), cbdata_register_t data, uint32 flags) = 0;
    virtual virtual_data_bp_handle_t * add_write(generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, bytes_t value), cbdata_register_t data, uint32 flags) = 0;
    virtual void remove(virtual_data_bp_handle_t *bp_handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static virtual_data_bp_handle_t * add_read(conf_object_t *obj, generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, unsigned size), cbdata_register_t data, uint32 flags) {
            return detail::get_interface<VirtualDataBreakpointInterface>(obj)->add_read(first, last, callback, data, flags);
        }
        static virtual_data_bp_handle_t * add_write(conf_object_t *obj, generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, bytes_t value), cbdata_register_t data, uint32 flags) {
            return detail::get_interface<VirtualDataBreakpointInterface>(obj)->add_write(first, last, callback, data, flags);
        }
        static void remove(conf_object_t *obj, virtual_data_bp_handle_t *bp_handle) {
            detail::get_interface<VirtualDataBreakpointInterface>(obj)->remove(bp_handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VirtualDataBreakpointInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        virtual_data_bp_handle_t * add_read(generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, unsigned size), cbdata_register_t data, uint32 flags) const {
            return iface_->add_read(obj_, first, last, callback, data, flags);
        }
        virtual_data_bp_handle_t * add_write(generic_address_t first, generic_address_t last, void (*callback)( cbdata_call_t data, conf_object_t *initiator, generic_address_t address, bytes_t value), cbdata_register_t data, uint32 flags) const {
            return iface_->add_write(obj_, first, last, callback, data, flags);
        }
        void remove(virtual_data_bp_handle_t *bp_handle) const {
            iface_->remove(obj_, bp_handle);
        }

        const VirtualDataBreakpointInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VirtualDataBreakpointInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VIRTUAL_DATA_BREAKPOINT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VirtualDataBreakpointInterface::ctype funcs {
                FromC::add_read,
                FromC::add_write,
                FromC::remove,
            };
            return &funcs;
        }
    };
};

class VirtualInstructionBreakpointInterface {
  public:
    using ctype = virtual_instruction_breakpoint_interface_t;

    // Function override and implemented by user
    virtual virtual_instr_bp_handle_t * add(generic_address_t first, generic_address_t last, bool (*filter)(cbdata_call_t filter_data, conf_object_t *cpu, bytes_t opcode), cbdata_register_t filter_data, void (*callback)( cbdata_call_t callback_data, conf_object_t *cpu, generic_address_t address, unsigned size), cbdata_register_t callback_data, uint32 flags) = 0;
    virtual void remove(virtual_instr_bp_handle_t *bp_handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static virtual_instr_bp_handle_t * add(conf_object_t *obj, generic_address_t first, generic_address_t last, bool (*filter)(cbdata_call_t filter_data, conf_object_t *cpu, bytes_t opcode), cbdata_register_t filter_data, void (*callback)( cbdata_call_t callback_data, conf_object_t *cpu, generic_address_t address, unsigned size), cbdata_register_t callback_data, uint32 flags) {
            return detail::get_interface<VirtualInstructionBreakpointInterface>(obj)->add(first, last, filter, filter_data, callback, callback_data, flags);
        }
        static void remove(conf_object_t *obj, virtual_instr_bp_handle_t *bp_handle) {
            detail::get_interface<VirtualInstructionBreakpointInterface>(obj)->remove(bp_handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VirtualInstructionBreakpointInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        virtual_instr_bp_handle_t * add(generic_address_t first, generic_address_t last, bool (*filter)(cbdata_call_t filter_data, conf_object_t *cpu, bytes_t opcode), cbdata_register_t filter_data, void (*callback)( cbdata_call_t callback_data, conf_object_t *cpu, generic_address_t address, unsigned size), cbdata_register_t callback_data, uint32 flags) const {
            return iface_->add(obj_, first, last, filter, filter_data, callback, callback_data, flags);
        }
        void remove(virtual_instr_bp_handle_t *bp_handle) const {
            iface_->remove(obj_, bp_handle);
        }

        const VirtualInstructionBreakpointInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VirtualInstructionBreakpointInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VIRTUAL_INSTRUCTION_BREAKPOINT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VirtualInstructionBreakpointInterface::ctype funcs {
                FromC::add,
                FromC::remove,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
