// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_ABS_POINTER_H
#define SIMICS_CPP_MODEL_IFACE_ABS_POINTER_H

#include "simics/model-iface/abs-pointer.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class AbsPointerInterface {
  public:
    using ctype = abs_pointer_interface_t;

    // Function override and implemented by user
    virtual void set_state(abs_pointer_state_t state) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_state(conf_object_t *obj, abs_pointer_state_t state) {
            detail::get_interface<AbsPointerInterface>(obj)->set_state(state);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const AbsPointerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_state(abs_pointer_state_t state) const {
            iface_->set_state(obj_, state);
        }

        const AbsPointerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const AbsPointerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ABS_POINTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr AbsPointerInterface::ctype funcs {
                FromC::set_state,
            };
            return &funcs;
        }
    };
};

class AbsPointerActivateInterface {
  public:
    using ctype = abs_pointer_activate_interface_t;

    // Function override and implemented by user
    virtual void enable() = 0;
    virtual void disable() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void enable(conf_object_t *obj) {
            detail::get_interface<AbsPointerActivateInterface>(obj)->enable();
        }
        static void disable(conf_object_t *obj) {
            detail::get_interface<AbsPointerActivateInterface>(obj)->disable();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const AbsPointerActivateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void enable() const {
            iface_->enable(obj_);
        }
        void disable() const {
            iface_->disable(obj_);
        }

        const AbsPointerActivateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const AbsPointerActivateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ABS_POINTER_ACTIVATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr AbsPointerActivateInterface::ctype funcs {
                FromC::enable,
                FromC::disable,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
