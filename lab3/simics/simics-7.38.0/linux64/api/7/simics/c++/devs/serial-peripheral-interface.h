// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_SERIAL_PERIPHERAL_INTERFACE_H
#define SIMICS_CPP_DEVS_SERIAL_PERIPHERAL_INTERFACE_H

#include "simics/devs/serial-peripheral-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SerialPeripheralInterfaceMasterInterface {
  public:
    using ctype = serial_peripheral_interface_master_interface_t;

    // Function override and implemented by user
    virtual void spi_response(int bits, dbuffer_t *payload) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void spi_response(conf_object_t *obj, int bits, dbuffer_t *payload) {
            detail::get_interface<SerialPeripheralInterfaceMasterInterface>(obj)->spi_response(bits, payload);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SerialPeripheralInterfaceMasterInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void spi_response(int bits, dbuffer_t *payload) const {
            iface_->spi_response(obj_, bits, payload);
        }

        const SerialPeripheralInterfaceMasterInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SerialPeripheralInterfaceMasterInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SERIAL_PERIPHERAL_INTERFACE_MASTER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SerialPeripheralInterfaceMasterInterface::ctype funcs {
                FromC::spi_response,
            };
            return &funcs;
        }
    };
};

class SerialPeripheralInterfaceSlaveInterface {
  public:
    using ctype = serial_peripheral_interface_slave_interface_t;

    // Function override and implemented by user
    virtual void spi_request(int first, int last, int bits, dbuffer_t *payload) = 0;
    virtual void connect_master(conf_object_t *master, const char *port, serial_peripheral_interface_flags_t flags) = 0;
    virtual void disconnect_master(conf_object_t *master) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void spi_request(conf_object_t *obj, int first, int last, int bits, dbuffer_t *payload) {
            detail::get_interface<SerialPeripheralInterfaceSlaveInterface>(obj)->spi_request(first, last, bits, payload);
        }
        static void connect_master(conf_object_t *obj, conf_object_t *master, const char *port, serial_peripheral_interface_flags_t flags) {
            detail::get_interface<SerialPeripheralInterfaceSlaveInterface>(obj)->connect_master(master, port, flags);
        }
        static void disconnect_master(conf_object_t *obj, conf_object_t *master) {
            detail::get_interface<SerialPeripheralInterfaceSlaveInterface>(obj)->disconnect_master(master);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SerialPeripheralInterfaceSlaveInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void spi_request(int first, int last, int bits, dbuffer_t *payload) const {
            iface_->spi_request(obj_, first, last, bits, payload);
        }
        void connect_master(conf_object_t *master, const char *port, serial_peripheral_interface_flags_t flags) const {
            iface_->connect_master(obj_, master, port, flags);
        }
        void disconnect_master(conf_object_t *master) const {
            iface_->disconnect_master(obj_, master);
        }

        const SerialPeripheralInterfaceSlaveInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SerialPeripheralInterfaceSlaveInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SERIAL_PERIPHERAL_INTERFACE_SLAVE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SerialPeripheralInterfaceSlaveInterface::ctype funcs {
                FromC::spi_request,
                FromC::connect_master,
                FromC::disconnect_master,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
