// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_NODE_TREE_INTERFACES_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_NODE_TREE_INTERFACES_H

#include "simics/simulator-iface/osa-node-tree-interfaces.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaNodeTreeQueryInterface {
  public:
    using ctype = osa_node_tree_query_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_root_nodes() = 0;
    virtual attr_value_t get_node(node_id_t node_id) = 0;
    virtual attr_value_t get_current_nodes(node_id_t base_id, conf_object_t *cpu) = 0;
    virtual attr_value_t get_current_processors(node_id_t node_id) = 0;
    virtual attr_value_t get_all_processors() = 0;
    virtual conf_object_t * get_mapper(node_id_t node_id) = 0;
    virtual attr_value_t get_parent(node_id_t node_id) = 0;
    virtual attr_value_t get_children(node_id_t node_id) = 0;
    virtual attr_value_t get_formatted_properties(uint64 node_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_root_nodes(conf_object_t *obj) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_root_nodes();
        }
        static attr_value_t get_node(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_node(node_id);
        }
        static attr_value_t get_current_nodes(conf_object_t *obj, node_id_t base_id, conf_object_t *cpu) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_current_nodes(base_id, cpu);
        }
        static attr_value_t get_current_processors(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_current_processors(node_id);
        }
        static attr_value_t get_all_processors(conf_object_t *obj) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_all_processors();
        }
        static conf_object_t * get_mapper(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_mapper(node_id);
        }
        static attr_value_t get_parent(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_parent(node_id);
        }
        static attr_value_t get_children(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_children(node_id);
        }
        static attr_value_t get_formatted_properties(conf_object_t *obj, uint64 node_id) {
            return detail::get_interface<OsaNodeTreeQueryInterface>(obj)->get_formatted_properties(node_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaNodeTreeQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_root_nodes() const {
            return iface_->get_root_nodes(obj_);
        }
        attr_value_t get_node(node_id_t node_id) const {
            return iface_->get_node(obj_, node_id);
        }
        attr_value_t get_current_nodes(node_id_t base_id, conf_object_t *cpu) const {
            return iface_->get_current_nodes(obj_, base_id, cpu);
        }
        attr_value_t get_current_processors(node_id_t node_id) const {
            return iface_->get_current_processors(obj_, node_id);
        }
        attr_value_t get_all_processors() const {
            return iface_->get_all_processors(obj_);
        }
        conf_object_t * get_mapper(node_id_t node_id) const {
            return iface_->get_mapper(obj_, node_id);
        }
        attr_value_t get_parent(node_id_t node_id) const {
            return iface_->get_parent(obj_, node_id);
        }
        attr_value_t get_children(node_id_t node_id) const {
            return iface_->get_children(obj_, node_id);
        }
        attr_value_t get_formatted_properties(uint64 node_id) const {
            return iface_->get_formatted_properties(obj_, node_id);
        }

        const OsaNodeTreeQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaNodeTreeQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_NODE_TREE_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaNodeTreeQueryInterface::ctype funcs {
                FromC::get_root_nodes,
                FromC::get_node,
                FromC::get_current_nodes,
                FromC::get_current_processors,
                FromC::get_all_processors,
                FromC::get_mapper,
                FromC::get_parent,
                FromC::get_children,
                FromC::get_formatted_properties,
            };
            return &funcs;
        }
    };
};

class OsaNodeTreeNotificationInterface {
  public:
    using ctype = osa_node_tree_notification_interface_t;

    // Function override and implemented by user
    virtual cancel_id_t notify_create(node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_destroy(node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_property_change(node_id_t node_id, const char *key, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *key, attr_value_t old_val, attr_value_t new_val), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_cpu_move_from(node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_cpu_move_to(node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_event(node_id_t node_id, const char *event_name, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *event_name, attr_value_t event_data), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_enable(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_disable(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) = 0;
    virtual void cancel_notify(cancel_id_t cancel_id) = 0;
    virtual cancel_id_t notify_callbacks_done(uint64 node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cancel_id_t notify_create(conf_object_t *obj, node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_create(node_id, recursive, cb, data);
        }
        static cancel_id_t notify_destroy(conf_object_t *obj, node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_destroy(node_id, recursive, cb, data);
        }
        static cancel_id_t notify_property_change(conf_object_t *obj, node_id_t node_id, const char *key, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *key, attr_value_t old_val, attr_value_t new_val), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_property_change(node_id, key, recursive, cb, data);
        }
        static cancel_id_t notify_cpu_move_from(conf_object_t *obj, node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_cpu_move_from(node_id, cb, data);
        }
        static cancel_id_t notify_cpu_move_to(conf_object_t *obj, node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_cpu_move_to(node_id, cb, data);
        }
        static cancel_id_t notify_event(conf_object_t *obj, node_id_t node_id, const char *event_name, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *event_name, attr_value_t event_data), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_event(node_id, event_name, recursive, cb, data);
        }
        static cancel_id_t notify_enable(conf_object_t *obj, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_enable(cb, data);
        }
        static cancel_id_t notify_disable(conf_object_t *obj, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_disable(cb, data);
        }
        static void cancel_notify(conf_object_t *obj, cancel_id_t cancel_id) {
            detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->cancel_notify(cancel_id);
        }
        static cancel_id_t notify_callbacks_done(conf_object_t *obj, uint64 node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) {
            return detail::get_interface<OsaNodeTreeNotificationInterface>(obj)->notify_callbacks_done(node_id, cb, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaNodeTreeNotificationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cancel_id_t notify_create(node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) const {
            return iface_->notify_create(obj_, node_id, recursive, cb, data);
        }
        cancel_id_t notify_destroy(node_id_t node_id, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id), cbdata_register_t data) const {
            return iface_->notify_destroy(obj_, node_id, recursive, cb, data);
        }
        cancel_id_t notify_property_change(node_id_t node_id, const char *key, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *key, attr_value_t old_val, attr_value_t new_val), cbdata_register_t data) const {
            return iface_->notify_property_change(obj_, node_id, key, recursive, cb, data);
        }
        cancel_id_t notify_cpu_move_from(node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) const {
            return iface_->notify_cpu_move_from(obj_, node_id, cb, data);
        }
        cancel_id_t notify_cpu_move_to(node_id_t node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, attr_value_t node_path), cbdata_register_t data) const {
            return iface_->notify_cpu_move_to(obj_, node_id, cb, data);
        }
        cancel_id_t notify_event(node_id_t node_id, const char *event_name, bool recursive, void (*cb)(cbdata_call_t data, conf_object_t *obj, conf_object_t *cpu, node_id_t node_id, const char *event_name, attr_value_t event_data), cbdata_register_t data) const {
            return iface_->notify_event(obj_, node_id, event_name, recursive, cb, data);
        }
        cancel_id_t notify_enable(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) const {
            return iface_->notify_enable(obj_, cb, data);
        }
        cancel_id_t notify_disable(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) const {
            return iface_->notify_disable(obj_, cb, data);
        }
        void cancel_notify(cancel_id_t cancel_id) const {
            iface_->cancel_notify(obj_, cancel_id);
        }
        cancel_id_t notify_callbacks_done(uint64 node_id, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) const {
            return iface_->notify_callbacks_done(obj_, node_id, cb, data);
        }

        const OsaNodeTreeNotificationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaNodeTreeNotificationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_NODE_TREE_NOTIFICATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaNodeTreeNotificationInterface::ctype funcs {
                FromC::notify_create,
                FromC::notify_destroy,
                FromC::notify_property_change,
                FromC::notify_cpu_move_from,
                FromC::notify_cpu_move_to,
                FromC::notify_event,
                FromC::notify_enable,
                FromC::notify_disable,
                FromC::cancel_notify,
                FromC::notify_callbacks_done,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
