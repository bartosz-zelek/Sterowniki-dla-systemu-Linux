// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_CHECKPOINT_H
#define SIMICS_CPP_SIMULATOR_IFACE_CHECKPOINT_H

#include "simics/simulator-iface/checkpoint.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CheckpointInterface {
  public:
    using ctype = checkpoint_interface_t;

    // Function override and implemented by user
    virtual void save(const char *path) = 0;
    virtual void finish(int success) = 0;
    virtual int has_persistent_data() = 0;
    virtual void save_v2(const char *path, save_flags_t flags) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void save(conf_object_t *obj, const char *path) {
            detail::get_interface<CheckpointInterface>(obj)->save(path);
        }
        static void finish(conf_object_t *obj, int success) {
            detail::get_interface<CheckpointInterface>(obj)->finish(success);
        }
        static int has_persistent_data(conf_object_t *obj) {
            return detail::get_interface<CheckpointInterface>(obj)->has_persistent_data();
        }
        static void save_v2(conf_object_t *obj, const char *path, save_flags_t flags) {
            detail::get_interface<CheckpointInterface>(obj)->save_v2(path, flags);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CheckpointInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void save(const char *path) const {
            iface_->save(obj_, path);
        }
        void finish(int success) const {
            iface_->finish(obj_, success);
        }
        int has_persistent_data() const {
            return iface_->has_persistent_data(obj_);
        }
        void save_v2(const char *path, save_flags_t flags) const {
            iface_->save_v2(obj_, path, flags);
        }

        const CheckpointInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CheckpointInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CHECKPOINT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CheckpointInterface::ctype funcs {
                FromC::save,
                FromC::finish,
                FromC::has_persistent_data,
                FromC::save_v2,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
