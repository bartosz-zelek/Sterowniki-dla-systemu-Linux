// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_MICROWIRE_H
#define SIMICS_CPP_DEVS_MICROWIRE_H

#include "simics/devs/microwire.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class MicrowireInterface {
  public:
    using ctype = microwire_interface_t;

    // Function override and implemented by user
    virtual void set_cs(int cs) = 0;
    virtual void set_sk(int sk) = 0;
    virtual void set_di(int di) = 0;
    virtual int get_do() = 0;
    virtual uint16 read_word(int offset) = 0;
    virtual void write_word(int offset, uint16 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_cs(conf_object_t *obj, int cs) {
            detail::get_interface<MicrowireInterface>(obj)->set_cs(cs);
        }
        static void set_sk(conf_object_t *obj, int sk) {
            detail::get_interface<MicrowireInterface>(obj)->set_sk(sk);
        }
        static void set_di(conf_object_t *obj, int di) {
            detail::get_interface<MicrowireInterface>(obj)->set_di(di);
        }
        static int get_do(conf_object_t *obj) {
            return detail::get_interface<MicrowireInterface>(obj)->get_do();
        }
        static uint16 read_word(conf_object_t *obj, int offset) {
            return detail::get_interface<MicrowireInterface>(obj)->read_word(offset);
        }
        static void write_word(conf_object_t *obj, int offset, uint16 value) {
            detail::get_interface<MicrowireInterface>(obj)->write_word(offset, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MicrowireInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_cs(int cs) const {
            iface_->set_cs(obj_, cs);
        }
        void set_sk(int sk) const {
            iface_->set_sk(obj_, sk);
        }
        void set_di(int di) const {
            iface_->set_di(obj_, di);
        }
        int get_do() const {
            return iface_->get_do(obj_);
        }
        uint16 read_word(int offset) const {
            return iface_->read_word(obj_, offset);
        }
        void write_word(int offset, uint16 value) const {
            iface_->write_word(obj_, offset, value);
        }

        const MicrowireInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MicrowireInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MICROWIRE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MicrowireInterface::ctype funcs {
                FromC::set_cs,
                FromC::set_sk,
                FromC::set_di,
                FromC::get_do,
                FromC::read_word,
                FromC::write_word,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
