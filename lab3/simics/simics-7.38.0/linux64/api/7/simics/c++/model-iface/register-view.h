// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_REGISTER_VIEW_H
#define SIMICS_CPP_MODEL_IFACE_REGISTER_VIEW_H

#include "simics/model-iface/register-view.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class RegisterViewInterface {
  public:
    using ctype = register_view_interface_t;

    // Function override and implemented by user
    virtual const char * description() = 0;
    virtual bool big_endian_bitorder() = 0;
    virtual unsigned number_of_registers() = 0;
    virtual attr_value_t register_info(unsigned reg) = 0;
    virtual uint64 get_register_value(unsigned reg) = 0;
    virtual void set_register_value(unsigned reg, uint64 val) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static const char * description(conf_object_t *obj) {
            return detail::get_interface<RegisterViewInterface>(obj)->description();
        }
        static bool big_endian_bitorder(conf_object_t *obj) {
            return detail::get_interface<RegisterViewInterface>(obj)->big_endian_bitorder();
        }
        static unsigned number_of_registers(conf_object_t *obj) {
            return detail::get_interface<RegisterViewInterface>(obj)->number_of_registers();
        }
        static attr_value_t register_info(conf_object_t *obj, unsigned reg) {
            return detail::get_interface<RegisterViewInterface>(obj)->register_info(reg);
        }
        static uint64 get_register_value(conf_object_t *obj, unsigned reg) {
            return detail::get_interface<RegisterViewInterface>(obj)->get_register_value(reg);
        }
        static void set_register_value(conf_object_t *obj, unsigned reg, uint64 val) {
            detail::get_interface<RegisterViewInterface>(obj)->set_register_value(reg, val);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RegisterViewInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        const char * description() const {
            return iface_->description(obj_);
        }
        bool big_endian_bitorder() const {
            return iface_->big_endian_bitorder(obj_);
        }
        unsigned number_of_registers() const {
            return iface_->number_of_registers(obj_);
        }
        attr_value_t register_info(unsigned reg) const {
            return iface_->register_info(obj_, reg);
        }
        uint64 get_register_value(unsigned reg) const {
            return iface_->get_register_value(obj_, reg);
        }
        void set_register_value(unsigned reg, uint64 val) const {
            iface_->set_register_value(obj_, reg, val);
        }

        const RegisterViewInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RegisterViewInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return REGISTER_VIEW_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RegisterViewInterface::ctype funcs {
                FromC::description,
                FromC::big_endian_bitorder,
                FromC::number_of_registers,
                FromC::register_info,
                FromC::get_register_value,
                FromC::set_register_value,
            };
            return &funcs;
        }
    };
};

class RegisterViewCatalogInterface {
  public:
    using ctype = register_view_catalog_interface_t;

    // Function override and implemented by user
    virtual attr_value_t register_names() = 0;
    virtual attr_value_t register_offsets() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t register_names(conf_object_t *obj) {
            return detail::get_interface<RegisterViewCatalogInterface>(obj)->register_names();
        }
        static attr_value_t register_offsets(conf_object_t *obj) {
            return detail::get_interface<RegisterViewCatalogInterface>(obj)->register_offsets();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RegisterViewCatalogInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t register_names() const {
            return iface_->register_names(obj_);
        }
        attr_value_t register_offsets() const {
            return iface_->register_offsets(obj_);
        }

        const RegisterViewCatalogInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RegisterViewCatalogInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return REGISTER_VIEW_CATALOG_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RegisterViewCatalogInterface::ctype funcs {
                FromC::register_names,
                FromC::register_offsets,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
