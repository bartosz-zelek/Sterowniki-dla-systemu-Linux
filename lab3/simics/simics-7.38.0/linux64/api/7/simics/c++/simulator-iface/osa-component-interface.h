// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_COMPONENT_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_COMPONENT_INTERFACE_H

#include "simics/simulator-iface/osa-component-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaComponentInterface {
  public:
    using ctype = osa_component_interface_t;

    // Function override and implemented by user
    virtual conf_object_t * get_admin() = 0;
    virtual maybe_node_id_t get_root_node() = 0;
    virtual cancel_id_t notify_tracker(void (*cb)(cbdata_call_t data), cbdata_register_t data) = 0;
    virtual void cancel_notify(cancel_id_t cancel_id) = 0;
    virtual bool has_tracker() = 0;
    virtual attr_value_t get_processors() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static conf_object_t * get_admin(conf_object_t *obj) {
            return detail::get_interface<OsaComponentInterface>(obj)->get_admin();
        }
        static maybe_node_id_t get_root_node(conf_object_t *obj) {
            return detail::get_interface<OsaComponentInterface>(obj)->get_root_node();
        }
        static cancel_id_t notify_tracker(conf_object_t *obj, void (*cb)(cbdata_call_t data), cbdata_register_t data) {
            return detail::get_interface<OsaComponentInterface>(obj)->notify_tracker(cb, data);
        }
        static void cancel_notify(conf_object_t *obj, cancel_id_t cancel_id) {
            detail::get_interface<OsaComponentInterface>(obj)->cancel_notify(cancel_id);
        }
        static bool has_tracker(conf_object_t *obj) {
            return detail::get_interface<OsaComponentInterface>(obj)->has_tracker();
        }
        static attr_value_t get_processors(conf_object_t *obj) {
            return detail::get_interface<OsaComponentInterface>(obj)->get_processors();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaComponentInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        conf_object_t * get_admin() const {
            return iface_->get_admin(obj_);
        }
        maybe_node_id_t get_root_node() const {
            return iface_->get_root_node(obj_);
        }
        cancel_id_t notify_tracker(void (*cb)(cbdata_call_t data), cbdata_register_t data) const {
            return iface_->notify_tracker(obj_, cb, data);
        }
        void cancel_notify(cancel_id_t cancel_id) const {
            iface_->cancel_notify(obj_, cancel_id);
        }
        bool has_tracker() const {
            return iface_->has_tracker(obj_);
        }
        attr_value_t get_processors() const {
            return iface_->get_processors(obj_);
        }

        const OsaComponentInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaComponentInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_COMPONENT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaComponentInterface::ctype funcs {
                FromC::get_admin,
                FromC::get_root_node,
                FromC::notify_tracker,
                FromC::cancel_notify,
                FromC::has_tracker,
                FromC::get_processors,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
