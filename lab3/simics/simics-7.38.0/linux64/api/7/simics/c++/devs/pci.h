// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_PCI_H
#define SIMICS_CPP_DEVS_PCI_H

#include "simics/devs/pci.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class PciDeviceInterface {
  public:
    using ctype = pci_device_interface_t;

    // Function override and implemented by user
    virtual void bus_reset() = 0;
    virtual void system_error() = 0;
    virtual void interrupt_raised(int pin) = 0;
    virtual void interrupt_lowered(int pin) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void bus_reset(conf_object_t *obj) {
            detail::get_interface<PciDeviceInterface>(obj)->bus_reset();
        }
        static void system_error(conf_object_t *obj) {
            detail::get_interface<PciDeviceInterface>(obj)->system_error();
        }
        static void interrupt_raised(conf_object_t *obj, int pin) {
            detail::get_interface<PciDeviceInterface>(obj)->interrupt_raised(pin);
        }
        static void interrupt_lowered(conf_object_t *obj, int pin) {
            detail::get_interface<PciDeviceInterface>(obj)->interrupt_lowered(pin);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void bus_reset() const {
            iface_->bus_reset(obj_);
        }
        void system_error() const {
            iface_->system_error(obj_);
        }
        void interrupt_raised(int pin) const {
            iface_->interrupt_raised(obj_, pin);
        }
        void interrupt_lowered(int pin) const {
            iface_->interrupt_lowered(obj_, pin);
        }

        const PciDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciDeviceInterface::ctype funcs {
                FromC::bus_reset,
                nullptr,
                nullptr,
                FromC::system_error,
                FromC::interrupt_raised,
                FromC::interrupt_lowered,
            };
            return &funcs;
        }
    };
};

class PciBusInterface {
  public:
    using ctype = pci_bus_interface_t;

    // Function override and implemented by user
    virtual exception_type_t memory_access(generic_transaction_t *mem_op) = 0;
    virtual void raise_interrupt(conf_object_t *dev, int pin) = 0;
    virtual void lower_interrupt(conf_object_t *dev, int pin) = 0;
    virtual int interrupt_acknowledge() = 0;
    virtual int add_map(conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) = 0;
    virtual int remove_map(conf_object_t *dev, addr_space_t space, int function) = 0;
    virtual void set_bus_number(int bus_id) = 0;
    virtual void set_sub_bus_number(int bus_id) = 0;
    virtual void add_default(conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) = 0;
    virtual void remove_default(addr_space_t space) = 0;
    virtual void bus_reset() = 0;
    virtual void special_cycle(uint32 value) = 0;
    virtual void system_error() = 0;
    virtual int get_bus_address(conf_object_t *dev) = 0;
    virtual void set_device_status(int device, int function, int enabled) = 0;
    virtual conf_object_t * configuration_space() = 0;
    virtual conf_object_t * io_space() = 0;
    virtual conf_object_t * memory_space() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t memory_access(conf_object_t *obj, generic_transaction_t *mem_op) {
            return detail::get_interface<PciBusInterface>(obj)->memory_access(mem_op);
        }
        static void raise_interrupt(conf_object_t *obj, conf_object_t *dev, int pin) {
            detail::get_interface<PciBusInterface>(obj)->raise_interrupt(dev, pin);
        }
        static void lower_interrupt(conf_object_t *obj, conf_object_t *dev, int pin) {
            detail::get_interface<PciBusInterface>(obj)->lower_interrupt(dev, pin);
        }
        static int interrupt_acknowledge(conf_object_t *obj) {
            return detail::get_interface<PciBusInterface>(obj)->interrupt_acknowledge();
        }
        static int add_map(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) {
            return detail::get_interface<PciBusInterface>(obj)->add_map(dev, space, target, info);
        }
        static int remove_map(conf_object_t *obj, conf_object_t *dev, addr_space_t space, int function) {
            return detail::get_interface<PciBusInterface>(obj)->remove_map(dev, space, function);
        }
        static void set_bus_number(conf_object_t *obj, int bus_id) {
            detail::get_interface<PciBusInterface>(obj)->set_bus_number(bus_id);
        }
        static void set_sub_bus_number(conf_object_t *obj, int bus_id) {
            detail::get_interface<PciBusInterface>(obj)->set_sub_bus_number(bus_id);
        }
        static void add_default(conf_object_t *obj, conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) {
            detail::get_interface<PciBusInterface>(obj)->add_default(dev, space, target, info);
        }
        static void remove_default(conf_object_t *obj, addr_space_t space) {
            detail::get_interface<PciBusInterface>(obj)->remove_default(space);
        }
        static void bus_reset(conf_object_t *obj) {
            detail::get_interface<PciBusInterface>(obj)->bus_reset();
        }
        static void special_cycle(conf_object_t *obj, uint32 value) {
            detail::get_interface<PciBusInterface>(obj)->special_cycle(value);
        }
        static void system_error(conf_object_t *obj) {
            detail::get_interface<PciBusInterface>(obj)->system_error();
        }
        static int get_bus_address(conf_object_t *obj, conf_object_t *dev) {
            return detail::get_interface<PciBusInterface>(obj)->get_bus_address(dev);
        }
        static void set_device_status(conf_object_t *obj, int device, int function, int enabled) {
            detail::get_interface<PciBusInterface>(obj)->set_device_status(device, function, enabled);
        }
        static conf_object_t * configuration_space(conf_object_t *obj) {
            return detail::get_interface<PciBusInterface>(obj)->configuration_space();
        }
        static conf_object_t * io_space(conf_object_t *obj) {
            return detail::get_interface<PciBusInterface>(obj)->io_space();
        }
        static conf_object_t * memory_space(conf_object_t *obj) {
            return detail::get_interface<PciBusInterface>(obj)->memory_space();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciBusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t memory_access(generic_transaction_t *mem_op) const {
            return iface_->memory_access(obj_, mem_op);
        }
        void raise_interrupt(conf_object_t *dev, int pin) const {
            iface_->raise_interrupt(obj_, dev, pin);
        }
        void lower_interrupt(conf_object_t *dev, int pin) const {
            iface_->lower_interrupt(obj_, dev, pin);
        }
        int interrupt_acknowledge() const {
            return iface_->interrupt_acknowledge(obj_);
        }
        int add_map(conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) const {
            return iface_->add_map(obj_, dev, space, target, info);
        }
        int remove_map(conf_object_t *dev, addr_space_t space, int function) const {
            return iface_->remove_map(obj_, dev, space, function);
        }
        void set_bus_number(int bus_id) const {
            iface_->set_bus_number(obj_, bus_id);
        }
        void set_sub_bus_number(int bus_id) const {
            iface_->set_sub_bus_number(obj_, bus_id);
        }
        void add_default(conf_object_t *dev, addr_space_t space, conf_object_t *target, map_info_t info) const {
            iface_->add_default(obj_, dev, space, target, info);
        }
        void remove_default(addr_space_t space) const {
            iface_->remove_default(obj_, space);
        }
        void bus_reset() const {
            iface_->bus_reset(obj_);
        }
        void special_cycle(uint32 value) const {
            iface_->special_cycle(obj_, value);
        }
        void system_error() const {
            iface_->system_error(obj_);
        }
        int get_bus_address(conf_object_t *dev) const {
            return iface_->get_bus_address(obj_, dev);
        }
        void set_device_status(int device, int function, int enabled) const {
            iface_->set_device_status(obj_, device, function, enabled);
        }
        conf_object_t * configuration_space() const {
            return iface_->configuration_space(obj_);
        }
        conf_object_t * io_space() const {
            return iface_->io_space(obj_);
        }
        conf_object_t * memory_space() const {
            return iface_->memory_space(obj_);
        }

        const PciBusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciBusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_BUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciBusInterface::ctype funcs {
                FromC::memory_access,
                FromC::raise_interrupt,
                FromC::lower_interrupt,
                FromC::interrupt_acknowledge,
                FromC::add_map,
                FromC::remove_map,
                FromC::set_bus_number,
                FromC::set_sub_bus_number,
                FromC::add_default,
                FromC::remove_default,
                FromC::bus_reset,
                FromC::special_cycle,
                FromC::system_error,
                FromC::get_bus_address,
                FromC::set_device_status,
                FromC::configuration_space,
                FromC::io_space,
                FromC::memory_space,
            };
            return &funcs;
        }
    };
};

class PciUpstreamInterface {
  public:
    using ctype = pci_upstream_interface_t;

    // Function override and implemented by user
    virtual exception_type_t operation(generic_transaction_t *mem_op, addr_space_t space) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t operation(conf_object_t *obj, generic_transaction_t *mem_op, addr_space_t space) {
            return detail::get_interface<PciUpstreamInterface>(obj)->operation(mem_op, space);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciUpstreamInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t operation(generic_transaction_t *mem_op, addr_space_t space) const {
            return iface_->operation(obj_, mem_op, space);
        }

        const PciUpstreamInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciUpstreamInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_UPSTREAM_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciUpstreamInterface::ctype funcs {
                FromC::operation,
            };
            return &funcs;
        }
    };
};

class PciUpstreamOperationInterface {
  public:
    using ctype = pci_upstream_operation_interface_t;

    // Function override and implemented by user
    virtual exception_type_t read(conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, buffer_t buffer) = 0;
    virtual exception_type_t write(conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, bytes_t buffer) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t read(conf_object_t *obj, conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, buffer_t buffer) {
            return detail::get_interface<PciUpstreamOperationInterface>(obj)->read(initiator, rid, space, address, buffer);
        }
        static exception_type_t write(conf_object_t *obj, conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, bytes_t buffer) {
            return detail::get_interface<PciUpstreamOperationInterface>(obj)->write(initiator, rid, space, address, buffer);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciUpstreamOperationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t read(conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, buffer_t buffer) const {
            return iface_->read(obj_, initiator, rid, space, address, buffer);
        }
        exception_type_t write(conf_object_t *initiator, uint16 rid, addr_space_t space, physical_address_t address, bytes_t buffer) const {
            return iface_->write(obj_, initiator, rid, space, address, buffer);
        }

        const PciUpstreamOperationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciUpstreamOperationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_UPSTREAM_OPERATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciUpstreamOperationInterface::ctype funcs {
                FromC::read,
                FromC::write,
            };
            return &funcs;
        }
    };
};

class PciDownstreamInterface {
  public:
    using ctype = pci_downstream_interface_t;

    // Function override and implemented by user
    virtual exception_type_t operation(generic_transaction_t *mem_op, addr_space_t space) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t operation(conf_object_t *obj, generic_transaction_t *mem_op, addr_space_t space) {
            return detail::get_interface<PciDownstreamInterface>(obj)->operation(mem_op, space);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciDownstreamInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t operation(generic_transaction_t *mem_op, addr_space_t space) const {
            return iface_->operation(obj_, mem_op, space);
        }

        const PciDownstreamInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciDownstreamInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_DOWNSTREAM_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciDownstreamInterface::ctype funcs {
                FromC::operation,
            };
            return &funcs;
        }
    };
};

class PciBridgeInterface {
  public:
    using ctype = pci_bridge_interface_t;

    // Function override and implemented by user
    virtual void system_error() = 0;
    virtual void raise_interrupt(conf_object_t *pci_bus, int device, int pin) = 0;
    virtual void lower_interrupt(conf_object_t *pci_bus, int device, int pin) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void system_error(conf_object_t *obj) {
            detail::get_interface<PciBridgeInterface>(obj)->system_error();
        }
        static void raise_interrupt(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin) {
            detail::get_interface<PciBridgeInterface>(obj)->raise_interrupt(pci_bus, device, pin);
        }
        static void lower_interrupt(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin) {
            detail::get_interface<PciBridgeInterface>(obj)->lower_interrupt(pci_bus, device, pin);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciBridgeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void system_error() const {
            iface_->system_error(obj_);
        }
        void raise_interrupt(conf_object_t *pci_bus, int device, int pin) const {
            iface_->raise_interrupt(obj_, pci_bus, device, pin);
        }
        void lower_interrupt(conf_object_t *pci_bus, int device, int pin) const {
            iface_->lower_interrupt(obj_, pci_bus, device, pin);
        }

        const PciBridgeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciBridgeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_BRIDGE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciBridgeInterface::ctype funcs {
                FromC::system_error,
                FromC::raise_interrupt,
                FromC::lower_interrupt,
            };
            return &funcs;
        }
    };
};

class PciInterruptInterface {
  public:
    using ctype = pci_interrupt_interface_t;

    // Function override and implemented by user
    virtual void raise_interrupt(conf_object_t *pci_bus, int device, int pin) = 0;
    virtual void lower_interrupt(conf_object_t *pci_bus, int device, int pin) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void raise_interrupt(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin) {
            detail::get_interface<PciInterruptInterface>(obj)->raise_interrupt(pci_bus, device, pin);
        }
        static void lower_interrupt(conf_object_t *obj, conf_object_t *pci_bus, int device, int pin) {
            detail::get_interface<PciInterruptInterface>(obj)->lower_interrupt(pci_bus, device, pin);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciInterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void raise_interrupt(conf_object_t *pci_bus, int device, int pin) const {
            iface_->raise_interrupt(obj_, pci_bus, device, pin);
        }
        void lower_interrupt(conf_object_t *pci_bus, int device, int pin) const {
            iface_->lower_interrupt(obj_, pci_bus, device, pin);
        }

        const PciInterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciInterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciInterruptInterface::ctype funcs {
                FromC::raise_interrupt,
                FromC::lower_interrupt,
            };
            return &funcs;
        }
    };
};

class PciMultiFunctionDeviceInterface {
  public:
    using ctype = pci_multi_function_device_interface_t;

    // Function override and implemented by user
    virtual attr_value_t supported_functions() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t supported_functions(conf_object_t *obj) {
            return detail::get_interface<PciMultiFunctionDeviceInterface>(obj)->supported_functions();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciMultiFunctionDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t supported_functions() const {
            return iface_->supported_functions(obj_);
        }

        const PciMultiFunctionDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciMultiFunctionDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_MULTI_FUNCTION_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciMultiFunctionDeviceInterface::ctype funcs {
                FromC::supported_functions,
            };
            return &funcs;
        }
    };
};

class PcieDeviceInterface {
  public:
    using ctype = pcie_device_interface_t;

    // Function override and implemented by user
    virtual void connected(conf_object_t *port_obj, uint16 device_id) = 0;
    virtual void disconnected(conf_object_t *port_obj, uint16 device_id) = 0;
    virtual void hot_reset() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void connected(conf_object_t *obj, conf_object_t *port_obj, uint16 device_id) {
            detail::get_interface<PcieDeviceInterface>(obj)->connected(port_obj, device_id);
        }
        static void disconnected(conf_object_t *obj, conf_object_t *port_obj, uint16 device_id) {
            detail::get_interface<PcieDeviceInterface>(obj)->disconnected(port_obj, device_id);
        }
        static void hot_reset(conf_object_t *obj) {
            detail::get_interface<PcieDeviceInterface>(obj)->hot_reset();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PcieDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void connected(conf_object_t *port_obj, uint16 device_id) const {
            iface_->connected(obj_, port_obj, device_id);
        }
        void disconnected(conf_object_t *port_obj, uint16 device_id) const {
            iface_->disconnected(obj_, port_obj, device_id);
        }
        void hot_reset() const {
            iface_->hot_reset(obj_);
        }

        const PcieDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PcieDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PcieDeviceInterface::ctype funcs {
                FromC::connected,
                FromC::disconnected,
                FromC::hot_reset,
            };
            return &funcs;
        }
    };
};

class PcieMapInterface {
  public:
    using ctype = pcie_map_interface_t;

    // Function override and implemented by user
    virtual void add_map(conf_object_t *map_obj, map_info_t info, pcie_type_t type) = 0;
    virtual void del_map(conf_object_t *map_obj, physical_address_t base, pcie_type_t type) = 0;
    virtual void add_function(conf_object_t *map_obj, uint16 device_and_function) = 0;
    virtual void del_function(conf_object_t *map_obj, uint16 device_and_function) = 0;
    virtual void enable_function(uint16 device_and_function) = 0;
    virtual void disable_function(uint16 device_and_function) = 0;
    virtual uint16 get_device_id(conf_object_t *dev_obj) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void add_map(conf_object_t *obj, conf_object_t *map_obj, map_info_t info, pcie_type_t type) {
            detail::get_interface<PcieMapInterface>(obj)->add_map(map_obj, info, type);
        }
        static void del_map(conf_object_t *obj, conf_object_t *map_obj, physical_address_t base, pcie_type_t type) {
            detail::get_interface<PcieMapInterface>(obj)->del_map(map_obj, base, type);
        }
        static void add_function(conf_object_t *obj, conf_object_t *map_obj, uint16 device_and_function) {
            detail::get_interface<PcieMapInterface>(obj)->add_function(map_obj, device_and_function);
        }
        static void del_function(conf_object_t *obj, conf_object_t *map_obj, uint16 device_and_function) {
            detail::get_interface<PcieMapInterface>(obj)->del_function(map_obj, device_and_function);
        }
        static void enable_function(conf_object_t *obj, uint16 device_and_function) {
            detail::get_interface<PcieMapInterface>(obj)->enable_function(device_and_function);
        }
        static void disable_function(conf_object_t *obj, uint16 device_and_function) {
            detail::get_interface<PcieMapInterface>(obj)->disable_function(device_and_function);
        }
        static uint16 get_device_id(conf_object_t *obj, conf_object_t *dev_obj) {
            return detail::get_interface<PcieMapInterface>(obj)->get_device_id(dev_obj);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PcieMapInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void add_map(conf_object_t *map_obj, map_info_t info, pcie_type_t type) const {
            iface_->add_map(obj_, map_obj, info, type);
        }
        void del_map(conf_object_t *map_obj, physical_address_t base, pcie_type_t type) const {
            iface_->del_map(obj_, map_obj, base, type);
        }
        void add_function(conf_object_t *map_obj, uint16 device_and_function) const {
            iface_->add_function(obj_, map_obj, device_and_function);
        }
        void del_function(conf_object_t *map_obj, uint16 device_and_function) const {
            iface_->del_function(obj_, map_obj, device_and_function);
        }
        void enable_function(uint16 device_and_function) const {
            iface_->enable_function(obj_, device_and_function);
        }
        void disable_function(uint16 device_and_function) const {
            iface_->disable_function(obj_, device_and_function);
        }
        uint16 get_device_id(conf_object_t *dev_obj) const {
            return iface_->get_device_id(obj_, dev_obj);
        }

        const PcieMapInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PcieMapInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_MAP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PcieMapInterface::ctype funcs {
                FromC::add_map,
                FromC::del_map,
                FromC::add_function,
                FromC::del_function,
                FromC::enable_function,
                FromC::disable_function,
                FromC::get_device_id,
            };
            return &funcs;
        }
    };
};

class PciePortControlInterface {
  public:
    using ctype = pcie_port_control_interface_t;

    // Function override and implemented by user
    virtual void set_secondary_bus_number(uint64 value) = 0;
    virtual void hot_reset() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_secondary_bus_number(conf_object_t *obj, uint64 value) {
            detail::get_interface<PciePortControlInterface>(obj)->set_secondary_bus_number(value);
        }
        static void hot_reset(conf_object_t *obj) {
            detail::get_interface<PciePortControlInterface>(obj)->hot_reset();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciePortControlInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_secondary_bus_number(uint64 value) const {
            iface_->set_secondary_bus_number(obj_, value);
        }
        void hot_reset() const {
            iface_->hot_reset(obj_);
        }

        const PciePortControlInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciePortControlInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_PORT_CONTROL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciePortControlInterface::ctype funcs {
                FromC::set_secondary_bus_number,
                FromC::hot_reset,
            };
            return &funcs;
        }
    };
};

class PcieHotplugEventsInterface {
  public:
    using ctype = pcie_hotplug_events_interface_t;

    // Function override and implemented by user
    virtual void presence_change(pcie_hotplug_pd_t state) = 0;
    virtual void power_fault() = 0;
    virtual void attention_button_pressed() = 0;
    virtual void mrl_sensor(pcie_hotplug_mrl_t state) = 0;
    virtual void data_link_layer(bool is_active) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void presence_change(conf_object_t *obj, pcie_hotplug_pd_t state) {
            detail::get_interface<PcieHotplugEventsInterface>(obj)->presence_change(state);
        }
        static void power_fault(conf_object_t *obj) {
            detail::get_interface<PcieHotplugEventsInterface>(obj)->power_fault();
        }
        static void attention_button_pressed(conf_object_t *obj) {
            detail::get_interface<PcieHotplugEventsInterface>(obj)->attention_button_pressed();
        }
        static void mrl_sensor(conf_object_t *obj, pcie_hotplug_mrl_t state) {
            detail::get_interface<PcieHotplugEventsInterface>(obj)->mrl_sensor(state);
        }
        static void data_link_layer(conf_object_t *obj, bool is_active) {
            detail::get_interface<PcieHotplugEventsInterface>(obj)->data_link_layer(is_active);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PcieHotplugEventsInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void presence_change(pcie_hotplug_pd_t state) const {
            iface_->presence_change(obj_, state);
        }
        void power_fault() const {
            iface_->power_fault(obj_);
        }
        void attention_button_pressed() const {
            iface_->attention_button_pressed(obj_);
        }
        void mrl_sensor(pcie_hotplug_mrl_t state) const {
            iface_->mrl_sensor(obj_, state);
        }
        void data_link_layer(bool is_active) const {
            iface_->data_link_layer(obj_, is_active);
        }

        const PcieHotplugEventsInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PcieHotplugEventsInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_HOTPLUG_EVENTS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PcieHotplugEventsInterface::ctype funcs {
                FromC::presence_change,
                FromC::power_fault,
                FromC::attention_button_pressed,
                FromC::mrl_sensor,
                FromC::data_link_layer,
            };
            return &funcs;
        }
    };
};

class PcieLinkTrainingInterface {
  public:
    using ctype = pcie_link_training_interface_t;

    // Function override and implemented by user
    virtual bool trigger(uint16 device_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool trigger(conf_object_t *obj, uint16 device_id) {
            return detail::get_interface<PcieLinkTrainingInterface>(obj)->trigger(device_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PcieLinkTrainingInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool trigger(uint16 device_id) const {
            return iface_->trigger(obj_, device_id);
        }

        const PcieLinkTrainingInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PcieLinkTrainingInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_LINK_TRAINING_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PcieLinkTrainingInterface::ctype funcs {
                FromC::trigger,
            };
            return &funcs;
        }
    };
};

#if defined(SIMICS_6_API) || defined(SHOW_OBSOLETE_API)
class PcieAdapterCompatInterface {
  public:
    using ctype = pcie_adapter_compat_interface_t;

    // Function override and implemented by user
    virtual void set_secondary_bus_number(int secondary_bus_number) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_secondary_bus_number(conf_object_t *obj, int secondary_bus_number) {
            detail::get_interface<PcieAdapterCompatInterface>(obj)->set_secondary_bus_number(secondary_bus_number);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PcieAdapterCompatInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_secondary_bus_number(int secondary_bus_number) const {
            iface_->set_secondary_bus_number(obj_, secondary_bus_number);
        }

        const PcieAdapterCompatInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PcieAdapterCompatInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCIE_ADAPTER_COMPAT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PcieAdapterCompatInterface::ctype funcs {
                FromC::set_secondary_bus_number,
            };
            return &funcs;
        }
    };
};
#endif

#if defined(SIMICS_6_API) || defined(SHOW_OBSOLETE_API)
class PciExpressInterface {
  public:
    using ctype = pci_express_interface_t;

    // Function override and implemented by user
    virtual int send_message(conf_object_t *src, pcie_message_type_t type, byte_string_t payload) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int send_message(conf_object_t *dst, conf_object_t *src, pcie_message_type_t type, byte_string_t payload) {
            return detail::get_interface<PciExpressInterface>(dst)->send_message(src, type, payload);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciExpressInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int send_message(conf_object_t *src, pcie_message_type_t type, byte_string_t payload) const {
            return iface_->send_message(obj_, src, type, payload);
        }

        const PciExpressInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciExpressInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_EXPRESS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciExpressInterface::ctype funcs {
                FromC::send_message,
            };
            return &funcs;
        }
    };
};
#endif

#if defined(SIMICS_6_API) || defined(SHOW_OBSOLETE_API)
class PciExpressHotplugInterface {
  public:
    using ctype = pci_express_hotplug_interface_t;

    // Function override and implemented by user
    virtual void presence_change(conf_object_t *src, int is_present) = 0;
    virtual void inject_power_fault() = 0;
    virtual void press_attention_button() = 0;
    virtual void set_mrl_state(int locked) = 0;
    virtual int get_mrl_state() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void presence_change(conf_object_t *dst, conf_object_t *src, int is_present) {
            detail::get_interface<PciExpressHotplugInterface>(dst)->presence_change(src, is_present);
        }
        static void inject_power_fault(conf_object_t *obj) {
            detail::get_interface<PciExpressHotplugInterface>(obj)->inject_power_fault();
        }
        static void press_attention_button(conf_object_t *obj) {
            detail::get_interface<PciExpressHotplugInterface>(obj)->press_attention_button();
        }
        static void set_mrl_state(conf_object_t *obj, int locked) {
            detail::get_interface<PciExpressHotplugInterface>(obj)->set_mrl_state(locked);
        }
        static int get_mrl_state(conf_object_t *obj) {
            return detail::get_interface<PciExpressHotplugInterface>(obj)->get_mrl_state();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const PciExpressHotplugInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void presence_change(conf_object_t *src, int is_present) const {
            iface_->presence_change(obj_, src, is_present);
        }
        void inject_power_fault() const {
            iface_->inject_power_fault(obj_);
        }
        void press_attention_button() const {
            iface_->press_attention_button(obj_);
        }
        void set_mrl_state(int locked) const {
            iface_->set_mrl_state(obj_, locked);
        }
        int get_mrl_state() const {
            return iface_->get_mrl_state(obj_);
        }

        const PciExpressHotplugInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const PciExpressHotplugInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PCI_EXPRESS_HOTPLUG_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr PciExpressHotplugInterface::ctype funcs {
                FromC::presence_change,
                FromC::inject_power_fault,
                FromC::press_attention_button,
                FromC::set_mrl_state,
                FromC::get_mrl_state,
            };
            return &funcs;
        }
    };
};
#endif

}  // namespace iface
}  // namespace simics

#endif
