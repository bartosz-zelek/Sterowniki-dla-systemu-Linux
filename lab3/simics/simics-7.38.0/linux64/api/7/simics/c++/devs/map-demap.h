// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_MAP_DEMAP_H
#define SIMICS_CPP_DEVS_MAP_DEMAP_H

#include "simics/devs/map-demap.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class MapDemapInterface {
  public:
    using ctype = map_demap_interface_t;

    // Function override and implemented by user
    virtual int add_map(conf_object_t *dev, conf_object_t *target, map_info_t map_info) = 0;
    virtual int remove_map(conf_object_t *dev, int function) = 0;
    virtual int add_default(conf_object_t *dev, conf_object_t *target, map_info_t map_info) = 0;
    virtual void remove_default() = 0;
    virtual int map_simple(conf_object_t *dev, const char *dev_port, map_info_t map_info) = 0;
    virtual int map_bridge(conf_object_t *dev, const char *dev_port, conf_object_t *target, const char *target_port, map_info_t map_info) = 0;
    virtual int unmap(conf_object_t *dev, const char *dev_port) = 0;
    virtual int unmap_address(conf_object_t *dev, physical_address_t base, const char *dev_port) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int add_map(conf_object_t *space, conf_object_t *dev, conf_object_t *target, map_info_t map_info) {
            return detail::get_interface<MapDemapInterface>(space)->add_map(dev, target, map_info);
        }
        static int remove_map(conf_object_t *space, conf_object_t *dev, int function) {
            return detail::get_interface<MapDemapInterface>(space)->remove_map(dev, function);
        }
        static int add_default(conf_object_t *space, conf_object_t *dev, conf_object_t *target, map_info_t map_info) {
            return detail::get_interface<MapDemapInterface>(space)->add_default(dev, target, map_info);
        }
        static void remove_default(conf_object_t *space) {
            detail::get_interface<MapDemapInterface>(space)->remove_default();
        }
        static int map_simple(conf_object_t *space, conf_object_t *dev, const char *dev_port, map_info_t map_info) {
            return detail::get_interface<MapDemapInterface>(space)->map_simple(dev, dev_port, map_info);
        }
        static int map_bridge(conf_object_t *space, conf_object_t *dev, const char *dev_port, conf_object_t *target, const char *target_port, map_info_t map_info) {
            return detail::get_interface<MapDemapInterface>(space)->map_bridge(dev, dev_port, target, target_port, map_info);
        }
        static int unmap(conf_object_t *space, conf_object_t *dev, const char *dev_port) {
            return detail::get_interface<MapDemapInterface>(space)->unmap(dev, dev_port);
        }
        static int unmap_address(conf_object_t *space, conf_object_t *dev, physical_address_t base, const char *dev_port) {
            return detail::get_interface<MapDemapInterface>(space)->unmap_address(dev, base, dev_port);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MapDemapInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int add_map(conf_object_t *dev, conf_object_t *target, map_info_t map_info) const {
            return iface_->add_map(obj_, dev, target, map_info);
        }
        int remove_map(conf_object_t *dev, int function) const {
            return iface_->remove_map(obj_, dev, function);
        }
        int add_default(conf_object_t *dev, conf_object_t *target, map_info_t map_info) const {
            return iface_->add_default(obj_, dev, target, map_info);
        }
        void remove_default() const {
            iface_->remove_default(obj_);
        }
        int map_simple(conf_object_t *dev, const char *dev_port, map_info_t map_info) const {
            return iface_->map_simple(obj_, dev, dev_port, map_info);
        }
        int map_bridge(conf_object_t *dev, const char *dev_port, conf_object_t *target, const char *target_port, map_info_t map_info) const {
            return iface_->map_bridge(obj_, dev, dev_port, target, target_port, map_info);
        }
        int unmap(conf_object_t *dev, const char *dev_port) const {
            return iface_->unmap(obj_, dev, dev_port);
        }
        int unmap_address(conf_object_t *dev, physical_address_t base, const char *dev_port) const {
            return iface_->unmap_address(obj_, dev, base, dev_port);
        }

        const MapDemapInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MapDemapInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MAP_DEMAP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MapDemapInterface::ctype funcs {
                FromC::add_map,
                FromC::remove_map,
                FromC::add_default,
                FromC::remove_default,
                FromC::map_simple,
                FromC::map_bridge,
                FromC::unmap,
                FromC::unmap_address,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
