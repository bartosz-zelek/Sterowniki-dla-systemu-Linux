// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_TIMING_MODEL_H
#define SIMICS_CPP_MODEL_IFACE_TIMING_MODEL_H

#include "simics/model-iface/timing-model.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TimingModelInterface {
  public:
    using ctype = timing_model_interface_t;

    // Function override and implemented by user
    virtual cycles_t operate(conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cycles_t operate(conf_object_t *mem_hier, conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) {
            return detail::get_interface<TimingModelInterface>(mem_hier)->operate(space, map_list, mem_op);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TimingModelInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cycles_t operate(conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) const {
            return iface_->operate(obj_, space, map_list, mem_op);
        }

        const TimingModelInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TimingModelInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TIMING_MODEL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TimingModelInterface::ctype funcs {
                FromC::operate,
            };
            return &funcs;
        }
    };
};

class SnoopMemoryInterface {
  public:
    using ctype = snoop_memory_interface_t;

    // Function override and implemented by user
    virtual cycles_t operate(conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cycles_t operate(conf_object_t *mem_hier, conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) {
            return detail::get_interface<SnoopMemoryInterface>(mem_hier)->operate(space, map_list, mem_op);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SnoopMemoryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cycles_t operate(conf_object_t *space, map_list_t *map_list, generic_transaction_t *mem_op) const {
            return iface_->operate(obj_, space, map_list, mem_op);
        }

        const SnoopMemoryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SnoopMemoryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SNOOP_MEMORY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SnoopMemoryInterface::ctype funcs {
                FromC::operate,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
