// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_USB_H
#define SIMICS_CPP_DEVS_USB_H

#include "simics/devs/usb.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class UsbDeviceInterface {
  public:
    using ctype = usb_device_interface_t;

    // Function override and implemented by user
    virtual usb_transfer_completion_t submit_transfer(usb_transfer_t *transfer) = 0;
    virtual void abort_transfer(usb_transfer_t *transfer) = 0;
    virtual void reset() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static usb_transfer_completion_t submit_transfer(conf_object_t *dev_obj, usb_transfer_t *transfer) {
            return detail::get_interface<UsbDeviceInterface>(dev_obj)->submit_transfer(transfer);
        }
        static void abort_transfer(conf_object_t *dev_obj, usb_transfer_t *transfer) {
            detail::get_interface<UsbDeviceInterface>(dev_obj)->abort_transfer(transfer);
        }
        static void reset(conf_object_t *dev_obj) {
            detail::get_interface<UsbDeviceInterface>(dev_obj)->reset();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const UsbDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        usb_transfer_completion_t submit_transfer(usb_transfer_t *transfer) const {
            return iface_->submit_transfer(obj_, transfer);
        }
        void abort_transfer(usb_transfer_t *transfer) const {
            iface_->abort_transfer(obj_, transfer);
        }
        void reset() const {
            iface_->reset(obj_);
        }

        const UsbDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const UsbDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return USB_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr UsbDeviceInterface::ctype funcs {
                FromC::submit_transfer,
                FromC::abort_transfer,
                FromC::reset,
            };
            return &funcs;
        }
    };
};

class UsbInterface {
  public:
    using ctype = usb_interface_t;

    // Function override and implemented by user
    virtual int connect_device(conf_object_t *dev_obj, usb_speed_t speed) = 0;
    virtual int disconnect_device(conf_object_t *dev_obj) = 0;
    virtual void complete_transfer(conf_object_t *dev_obj, usb_transfer_t *transfer) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int connect_device(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_speed_t speed) {
            return detail::get_interface<UsbInterface>(bus_obj)->connect_device(dev_obj, speed);
        }
        static int disconnect_device(conf_object_t *bus_obj, conf_object_t *dev_obj) {
            return detail::get_interface<UsbInterface>(bus_obj)->disconnect_device(dev_obj);
        }
        static void complete_transfer(conf_object_t *bus_obj, conf_object_t *dev_obj, usb_transfer_t *transfer) {
            detail::get_interface<UsbInterface>(bus_obj)->complete_transfer(dev_obj, transfer);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const UsbInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int connect_device(conf_object_t *dev_obj, usb_speed_t speed) const {
            return iface_->connect_device(obj_, dev_obj, speed);
        }
        int disconnect_device(conf_object_t *dev_obj) const {
            return iface_->disconnect_device(obj_, dev_obj);
        }
        void complete_transfer(conf_object_t *dev_obj, usb_transfer_t *transfer) const {
            iface_->complete_transfer(obj_, dev_obj, transfer);
        }

        const UsbInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const UsbInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return USB_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr UsbInterface::ctype funcs {
                FromC::connect_device,
                FromC::disconnect_device,
                FromC::complete_transfer,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
