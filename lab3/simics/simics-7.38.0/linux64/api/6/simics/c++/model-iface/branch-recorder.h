// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_BRANCH_RECORDER_H
#define SIMICS_CPP_MODEL_IFACE_BRANCH_RECORDER_H

#include "simics/model-iface/branch-recorder.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class BranchRecorderHandlerInterface {
  public:
    using ctype = branch_recorder_handler_interface_t;

    // Function override and implemented by user
    virtual int attach_branch_recorder(conf_object_t *brec) = 0;
    virtual int detach_branch_recorder(conf_object_t *brec) = 0;
    virtual int eec_interrupt_instruction(int extype) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int attach_branch_recorder(conf_object_t *cpu, conf_object_t *brec) {
            return detail::get_interface<BranchRecorderHandlerInterface>(cpu)->attach_branch_recorder(brec);
        }
        static int detach_branch_recorder(conf_object_t *cpu, conf_object_t *brec) {
            return detail::get_interface<BranchRecorderHandlerInterface>(cpu)->detach_branch_recorder(brec);
        }
        static int eec_interrupt_instruction(conf_object_t *cpu, int extype) {
            return detail::get_interface<BranchRecorderHandlerInterface>(cpu)->eec_interrupt_instruction(extype);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BranchRecorderHandlerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int attach_branch_recorder(conf_object_t *brec) const {
            return iface_->attach_branch_recorder(obj_, brec);
        }
        int detach_branch_recorder(conf_object_t *brec) const {
            return iface_->detach_branch_recorder(obj_, brec);
        }
        int eec_interrupt_instruction(int extype) const {
            return iface_->eec_interrupt_instruction(obj_, extype);
        }

        const BranchRecorderHandlerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BranchRecorderHandlerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BRANCH_RECORDER_HANDLER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BranchRecorderHandlerInterface::ctype funcs {
                FromC::attach_branch_recorder,
                FromC::detach_branch_recorder,
                nullptr,
                nullptr,
                nullptr,
                nullptr,
                nullptr,
                nullptr,
                nullptr,
                FromC::eec_interrupt_instruction,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
