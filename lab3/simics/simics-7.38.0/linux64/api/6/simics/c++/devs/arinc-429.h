// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_ARINC_429_H
#define SIMICS_CPP_DEVS_ARINC_429_H

#include "simics/devs/arinc-429.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class Arinc429BusInterface {
  public:
    using ctype = arinc429_bus_interface_t;

    // Function override and implemented by user
    virtual void send_word(uint32 word, int parity_ok) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void send_word(conf_object_t *bus, uint32 word, int parity_ok) {
            detail::get_interface<Arinc429BusInterface>(bus)->send_word(word, parity_ok);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Arinc429BusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void send_word(uint32 word, int parity_ok) const {
            iface_->send_word(obj_, word, parity_ok);
        }

        const Arinc429BusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Arinc429BusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ARINC429_BUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Arinc429BusInterface::ctype funcs {
                FromC::send_word,
            };
            return &funcs;
        }
    };
};

class Arinc429ReceiverInterface {
  public:
    using ctype = arinc429_receiver_interface_t;

    // Function override and implemented by user
    virtual void receive_word(uint32 word, int parity_ok) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void receive_word(conf_object_t *dev, uint32 word, int parity_ok) {
            detail::get_interface<Arinc429ReceiverInterface>(dev)->receive_word(word, parity_ok);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Arinc429ReceiverInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void receive_word(uint32 word, int parity_ok) const {
            iface_->receive_word(obj_, word, parity_ok);
        }

        const Arinc429ReceiverInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Arinc429ReceiverInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ARINC429_RECEIVER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Arinc429ReceiverInterface::ctype funcs {
                FromC::receive_word,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
