// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_IEEE_802_3_H
#define SIMICS_CPP_DEVS_IEEE_802_3_H

#include "simics/devs/ieee_802_3.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class Ieee8023PhyInterface {
  public:
    using ctype = ieee_802_3_phy_interface_t;

    // Function override and implemented by user
    virtual int send_frame(dbuffer_t *buf, int replace_crc) = 0;
    virtual int check_tx_bandwidth() = 0;
    virtual void add_mac(const uint8 *mac) = 0;
    virtual void del_mac(const uint8 *mac) = 0;
    virtual void add_mac_mask(const uint8 *mac, const uint8 *mask) = 0;
    virtual void del_mac_mask(const uint8 *mac, const uint8 *mask) = 0;
    virtual void set_promiscous_mode(int enable) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int send_frame(conf_object_t *obj, dbuffer_t *buf, int replace_crc) {
            return detail::get_interface<Ieee8023PhyInterface>(obj)->send_frame(buf, replace_crc);
        }
        static int check_tx_bandwidth(conf_object_t *obj) {
            return detail::get_interface<Ieee8023PhyInterface>(obj)->check_tx_bandwidth();
        }
        static void add_mac(conf_object_t *obj, const uint8 *mac) {
            detail::get_interface<Ieee8023PhyInterface>(obj)->add_mac(mac);
        }
        static void del_mac(conf_object_t *obj, const uint8 *mac) {
            detail::get_interface<Ieee8023PhyInterface>(obj)->del_mac(mac);
        }
        static void add_mac_mask(conf_object_t *obj, const uint8 *mac, const uint8 *mask) {
            detail::get_interface<Ieee8023PhyInterface>(obj)->add_mac_mask(mac, mask);
        }
        static void del_mac_mask(conf_object_t *obj, const uint8 *mac, const uint8 *mask) {
            detail::get_interface<Ieee8023PhyInterface>(obj)->del_mac_mask(mac, mask);
        }
        static void set_promiscous_mode(conf_object_t *obj, int enable) {
            detail::get_interface<Ieee8023PhyInterface>(obj)->set_promiscous_mode(enable);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Ieee8023PhyInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int send_frame(dbuffer_t *buf, int replace_crc) const {
            return iface_->send_frame(obj_, buf, replace_crc);
        }
        int check_tx_bandwidth() const {
            return iface_->check_tx_bandwidth(obj_);
        }
        void add_mac(const uint8 *mac) const {
            iface_->add_mac(obj_, mac);
        }
        void del_mac(const uint8 *mac) const {
            iface_->del_mac(obj_, mac);
        }
        void add_mac_mask(const uint8 *mac, const uint8 *mask) const {
            iface_->add_mac_mask(obj_, mac, mask);
        }
        void del_mac_mask(const uint8 *mac, const uint8 *mask) const {
            iface_->del_mac_mask(obj_, mac, mask);
        }
        void set_promiscous_mode(int enable) const {
            iface_->set_promiscous_mode(obj_, enable);
        }

        const Ieee8023PhyInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Ieee8023PhyInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IEEE_802_3_PHY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Ieee8023PhyInterface::ctype funcs {
                FromC::send_frame,
                FromC::check_tx_bandwidth,
                FromC::add_mac,
                FromC::del_mac,
                FromC::add_mac_mask,
                FromC::del_mac_mask,
                FromC::set_promiscous_mode,
            };
            return &funcs;
        }
    };
};

class Ieee8023PhyV2Interface {
  public:
    using ctype = ieee_802_3_phy_v2_interface_t;

    // Function override and implemented by user
    virtual int send_frame(dbuffer_t *buf, int replace_crc) = 0;
    virtual int check_tx_bandwidth() = 0;
    virtual void add_mac(byte_string_t mac) = 0;
    virtual void del_mac(byte_string_t mac) = 0;
    virtual void add_mac_mask(byte_string_t mac, byte_string_t mask) = 0;
    virtual void del_mac_mask(byte_string_t mac, byte_string_t mask) = 0;
    virtual void set_promiscous_mode(int enable) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int send_frame(conf_object_t *obj, dbuffer_t *buf, int replace_crc) {
            return detail::get_interface<Ieee8023PhyV2Interface>(obj)->send_frame(buf, replace_crc);
        }
        static int check_tx_bandwidth(conf_object_t *obj) {
            return detail::get_interface<Ieee8023PhyV2Interface>(obj)->check_tx_bandwidth();
        }
        static void add_mac(conf_object_t *obj, byte_string_t mac) {
            detail::get_interface<Ieee8023PhyV2Interface>(obj)->add_mac(mac);
        }
        static void del_mac(conf_object_t *obj, byte_string_t mac) {
            detail::get_interface<Ieee8023PhyV2Interface>(obj)->del_mac(mac);
        }
        static void add_mac_mask(conf_object_t *obj, byte_string_t mac, byte_string_t mask) {
            detail::get_interface<Ieee8023PhyV2Interface>(obj)->add_mac_mask(mac, mask);
        }
        static void del_mac_mask(conf_object_t *obj, byte_string_t mac, byte_string_t mask) {
            detail::get_interface<Ieee8023PhyV2Interface>(obj)->del_mac_mask(mac, mask);
        }
        static void set_promiscous_mode(conf_object_t *obj, int enable) {
            detail::get_interface<Ieee8023PhyV2Interface>(obj)->set_promiscous_mode(enable);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Ieee8023PhyV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int send_frame(dbuffer_t *buf, int replace_crc) const {
            return iface_->send_frame(obj_, buf, replace_crc);
        }
        int check_tx_bandwidth() const {
            return iface_->check_tx_bandwidth(obj_);
        }
        void add_mac(byte_string_t mac) const {
            iface_->add_mac(obj_, mac);
        }
        void del_mac(byte_string_t mac) const {
            iface_->del_mac(obj_, mac);
        }
        void add_mac_mask(byte_string_t mac, byte_string_t mask) const {
            iface_->add_mac_mask(obj_, mac, mask);
        }
        void del_mac_mask(byte_string_t mac, byte_string_t mask) const {
            iface_->del_mac_mask(obj_, mac, mask);
        }
        void set_promiscous_mode(int enable) const {
            iface_->set_promiscous_mode(obj_, enable);
        }

        const Ieee8023PhyV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Ieee8023PhyV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IEEE_802_3_PHY_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Ieee8023PhyV2Interface::ctype funcs {
                FromC::send_frame,
                FromC::check_tx_bandwidth,
                FromC::add_mac,
                FromC::del_mac,
                FromC::add_mac_mask,
                FromC::del_mac_mask,
                FromC::set_promiscous_mode,
            };
            return &funcs;
        }
    };
};

class Ieee8023PhyV3Interface {
  public:
    using ctype = ieee_802_3_phy_v3_interface_t;

    // Function override and implemented by user
    virtual int send_frame(const frags_t *frame, int replace_crc) = 0;
    virtual int check_tx_bandwidth() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int send_frame(conf_object_t *obj, const frags_t *frame, int replace_crc) {
            return detail::get_interface<Ieee8023PhyV3Interface>(obj)->send_frame(frame, replace_crc);
        }
        static int check_tx_bandwidth(conf_object_t *obj) {
            return detail::get_interface<Ieee8023PhyV3Interface>(obj)->check_tx_bandwidth();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Ieee8023PhyV3Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int send_frame(const frags_t *frame, int replace_crc) const {
            return iface_->send_frame(obj_, frame, replace_crc);
        }
        int check_tx_bandwidth() const {
            return iface_->check_tx_bandwidth(obj_);
        }

        const Ieee8023PhyV3Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Ieee8023PhyV3Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IEEE_802_3_PHY_V3_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Ieee8023PhyV3Interface::ctype funcs {
                FromC::send_frame,
                FromC::check_tx_bandwidth,
            };
            return &funcs;
        }
    };
};

class Ieee8023MacInterface {
  public:
    using ctype = ieee_802_3_mac_interface_t;

    // Function override and implemented by user
    virtual int receive_frame(int phy, dbuffer_t *buf, int crc_ok) = 0;
    virtual void tx_bandwidth_available(int phy) = 0;
    virtual void link_status_changed(int phy, ieee_802_3_link_status_t status) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int receive_frame(conf_object_t *obj, int phy, dbuffer_t *buf, int crc_ok) {
            return detail::get_interface<Ieee8023MacInterface>(obj)->receive_frame(phy, buf, crc_ok);
        }
        static void tx_bandwidth_available(conf_object_t *obj, int phy) {
            detail::get_interface<Ieee8023MacInterface>(obj)->tx_bandwidth_available(phy);
        }
        static void link_status_changed(conf_object_t *obj, int phy, ieee_802_3_link_status_t status) {
            detail::get_interface<Ieee8023MacInterface>(obj)->link_status_changed(phy, status);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Ieee8023MacInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int receive_frame(int phy, dbuffer_t *buf, int crc_ok) const {
            return iface_->receive_frame(obj_, phy, buf, crc_ok);
        }
        void tx_bandwidth_available(int phy) const {
            iface_->tx_bandwidth_available(obj_, phy);
        }
        void link_status_changed(int phy, ieee_802_3_link_status_t status) const {
            iface_->link_status_changed(obj_, phy, status);
        }

        const Ieee8023MacInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Ieee8023MacInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IEEE_802_3_MAC_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Ieee8023MacInterface::ctype funcs {
                FromC::receive_frame,
                FromC::tx_bandwidth_available,
                FromC::link_status_changed,
            };
            return &funcs;
        }
    };
};

class Ieee8023MacV3Interface {
  public:
    using ctype = ieee_802_3_mac_v3_interface_t;

    // Function override and implemented by user
    virtual void receive_frame(int phy, const frags_t *frame, int crc_ok) = 0;
    virtual void tx_bandwidth_available(int phy) = 0;
    virtual void link_status_changed(int phy, ieee_802_3_link_status_t status) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void receive_frame(conf_object_t *obj, int phy, const frags_t *frame, int crc_ok) {
            detail::get_interface<Ieee8023MacV3Interface>(obj)->receive_frame(phy, frame, crc_ok);
        }
        static void tx_bandwidth_available(conf_object_t *obj, int phy) {
            detail::get_interface<Ieee8023MacV3Interface>(obj)->tx_bandwidth_available(phy);
        }
        static void link_status_changed(conf_object_t *obj, int phy, ieee_802_3_link_status_t status) {
            detail::get_interface<Ieee8023MacV3Interface>(obj)->link_status_changed(phy, status);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Ieee8023MacV3Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void receive_frame(int phy, const frags_t *frame, int crc_ok) const {
            iface_->receive_frame(obj_, phy, frame, crc_ok);
        }
        void tx_bandwidth_available(int phy) const {
            iface_->tx_bandwidth_available(obj_, phy);
        }
        void link_status_changed(int phy, ieee_802_3_link_status_t status) const {
            iface_->link_status_changed(obj_, phy, status);
        }

        const Ieee8023MacV3Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Ieee8023MacV3Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IEEE_802_3_MAC_V3_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Ieee8023MacV3Interface::ctype funcs {
                FromC::receive_frame,
                FromC::tx_bandwidth_available,
                FromC::link_status_changed,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
