// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_CALLBACKS_H
#define SIMICS_CPP_SIMULATOR_CALLBACKS_H

#include "simics/simulator/callbacks.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TelemetryManagerInterface {
  public:
    using ctype = telemetry_manager_interface_t;

    // Function override and implemented by user
    virtual void add_data(const char *group, const char *key, attr_value_t *value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void add_data(conf_object_t *obj, const char *group, const char *key, attr_value_t *value) {
            detail::get_interface<TelemetryManagerInterface>(obj)->add_data(group, key, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TelemetryManagerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void add_data(const char *group, const char *key, attr_value_t *value) const {
            iface_->add_data(obj_, group, key, value);
        }

        const TelemetryManagerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TelemetryManagerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TELEMETRY_MANAGER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TelemetryManagerInterface::ctype funcs {
                FromC::add_data,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
