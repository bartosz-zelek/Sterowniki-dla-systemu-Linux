// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_PROBE_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_PROBE_INTERFACE_H

#include "simics/simulator-iface/probe-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ProbeInterface {
  public:
    using ctype = probe_interface_t;

    // Function override and implemented by user
    virtual attr_value_t value() = 0;
    virtual attr_value_t properties() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t value(conf_object_t *obj) {
            return detail::get_interface<ProbeInterface>(obj)->value();
        }
        static attr_value_t properties(conf_object_t *obj) {
            return detail::get_interface<ProbeInterface>(obj)->properties();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ProbeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t value() const {
            return iface_->value(obj_);
        }
        attr_value_t properties() const {
            return iface_->properties(obj_);
        }

        const ProbeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ProbeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PROBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ProbeInterface::ctype funcs {
                FromC::value,
                FromC::properties,
            };
            return &funcs;
        }
    };
};

class ProbeIndexInterface {
  public:
    using ctype = probe_index_interface_t;

    // Function override and implemented by user
    virtual int num_indices() = 0;
    virtual attr_value_t value(int idx) = 0;
    virtual attr_value_t properties(int idx) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int num_indices(conf_object_t *obj) {
            return detail::get_interface<ProbeIndexInterface>(obj)->num_indices();
        }
        static attr_value_t value(conf_object_t *obj, int idx) {
            return detail::get_interface<ProbeIndexInterface>(obj)->value(idx);
        }
        static attr_value_t properties(conf_object_t *obj, int idx) {
            return detail::get_interface<ProbeIndexInterface>(obj)->properties(idx);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ProbeIndexInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int num_indices() const {
            return iface_->num_indices(obj_);
        }
        attr_value_t value(int idx) const {
            return iface_->value(obj_, idx);
        }
        attr_value_t properties(int idx) const {
            return iface_->properties(obj_, idx);
        }

        const ProbeIndexInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ProbeIndexInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PROBE_INDEX_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ProbeIndexInterface::ctype funcs {
                FromC::num_indices,
                FromC::value,
                FromC::properties,
            };
            return &funcs;
        }
    };
};

class ProbeArrayInterface {
  public:
    using ctype = probe_array_interface_t;

    // Function override and implemented by user
    virtual int num_indices() = 0;
    virtual attr_value_t value(int idx) = 0;
    virtual attr_value_t all_values() = 0;
    virtual attr_value_t properties(int idx) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int num_indices(conf_object_t *obj) {
            return detail::get_interface<ProbeArrayInterface>(obj)->num_indices();
        }
        static attr_value_t value(conf_object_t *obj, int idx) {
            return detail::get_interface<ProbeArrayInterface>(obj)->value(idx);
        }
        static attr_value_t all_values(conf_object_t *obj) {
            return detail::get_interface<ProbeArrayInterface>(obj)->all_values();
        }
        static attr_value_t properties(conf_object_t *obj, int idx) {
            return detail::get_interface<ProbeArrayInterface>(obj)->properties(idx);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ProbeArrayInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int num_indices() const {
            return iface_->num_indices(obj_);
        }
        attr_value_t value(int idx) const {
            return iface_->value(obj_, idx);
        }
        attr_value_t all_values() const {
            return iface_->all_values(obj_);
        }
        attr_value_t properties(int idx) const {
            return iface_->properties(obj_, idx);
        }

        const ProbeArrayInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ProbeArrayInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PROBE_ARRAY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ProbeArrayInterface::ctype funcs {
                FromC::num_indices,
                FromC::value,
                FromC::all_values,
                FromC::properties,
            };
            return &funcs;
        }
    };
};

class ProbeSubscribeInterface {
  public:
    using ctype = probe_subscribe_interface_t;

    // Function override and implemented by user
    virtual void subscribe() = 0;
    virtual void unsubscribe() = 0;
    virtual int num_subscribers() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void subscribe(conf_object_t *obj) {
            detail::get_interface<ProbeSubscribeInterface>(obj)->subscribe();
        }
        static void unsubscribe(conf_object_t *obj) {
            detail::get_interface<ProbeSubscribeInterface>(obj)->unsubscribe();
        }
        static int num_subscribers(conf_object_t *obj) {
            return detail::get_interface<ProbeSubscribeInterface>(obj)->num_subscribers();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ProbeSubscribeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void subscribe() const {
            iface_->subscribe(obj_);
        }
        void unsubscribe() const {
            iface_->unsubscribe(obj_);
        }
        int num_subscribers() const {
            return iface_->num_subscribers(obj_);
        }

        const ProbeSubscribeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ProbeSubscribeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PROBE_SUBSCRIBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ProbeSubscribeInterface::ctype funcs {
                FromC::subscribe,
                FromC::unsubscribe,
                FromC::num_subscribers,
            };
            return &funcs;
        }
    };
};

class ProbeSamplerCacheInterface {
  public:
    using ctype = probe_sampler_cache_interface_t;

    // Function override and implemented by user
    virtual void enable() = 0;
    virtual void disable() = 0;
    virtual uint64 get_generation() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void enable(conf_object_t *obj) {
            detail::get_interface<ProbeSamplerCacheInterface>(obj)->enable();
        }
        static void disable(conf_object_t *obj) {
            detail::get_interface<ProbeSamplerCacheInterface>(obj)->disable();
        }
        static uint64 get_generation(conf_object_t *obj) {
            return detail::get_interface<ProbeSamplerCacheInterface>(obj)->get_generation();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ProbeSamplerCacheInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void enable() const {
            iface_->enable(obj_);
        }
        void disable() const {
            iface_->disable(obj_);
        }
        uint64 get_generation() const {
            return iface_->get_generation(obj_);
        }

        const ProbeSamplerCacheInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ProbeSamplerCacheInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return PROBE_SAMPLER_CACHE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ProbeSamplerCacheInterface::ctype funcs {
                FromC::enable,
                FromC::disable,
                FromC::get_generation,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
