// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_IO_MEMORY_H
#define SIMICS_CPP_DEVS_IO_MEMORY_H

#include "simics/devs/io-memory.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class IoMemoryInterface {
  public:
    using ctype = io_memory_interface_t;

    // Function override and implemented by user
    virtual exception_type_t operation(generic_transaction_t *mem_op, map_info_t map_info) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static exception_type_t operation(conf_object_t *obj, generic_transaction_t *mem_op, map_info_t map_info) {
            return detail::get_interface<IoMemoryInterface>(obj)->operation(mem_op, map_info);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const IoMemoryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        exception_type_t operation(generic_transaction_t *mem_op, map_info_t map_info) const {
            return iface_->operation(obj_, mem_op, map_info);
        }

        const IoMemoryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const IoMemoryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IO_MEMORY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr IoMemoryInterface::ctype funcs {
                nullptr,
                FromC::operation,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
