#!/bin/bash

# Â© 2012 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.


# The script loads VMXMON kernel module.
# Please follow this style guide when updating the script:
# https://google.github.io/styleguide/shellguide.html

set -u  # To catch errors early let's treat unset variables as errors.


if [[ $# -gt 0 ]]; then
    echo "Usage: $0 [--help]"
    case "$1" in
        --help|-h) exit 0 ;;
        *) exit 1 ;;
    esac
fi

# Assume that scripts are "installed" as part of the build,
# so that the kernel module is always found relative to the
# build directory.
SCRIPTDIR=$(dirname "$0")
readonly SCRIPTDIR
readonly BUILD_DIR="${SCRIPTDIR}/.."
readonly VMXMON="${BUILD_DIR}/module/vmxmon.ko"
readonly CHECK_HW_UTIL="${SCRIPTDIR}/../util/check-hw-util"
if [[ ! -f "${VMXMON}" ]]; then
    echo "Kernel module not found or bad invocation."
    echo "This script is meant to be run from the build directory."
    exit 1
fi

SUDO="sudo"
if [[ "${UID}" == "0" ]]; then
    SUDO=""
fi
readonly SUDO

function unload() {
    local x
    for x in "$@" ; do
        /sbin/lsmod | grep "${x}" >& /dev/null && {
            "${SUDO}" /sbin/rmmod "${x}" || {
                echo "Failed unloading kernel module ${x}"
                exit 1
            }
        }
    done
    return 0
}

function load() {
    local x
    for x in "$@" ; do
        if [[ ! -f "${x}" ]]; then
            echo "Can not find kernel module ${x}"
            exit 1
        fi

        if "${SUDO}" /sbin/insmod "${x}" ; then
            echo "Kernel module $(basename "${x}") loaded successfully"
        else
            echo "Failed loading kernel module $(basename "${x}")"
            echo "Check the kernel log for errors (type 'dmesg')."
            exit 1
        fi
    done
    return 0
}

function wait_for_device() {
    local y
    for y in 1 2 3 4 5 6 7 8 9 ; do
        test -c "$1" && return 0
        sleep "0.${y}"
    done
    echo "ERROR: device node $1 did not appear"
    return 1
}

function setperm() {
    # if user has installed the udev rule, it handles permissions
    test -f /etc/udev/rules.d/99-vmxmon.rules && return 0

    local x
    for x in "$@" ; do
        wait_for_device "${x}" || exit $?
        echo "Setting ${x} permissions to 0666"
        "${SUDO}" /bin/chmod 0666 "${x}" || exit $?
    done
}

function check_hw() {
    "${CHECK_HW_UTIL}" >& /dev/null && return
    "${CHECK_HW_UTIL}"
    exit $?
}

check_hw
unload vmxmon
load "${VMXMON}"
setperm /dev/vmx /dev/nmihook
