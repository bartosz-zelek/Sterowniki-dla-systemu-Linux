/*
  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

header %{
#include "can-interface.h"
%}

import "simics/base/types.dml";
import "simics/pywrap.dml";

/* Add any data types used by the interface here */
extern typedef int can_status_t;
constant Can_Status_No_Error = 0;
constant Can_Status_Nack = 1;
constant Can_Status_Bit_Error = 2;
constant Can_Status_Stuff_Error = 3;
constant Can_Status_Crc_Error = 4;
constant Can_Status_Form_Error = 5;

constant CAN_DATA_MAX_NUM = 8;

extern typedef struct {
    /* arbitration field */
    uint32 identifier;
    bool extended;
    bool rtr;
    /* control field */
    uint8 data_length;
    /* data field */
    uint8 data[CAN_DATA_MAX_NUM];
    /* crc field */
    uint16 crc;
} can_frame_t;

/* CAN Device Interface */
extern typedef struct {
    void (*receive)(conf_object_t *obj, can_frame_t *frame);
} can_device_interface_t;

extern const char *const CAN_DEVICE_INTERFACE;

/* CAN Link Interface */
extern typedef struct {
    can_status_t (*send)(conf_object_t *obj, can_frame_t *frame);
} can_link_interface_t;

extern const char *const CAN_LINK_INTERFACE;
