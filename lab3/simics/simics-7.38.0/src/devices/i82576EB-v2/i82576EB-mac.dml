/*
  i82576EB-mac.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "simics/devs/mii.dml";
import "simics/devs/ieee_802_3.dml";

import "ethernet-utils.dml";

import "e1000-mac.dml";
import "e1000-mac-intr.dml";
import "i82576EB-mac-rx.dml";
import "i82576EB-mac-tx.dml";
import "i82576EB-mac-intr.dml";
import "i82576EB-mac-management.dml";
import "i82576EB-mac-pcie.dml";
import "i82576EB-mac-statistics.dml";

attribute lan_identifier {
    parameter documentation = "LAN ID, LAN A or LAN B (0b00=LAN A, 0b01=LAN B)";
    parameter configuration = "required";
    parameter allocate_type = "uint8";

    method set(attr_value_t value) {
        // 0b00 = LAN A, 0b01 == LAN B
        local uint8  v = SIM_attr_integer(value);
        if (v != 0 && v != 1) {
            log "spec_violation", 1: "attribute for status.lan_id set w/ incorrect value: %d", v;
            $this = 0;
        } else {
            $this = v;
        }
    }
}

parameter VMOLR_CNT = 8;
constant PHY_SPEED_10M = 0;
constant PHY_SPEED_100M = 1;
constant PHY_SPEED_1000M = 2;

constant MAX_NORMAL_FRAME = 1522;

constant RX_DELAY_TIMER   = 1.024e-6;

/* --------------------------------------------------------------
   IO-MEMORY MAPPED REGISTERS
   -------------------------------------------------------------- */
bank csr {
    parameter documentation = "i82576EB Ethernet Controller Registers";

    /* --------------------------------------------------------------
       GENERAL REGISTERS
       -------------------------------------------------------------- */
    register serdesctl   @ 0x00024 "Serdes_ana";
    register fcal        @ 0x00028 "Flow Control Address Low";
    register fcah        @ 0x0002c "Flow Control Address High";
    register fct         @ 0x00030 "Flow Control Type";
    register kumctrlsta  @ 0x00034 "GLCI Control and Status Register (the 631xESB/632xESB)";
    register lpic        @ 0x000fc "Low Power IDLE control";
    register fcttv       @ 0x00170 "Flow Control Transmit Timer Value";
    register txcw        @ 0x00178 "Transmit Configuration Word";
    register rxcw        @ 0x00180 "Receive Configuration Word";
    register ledctl      @ 0x00e00 "LED Control";
    register pba         @ 0x01000 "Packet Buffer Allocation";
    register eemngctl    @ 0x01010 "MNG EEPROM Control";
    register sw_fw_sync  @ 0x05b5c "Software/Firmware Synchronization";
    register vt_ctl      @ 0x0581c "Next gen VMDq control";
    register vmolr[$VMOLR_CNT]  size 4 @ 0x05ad0 + $i*4 "VM Offload Engine";
    register rplolr      @ 0x05af0 "Replication offload";

    /* INTERRUPT REGISTERS:  i82576EB-mac-intr.dml
     * RECEIVE REGISTERS:    i82576EB-mac-rx.dml
     * TRANSMIT REGISTERS:   i82576EB-mac-tx.dml
     * STATISTICS REGISTERS: i82576EB-mac-statistics.dml
     * MANAGEMENT REGISTERS: i82576EB-mac-management.dml
     * PCIE REGISTERS:       i82576EB-mac-pcie.dml
     */

    /* Some dummy registers */
    register dummy_3004 @ 0x3004 is (undocumented);

    register ctrl {
        field fd[0] is (read_write) "Full-Duplex" {
            parameter hard_reset_value = 1;
        }
        // reserved[1]
        field md[2] is (read_write) "Master Disable";
        // lrst[3] "Link Reset"
        // reserved[5:4]
        // slu[6] "Set Link Up"
        // reserved[7]
        field speed[9:8] is (read_write) "Speed selection" {
            parameter hard_reset_value = 0b10;
        }
        // reserved[10]
        field frcspd[11] is (read_write) "Force Speed";
        field frcdplx[12] is (read_write) "Force Duplex";
        // reserved[14:13]
        // reserved [17:15]
        // sdp0_data[18]
        // sdp1_data[19]
        // advd3wuc[20]
        // reserved[21]
        // sdp0_iodir[22]
        // sdp1_iodir[23]
        // reserved[25:24]
        field swrst[26] is (read_write) "Host Software Reset";
        field rfce[27] is (unimplemented) "Receive Flow Control Enable";
        field tfce[28] is (unimplemented) "Transmit Flow Control Enable";
        // reserved[29]
        field vme[30] is (read_write) "VLAN Mode Enable";
        field phy_rst[31] is (unimplemented) "PHY Reset";

        method after_write(memop) {
            if ($swrst == 1) {
                call $dev.soft_reset();

                /* copy the MAC address to the RAL/RAH registers */
                memcpy(&$csr.ra[0].low, &$mac_address, 4);
                $csr.ra[0].high.rah = ($mac_address >> 32) & 0xFFFF;
                $csr.ra[0].high.asel = $RAH_ASEL_DESTINATION_ADDRESS;
                $csr.ra[0].high.av = 1;
            }

            if ($frcspd == 1)
                $status.speed = $speed;
            if ($frcdplx == 1)
                $status.fd = $fd;
        }
    }

    register status {
        field fd[0] is (read_only) "Full Duplex" {
            parameter hard_reset_value = 1;
        }
        field lu[1] is (read_only) "Link Up" {
            parameter hard_reset_value = 1;
        }
        field lan_id[3:2] is (read_only) "LAN Identifier" {
            method read() -> (value) {
                value = $lan_identifier;
            }
        }
        field txoff[4] is (read_only) "Transmit Paused";
        field tbimode[5] is (read_only) "TBI Mode - Internal SerDes Indication" {
            parameter hard_reset_value = 0;
        }
        field speed[7:6] is (read_only) "Link Speed Setting";
        field asdv[9:8] is (read_only) "Auto Speed Detection Value";
        field phyra[10] is (read_only) "PHY Reset Asserted";
        // reserved[18:11]
        field mes[19] is (read_only) "Master Enable Status";
        // reserved[31:20]
    }

    register ctrl_ext {
        // reserved[1:0]
        field sdp2_gpien[2] is (unimplemented) "General Purpose Interrupt Detection Enable for SDP2";
        field sdp3_gpien[3] is (unimplemented) "General Purpose Interrupt Detection Enable for SDP3";
        // reserved[5:4]
        field sdp2_data[6] is (unimplemented) "SDP2 Data Value";
        field sdp3_data[7] is (unimplemented) "SDP3 Data Value";
        // reserved[9:8]
        field sdp2_iodir[10] is (unimplemented) "SDP2 Pin Directionality";
        field sdp3_iodir[11] is (unimplemented) "SDP3 Pin Directionality";
        field asdchk[12] is (unimplemented) "ASD Check";
        field ee_rst[13] is (unimplemented) "EEPROM Reset";
        // reserved[14]
        field spd_byps[15] is (unimplemented) "Speed Select Bypass";
        // reserved[16]
        field ro_dis[17] is (unimplemented) "Relaxed Ordering Disable";
        field sd_lpe[18] is (unimplemented) "SERDES Low Power Enable";
        field dma_dge[19] is (unimplemented) "Dynamic Clock Gating Enable";
        field phy_pde[20] is (unimplemented) "PHY Power Down Enable";
        // reserved[21]
        field link_mode[23:22] is (unimplemented) "Link Mode";
        // reserved [26:24]
        field iame[27] is (unimplemented) "Interrupt Acknowledge Auto-Mask Enable";
        field drv_load[28] is (unimplemented) "Driver Loaded";
        field itcen[29] is (unimplemented) "Interrupt Timers Clean Enable";
        // reserved[31:30]
    }

    register fla is (unimplemented);

    register mdic {
        field data[15:0] is (read_write) "MDIO Data";
        field rega[20:16] is (read_write) "PHY Register Address";
        field phya[25:21] is (read_write) "PHY Address";
        field op[27:26] is (read_write) "Opcode";
        field r[28] is (read_write) "Ready";
        field ie[29] is (read_write) "Interrupt Enable";
        field e[30] is (read_write) "Error";
        // reserved[31]
        method after_write(memop) {
            if ($r == 1) {
                log "info", 2:
                    "MDIC ready bit must be 0 to read/write PHY registers";
                return;
            }

            if ($op == 0b01) {
                $mii.mii_management.write_register($phya, $rega, $data);
            } else if ($op == 0b10) {
                $data = $mii.mii_management.read_register($phya, $rega);
            } else {
                log "spec_violation", 1:
                    "write register %s with reserved opcode %d", $name, $op;
                $e = 1;
            }

            $r = 1;
//            if ($ie == 1)
//                call $raise_interrupt(INTR_MDAC);
        }
    }

    register serdesctl is (unimplemented);
    register fcal is (unimplemented);
    register fcah is (unimplemented);
    register fct is (unimplemented);
    register kumctrlsta is (unimplemented);
    register fcttv is (unimplemented);
    register txcw is (unimplemented);
    register rxcw is (unimplemented);
    register ledctl is (unimplemented);
    register lpic is (reserved);

    register pba {
        field rxa[15:0] is (unimplemented) "Receive Packet Buffer Allocation" {
            parameter hard_reset_value = 0x0020;
            is ignore_soft_reset;
        }
        field txa[20:16] is (unimplemented) "Transmit Packet Buffer Allocation" {
            parameter hard_reset_value = 0x0010;
            is ignore_soft_reset;
        }
    }
    register eemngctl {
        field cfg_done[18] {
            method read() -> (val) {
                val = 1;
            }
        }
    }
    register sw_fw_sync is (unimplemented);
    register vt_ctl  is (unimplemented);
    register vmolr[$VMOLR_CNT] is (unimplemented);
    register rplolr is (unimplemented);
}

template ignore_soft_reset {
    method soft_reset() { /* do nothing */ }
}
