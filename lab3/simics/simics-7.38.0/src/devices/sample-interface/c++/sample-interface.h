// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2023 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SAMPLE_INTERFACE_CPP_SAMPLE_INTERFACE_H
#define SAMPLE_INTERFACE_CPP_SAMPLE_INTERFACE_H

#include "../sample-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SampleInterface {
  public:
    using ctype = sample_interface_t;

    // Function override and implemented by user
    virtual void simple_method(int arg) = 0;
    virtual void object_method(conf_object_t *arg) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void simple_method(conf_object_t *obj, int arg) {
            detail::get_interface<SampleInterface>(obj)->simple_method(arg);
        }
        static void object_method(conf_object_t *obj, conf_object_t *arg) {
            detail::get_interface<SampleInterface>(obj)->object_method(arg);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SampleInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void simple_method(int arg) const {
            iface_->simple_method(obj_, arg);
        }
        void object_method(conf_object_t *arg) const {
            iface_->object_method(obj_, arg);
        }

        const SampleInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SampleInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SAMPLE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SampleInterface::ctype funcs {
                FromC::simple_method,
                FromC::object_method,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
