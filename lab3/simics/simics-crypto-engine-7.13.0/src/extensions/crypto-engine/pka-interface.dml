/*
  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

header %{
#include "pka-interface.h"
%}

/*
 * Documentation of these interfaces are defined in "pka-interface.h"
 */

extern typedef int pka_error_t;
extern pka_error_t Pka_Err_None;
extern pka_error_t Pka_Err_Modular_Err;
extern pka_error_t Pka_Err_Unknown_Field;
extern pka_error_t Pka_Err_Unknown_Coord;
extern pka_error_t Pka_Err_Prime_Test;
extern pka_error_t Pka_Err_Ec_Mul_Scalar;
extern pka_error_t Pka_Err_Para;
extern pka_error_t Pka_Err_Data_Fmt;
extern pka_error_t Pka_Err_Data_Size;
extern pka_error_t Pka_Err_Point_A_Not_On_Curve;
extern pka_error_t Pka_Err_Point_B_Not_On_Curve;
extern pka_error_t Pka_Err_Div_By_Zero;
extern pka_error_t Pka_Err_Mod_Even;
extern pka_error_t Pka_Err_General;

extern typedef int pka_bn_func_t;
extern pka_bn_func_t Pka_Bn_Mod_Add;
extern pka_bn_func_t Pka_Bn_Mod_Sub;
extern pka_bn_func_t Pka_Bn_Mod_Mul;
extern pka_bn_func_t Pka_Bn_Mod_Exp;
extern pka_bn_func_t Pka_Bn_Mod_Reduction;
extern pka_bn_func_t Pka_Bn_Mod_Inversion;
extern pka_bn_func_t Pka_Bn_Gcd;
extern pka_bn_func_t Pka_Bn_Prime_Test;
extern pka_bn_func_t Pka_Bn_Gen_Prime;
extern pka_bn_func_t Pka_Bn_R2;
extern pka_bn_func_t Pka_Bn_ReRp;
extern pka_bn_func_t Pka_Bn_Add;
extern pka_bn_func_t Pka_Bn_Sub;
extern pka_bn_func_t Pka_Bn_Mul;

extern typedef int pka_field_t;
extern pka_field_t Pka_Field_Fp;
extern pka_field_t Pka_Field_F2m;

extern typedef int pka_coord_t;
extern pka_coord_t Pka_Coord_Affine;
extern pka_coord_t Pka_Coord_Projective;

extern typedef int pka_data_fmt_t;
extern pka_data_fmt_t Pka_Data_Fmt_Normal;
extern pka_data_fmt_t Pka_Data_Fmt_Montgomery;

extern typedef struct {
    void (*to_montgomery)(
        conf_object_t *obj, const bytes_t m, const bytes_t *x,
        buffer_t **r, size_t n);
    void (*from_montgomery)(
        conf_object_t *obj, const bytes_t m, const bytes_t *x,
        buffer_t **r, size_t n);
    pka_error_t
        (*bn)(conf_object_t *obj, pka_bn_func_t func, pka_field_t field,
              pka_data_fmt_t in_fmt, pka_data_fmt_t out_fmt,
              const bytes_t a, const bytes_t b, const bytes_t m,
              buffer_t *r);
    pka_error_t (*ec_mod_add)(
        conf_object_t *obj, pka_field_t field,
        pka_data_fmt_t in_fmt, pka_data_fmt_t out_fmt, pka_coord_t coord,
        const bytes_t curve_a, const bytes_t curve_b, const bytes_t m,
        const bytes_t p0[3], const bytes_t p1[3], buffer_t *r[3]);
    pka_error_t (*ec_mod_dbl)(
        conf_object_t *obj, pka_field_t field,
        pka_data_fmt_t in_fmt, pka_data_fmt_t out_fmt, pka_coord_t coord,
        const bytes_t curve_a, const bytes_t curve_b, const bytes_t m,
        const bytes_t p0[3], buffer_t *r[3]);
    pka_error_t (*ec_mod_mul)(
        conf_object_t *obj, pka_field_t field,
        pka_data_fmt_t in_fmt, pka_data_fmt_t out_fmt, pka_coord_t coord,
        const bytes_t curve_a, const bytes_t curve_b, const bytes_t m,
        const bytes_t s, const bytes_t p0[3], buffer_t *r[3]);
    void (*montgomery_mul)(
            conf_object_t *obj, const bytes_t *a, const bytes_t *b,
            const bytes_t *m, buffer_t *r);
    pka_error_t (*bn_div)(
        conf_object_t *obj,
        const bytes_t a, const bytes_t b,
        buffer_t *q, buffer_t *r);
} pka_interface_t;

constant PKA_INTERFACE = "pka";
