/*
  Â© 2021 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

/*
----------------------------------------------------------------------------------

  m-display : Display unit, for that nice demo effect
            : Only displays a full screen 

*/


dml 1.4;

device m_display;

param desc = "display unit for Mandelbrot fractals";

param documentation = "Simple display unit specialized for Mandelbrot fractals";

import "utility.dml";
import "simics/devs/memory-space.dml";
import "simics/model-iface/gfx-console.dml";  
import "simics/model-iface/video-interface.dml";
import "simics/model-iface/vga-text-interface.dml";

loggroup display;
loggroup software;
loggroup dma;
loggroup buffer_memory;

//----------------------------------------------------------------------
//
// Utility, shamelessly borrowed from the sample-dma-device
//
// Read len bytes of target memory from the address src in the memory
// $target_mem_space. The result is put in memory pointed to by dst,
// which must be large enough to hold at least len bytes. If a memory
// access error occurs this method will print an error message and
// throw an exception.
//
//----------------------------------------------------------------------
method read_mem(void *dst,
                physical_address_t src,
                physical_address_t len) throws {
    local exception_type_t exc;
    exc = local_memory.memory_space.access_simple(dev.obj,
                                                src,
                                                dst,
                                                len,
                                                Sim_RW_Read,
                                                Sim_Endian_Target);

    if (exc != Sim_PE_No_Exception) {
        log error, 1, dma: "Error reading target memory (0x%x for %d bytes)", 
                            src, len;
        throw;
    }
}


//----------------------------------------------------------------------
//
// Connects   
// - Reference to the memory space where we find the results.
// - Reference to the graphics console to display on.
//
//----------------------------------------------------------------------
connect local_memory {
    param desc = "Memory to load results from";
    param configuration = "required";
    param internal = false;       // = list-attributes shows it by default
    interface memory_space;
}

connect console is init {
    param desc = "Graphics console to display results on";
    param configuration = "optional";
    param internal = false;       // = list-attributes shows it by default
    interface gfx_con;

    // Data about the current display buffer.  Temporary data only 
    // known internally in this device.  To be able to checkpoint, 
    // the display_width and display_height are declared as "saved". 
    // 
    // Note that this reflects the last size "pushed" from the registers.
    // It is quite possible that the registers contain a different value. 
    // The size here reflects the currently displayed data.
    //
    // However, the buffer is trickier.  It cannot use saved in the
    // same way as it refers to dynamically allocated data.  
    //
    // The data type is also "uint32_le_t" to clearly indicate that the 
    // data is stored as little endian. Since this is handled kind of 
    // as memory from the perspective of the graphics console. 
    session uint32_le_t  * display_contents;
    saved   int            display_width;
    saved   int            display_height;

    // Set the screen size, including allocating memory
    method set_display_size(int width, int height) {
        // Is this is a change?
        if ( (width  == display_width) && 
             (height == display_height) &&
             (display_contents != NULL)) {
            return;
        }

        // Deallocate old display contents 
        if(display_contents != NULL) {
            log info, 3, buffer_memory: "Deallocating old display contents";
            delete display_contents;
        }

        // Allocate new buffer
        log info, 3, buffer_memory: "Allocating new display contents, "
                                  + "for %d x %d pixels", width, height;
        local size_t   px_count = width * height;
        display_contents = new uint32_le_t [px_count];
        display_width = width;
        display_height = height;
    }

    // Call this method to update the connected display
    method refresh_display() {
        // Sanity checking
        if(this.obj == NULL) {
            log info, 2, display: "No display configured, nothing drawn";
            return;
        }

        // And do not draw if the contents are NULL 
        if(display_contents == NULL) {
            log info, 2, display: "No contents to draw";
            return;
        }

        // Update the size 
        this.gfx_con.set_size(display_width, display_height);

        // Create a temporary bytes_t data 
        // that gives the graphics console what it needs
        local bytes_t temp_bytes;
        temp_bytes.data = cast(display_contents, const uint8 *);
        temp_bytes.len = display_width * display_height * 4;

        // Pass over the pixels
        this.gfx_con.put_block(
            temp_bytes,
            0, 
            0,
            display_width-1, 
            display_height-1,
            32,                      // Number of bits per pixel
            4 * display_width,      // src_stride
        );

        // And redraw
        this.gfx_con.redraw();
    }

    // Fill the console with a single color, useful for initial state
    // plus the "color_it_all" pseudo attribute
    method single_color_display(int width, int height, uint32 rgb) {
        log info, 2, display: "Coloring %d x %d pixels 0x%x", width, height, rgb;

        // Set up size, allocate memory
        console.set_display_size(width,height);

        // Fill with color
        local int i;
        local int px_count = width * height;

        for(i=0;i<px_count;i++){
            console.display_contents[i] = rgb;
        }
    }

    // Make sure we have an initial state that is defined
    // and not empty.  In this way, the console should never
    // be zero-sized and NULL. 
    method init() {
        single_color_display(500,500,0x000f_75bc);
    }
}

attribute display_data {
    param type = "d";
    param documentation = "Saves the internal model display buffer for checkpointing";
    // The attribute is marked internal to not show in a standard use of 
    // list-attributes. This is consistent with the "saved display_width/height"
    // above, which both generate internal-marked attributes
    param internal = true; 

    // Get: Convert the display buffer to a data-type attribute
    // This does create another copy of the data, but it is not 
    // all that big.  And a checkpointing operation will take time
    // anyway.  
    // 
    // But an argument could be made that this shows that design is
    // a bit too simple.  Maybe it would be better to put the data 
    // into an image. 
    method get() -> (attr_value_t) {
        assert(console.display_contents!=NULL);
        local size_t       s = console.display_width * console.display_height * 4; 
        local attr_value_t a;
        a=SIM_make_attr_data( s, 
                              cast(console.display_contents, const void *));
        return a;
    }
    // And getting data from the attribute
    method set(attr_value_t value) throws {
        // If there already was some content in the 
        // display, delete it.  When opening a checkpoint, 
        // this will be the monocolor display contents set up
        // by the init method. 
        if(console.display_contents!=NULL) {
            delete console.display_contents;
        }
        local size_t incoming_size = SIM_attr_data_size(value);

        // We assume that the data size from the attribute value
        // is correct.  The set of the display data can happen
        // in any order with respect to the display_height and
        // display_width attributes, so we cannot use them
        // to compute the data size.  
        //
        // Size is in bytes, convert to uint32 chunks for allocation
        console.display_contents = new uint32_le_t[incoming_size/4];

        // Make a copy of the data in the attribute
        // The attribute will be deallocated by the caller
        memcpy(console.display_contents, 
               SIM_attr_data(value), 
               incoming_size);
    }
}

//----------------------------------------------------------------------
//
// Pseudo-attribute used when connecting to a console. Via components. 
// Sets the "real" console attribute, and also forces a redraw.
//
// Which is necessary in order to handle hot-plugging between
// instantiated components.  
//
// Putting this logic into the console attribute would trigger 
// redraws during checkpoint restores, which might be unordered
// with respect to restoring the actual state of the console. 
//
//----------------------------------------------------------------------

attribute connect_console is write_only_attr {
    param type = "o";   // only an object is OK, do not support legacy ports
    param documentation = "Set this attribute to change console and trigger redraw";
    param internal = true;

    // Override the set method to do a redraw on connect
    method set(attr_value_t attr) throws {
        // We can assume we have a valid object thanks to the attribute type
        local conf_object_t * con_object;
        con_object = SIM_attr_object(attr);

        log info, 2, display: "Console_connect set to %s and doing redraw.", 
                               SIM_object_name(con_object);

        // Set the console contents 
        console.set(con_object);
        // Refresh
        console.refresh_display();
    }
}

//----------------------------------------------------------------------
//
// Incoming ports and implements, called by the graphics console
// object in Simics.  Also, attributes read by the graphics console.
//
//----------------------------------------------------------------------

implement vga_update {
    // The VGA update interface is used to ask this device to 
    // provide a redraw of the contents of the console
    method refresh() {
        log info, 3, display: "Display refresh requested by console";
        console.refresh_display();
    }
    method refresh_all() {
        log info, 3, display: "Display refresh_all requested by console";
        console.refresh_display();
    }
}

implement vga_text_info {
    method text_mode () -> (bool) {
        log info, 3, display: "VGA text mode is not used";
        return false;
    }
    method font_size(int *width, int *height) -> (bool) {
        log info, 3, display: "VGA text mode is not used";
        return false;
    }
    method screen_size(int *columns, int *rows) -> (bool) {
        log info, 3, display: "VGA text mode is not used";
        return false;
    }
    method text(uint8 *text, uint8 *line_lengths) -> (bool) {
        log info, 3, display: "VGA text mode is not used";
        return false;
    }
}

attribute refresh_rate is (uint64_attr) {
    param documentation = "Set by console component on connection";
    param configuration = "optional";
}
 



//----------------------------------------------------------------------
//
// Control register bank
// - Map it for say 0x80 bytes 
//
//----------------------------------------------------------------------
bank regs {
    param register_size = 4;
    param desc = "control registers for display unit";

    // Display set up
    register width    @ 0x00 "Display width";
    register height   @ 0x04 "Display height";
    register max_iter @ 0x08 "Maximum iterations" {
        // Keep 32-bit register size, but make top 16 bits not usable
        field unused   @ [31:16] is (reserved);
        field max_iter @ [15:0] ;        
    }
    register update   @ 0x0c "Request update from new data";

    // Memory address of data to display
    register iter_data_addr size 8 @ 0x10 "Iteration data address";

    // Memory address of color table
    register color_table_addr size 8 @ 0x18 "Color table address";

    // For testing
    register color_all @ 0x40 "Color entire display in RGB";
}

// Implementation of registers
bank regs {

    // Implementation of side effect for "redraw" register
    register update is write {
        method write(uint64 v) {
            this.val = v;
            if(v!=0) {
                update_display();
            }
        }
    }

    // Implementation of side effect for "color all" register
    register color_all is write {
        method write(uint64 v) {
            this.val = v;
            color_it_all(v);
        }
    }
}


//----------------------------------------------------------------------
//
// redraw
//
//----------------------------------------------------------------------
method update_display() {
    // We can compute the contents and save it in a local buffer
    // in this device, until a graphics console shows up to display it 

    // Cache values and log 
    local uint32  width  = regs.width.val;
    local uint32  height = regs.height.val;
    local uint32  max_iter = regs.max_iter.val;

    log info, 2, software: "Displaying %d x %d pixels from 0x%x, color tab at 0x%x, max iter %d", 
                    width, height, regs.iter_data_addr.val, regs.color_table_addr.val, max_iter;

    // Set up size, allocate memory
    console.set_display_size(width,height);

    //-----
    // Load color table
    //   Table covers 0 to maxiter, or maxiter+1 elements
    local uint32 * color_table;
    local int      color_table_size = max_iter+1;
    local uint64   color_table_bytes = (sizeoftype uint32) * color_table_size;

    color_table = new uint32[ color_table_size ];

    try {
        log info, 3, dma: "Color table read of %d bytes from 0x%x.", 
                     color_table_bytes, 
                     regs.color_table_addr.val;
        read_mem(color_table, regs.color_table_addr.val, color_table_bytes) ;
    } catch {
        // An error is already logged from the read_mem function if it fails
        log info, 2, dma: "Color table read failed, operation not finished";
        delete color_table;
        return; 
    }

    //-----
    // Load entire target data into a local buffer
    local uint16 * iter_data;
    local int      num_iter_pixels = width * height;
    local uint64   iter_pixels_bytes = (sizeoftype uint16) * num_iter_pixels;
    iter_data = new uint16[ num_iter_pixels ];

    try {
        log info, 3, dma: "Iteration data read of %d bytes from 0x%x.", 
                        iter_pixels_bytes, 
                        regs.iter_data_addr.val;
        read_mem(iter_data, regs.iter_data_addr.val, iter_pixels_bytes) ;
    } catch {
        // An error is already logged from the read_mem function if it fails
        log info, 2, dma: "Iteration data read failed, operation not finished";
        delete color_table;
        delete iter_data;
        return; 
    }

    // Iterate!
    local int x;
    local int y;
    local uint16 iters;
    local uint32 rgb;
    for(y=0;y<height;y++) {
        // One line at a time, from the top down
        for(x=0;x<width;x++) {
            iters = iter_data[(y * width) + x];
            rgb = color_table[iters];
            console.display_contents[(y * width) + x] = rgb;
        }
    }

    // Update display
    console.refresh_display();

    // Clean up dynamic allocation
    delete iter_data; 
    delete color_table;
}


//----------------------------------------------------------------------
//
// color-it-all
//
//----------------------------------------------------------------------

// This is called on a register write 
method color_it_all(uint32 rgb) {
    // Cache values and log 
    local uint32  width  = regs.width.val;
    local uint32  height = regs.height.val;
    log info, 2, software: "Register write - request coloring %d x %d pixels 0x%x", width, height, rgb;

    // Check for dumb sizes in the register values
    // Note the register values are what they are - checks happen here when they are used
    // It is very rare for hardware registers to ignore bad values, but if they did, 
    // that could be coded into the registers themselves. 
    // Also -- is this really a good place to check this?  What about the standard 
    // rendering path?  
    if ( (width==0) || (height==0)) {
        log spec_viol, 1, software: "Display size of %d x %d pixels is non-sensical",
                                     width, height;
        return;
    }        

    // Call the general coloring method
    console.single_color_display(width, height, rgb);

    // Redraw the screen
    console.refresh_display();
}



//----------------------------------------------------------------------
//
// Post_Init
// - Runs after the object is created, and after attributes are set.
//
// The order is init() -> attributes.set() -> post_init()
//
//----------------------------------------------------------------------
method post_init() {

    // This will run after a checkpoint has been opened
    // As well as after all attributes have been set. 
    
    // Do a redraw here so that we get the console updated
    // when opening a checkpoint.  No component connectors are 
    // set on checkpoint opening, so the connect_console attribute
    // will not be set. 
    //
    // Nor can  we redraw in the console attribute itself.  

    console.refresh_display();
}
