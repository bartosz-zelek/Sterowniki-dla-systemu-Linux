/*
  Â© 2024 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

device i_processor_id_router;

import "simics/devs/translator.dml";

param desc = "processor ID router";

param documentation = "Simple translator that routes based on the existence of processor ID atoms.";

import "utility.dml";
import "i-processor-id-atom.dml";

connect memory_space_with_id is map_target "Memory space for devices that expect existence of processor IDs.";
connect memory_space_without_id is map_target "Memory space for devices that do not use processor IDs.";

implement transaction_translator {
    method translate(uint64 addr,
                     access_t access,
                     transaction_t *t,
                     exception_type_t (*callback)(translation_t txl,
                                                  transaction_t *tx,
                                                  cbdata_call_t cbd),
                     cbdata_register_t cbdata) -> (exception_type_t) default
    {
        local translation_t txl = { .target = memory_space_with_id.map_target, ...};
        if (ATOM_transaction_training_processor_id(t) == NULL)
            txl.target = memory_space_without_id.map_target;
        return callback(txl, t, cbdata);
    }
}

implement translation_flush {
    method flush_range(uint64 base, uint64 size, access_t access,
                       const map_target_t *default_target) -> (bool) default {
        local bool ret = SIM_map_target_flush(memory_space_with_id.map_target, base, size, access);
        ret = ret && SIM_map_target_flush(memory_space_without_id.map_target, base, size, access);
        if (!ret) {
            log info, 1 then 2: "Failed flushing map_targets";
        }
        return ret;
    }
}



