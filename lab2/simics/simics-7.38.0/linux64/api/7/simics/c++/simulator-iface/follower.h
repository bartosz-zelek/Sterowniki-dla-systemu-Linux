// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_FOLLOWER_H
#define SIMICS_CPP_SIMULATOR_IFACE_FOLLOWER_H

#include "simics/simulator-iface/follower.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class FollowerAgentInterface {
  public:
    using ctype = follower_agent_interface_t;

    // Function override and implemented by user
    virtual void accept(bytes_t msg) = 0;
    virtual void accept_async(bytes_t msg) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void accept(conf_object_t *obj, bytes_t msg) {
            detail::get_interface<FollowerAgentInterface>(obj)->accept(msg);
        }
        static void accept_async(conf_object_t *obj, bytes_t msg) {
            detail::get_interface<FollowerAgentInterface>(obj)->accept_async(msg);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FollowerAgentInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void accept(bytes_t msg) const {
            iface_->accept(obj_, msg);
        }
        void accept_async(bytes_t msg) const {
            iface_->accept_async(obj_, msg);
        }

        const FollowerAgentInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FollowerAgentInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FOLLOWER_AGENT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FollowerAgentInterface::ctype funcs {
                FromC::accept,
                FromC::accept_async,
            };
            return &funcs;
        }
    };
};

class LeaderMessageInterface {
  public:
    using ctype = leader_message_interface_t;

    // Function override and implemented by user
    virtual void send(follower_time_t time, uint64 skey, bytes_t msg) = 0;
    virtual void send_async(bytes_t msg) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void send(conf_object_t *obj, follower_time_t time, uint64 skey, bytes_t msg) {
            detail::get_interface<LeaderMessageInterface>(obj)->send(time, skey, msg);
        }
        static void send_async(conf_object_t *obj, bytes_t msg) {
            detail::get_interface<LeaderMessageInterface>(obj)->send_async(msg);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const LeaderMessageInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void send(follower_time_t time, uint64 skey, bytes_t msg) const {
            iface_->send(obj_, time, skey, msg);
        }
        void send_async(bytes_t msg) const {
            iface_->send_async(obj_, msg);
        }

        const LeaderMessageInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const LeaderMessageInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return LEADER_MESSAGE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr LeaderMessageInterface::ctype funcs {
                FromC::send,
                FromC::send_async,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
