// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_INTERRUPT_H
#define SIMICS_CPP_DEVS_INTERRUPT_H

#include "simics/devs/interrupt.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SimpleInterruptInterface {
  public:
    using ctype = simple_interrupt_interface_t;

    // Function override and implemented by user
    virtual void interrupt(int value) = 0;
    virtual void interrupt_clear(int value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void interrupt(conf_object_t *obj, int value) {
            detail::get_interface<SimpleInterruptInterface>(obj)->interrupt(value);
        }
        static void interrupt_clear(conf_object_t *obj, int value) {
            detail::get_interface<SimpleInterruptInterface>(obj)->interrupt_clear(value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SimpleInterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void interrupt(int value) const {
            iface_->interrupt(obj_, value);
        }
        void interrupt_clear(int value) const {
            iface_->interrupt_clear(obj_, value);
        }

        const SimpleInterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SimpleInterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SIMPLE_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SimpleInterruptInterface::ctype funcs {
                FromC::interrupt,
                FromC::interrupt_clear,
            };
            return &funcs;
        }
    };
};

class InterruptQueryInterface {
  public:
    using ctype = interrupt_query_interface_t;

    // Function override and implemented by user
    virtual int is_enabled(int irq_level) = 0;
    virtual void register_callback(conf_object_t *device, int irq_level, interrupt_changed_state_callback_t cb, void *cb_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int is_enabled(conf_object_t *interrupt_controller, int irq_level) {
            return detail::get_interface<InterruptQueryInterface>(interrupt_controller)->is_enabled(irq_level);
        }
        static void register_callback(conf_object_t *interrupt_controller, conf_object_t *device, int irq_level, interrupt_changed_state_callback_t cb, void *cb_data) {
            detail::get_interface<InterruptQueryInterface>(interrupt_controller)->register_callback(device, irq_level, cb, cb_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InterruptQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int is_enabled(int irq_level) const {
            return iface_->is_enabled(obj_, irq_level);
        }
        void register_callback(conf_object_t *device, int irq_level, interrupt_changed_state_callback_t cb, void *cb_data) const {
            iface_->register_callback(obj_, device, irq_level, cb, cb_data);
        }

        const InterruptQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InterruptQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INTERRUPT_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InterruptQueryInterface::ctype funcs {
                FromC::is_enabled,
                FromC::register_callback,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
