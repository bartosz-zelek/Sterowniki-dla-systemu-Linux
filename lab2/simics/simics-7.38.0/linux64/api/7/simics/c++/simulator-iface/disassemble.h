// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_DISASSEMBLE_H
#define SIMICS_CPP_SIMULATOR_IFACE_DISASSEMBLE_H

#include "simics/simulator-iface/disassemble.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class DisassembleInterface {
  public:
    using ctype = disassemble_interface_t;

    // Function override and implemented by user
    virtual void init(uint8 *buff, int buff_len, uint64 address) = 0;
    virtual disasm_instr_t next() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void init(conf_object_t *obj, uint8 *buff, int buff_len, uint64 address) {
            detail::get_interface<DisassembleInterface>(obj)->init(buff, buff_len, address);
        }
        static disasm_instr_t next(conf_object_t *obj) {
            return detail::get_interface<DisassembleInterface>(obj)->next();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DisassembleInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void init(uint8 *buff, int buff_len, uint64 address) const {
            iface_->init(obj_, buff, buff_len, address);
        }
        disasm_instr_t next() const {
            return iface_->next(obj_);
        }

        const DisassembleInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DisassembleInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DISASSEMBLE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DisassembleInterface::ctype funcs {
                FromC::init,
                FromC::next,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
