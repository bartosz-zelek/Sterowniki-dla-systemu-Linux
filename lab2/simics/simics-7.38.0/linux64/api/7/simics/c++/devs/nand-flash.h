// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_NAND_FLASH_H
#define SIMICS_CPP_DEVS_NAND_FLASH_H

#include "simics/devs/nand-flash.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class NandFlashInterface {
  public:
    using ctype = nand_flash_interface_t;

    // Function override and implemented by user
    virtual uint16 read_access() = 0;
    virtual void write_access(uint16 value) = 0;
    virtual void set_command_latch_enable(int value) = 0;
    virtual void set_address_latch_enable(int value) = 0;
    virtual void set_write_protect(int value) = 0;
    virtual void set_spare_area_enable(int value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint16 read_access(conf_object_t *obj) {
            return detail::get_interface<NandFlashInterface>(obj)->read_access();
        }
        static void write_access(conf_object_t *obj, uint16 value) {
            detail::get_interface<NandFlashInterface>(obj)->write_access(value);
        }
        static void set_command_latch_enable(conf_object_t *obj, int value) {
            detail::get_interface<NandFlashInterface>(obj)->set_command_latch_enable(value);
        }
        static void set_address_latch_enable(conf_object_t *obj, int value) {
            detail::get_interface<NandFlashInterface>(obj)->set_address_latch_enable(value);
        }
        static void set_write_protect(conf_object_t *obj, int value) {
            detail::get_interface<NandFlashInterface>(obj)->set_write_protect(value);
        }
        static void set_spare_area_enable(conf_object_t *obj, int value) {
            detail::get_interface<NandFlashInterface>(obj)->set_spare_area_enable(value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const NandFlashInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint16 read_access() const {
            return iface_->read_access(obj_);
        }
        void write_access(uint16 value) const {
            iface_->write_access(obj_, value);
        }
        void set_command_latch_enable(int value) const {
            iface_->set_command_latch_enable(obj_, value);
        }
        void set_address_latch_enable(int value) const {
            iface_->set_address_latch_enable(obj_, value);
        }
        void set_write_protect(int value) const {
            iface_->set_write_protect(obj_, value);
        }
        void set_spare_area_enable(int value) const {
            iface_->set_spare_area_enable(obj_, value);
        }

        const NandFlashInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const NandFlashInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return NAND_FLASH_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr NandFlashInterface::ctype funcs {
                FromC::read_access,
                FromC::write_access,
                FromC::set_command_latch_enable,
                FromC::set_address_latch_enable,
                FromC::set_write_protect,
                FromC::set_spare_area_enable,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
