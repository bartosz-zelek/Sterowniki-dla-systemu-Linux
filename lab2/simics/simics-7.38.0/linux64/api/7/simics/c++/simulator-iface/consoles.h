// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_CONSOLES_H
#define SIMICS_CPP_SIMULATOR_IFACE_CONSOLES_H

#include "simics/simulator-iface/consoles.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SerialConsoleFrontendInterface {
  public:
    using ctype = serial_console_frontend_interface_t;

    // Function override and implemented by user
    virtual void write(uint8 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void write(conf_object_t *obj, uint8 value) {
            detail::get_interface<SerialConsoleFrontendInterface>(obj)->write(value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SerialConsoleFrontendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void write(uint8 value) const {
            iface_->write(obj_, value);
        }

        const SerialConsoleFrontendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SerialConsoleFrontendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SERIAL_CONSOLE_FRONTEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SerialConsoleFrontendInterface::ctype funcs {
                FromC::write,
            };
            return &funcs;
        }
    };
};

class ConInputInterface {
  public:
    using ctype = con_input_interface_t;

    // Function override and implemented by user
    virtual void input_str(const char *str) = 0;
    virtual void input_data(bytes_t data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void input_str(conf_object_t *obj, const char *str) {
            detail::get_interface<ConInputInterface>(obj)->input_str(str);
        }
        static void input_data(conf_object_t *obj, bytes_t data) {
            detail::get_interface<ConInputInterface>(obj)->input_data(data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ConInputInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void input_str(const char *str) const {
            iface_->input_str(obj_, str);
        }
        void input_data(bytes_t data) const {
            iface_->input_data(obj_, data);
        }

        const ConInputInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ConInputInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CON_INPUT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ConInputInterface::ctype funcs {
                FromC::input_str,
                FromC::input_data,
            };
            return &funcs;
        }
    };
};

class ConInputCodeInterface {
  public:
    using ctype = con_input_code_interface_t;

    // Function override and implemented by user
    virtual void input(sim_key_t code, bool down) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void input(conf_object_t *obj, sim_key_t code, bool down) {
            detail::get_interface<ConInputCodeInterface>(obj)->input(code, down);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ConInputCodeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void input(sim_key_t code, bool down) const {
            iface_->input(obj_, code, down);
        }

        const ConInputCodeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ConInputCodeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CON_INPUT_CODE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ConInputCodeInterface::ctype funcs {
                FromC::input,
            };
            return &funcs;
        }
    };
};

class BreakStringsInterface {
  public:
    using ctype = break_strings_interface_t;

    // Function override and implemented by user
    virtual int64 add(const char *str, break_string_cb_t cb, lang_void *arg) = 0;
    virtual int64 add_single(const char *str, break_string_cb_t cb, lang_void *arg) = 0;
    virtual void remove(int64 bp_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int64 add(conf_object_t *obj, const char *str, break_string_cb_t cb, lang_void *arg) {
            return detail::get_interface<BreakStringsInterface>(obj)->add(str, cb, arg);
        }
        static int64 add_single(conf_object_t *obj, const char *str, break_string_cb_t cb, lang_void *arg) {
            return detail::get_interface<BreakStringsInterface>(obj)->add_single(str, cb, arg);
        }
        static void remove(conf_object_t *obj, int64 bp_id) {
            detail::get_interface<BreakStringsInterface>(obj)->remove(bp_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakStringsInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int64 add(const char *str, break_string_cb_t cb, lang_void *arg) const {
            return iface_->add(obj_, str, cb, arg);
        }
        int64 add_single(const char *str, break_string_cb_t cb, lang_void *arg) const {
            return iface_->add_single(obj_, str, cb, arg);
        }
        void remove(int64 bp_id) const {
            iface_->remove(obj_, bp_id);
        }

        const BreakStringsInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakStringsInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAK_STRINGS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakStringsInterface::ctype funcs {
                FromC::add,
                FromC::add_single,
                FromC::remove,
            };
            return &funcs;
        }
    };
};

class BreakStringsV2Interface {
  public:
    using ctype = break_strings_v2_interface_t;

    // Function override and implemented by user
    virtual int64 add(const char *str, break_string_cb_t cb, lang_void *arg) = 0;
    virtual int64 add_single(const char *str, break_string_cb_t cb, lang_void *arg) = 0;
    virtual int64 add_regexp(const char *str, break_string_cb_t cb, lang_void *arg) = 0;
    virtual void remove(int64 bp_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int64 add(conf_object_t *obj, const char *str, break_string_cb_t cb, lang_void *arg) {
            return detail::get_interface<BreakStringsV2Interface>(obj)->add(str, cb, arg);
        }
        static int64 add_single(conf_object_t *obj, const char *str, break_string_cb_t cb, lang_void *arg) {
            return detail::get_interface<BreakStringsV2Interface>(obj)->add_single(str, cb, arg);
        }
        static int64 add_regexp(conf_object_t *obj, const char *str, break_string_cb_t cb, lang_void *arg) {
            return detail::get_interface<BreakStringsV2Interface>(obj)->add_regexp(str, cb, arg);
        }
        static void remove(conf_object_t *obj, int64 bp_id) {
            detail::get_interface<BreakStringsV2Interface>(obj)->remove(bp_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BreakStringsV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int64 add(const char *str, break_string_cb_t cb, lang_void *arg) const {
            return iface_->add(obj_, str, cb, arg);
        }
        int64 add_single(const char *str, break_string_cb_t cb, lang_void *arg) const {
            return iface_->add_single(obj_, str, cb, arg);
        }
        int64 add_regexp(const char *str, break_string_cb_t cb, lang_void *arg) const {
            return iface_->add_regexp(obj_, str, cb, arg);
        }
        void remove(int64 bp_id) const {
            iface_->remove(obj_, bp_id);
        }

        const BreakStringsV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BreakStringsV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BREAK_STRINGS_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BreakStringsV2Interface::ctype funcs {
                FromC::add,
                FromC::add_single,
                FromC::add_regexp,
                FromC::remove,
            };
            return &funcs;
        }
    };
};

class GfxBreakInterface {
  public:
    using ctype = gfx_break_interface_t;

    // Function override and implemented by user
    virtual bool store(const char *file, int minx, int miny, int maxx, int maxy) = 0;
    virtual int64 add(const char *file, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) = 0;
    virtual bool remove(int64 break_id) = 0;
    virtual int match(const char *file) = 0;
    virtual gbp_header_t info(const char *file) = 0;
    virtual bool export_png(const char *file, const char *png_file) = 0;
    virtual int64 add_bytes(bytes_t data, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool store(conf_object_t *obj, const char *file, int minx, int miny, int maxx, int maxy) {
            return detail::get_interface<GfxBreakInterface>(obj)->store(file, minx, miny, maxx, maxy);
        }
        static int64 add(conf_object_t *obj, const char *file, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) {
            return detail::get_interface<GfxBreakInterface>(obj)->add(file, name, oneshot, interval, cb, arg);
        }
        static bool remove(conf_object_t *obj, int64 break_id) {
            return detail::get_interface<GfxBreakInterface>(obj)->remove(break_id);
        }
        static int match(conf_object_t *obj, const char *file) {
            return detail::get_interface<GfxBreakInterface>(obj)->match(file);
        }
        static gbp_header_t info(conf_object_t *obj, const char *file) {
            return detail::get_interface<GfxBreakInterface>(obj)->info(file);
        }
        static bool export_png(conf_object_t *obj, const char *file, const char *png_file) {
            return detail::get_interface<GfxBreakInterface>(obj)->export_png(file, png_file);
        }
        static int64 add_bytes(conf_object_t *obj, bytes_t data, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) {
            return detail::get_interface<GfxBreakInterface>(obj)->add_bytes(data, name, oneshot, interval, cb, arg);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GfxBreakInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool store(const char *file, int minx, int miny, int maxx, int maxy) const {
            return iface_->store(obj_, file, minx, miny, maxx, maxy);
        }
        int64 add(const char *file, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) const {
            return iface_->add(obj_, file, name, oneshot, interval, cb, arg);
        }
        bool remove(int64 break_id) const {
            return iface_->remove(obj_, break_id);
        }
        int match(const char *file) const {
            return iface_->match(obj_, file);
        }
        gbp_header_t info(const char *file) const {
            return iface_->info(obj_, file);
        }
        bool export_png(const char *file, const char *png_file) const {
            return iface_->export_png(obj_, file, png_file);
        }
        int64 add_bytes(bytes_t data, const char *name, bool oneshot, double interval, gfx_break_cb_t cb, lang_void *arg) const {
            return iface_->add_bytes(obj_, data, name, oneshot, interval, cb, arg);
        }

        const GfxBreakInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GfxBreakInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GFX_BREAK_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GfxBreakInterface::ctype funcs {
                FromC::store,
                FromC::add,
                FromC::remove,
                FromC::match,
                FromC::info,
                FromC::export_png,
                FromC::add_bytes,
            };
            return &funcs;
        }
    };
};

class TelnetConnectionV2Interface {
  public:
    using ctype = telnet_connection_v2_interface_t;

    // Function override and implemented by user
    virtual bool listening() = 0;
    virtual bool connected() = 0;
    virtual void disconnect() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool listening(conf_object_t *obj) {
            return detail::get_interface<TelnetConnectionV2Interface>(obj)->listening();
        }
        static bool connected(conf_object_t *obj) {
            return detail::get_interface<TelnetConnectionV2Interface>(obj)->connected();
        }
        static void disconnect(conf_object_t *obj) {
            detail::get_interface<TelnetConnectionV2Interface>(obj)->disconnect();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TelnetConnectionV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool listening() const {
            return iface_->listening(obj_);
        }
        bool connected() const {
            return iface_->connected(obj_);
        }
        void disconnect() const {
            iface_->disconnect(obj_);
        }

        const TelnetConnectionV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TelnetConnectionV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TELNET_CONNECTION_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TelnetConnectionV2Interface::ctype funcs {
                FromC::listening,
                FromC::connected,
                FromC::disconnect,
            };
            return &funcs;
        }
    };
};

class VncServerV2Interface {
  public:
    using ctype = vnc_server_v2_interface_t;

    // Function override and implemented by user
    virtual bool listening() = 0;
    virtual int num_clients() = 0;
    virtual void disconnect() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool listening(conf_object_t *obj) {
            return detail::get_interface<VncServerV2Interface>(obj)->listening();
        }
        static int num_clients(conf_object_t *obj) {
            return detail::get_interface<VncServerV2Interface>(obj)->num_clients();
        }
        static void disconnect(conf_object_t *obj) {
            detail::get_interface<VncServerV2Interface>(obj)->disconnect();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const VncServerV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool listening() const {
            return iface_->listening(obj_);
        }
        int num_clients() const {
            return iface_->num_clients(obj_);
        }
        void disconnect() const {
            iface_->disconnect(obj_);
        }

        const VncServerV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const VncServerV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return VNC_SERVER_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr VncServerV2Interface::ctype funcs {
                FromC::listening,
                FromC::num_clients,
                FromC::disconnect,
            };
            return &funcs;
        }
    };
};

class HostSerialInterface {
  public:
    using ctype = host_serial_interface_t;

    // Function override and implemented by user
    virtual bool setup(const char *name) = 0;
    virtual const char * name() = 0;
    virtual void shutdown() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool setup(conf_object_t *obj, const char *name) {
            return detail::get_interface<HostSerialInterface>(obj)->setup(name);
        }
        static const char * name(conf_object_t *obj) {
            return detail::get_interface<HostSerialInterface>(obj)->name();
        }
        static void shutdown(conf_object_t *obj) {
            detail::get_interface<HostSerialInterface>(obj)->shutdown();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const HostSerialInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool setup(const char *name) const {
            return iface_->setup(obj_, name);
        }
        const char * name() const {
            return iface_->name(obj_);
        }
        void shutdown() const {
            iface_->shutdown(obj_);
        }

        const HostSerialInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const HostSerialInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return HOST_SERIAL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr HostSerialInterface::ctype funcs {
                FromC::setup,
                FromC::name,
                FromC::shutdown,
            };
            return &funcs;
        }
    };
};

class ScreenshotInterface {
  public:
    using ctype = screenshot_interface_t;

    // Function override and implemented by user
    virtual bool save_png(const char *filename) = 0;
    virtual bool save_bmp(const char *filename) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool save_png(conf_object_t *obj, const char *filename) {
            return detail::get_interface<ScreenshotInterface>(obj)->save_png(filename);
        }
        static bool save_bmp(conf_object_t *obj, const char *filename) {
            return detail::get_interface<ScreenshotInterface>(obj)->save_bmp(filename);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ScreenshotInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool save_png(const char *filename) const {
            return iface_->save_png(obj_, filename);
        }
        bool save_bmp(const char *filename) const {
            return iface_->save_bmp(obj_, filename);
        }

        const ScreenshotInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ScreenshotInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SCREENSHOT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ScreenshotInterface::ctype funcs {
                FromC::save_png,
                FromC::save_bmp,
            };
            return &funcs;
        }
    };
};

class TextConsoleFrontendInterface {
  public:
    using ctype = text_console_frontend_interface_t;

    // Function override and implemented by user
    virtual int start(conf_object_t *backend) = 0;
    virtual void stop(int handle) = 0;
    virtual void set_title(int handle, const char *short_title, const char *long_title) = 0;
    virtual void set_size(int handle, int width, int height) = 0;
    virtual void set_max_scrollback_size(int handle, int num_lines) = 0;
    virtual void set_default_colours(int handle, uint32 default_fg_col, uint32 default_bg_col) = 0;
    virtual void set_visible(int handle, bool visible) = 0;
    virtual void set_contents(int handle, int top, int left, int bottom, int right, const char *text, const text_console_attrib_t *attrib) = 0;
    virtual void set_cursor_pos(int handle, int row, int col) = 0;
    virtual void append_text(int handle, int num_lines, const char *text, const text_console_attrib_t *attrib) = 0;
    virtual void refresh_screen(int handle, const char *text, const text_console_attrib_t *attrib, const char *sb_text, const text_console_attrib_t *sb_attrib, int scrollback_size) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int start(conf_object_t *obj, conf_object_t *backend) {
            return detail::get_interface<TextConsoleFrontendInterface>(obj)->start(backend);
        }
        static void stop(conf_object_t *obj, int handle) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->stop(handle);
        }
        static void set_title(conf_object_t *obj, int handle, const char *short_title, const char *long_title) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_title(handle, short_title, long_title);
        }
        static void set_size(conf_object_t *obj, int handle, int width, int height) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_size(handle, width, height);
        }
        static void set_max_scrollback_size(conf_object_t *obj, int handle, int num_lines) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_max_scrollback_size(handle, num_lines);
        }
        static void set_default_colours(conf_object_t *obj, int handle, uint32 default_fg_col, uint32 default_bg_col) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_default_colours(handle, default_fg_col, default_bg_col);
        }
        static void set_visible(conf_object_t *obj, int handle, bool visible) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_visible(handle, visible);
        }
        static void set_contents(conf_object_t *obj, int handle, int top, int left, int bottom, int right, const char *text, const text_console_attrib_t *attrib) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_contents(handle, top, left, bottom, right, text, attrib);
        }
        static void set_cursor_pos(conf_object_t *obj, int handle, int row, int col) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->set_cursor_pos(handle, row, col);
        }
        static void append_text(conf_object_t *obj, int handle, int num_lines, const char *text, const text_console_attrib_t *attrib) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->append_text(handle, num_lines, text, attrib);
        }
        static void refresh_screen(conf_object_t *obj, int handle, const char *text, const text_console_attrib_t *attrib, const char *sb_text, const text_console_attrib_t *sb_attrib, int scrollback_size) {
            detail::get_interface<TextConsoleFrontendInterface>(obj)->refresh_screen(handle, text, attrib, sb_text, sb_attrib, scrollback_size);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TextConsoleFrontendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int start(conf_object_t *backend) const {
            return iface_->start(obj_, backend);
        }
        void stop(int handle) const {
            iface_->stop(obj_, handle);
        }
        void set_title(int handle, const char *short_title, const char *long_title) const {
            iface_->set_title(obj_, handle, short_title, long_title);
        }
        void set_size(int handle, int width, int height) const {
            iface_->set_size(obj_, handle, width, height);
        }
        void set_max_scrollback_size(int handle, int num_lines) const {
            iface_->set_max_scrollback_size(obj_, handle, num_lines);
        }
        void set_default_colours(int handle, uint32 default_fg_col, uint32 default_bg_col) const {
            iface_->set_default_colours(obj_, handle, default_fg_col, default_bg_col);
        }
        void set_visible(int handle, bool visible) const {
            iface_->set_visible(obj_, handle, visible);
        }
        void set_contents(int handle, int top, int left, int bottom, int right, const char *text, const text_console_attrib_t *attrib) const {
            iface_->set_contents(obj_, handle, top, left, bottom, right, text, attrib);
        }
        void set_cursor_pos(int handle, int row, int col) const {
            iface_->set_cursor_pos(obj_, handle, row, col);
        }
        void append_text(int handle, int num_lines, const char *text, const text_console_attrib_t *attrib) const {
            iface_->append_text(obj_, handle, num_lines, text, attrib);
        }
        void refresh_screen(int handle, const char *text, const text_console_attrib_t *attrib, const char *sb_text, const text_console_attrib_t *sb_attrib, int scrollback_size) const {
            iface_->refresh_screen(obj_, handle, text, attrib, sb_text, sb_attrib, scrollback_size);
        }

        const TextConsoleFrontendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TextConsoleFrontendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TEXT_CONSOLE_FRONTEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TextConsoleFrontendInterface::ctype funcs {
                FromC::start,
                FromC::stop,
                FromC::set_title,
                FromC::set_size,
                FromC::set_max_scrollback_size,
                FromC::set_default_colours,
                FromC::set_visible,
                FromC::set_contents,
                FromC::set_cursor_pos,
                FromC::append_text,
                FromC::refresh_screen,
            };
            return &funcs;
        }
    };
};

class TextConsoleBackendInterface {
  public:
    using ctype = text_console_backend_interface_t;

    // Function override and implemented by user
    virtual void input(text_console_key_t key, text_console_modifier_t modifiers) = 0;
    virtual void request_refresh() = 0;
    virtual void set_visible(bool visible) = 0;
    virtual int line_length(int line_num) = 0;
    virtual bool line_wrap(int line_num) = 0;
    virtual void set_size(int width, int height) = 0;
    virtual void set_default_colours(uint32 default_fg_col, uint32 default_bg_col) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void input(conf_object_t *obj, text_console_key_t key, text_console_modifier_t modifiers) {
            detail::get_interface<TextConsoleBackendInterface>(obj)->input(key, modifiers);
        }
        static void request_refresh(conf_object_t *obj) {
            detail::get_interface<TextConsoleBackendInterface>(obj)->request_refresh();
        }
        static void set_visible(conf_object_t *obj, bool visible) {
            detail::get_interface<TextConsoleBackendInterface>(obj)->set_visible(visible);
        }
        static int line_length(conf_object_t *obj, int line_num) {
            return detail::get_interface<TextConsoleBackendInterface>(obj)->line_length(line_num);
        }
        static bool line_wrap(conf_object_t *obj, int line_num) {
            return detail::get_interface<TextConsoleBackendInterface>(obj)->line_wrap(line_num);
        }
        static void set_size(conf_object_t *obj, int width, int height) {
            detail::get_interface<TextConsoleBackendInterface>(obj)->set_size(width, height);
        }
        static void set_default_colours(conf_object_t *obj, uint32 default_fg_col, uint32 default_bg_col) {
            detail::get_interface<TextConsoleBackendInterface>(obj)->set_default_colours(default_fg_col, default_bg_col);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TextConsoleBackendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void input(text_console_key_t key, text_console_modifier_t modifiers) const {
            iface_->input(obj_, key, modifiers);
        }
        void request_refresh() const {
            iface_->request_refresh(obj_);
        }
        void set_visible(bool visible) const {
            iface_->set_visible(obj_, visible);
        }
        int line_length(int line_num) const {
            return iface_->line_length(obj_, line_num);
        }
        bool line_wrap(int line_num) const {
            return iface_->line_wrap(obj_, line_num);
        }
        void set_size(int width, int height) const {
            iface_->set_size(obj_, width, height);
        }
        void set_default_colours(uint32 default_fg_col, uint32 default_bg_col) const {
            iface_->set_default_colours(obj_, default_fg_col, default_bg_col);
        }

        const TextConsoleBackendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TextConsoleBackendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TEXT_CONSOLE_BACKEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TextConsoleBackendInterface::ctype funcs {
                FromC::input,
                FromC::request_refresh,
                FromC::set_visible,
                FromC::line_length,
                FromC::line_wrap,
                FromC::set_size,
                FromC::set_default_colours,
            };
            return &funcs;
        }
    };
};

class GfxConsoleFrontendInterface {
  public:
    using ctype = gfx_console_frontend_interface_t;

    // Function override and implemented by user
    virtual int start(conf_object_t *backend) = 0;
    virtual void stop(int handle) = 0;
    virtual void set_title(int handle, const char *short_title, const char *long_title) = 0;
    virtual void set_size(int handle, int width, int height) = 0;
    virtual void set_visible(int handle, bool visible) = 0;
    virtual void set_contents(int handle, int left, int top, int right, int bottom, const uint32 *data) = 0;
    virtual void invalidate_contents(int handle) = 0;
    virtual void set_text_mode(int handle, bool text_mode) = 0;
    virtual void signal_text_update(int handle) = 0;
    virtual void set_grab_mode(int handle, bool active) = 0;
    virtual void set_mouse_pos(int handle, int x, int y) = 0;
    virtual void set_keyboard_leds(int handle, gfx_console_led_t led_state) = 0;
    virtual void set_grab_modifier(int handle, sim_key_t modifier) = 0;
    virtual void set_grab_button(int handle, gfx_console_mouse_button_t button) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int start(conf_object_t *obj, conf_object_t *backend) {
            return detail::get_interface<GfxConsoleFrontendInterface>(obj)->start(backend);
        }
        static void stop(conf_object_t *obj, int handle) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->stop(handle);
        }
        static void set_title(conf_object_t *obj, int handle, const char *short_title, const char *long_title) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_title(handle, short_title, long_title);
        }
        static void set_size(conf_object_t *obj, int handle, int width, int height) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_size(handle, width, height);
        }
        static void set_visible(conf_object_t *obj, int handle, bool visible) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_visible(handle, visible);
        }
        static void set_contents(conf_object_t *obj, int handle, int left, int top, int right, int bottom, const uint32 *data) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_contents(handle, left, top, right, bottom, data);
        }
        static void invalidate_contents(conf_object_t *obj, int handle) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->invalidate_contents(handle);
        }
        static void set_text_mode(conf_object_t *obj, int handle, bool text_mode) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_text_mode(handle, text_mode);
        }
        static void signal_text_update(conf_object_t *obj, int handle) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->signal_text_update(handle);
        }
        static void set_grab_mode(conf_object_t *obj, int handle, bool active) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_grab_mode(handle, active);
        }
        static void set_mouse_pos(conf_object_t *obj, int handle, int x, int y) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_mouse_pos(handle, x, y);
        }
        static void set_keyboard_leds(conf_object_t *obj, int handle, gfx_console_led_t led_state) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_keyboard_leds(handle, led_state);
        }
        static void set_grab_modifier(conf_object_t *obj, int handle, sim_key_t modifier) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_grab_modifier(handle, modifier);
        }
        static void set_grab_button(conf_object_t *obj, int handle, gfx_console_mouse_button_t button) {
            detail::get_interface<GfxConsoleFrontendInterface>(obj)->set_grab_button(handle, button);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GfxConsoleFrontendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int start(conf_object_t *backend) const {
            return iface_->start(obj_, backend);
        }
        void stop(int handle) const {
            iface_->stop(obj_, handle);
        }
        void set_title(int handle, const char *short_title, const char *long_title) const {
            iface_->set_title(obj_, handle, short_title, long_title);
        }
        void set_size(int handle, int width, int height) const {
            iface_->set_size(obj_, handle, width, height);
        }
        void set_visible(int handle, bool visible) const {
            iface_->set_visible(obj_, handle, visible);
        }
        void set_contents(int handle, int left, int top, int right, int bottom, const uint32 *data) const {
            iface_->set_contents(obj_, handle, left, top, right, bottom, data);
        }
        void invalidate_contents(int handle) const {
            iface_->invalidate_contents(obj_, handle);
        }
        void set_text_mode(int handle, bool text_mode) const {
            iface_->set_text_mode(obj_, handle, text_mode);
        }
        void signal_text_update(int handle) const {
            iface_->signal_text_update(obj_, handle);
        }
        void set_grab_mode(int handle, bool active) const {
            iface_->set_grab_mode(obj_, handle, active);
        }
        void set_mouse_pos(int handle, int x, int y) const {
            iface_->set_mouse_pos(obj_, handle, x, y);
        }
        void set_keyboard_leds(int handle, gfx_console_led_t led_state) const {
            iface_->set_keyboard_leds(obj_, handle, led_state);
        }
        void set_grab_modifier(int handle, sim_key_t modifier) const {
            iface_->set_grab_modifier(obj_, handle, modifier);
        }
        void set_grab_button(int handle, gfx_console_mouse_button_t button) const {
            iface_->set_grab_button(obj_, handle, button);
        }

        const GfxConsoleFrontendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GfxConsoleFrontendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GFX_CONSOLE_FRONTEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GfxConsoleFrontendInterface::ctype funcs {
                FromC::start,
                FromC::stop,
                FromC::set_title,
                FromC::set_size,
                FromC::set_visible,
                FromC::set_contents,
                FromC::invalidate_contents,
                FromC::set_text_mode,
                FromC::signal_text_update,
                FromC::set_grab_mode,
                FromC::set_mouse_pos,
                FromC::set_keyboard_leds,
                FromC::set_grab_modifier,
                FromC::set_grab_button,
            };
            return &funcs;
        }
    };
};

class GfxConsoleBackendInterface {
  public:
    using ctype = gfx_console_backend_interface_t;

    // Function override and implemented by user
    virtual void kbd_event(sim_key_t code, bool down) = 0;
    virtual void mouse_event(int x, int y, int z, gfx_console_mouse_button_t buttons) = 0;
    virtual void request_refresh() = 0;
    virtual void set_visible(bool visible) = 0;
    virtual gfx_console_screen_text_t text_data() = 0;
    virtual void got_grab_keys() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void kbd_event(conf_object_t *obj, sim_key_t code, bool down) {
            detail::get_interface<GfxConsoleBackendInterface>(obj)->kbd_event(code, down);
        }
        static void mouse_event(conf_object_t *obj, int x, int y, int z, gfx_console_mouse_button_t buttons) {
            detail::get_interface<GfxConsoleBackendInterface>(obj)->mouse_event(x, y, z, buttons);
        }
        static void request_refresh(conf_object_t *obj) {
            detail::get_interface<GfxConsoleBackendInterface>(obj)->request_refresh();
        }
        static void set_visible(conf_object_t *obj, bool visible) {
            detail::get_interface<GfxConsoleBackendInterface>(obj)->set_visible(visible);
        }
        static gfx_console_screen_text_t text_data(conf_object_t *obj) {
            return detail::get_interface<GfxConsoleBackendInterface>(obj)->text_data();
        }
        static void got_grab_keys(conf_object_t *obj) {
            detail::get_interface<GfxConsoleBackendInterface>(obj)->got_grab_keys();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GfxConsoleBackendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void kbd_event(sim_key_t code, bool down) const {
            iface_->kbd_event(obj_, code, down);
        }
        void mouse_event(int x, int y, int z, gfx_console_mouse_button_t buttons) const {
            iface_->mouse_event(obj_, x, y, z, buttons);
        }
        void request_refresh() const {
            iface_->request_refresh(obj_);
        }
        void set_visible(bool visible) const {
            iface_->set_visible(obj_, visible);
        }
        gfx_console_screen_text_t text_data() const {
            return iface_->text_data(obj_);
        }
        void got_grab_keys() const {
            iface_->got_grab_keys(obj_);
        }

        const GfxConsoleBackendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GfxConsoleBackendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GFX_CONSOLE_BACKEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GfxConsoleBackendInterface::ctype funcs {
                FromC::kbd_event,
                FromC::mouse_event,
                FromC::request_refresh,
                FromC::set_visible,
                FromC::text_data,
                FromC::got_grab_keys,
            };
            return &funcs;
        }
    };
};

class WinsomeConsoleInterface {
  public:
    using ctype = winsome_console_interface_t;

    // Function override and implemented by user
    virtual void gfx(lang_void *console, int left, int right, int top, int bottom, bytes_t data, bool text_mode) = 0;
    virtual void resize(lang_void *console, int width, int height) = 0;
    virtual void refresh(lang_void *console, bytes_t text, bytes_t attrib, bytes_t sb_text, bytes_t sb_attrib, int sb_size, int cursor_x, int cursor_y) = 0;
    virtual void append(lang_void *console, uint64 num_lines, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) = 0;
    virtual void text(lang_void *console, int left, int right, int top, int bottom, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) = 0;
    virtual void activity(lang_void *console) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void gfx(conf_object_t *obj, lang_void *console, int left, int right, int top, int bottom, bytes_t data, bool text_mode) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->gfx(console, left, right, top, bottom, data, text_mode);
        }
        static void resize(conf_object_t *obj, lang_void *console, int width, int height) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->resize(console, width, height);
        }
        static void refresh(conf_object_t *obj, lang_void *console, bytes_t text, bytes_t attrib, bytes_t sb_text, bytes_t sb_attrib, int sb_size, int cursor_x, int cursor_y) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->refresh(console, text, attrib, sb_text, sb_attrib, sb_size, cursor_x, cursor_y);
        }
        static void append(conf_object_t *obj, lang_void *console, uint64 num_lines, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->append(console, num_lines, text, attrib, cursor_x, cursor_y);
        }
        static void text(conf_object_t *obj, lang_void *console, int left, int right, int top, int bottom, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->text(console, left, right, top, bottom, text, attrib, cursor_x, cursor_y);
        }
        static void activity(conf_object_t *obj, lang_void *console) {
            detail::get_interface<WinsomeConsoleInterface>(obj)->activity(console);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const WinsomeConsoleInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void gfx(lang_void *console, int left, int right, int top, int bottom, bytes_t data, bool text_mode) const {
            iface_->gfx(obj_, console, left, right, top, bottom, data, text_mode);
        }
        void resize(lang_void *console, int width, int height) const {
            iface_->resize(obj_, console, width, height);
        }
        void refresh(lang_void *console, bytes_t text, bytes_t attrib, bytes_t sb_text, bytes_t sb_attrib, int sb_size, int cursor_x, int cursor_y) const {
            iface_->refresh(obj_, console, text, attrib, sb_text, sb_attrib, sb_size, cursor_x, cursor_y);
        }
        void append(lang_void *console, uint64 num_lines, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) const {
            iface_->append(obj_, console, num_lines, text, attrib, cursor_x, cursor_y);
        }
        void text(lang_void *console, int left, int right, int top, int bottom, bytes_t text, bytes_t attrib, int cursor_x, int cursor_y) const {
            iface_->text(obj_, console, left, right, top, bottom, text, attrib, cursor_x, cursor_y);
        }
        void activity(lang_void *console) const {
            iface_->activity(obj_, console);
        }

        const WinsomeConsoleInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const WinsomeConsoleInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return WINSOME_CONSOLE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr WinsomeConsoleInterface::ctype funcs {
                FromC::gfx,
                FromC::resize,
                FromC::refresh,
                FromC::append,
                FromC::text,
                FromC::activity,
            };
            return &funcs;
        }
    };
};

class GuiConsoleBackendInterface {
  public:
    using ctype = gui_console_backend_interface_t;

    // Function override and implemented by user
    virtual void start(lang_void *console) = 0;
    virtual void stop() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void start(conf_object_t *obj, lang_void *console) {
            detail::get_interface<GuiConsoleBackendInterface>(obj)->start(console);
        }
        static void stop(conf_object_t *obj) {
            detail::get_interface<GuiConsoleBackendInterface>(obj)->stop();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GuiConsoleBackendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void start(lang_void *console) const {
            iface_->start(obj_, console);
        }
        void stop() const {
            iface_->stop(obj_);
        }

        const GuiConsoleBackendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GuiConsoleBackendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GUI_CONSOLE_BACKEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GuiConsoleBackendInterface::ctype funcs {
                FromC::start,
                FromC::stop,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
