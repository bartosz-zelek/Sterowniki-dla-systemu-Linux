// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_FREERUN_H
#define SIMICS_CPP_MODEL_IFACE_FREERUN_H

#include "simics/model-iface/freerun.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class FreerunInterface {
  public:
    using ctype = freerun_interface_t;

    // Function override and implemented by user
    virtual bool enabled() = 0;
    virtual int64 advance_clock(int64 ps_limit, int64 steps, bool idle) = 0;
    virtual void start_clock() = 0;
    virtual void stop_clock() = 0;
    virtual uint64 current_itime() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool enabled(conf_object_t *obj) {
            return detail::get_interface<FreerunInterface>(obj)->enabled();
        }
        static int64 advance_clock(conf_object_t *obj, int64 ps_limit, int64 steps, bool idle) {
            return detail::get_interface<FreerunInterface>(obj)->advance_clock(ps_limit, steps, idle);
        }
        static void start_clock(conf_object_t *obj) {
            detail::get_interface<FreerunInterface>(obj)->start_clock();
        }
        static void stop_clock(conf_object_t *obj) {
            detail::get_interface<FreerunInterface>(obj)->stop_clock();
        }
        static uint64 current_itime(conf_object_t *obj) {
            return detail::get_interface<FreerunInterface>(obj)->current_itime();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FreerunInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool enabled() const {
            return iface_->enabled(obj_);
        }
        int64 advance_clock(int64 ps_limit, int64 steps, bool idle) const {
            return iface_->advance_clock(obj_, ps_limit, steps, idle);
        }
        void start_clock() const {
            iface_->start_clock(obj_);
        }
        void stop_clock() const {
            iface_->stop_clock(obj_);
        }
        uint64 current_itime() const {
            return iface_->current_itime(obj_);
        }

        const FreerunInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FreerunInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FREERUN_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FreerunInterface::ctype funcs {
                FromC::enabled,
                FromC::advance_clock,
                FromC::start_clock,
                FromC::stop_clock,
                FromC::current_itime,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
