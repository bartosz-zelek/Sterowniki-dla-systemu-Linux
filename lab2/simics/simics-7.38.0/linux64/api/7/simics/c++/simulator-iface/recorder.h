// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_RECORDER_H
#define SIMICS_CPP_SIMULATOR_IFACE_RECORDER_H

#include "simics/simulator-iface/recorder.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class RecorderV2Interface {
  public:
    using ctype = recorder_v2_interface_t;

    // Function override and implemented by user
    virtual void record(conf_object_t *sender, bytes_t data) = 0;
    virtual bool playback() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void record(conf_object_t *obj, conf_object_t *sender, bytes_t data) {
            detail::get_interface<RecorderV2Interface>(obj)->record(sender, data);
        }
        static bool playback(conf_object_t *obj) {
            return detail::get_interface<RecorderV2Interface>(obj)->playback();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RecorderV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void record(conf_object_t *sender, bytes_t data) const {
            iface_->record(obj_, sender, data);
        }
        bool playback() const {
            return iface_->playback(obj_);
        }

        const RecorderV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RecorderV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RECORDER_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RecorderV2Interface::ctype funcs {
                FromC::record,
                FromC::playback,
            };
            return &funcs;
        }
    };
};

class RecordedInterface {
  public:
    using ctype = recorded_interface_t;

    // Function override and implemented by user
    virtual void input(bytes_t data, bool playback) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void input(conf_object_t *obj, bytes_t data, bool playback) {
            detail::get_interface<RecordedInterface>(obj)->input(data, playback);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RecordedInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void input(bytes_t data, bool playback) const {
            iface_->input(obj_, data, playback);
        }

        const RecordedInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RecordedInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RECORDED_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RecordedInterface::ctype funcs {
                FromC::input,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
