// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_MAPPER_INTERFACES_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_MAPPER_INTERFACES_H

#include "simics/simulator-iface/osa-mapper-interfaces.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaMapperAdminInterface {
  public:
    using ctype = osa_mapper_admin_interface_t;

    // Function override and implemented by user
    virtual void tracker_updated(conf_object_t *initiator, attr_value_t changeset) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void tracker_updated(conf_object_t *obj, conf_object_t *initiator, attr_value_t changeset) {
            detail::get_interface<OsaMapperAdminInterface>(obj)->tracker_updated(initiator, changeset);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMapperAdminInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void tracker_updated(conf_object_t *initiator, attr_value_t changeset) const {
            iface_->tracker_updated(obj_, initiator, changeset);
        }

        const OsaMapperAdminInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMapperAdminInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MAPPER_ADMIN_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMapperAdminInterface::ctype funcs {
                FromC::tracker_updated,
            };
            return &funcs;
        }
    };
};

class OsaMapperControlInterface {
  public:
    using ctype = osa_mapper_control_interface_t;

    // Function override and implemented by user
    virtual void disable() = 0;
    virtual bool enable() = 0;
    virtual void clear_state() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void disable(conf_object_t *obj) {
            detail::get_interface<OsaMapperControlInterface>(obj)->disable();
        }
        static bool enable(conf_object_t *obj) {
            return detail::get_interface<OsaMapperControlInterface>(obj)->enable();
        }
        static void clear_state(conf_object_t *obj) {
            detail::get_interface<OsaMapperControlInterface>(obj)->clear_state();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMapperControlInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void disable() const {
            iface_->disable(obj_);
        }
        bool enable() const {
            return iface_->enable(obj_);
        }
        void clear_state() const {
            iface_->clear_state(obj_);
        }

        const OsaMapperControlInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMapperControlInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MAPPER_CONTROL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMapperControlInterface::ctype funcs {
                FromC::disable,
                FromC::enable,
                FromC::clear_state,
            };
            return &funcs;
        }
    };
};

class OsaMapperQueryInterface {
  public:
    using ctype = osa_mapper_query_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_process_list() = 0;
    virtual conf_object_t * get_mapper(node_id_t node_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_process_list(conf_object_t *obj) {
            return detail::get_interface<OsaMapperQueryInterface>(obj)->get_process_list();
        }
        static conf_object_t * get_mapper(conf_object_t *obj, node_id_t node_id) {
            return detail::get_interface<OsaMapperQueryInterface>(obj)->get_mapper(node_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMapperQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_process_list() const {
            return iface_->get_process_list(obj_);
        }
        conf_object_t * get_mapper(node_id_t node_id) const {
            return iface_->get_mapper(obj_, node_id);
        }

        const OsaMapperQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMapperQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MAPPER_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMapperQueryInterface::ctype funcs {
                FromC::get_process_list,
                FromC::get_mapper,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
