// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_JIT_CONTROL_H
#define SIMICS_CPP_MODEL_IFACE_JIT_CONTROL_H

#include "simics/model-iface/jit-control.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class JitControlInterface {
  public:
    using ctype = jit_control_interface_t;

    // Function override and implemented by user
    virtual void set_compile_enable(bool enabled) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_compile_enable(conf_object_t *obj, bool enabled) {
            detail::get_interface<JitControlInterface>(obj)->set_compile_enable(enabled);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const JitControlInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_compile_enable(bool enabled) const {
            iface_->set_compile_enable(obj_, enabled);
        }

        const JitControlInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const JitControlInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return JIT_CONTROL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr JitControlInterface::ctype funcs {
                FromC::set_compile_enable,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
