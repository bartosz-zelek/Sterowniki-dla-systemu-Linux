// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_CONTROL_V2_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_CONTROL_V2_INTERFACE_H

#include "simics/simulator-iface/osa-control-v2-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaControlV2Interface {
  public:
    using ctype = osa_control_v2_interface_t;

    // Function override and implemented by user
    virtual attr_value_t request(const char *initiator) = 0;
    virtual void release(request_id_t id) = 0;
    virtual attr_value_t clear_state() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t request(conf_object_t *obj, const char *initiator) {
            return detail::get_interface<OsaControlV2Interface>(obj)->request(initiator);
        }
        static void release(conf_object_t *obj, request_id_t id) {
            detail::get_interface<OsaControlV2Interface>(obj)->release(id);
        }
        static attr_value_t clear_state(conf_object_t *obj) {
            return detail::get_interface<OsaControlV2Interface>(obj)->clear_state();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaControlV2Interface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t request(const char *initiator) const {
            return iface_->request(obj_, initiator);
        }
        void release(request_id_t id) const {
            iface_->release(obj_, id);
        }
        attr_value_t clear_state() const {
            return iface_->clear_state(obj_);
        }

        const OsaControlV2Interface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaControlV2Interface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_CONTROL_V2_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaControlV2Interface::ctype funcs {
                FromC::request,
                FromC::release,
                FromC::clear_state,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
