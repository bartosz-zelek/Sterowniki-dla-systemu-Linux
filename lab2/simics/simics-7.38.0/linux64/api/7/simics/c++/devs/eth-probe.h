// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_ETH_PROBE_H
#define SIMICS_CPP_DEVS_ETH_PROBE_H

#include "simics/devs/eth-probe.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class EthernetProbeInterface {
  public:
    using ctype = ethernet_probe_interface_t;

    // Function override and implemented by user
    virtual void attach_snooper(ethernet_probe_snoop_t snoop_fun, lang_void *user_data) = 0;
    virtual void attach_probe(ethernet_probe_snoop_t snoop_fun, lang_void *user_data) = 0;
    virtual void detach() = 0;
    virtual void send_frame(eth_probe_side_t to_side, const frags_t *frame, eth_frame_crc_status_t crc_status) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void attach_snooper(conf_object_t *probe, ethernet_probe_snoop_t snoop_fun, lang_void *user_data) {
            detail::get_interface<EthernetProbeInterface>(probe)->attach_snooper(snoop_fun, user_data);
        }
        static void attach_probe(conf_object_t *probe, ethernet_probe_snoop_t snoop_fun, lang_void *user_data) {
            detail::get_interface<EthernetProbeInterface>(probe)->attach_probe(snoop_fun, user_data);
        }
        static void detach(conf_object_t *probe) {
            detail::get_interface<EthernetProbeInterface>(probe)->detach();
        }
        static void send_frame(conf_object_t *probe, eth_probe_side_t to_side, const frags_t *frame, eth_frame_crc_status_t crc_status) {
            detail::get_interface<EthernetProbeInterface>(probe)->send_frame(to_side, frame, crc_status);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const EthernetProbeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void attach_snooper(ethernet_probe_snoop_t snoop_fun, lang_void *user_data) const {
            iface_->attach_snooper(obj_, snoop_fun, user_data);
        }
        void attach_probe(ethernet_probe_snoop_t snoop_fun, lang_void *user_data) const {
            iface_->attach_probe(obj_, snoop_fun, user_data);
        }
        void detach() const {
            iface_->detach(obj_);
        }
        void send_frame(eth_probe_side_t to_side, const frags_t *frame, eth_frame_crc_status_t crc_status) const {
            iface_->send_frame(obj_, to_side, frame, crc_status);
        }

        const EthernetProbeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const EthernetProbeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ETHERNET_PROBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr EthernetProbeInterface::ctype funcs {
                FromC::attach_snooper,
                FromC::attach_probe,
                FromC::detach,
                FromC::send_frame,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
