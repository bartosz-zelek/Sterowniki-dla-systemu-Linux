// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_DESCRIBE_REGISTERS_H
#define SIMICS_CPP_MODEL_IFACE_DESCRIBE_REGISTERS_H

#include "simics/model-iface/describe-registers.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class DescribeRegistersInterface {
  public:
    using ctype = describe_registers_interface_t;

    // Function override and implemented by user
    virtual const description_t * first_child(const description_t *parent) = 0;
    virtual const description_t * next_description(const description_t *prev) = 0;
    virtual void free_description(const description_t *desc) = 0;
    virtual const named_value_t * first_named_value(const description_t *parent) = 0;
    virtual const named_value_t * next_named_value(const named_value_t *prev) = 0;
    virtual void free_named_value(const named_value_t *nv) = 0;
    virtual void get(int reg_id, buffer_t dest) = 0;
    virtual void set(int reg_id, bytes_t value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static const description_t * first_child(conf_object_t *obj, const description_t *parent) {
            return detail::get_interface<DescribeRegistersInterface>(obj)->first_child(parent);
        }
        static const description_t * next_description(conf_object_t *obj, const description_t *prev) {
            return detail::get_interface<DescribeRegistersInterface>(obj)->next_description(prev);
        }
        static void free_description(conf_object_t *obj, const description_t *desc) {
            detail::get_interface<DescribeRegistersInterface>(obj)->free_description(desc);
        }
        static const named_value_t * first_named_value(conf_object_t *obj, const description_t *parent) {
            return detail::get_interface<DescribeRegistersInterface>(obj)->first_named_value(parent);
        }
        static const named_value_t * next_named_value(conf_object_t *obj, const named_value_t *prev) {
            return detail::get_interface<DescribeRegistersInterface>(obj)->next_named_value(prev);
        }
        static void free_named_value(conf_object_t *obj, const named_value_t *nv) {
            detail::get_interface<DescribeRegistersInterface>(obj)->free_named_value(nv);
        }
        static void get(conf_object_t *obj, int reg_id, buffer_t dest) {
            detail::get_interface<DescribeRegistersInterface>(obj)->get(reg_id, dest);
        }
        static void set(conf_object_t *obj, int reg_id, bytes_t value) {
            detail::get_interface<DescribeRegistersInterface>(obj)->set(reg_id, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DescribeRegistersInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        const description_t * first_child(const description_t *parent) const {
            return iface_->first_child(obj_, parent);
        }
        const description_t * next_description(const description_t *prev) const {
            return iface_->next_description(obj_, prev);
        }
        void free_description(const description_t *desc) const {
            iface_->free_description(obj_, desc);
        }
        const named_value_t * first_named_value(const description_t *parent) const {
            return iface_->first_named_value(obj_, parent);
        }
        const named_value_t * next_named_value(const named_value_t *prev) const {
            return iface_->next_named_value(obj_, prev);
        }
        void free_named_value(const named_value_t *nv) const {
            iface_->free_named_value(obj_, nv);
        }
        void get(int reg_id, buffer_t dest) const {
            iface_->get(obj_, reg_id, dest);
        }
        void set(int reg_id, bytes_t value) const {
            iface_->set(obj_, reg_id, value);
        }

        const DescribeRegistersInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DescribeRegistersInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DESCRIBE_REGISTERS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DescribeRegistersInterface::ctype funcs {
                FromC::first_child,
                FromC::next_description,
                FromC::free_description,
                FromC::first_named_value,
                FromC::next_named_value,
                FromC::free_named_value,
                FromC::get,
                FromC::set,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
