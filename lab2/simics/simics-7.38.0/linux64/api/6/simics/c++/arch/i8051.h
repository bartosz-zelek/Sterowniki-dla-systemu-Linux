// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_ARCH_I8051_H
#define SIMICS_CPP_ARCH_I8051_H

#include "simics/arch/i8051.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class I8051InterruptInterface {
  public:
    using ctype = i8051_interrupt_interface_t;

    // Function override and implemented by user
    virtual int active_interrupt() = 0;
    virtual void reti() = 0;
    virtual bool suppress_irq(uint32 addr) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int active_interrupt(conf_object_t *obj) {
            return detail::get_interface<I8051InterruptInterface>(obj)->active_interrupt();
        }
        static void reti(conf_object_t *obj) {
            detail::get_interface<I8051InterruptInterface>(obj)->reti();
        }
        static bool suppress_irq(conf_object_t *obj, uint32 addr) {
            return detail::get_interface<I8051InterruptInterface>(obj)->suppress_irq(addr);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I8051InterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int active_interrupt() const {
            return iface_->active_interrupt(obj_);
        }
        void reti() const {
            iface_->reti(obj_);
        }
        bool suppress_irq(uint32 addr) const {
            return iface_->suppress_irq(obj_, addr);
        }

        const I8051InterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I8051InterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I8051_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I8051InterruptInterface::ctype funcs {
                FromC::active_interrupt,
                FromC::reti,
                FromC::suppress_irq,
            };
            return &funcs;
        }
    };
};

class I8051TimerInterface {
  public:
    using ctype = i8051_timer_interface_t;

    // Function override and implemented by user
    virtual void change_mode(uint8 mode) = 0;
    virtual void switch_timer(uint8 caller, bool onoff) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void change_mode(conf_object_t *obj, uint8 mode) {
            detail::get_interface<I8051TimerInterface>(obj)->change_mode(mode);
        }
        static void switch_timer(conf_object_t *obj, uint8 caller, bool onoff) {
            detail::get_interface<I8051TimerInterface>(obj)->switch_timer(caller, onoff);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const I8051TimerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void change_mode(uint8 mode) const {
            iface_->change_mode(obj_, mode);
        }
        void switch_timer(uint8 caller, bool onoff) const {
            iface_->switch_timer(obj_, caller, onoff);
        }

        const I8051TimerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const I8051TimerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return I8051_TIMER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr I8051TimerInterface::ctype funcs {
                FromC::change_mode,
                FromC::switch_timer,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
