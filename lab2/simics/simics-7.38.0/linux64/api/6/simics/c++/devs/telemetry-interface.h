// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_TELEMETRY_INTERFACE_H
#define SIMICS_CPP_DEVS_TELEMETRY_INTERFACE_H

#include "simics/devs/telemetry-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TelemetryInterface {
  public:
    using ctype = telemetry_interface_t;

    // Function override and implemented by user
    virtual telemetry_class_id_t get_telemetry_class_id(const char *telemetry_class_name) = 0;
    virtual const char * get_telemetry_class_name(telemetry_class_id_t telemetry_class_id) = 0;
    virtual const char * get_telemetry_class_description(telemetry_class_id_t telemetry_class_id) = 0;
    virtual telemetry_id_t get_telemetry_id(telemetry_class_id_t telemetry_class_id, const char *telemetry_name) = 0;
    virtual const char * get_telemetry_name(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) = 0;
    virtual const char * get_telemetry_description(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) = 0;
    virtual attr_value_t get_value(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static telemetry_class_id_t get_telemetry_class_id(conf_object_t *obj, const char *telemetry_class_name) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_class_id(telemetry_class_name);
        }
        static const char * get_telemetry_class_name(conf_object_t *obj, telemetry_class_id_t telemetry_class_id) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_class_name(telemetry_class_id);
        }
        static const char * get_telemetry_class_description(conf_object_t *obj, telemetry_class_id_t telemetry_class_id) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_class_description(telemetry_class_id);
        }
        static telemetry_id_t get_telemetry_id(conf_object_t *obj, telemetry_class_id_t telemetry_class_id, const char *telemetry_name) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_id(telemetry_class_id, telemetry_name);
        }
        static const char * get_telemetry_name(conf_object_t *obj, telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_name(telemetry_class_id, telemetry_id);
        }
        static const char * get_telemetry_description(conf_object_t *obj, telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) {
            return detail::get_interface<TelemetryInterface>(obj)->get_telemetry_description(telemetry_class_id, telemetry_id);
        }
        static attr_value_t get_value(conf_object_t *obj, telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) {
            return detail::get_interface<TelemetryInterface>(obj)->get_value(telemetry_class_id, telemetry_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TelemetryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        telemetry_class_id_t get_telemetry_class_id(const char *telemetry_class_name) const {
            return iface_->get_telemetry_class_id(obj_, telemetry_class_name);
        }
        const char * get_telemetry_class_name(telemetry_class_id_t telemetry_class_id) const {
            return iface_->get_telemetry_class_name(obj_, telemetry_class_id);
        }
        const char * get_telemetry_class_description(telemetry_class_id_t telemetry_class_id) const {
            return iface_->get_telemetry_class_description(obj_, telemetry_class_id);
        }
        telemetry_id_t get_telemetry_id(telemetry_class_id_t telemetry_class_id, const char *telemetry_name) const {
            return iface_->get_telemetry_id(obj_, telemetry_class_id, telemetry_name);
        }
        const char * get_telemetry_name(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) const {
            return iface_->get_telemetry_name(obj_, telemetry_class_id, telemetry_id);
        }
        const char * get_telemetry_description(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) const {
            return iface_->get_telemetry_description(obj_, telemetry_class_id, telemetry_id);
        }
        attr_value_t get_value(telemetry_class_id_t telemetry_class_id, telemetry_id_t telemetry_id) const {
            return iface_->get_value(obj_, telemetry_class_id, telemetry_id);
        }

        const TelemetryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TelemetryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TELEMETRY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TelemetryInterface::ctype funcs {
                FromC::get_telemetry_class_id,
                FromC::get_telemetry_class_name,
                FromC::get_telemetry_class_description,
                FromC::get_telemetry_id,
                FromC::get_telemetry_name,
                FromC::get_telemetry_description,
                FromC::get_value,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
