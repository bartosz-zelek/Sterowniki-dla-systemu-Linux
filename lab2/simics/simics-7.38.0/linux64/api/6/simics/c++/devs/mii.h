// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_MII_H
#define SIMICS_CPP_DEVS_MII_H

#include "simics/devs/mii.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class MiiManagementInterface {
  public:
    using ctype = mii_management_interface_t;

    // Function override and implemented by user
    virtual int serial_access(int data_in, int clock) = 0;
    virtual uint16 read_register(int phy, int reg) = 0;
    virtual void write_register(int phy, int reg, uint16 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int serial_access(conf_object_t *obj, int data_in, int clock) {
            return detail::get_interface<MiiManagementInterface>(obj)->serial_access(data_in, clock);
        }
        static uint16 read_register(conf_object_t *obj, int phy, int reg) {
            return detail::get_interface<MiiManagementInterface>(obj)->read_register(phy, reg);
        }
        static void write_register(conf_object_t *obj, int phy, int reg, uint16 value) {
            detail::get_interface<MiiManagementInterface>(obj)->write_register(phy, reg, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MiiManagementInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int serial_access(int data_in, int clock) const {
            return iface_->serial_access(obj_, data_in, clock);
        }
        uint16 read_register(int phy, int reg) const {
            return iface_->read_register(obj_, phy, reg);
        }
        void write_register(int phy, int reg, uint16 value) const {
            iface_->write_register(obj_, phy, reg, value);
        }

        const MiiManagementInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MiiManagementInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MII_MANAGEMENT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MiiManagementInterface::ctype funcs {
                FromC::serial_access,
                FromC::read_register,
                FromC::write_register,
            };
            return &funcs;
        }
    };
};

class MiiInterface {
  public:
    using ctype = mii_interface_t;

    // Function override and implemented by user
    virtual int serial_access(int data_in, int clock) = 0;
    virtual uint16 read_register(int index) = 0;
    virtual void write_register(int index, uint16 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int serial_access(conf_object_t *obj, int data_in, int clock) {
            return detail::get_interface<MiiInterface>(obj)->serial_access(data_in, clock);
        }
        static uint16 read_register(conf_object_t *obj, int index) {
            return detail::get_interface<MiiInterface>(obj)->read_register(index);
        }
        static void write_register(conf_object_t *obj, int index, uint16 value) {
            detail::get_interface<MiiInterface>(obj)->write_register(index, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MiiInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int serial_access(int data_in, int clock) const {
            return iface_->serial_access(obj_, data_in, clock);
        }
        uint16 read_register(int index) const {
            return iface_->read_register(obj_, index);
        }
        void write_register(int index, uint16 value) const {
            iface_->write_register(obj_, index, value);
        }

        const MiiInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MiiInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MII_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MiiInterface::ctype funcs {
                FromC::serial_access,
                FromC::read_register,
                FromC::write_register,
            };
            return &funcs;
        }
    };
};

class Mdio45BusInterface {
  public:
    using ctype = mdio45_bus_interface_t;

    // Function override and implemented by user
    virtual uint16 read_register(int phy, int mmd, int reg) = 0;
    virtual void write_register(int phy, int mdd, int reg, uint16 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint16 read_register(conf_object_t *obj, int phy, int mmd, int reg) {
            return detail::get_interface<Mdio45BusInterface>(obj)->read_register(phy, mmd, reg);
        }
        static void write_register(conf_object_t *obj, int phy, int mdd, int reg, uint16 value) {
            detail::get_interface<Mdio45BusInterface>(obj)->write_register(phy, mdd, reg, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Mdio45BusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint16 read_register(int phy, int mmd, int reg) const {
            return iface_->read_register(obj_, phy, mmd, reg);
        }
        void write_register(int phy, int mdd, int reg, uint16 value) const {
            iface_->write_register(obj_, phy, mdd, reg, value);
        }

        const Mdio45BusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Mdio45BusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MDIO45_BUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Mdio45BusInterface::ctype funcs {
                FromC::read_register,
                FromC::write_register,
            };
            return &funcs;
        }
    };
};

class Mdio45PhyInterface {
  public:
    using ctype = mdio45_phy_interface_t;

    // Function override and implemented by user
    virtual uint16 read_register(int mmd, int reg) = 0;
    virtual void write_register(int mmd, int reg, uint16 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint16 read_register(conf_object_t *obj, int mmd, int reg) {
            return detail::get_interface<Mdio45PhyInterface>(obj)->read_register(mmd, reg);
        }
        static void write_register(conf_object_t *obj, int mmd, int reg, uint16 value) {
            detail::get_interface<Mdio45PhyInterface>(obj)->write_register(mmd, reg, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Mdio45PhyInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint16 read_register(int mmd, int reg) const {
            return iface_->read_register(obj_, mmd, reg);
        }
        void write_register(int mmd, int reg, uint16 value) const {
            iface_->write_register(obj_, mmd, reg, value);
        }

        const Mdio45PhyInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Mdio45PhyInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MDIO45_PHY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Mdio45PhyInterface::ctype funcs {
                FromC::read_register,
                FromC::write_register,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
