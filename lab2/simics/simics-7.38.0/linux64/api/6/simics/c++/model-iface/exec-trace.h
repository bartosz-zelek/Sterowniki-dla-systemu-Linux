// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_EXEC_TRACE_H
#define SIMICS_CPP_MODEL_IFACE_EXEC_TRACE_H

#include "simics/model-iface/exec-trace.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ExecTraceInterface {
  public:
    using ctype = exec_trace_interface_t;

    // Function override and implemented by user
    virtual void register_tracer(instruction_trace_callback_t tracer, lang_void *tracer_data) = 0;
    virtual void unregister_tracer(instruction_trace_callback_t tracer, lang_void *tracer_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_tracer(conf_object_t *cpu_obj, instruction_trace_callback_t tracer, lang_void *tracer_data) {
            detail::get_interface<ExecTraceInterface>(cpu_obj)->register_tracer(tracer, tracer_data);
        }
        static void unregister_tracer(conf_object_t *cpu_obj, instruction_trace_callback_t tracer, lang_void *tracer_data) {
            detail::get_interface<ExecTraceInterface>(cpu_obj)->unregister_tracer(tracer, tracer_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ExecTraceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_tracer(instruction_trace_callback_t tracer, lang_void *tracer_data) const {
            iface_->register_tracer(obj_, tracer, tracer_data);
        }
        void unregister_tracer(instruction_trace_callback_t tracer, lang_void *tracer_data) const {
            iface_->unregister_tracer(obj_, tracer, tracer_data);
        }

        const ExecTraceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ExecTraceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return EXEC_TRACE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ExecTraceInterface::ctype funcs {
                FromC::register_tracer,
                FromC::unregister_tracer,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
