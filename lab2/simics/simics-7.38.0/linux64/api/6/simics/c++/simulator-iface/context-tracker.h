// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_CONTEXT_TRACKER_H
#define SIMICS_CPP_SIMULATOR_IFACE_CONTEXT_TRACKER_H

#include "simics/simulator-iface/context-tracker.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ContextHandlerInterface {
  public:
    using ctype = context_handler_interface_t;

    // Function override and implemented by user
    virtual conf_object_t * get_current_context() = 0;
    virtual int set_current_context(conf_object_t *ctx) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static conf_object_t * get_current_context(conf_object_t *obj) {
            return detail::get_interface<ContextHandlerInterface>(obj)->get_current_context();
        }
        static int set_current_context(conf_object_t *obj, conf_object_t *ctx) {
            return detail::get_interface<ContextHandlerInterface>(obj)->set_current_context(ctx);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ContextHandlerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        conf_object_t * get_current_context() const {
            return iface_->get_current_context(obj_);
        }
        int set_current_context(conf_object_t *ctx) const {
            return iface_->set_current_context(obj_, ctx);
        }

        const ContextHandlerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ContextHandlerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CONTEXT_HANDLER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ContextHandlerInterface::ctype funcs {
                FromC::get_current_context,
                FromC::set_current_context,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
