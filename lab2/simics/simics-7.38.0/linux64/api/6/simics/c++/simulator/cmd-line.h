// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_CMD_LINE_H
#define SIMICS_CPP_SIMULATOR_CMD_LINE_H

#include "simics/simulator/cmd-line.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CmdLineFrontendInterface {
  public:
    using ctype = cmd_line_frontend_interface_t;

    // Function override and implemented by user
    virtual void write(const char *str) = 0;
    virtual void delete_line() = 0;
    virtual void disconnect() = 0;
    virtual void cursor_left(int num) = 0;
    virtual void cursor_right(int num) = 0;
    virtual void clear_screen() = 0;
    virtual void prompt_end(int pos) = 0;
    virtual void bell() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void write(conf_object_t *obj, const char *str) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->write(str);
        }
        static void delete_line(conf_object_t *obj) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->delete_line();
        }
        static void disconnect(conf_object_t *obj) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->disconnect();
        }
        static void cursor_left(conf_object_t *obj, int num) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->cursor_left(num);
        }
        static void cursor_right(conf_object_t *obj, int num) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->cursor_right(num);
        }
        static void clear_screen(conf_object_t *obj) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->clear_screen();
        }
        static void prompt_end(conf_object_t *obj, int pos) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->prompt_end(pos);
        }
        static void bell(conf_object_t *obj) {
            detail::get_interface<CmdLineFrontendInterface>(obj)->bell();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CmdLineFrontendInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void write(const char *str) const {
            iface_->write(obj_, str);
        }
        void delete_line() const {
            iface_->delete_line(obj_);
        }
        void disconnect() const {
            iface_->disconnect(obj_);
        }
        void cursor_left(int num) const {
            iface_->cursor_left(obj_, num);
        }
        void cursor_right(int num) const {
            iface_->cursor_right(obj_, num);
        }
        void clear_screen() const {
            iface_->clear_screen(obj_);
        }
        void prompt_end(int pos) const {
            iface_->prompt_end(obj_, pos);
        }
        void bell() const {
            iface_->bell(obj_);
        }

        const CmdLineFrontendInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CmdLineFrontendInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CMD_LINE_FRONTEND_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CmdLineFrontendInterface::ctype funcs {
                FromC::write,
                FromC::delete_line,
                FromC::disconnect,
                FromC::cursor_left,
                FromC::cursor_right,
                FromC::clear_screen,
                FromC::prompt_end,
                FromC::bell,
            };
            return &funcs;
        }
    };
};

class CmdLineSelectionInterface {
  public:
    using ctype = cmd_line_selection_interface_t;

    // Function override and implemented by user
    virtual void new_selection(int x, int y) = 0;
    virtual void to_clipboard(const char *str) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void new_selection(conf_object_t *obj, int x, int y) {
            detail::get_interface<CmdLineSelectionInterface>(obj)->new_selection(x, y);
        }
        static void to_clipboard(conf_object_t *obj, const char *str) {
            detail::get_interface<CmdLineSelectionInterface>(obj)->to_clipboard(str);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CmdLineSelectionInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void new_selection(int x, int y) const {
            iface_->new_selection(obj_, x, y);
        }
        void to_clipboard(const char *str) const {
            iface_->to_clipboard(obj_, str);
        }

        const CmdLineSelectionInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CmdLineSelectionInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CMD_LINE_SELECTION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CmdLineSelectionInterface::ctype funcs {
                FromC::new_selection,
                FromC::to_clipboard,
            };
            return &funcs;
        }
    };
};

class TerminalServerInterface {
  public:
    using ctype = terminal_server_interface_t;

    // Function override and implemented by user
    virtual void write(const char *str) = 0;
    virtual void set_size(int left, int right) = 0;
    virtual void disconnect() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void write(conf_object_t *obj, const char *str) {
            detail::get_interface<TerminalServerInterface>(obj)->write(str);
        }
        static void set_size(conf_object_t *obj, int left, int right) {
            detail::get_interface<TerminalServerInterface>(obj)->set_size(left, right);
        }
        static void disconnect(conf_object_t *obj) {
            detail::get_interface<TerminalServerInterface>(obj)->disconnect();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TerminalServerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void write(const char *str) const {
            iface_->write(obj_, str);
        }
        void set_size(int left, int right) const {
            iface_->set_size(obj_, left, right);
        }
        void disconnect() const {
            iface_->disconnect(obj_);
        }

        const TerminalServerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TerminalServerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TERMINAL_SERVER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TerminalServerInterface::ctype funcs {
                FromC::write,
                FromC::set_size,
                FromC::disconnect,
            };
            return &funcs;
        }
    };
};

class TerminalClientInterface {
  public:
    using ctype = terminal_client_interface_t;

    // Function override and implemented by user
    virtual void write(int id, const char *str) = 0;
    virtual void disconnect(int id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void write(conf_object_t *obj, int id, const char *str) {
            detail::get_interface<TerminalClientInterface>(obj)->write(id, str);
        }
        static void disconnect(conf_object_t *obj, int id) {
            detail::get_interface<TerminalClientInterface>(obj)->disconnect(id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TerminalClientInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void write(int id, const char *str) const {
            iface_->write(obj_, id, str);
        }
        void disconnect(int id) const {
            iface_->disconnect(obj_, id);
        }

        const TerminalClientInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TerminalClientInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TERMINAL_CLIENT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TerminalClientInterface::ctype funcs {
                FromC::write,
                FromC::disconnect,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
