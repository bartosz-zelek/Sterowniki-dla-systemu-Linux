// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_MMC_H
#define SIMICS_CPP_MODEL_IFACE_MMC_H

#include "simics/model-iface/mmc.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class MmcInterface {
  public:
    using ctype = mmc_interface_t;

    // Function override and implemented by user
    virtual int send_command(uint8 cmd, uint32 args, buffer_t response) = 0;
    virtual int read_data(buffer_t data) = 0;
    virtual int write_data(bytes_t data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int send_command(conf_object_t *obj, uint8 cmd, uint32 args, buffer_t response) {
            return detail::get_interface<MmcInterface>(obj)->send_command(cmd, args, response);
        }
        static int read_data(conf_object_t *obj, buffer_t data) {
            return detail::get_interface<MmcInterface>(obj)->read_data(data);
        }
        static int write_data(conf_object_t *obj, bytes_t data) {
            return detail::get_interface<MmcInterface>(obj)->write_data(data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MmcInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int send_command(uint8 cmd, uint32 args, buffer_t response) const {
            return iface_->send_command(obj_, cmd, args, response);
        }
        int read_data(buffer_t data) const {
            return iface_->read_data(obj_, data);
        }
        int write_data(bytes_t data) const {
            return iface_->write_data(obj_, data);
        }

        const MmcInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MmcInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MMC_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MmcInterface::ctype funcs {
                FromC::send_command,
                FromC::read_data,
                FromC::write_data,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
