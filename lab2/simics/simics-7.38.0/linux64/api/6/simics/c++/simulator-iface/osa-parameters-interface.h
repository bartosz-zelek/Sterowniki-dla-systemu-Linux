// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_PARAMETERS_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_PARAMETERS_INTERFACE_H

#include "simics/simulator-iface/osa-parameters-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaParametersInterface {
  public:
    using ctype = osa_parameters_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_parameters(bool include_children) = 0;
    virtual attr_value_t set_parameters(attr_value_t parameters) = 0;
    virtual bool is_kind_supported(const char *kind) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_parameters(conf_object_t *obj, bool include_children) {
            return detail::get_interface<OsaParametersInterface>(obj)->get_parameters(include_children);
        }
        static attr_value_t set_parameters(conf_object_t *obj, attr_value_t parameters) {
            return detail::get_interface<OsaParametersInterface>(obj)->set_parameters(parameters);
        }
        static bool is_kind_supported(conf_object_t *obj, const char *kind) {
            return detail::get_interface<OsaParametersInterface>(obj)->is_kind_supported(kind);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaParametersInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_parameters(bool include_children) const {
            return iface_->get_parameters(obj_, include_children);
        }
        attr_value_t set_parameters(attr_value_t parameters) const {
            return iface_->set_parameters(obj_, parameters);
        }
        bool is_kind_supported(const char *kind) const {
            return iface_->is_kind_supported(obj_, kind);
        }

        const OsaParametersInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaParametersInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_PARAMETERS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaParametersInterface::ctype funcs {
                FromC::get_parameters,
                FromC::set_parameters,
                FromC::is_kind_supported,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
