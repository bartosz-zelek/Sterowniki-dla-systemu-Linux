// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_DEBUGGER_H
#define SIMICS_CPP_SIMULATOR_IFACE_DEBUGGER_H

#include "simics/simulator-iface/debugger.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class DebugNotificationInterface {
  public:
    using ctype = debug_notification_interface_t;

    // Function override and implemented by user
    virtual attr_value_t notify_context_creation(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, bool updated), cbdata_register_t data) = 0;
    virtual attr_value_t notify_context_destruction(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id), cbdata_register_t data) = 0;
    virtual attr_value_t notify_location(const char *query, const char *location, unsigned size, access_t access, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) = 0;
    virtual attr_value_t notify_address(const char *query, uint64 address, unsigned size, access_t access, bool physical, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) = 0;
    virtual attr_value_t notify_line(const char *query, const char *file, unsigned line, unsigned column, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) = 0;
    virtual attr_value_t notify_activated(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) = 0;
    virtual attr_value_t notify_deactivated(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) = 0;
    virtual attr_value_t notify_callbacks_done(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) = 0;
    virtual attr_value_t cancel(debug_cancel_id_t cid) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t notify_context_creation(conf_object_t *obj, const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, bool updated), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_context_creation(query, cb, data);
        }
        static attr_value_t notify_context_destruction(conf_object_t *obj, const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_context_destruction(query, cb, data);
        }
        static attr_value_t notify_location(conf_object_t *obj, const char *query, const char *location, unsigned size, access_t access, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_location(query, location, size, access, cb, data);
        }
        static attr_value_t notify_address(conf_object_t *obj, const char *query, uint64 address, unsigned size, access_t access, bool physical, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_address(query, address, size, access, physical, cb, data);
        }
        static attr_value_t notify_line(conf_object_t *obj, const char *query, const char *file, unsigned line, unsigned column, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_line(query, file, line, column, cb, data);
        }
        static attr_value_t notify_activated(conf_object_t *obj, const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_activated(query, cb, data);
        }
        static attr_value_t notify_deactivated(conf_object_t *obj, const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_deactivated(query, cb, data);
        }
        static attr_value_t notify_callbacks_done(conf_object_t *obj, void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) {
            return detail::get_interface<DebugNotificationInterface>(obj)->notify_callbacks_done(cb, data);
        }
        static attr_value_t cancel(conf_object_t *obj, debug_cancel_id_t cid) {
            return detail::get_interface<DebugNotificationInterface>(obj)->cancel(cid);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugNotificationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t notify_context_creation(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, bool updated), cbdata_register_t data) const {
            return iface_->notify_context_creation(obj_, query, cb, data);
        }
        attr_value_t notify_context_destruction(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id), cbdata_register_t data) const {
            return iface_->notify_context_destruction(obj_, query, cb, data);
        }
        attr_value_t notify_location(const char *query, const char *location, unsigned size, access_t access, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) const {
            return iface_->notify_location(obj_, query, location, size, access, cb, data);
        }
        attr_value_t notify_address(const char *query, uint64 address, unsigned size, access_t access, bool physical, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) const {
            return iface_->notify_address(obj_, query, address, size, access, physical, cb, data);
        }
        attr_value_t notify_line(const char *query, const char *file, unsigned line, unsigned column, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu, uint64 instruction_address, uint64 data_address, unsigned size), cbdata_register_t data) const {
            return iface_->notify_line(obj_, query, file, line, column, cb, data);
        }
        attr_value_t notify_activated(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) const {
            return iface_->notify_activated(obj_, query, cb, data);
        }
        attr_value_t notify_deactivated(const char *query, void (*cb)(cbdata_call_t data, conf_object_t *obj, const char *ctx_id, conf_object_t *cpu), cbdata_register_t data) const {
            return iface_->notify_deactivated(obj_, query, cb, data);
        }
        attr_value_t notify_callbacks_done(void (*cb)(cbdata_call_t data, conf_object_t *obj), cbdata_register_t data) const {
            return iface_->notify_callbacks_done(obj_, cb, data);
        }
        attr_value_t cancel(debug_cancel_id_t cid) const {
            return iface_->cancel(obj_, cid);
        }

        const DebugNotificationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugNotificationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_NOTIFICATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugNotificationInterface::ctype funcs {
                FromC::notify_context_creation,
                FromC::notify_context_destruction,
                FromC::notify_location,
                FromC::notify_address,
                FromC::notify_line,
                FromC::notify_activated,
                FromC::notify_deactivated,
                FromC::notify_callbacks_done,
                FromC::cancel,
            };
            return &funcs;
        }
    };
};

class DebugSetupInterface {
  public:
    using ctype = debug_setup_interface_t;

    // Function override and implemented by user
    virtual attr_value_t add_symbol_file(const char *query, const char *symbol_file, uint64 address, bool absolute_address) = 0;
    virtual attr_value_t add_symbol_segment(const char *query, const char *symbol_file, unsigned segment, uint64 address, bool absolute_address) = 0;
    virtual attr_value_t add_symbol_section(const char *query, const char *symbol_file, const char *section, uint64 address, bool absolute_address) = 0;
    virtual attr_value_t remove_symbol_file(debug_setup_id_t id) = 0;
    virtual void clear_symbol_files() = 0;
    virtual attr_value_t symbol_files() = 0;
    virtual attr_value_t symbol_files_for_ctx(const char *ctx_id) = 0;
    virtual attr_value_t list_all_mappings(const char *ctx_id) = 0;
    virtual attr_value_t add_path_map_entry(const char *query, const char *source, const char *dest) = 0;
    virtual attr_value_t remove_path_map_entry(debug_setup_id_t id) = 0;
    virtual void clear_path_map_entries() = 0;
    virtual attr_value_t path_map_entries() = 0;
    virtual attr_value_t path_map_entries_for_ctx(const char *ctx_id) = 0;
    virtual attr_value_t apply_path_map(const char *ctx_id, const char *filename) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t add_symbol_file(conf_object_t *obj, const char *query, const char *symbol_file, uint64 address, bool absolute_address) {
            return detail::get_interface<DebugSetupInterface>(obj)->add_symbol_file(query, symbol_file, address, absolute_address);
        }
        static attr_value_t add_symbol_segment(conf_object_t *obj, const char *query, const char *symbol_file, unsigned segment, uint64 address, bool absolute_address) {
            return detail::get_interface<DebugSetupInterface>(obj)->add_symbol_segment(query, symbol_file, segment, address, absolute_address);
        }
        static attr_value_t add_symbol_section(conf_object_t *obj, const char *query, const char *symbol_file, const char *section, uint64 address, bool absolute_address) {
            return detail::get_interface<DebugSetupInterface>(obj)->add_symbol_section(query, symbol_file, section, address, absolute_address);
        }
        static attr_value_t remove_symbol_file(conf_object_t *obj, debug_setup_id_t id) {
            return detail::get_interface<DebugSetupInterface>(obj)->remove_symbol_file(id);
        }
        static void clear_symbol_files(conf_object_t *obj) {
            detail::get_interface<DebugSetupInterface>(obj)->clear_symbol_files();
        }
        static attr_value_t symbol_files(conf_object_t *obj) {
            return detail::get_interface<DebugSetupInterface>(obj)->symbol_files();
        }
        static attr_value_t symbol_files_for_ctx(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSetupInterface>(obj)->symbol_files_for_ctx(ctx_id);
        }
        static attr_value_t list_all_mappings(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSetupInterface>(obj)->list_all_mappings(ctx_id);
        }
        static attr_value_t add_path_map_entry(conf_object_t *obj, const char *query, const char *source, const char *dest) {
            return detail::get_interface<DebugSetupInterface>(obj)->add_path_map_entry(query, source, dest);
        }
        static attr_value_t remove_path_map_entry(conf_object_t *obj, debug_setup_id_t id) {
            return detail::get_interface<DebugSetupInterface>(obj)->remove_path_map_entry(id);
        }
        static void clear_path_map_entries(conf_object_t *obj) {
            detail::get_interface<DebugSetupInterface>(obj)->clear_path_map_entries();
        }
        static attr_value_t path_map_entries(conf_object_t *obj) {
            return detail::get_interface<DebugSetupInterface>(obj)->path_map_entries();
        }
        static attr_value_t path_map_entries_for_ctx(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSetupInterface>(obj)->path_map_entries_for_ctx(ctx_id);
        }
        static attr_value_t apply_path_map(conf_object_t *obj, const char *ctx_id, const char *filename) {
            return detail::get_interface<DebugSetupInterface>(obj)->apply_path_map(ctx_id, filename);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugSetupInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t add_symbol_file(const char *query, const char *symbol_file, uint64 address, bool absolute_address) const {
            return iface_->add_symbol_file(obj_, query, symbol_file, address, absolute_address);
        }
        attr_value_t add_symbol_segment(const char *query, const char *symbol_file, unsigned segment, uint64 address, bool absolute_address) const {
            return iface_->add_symbol_segment(obj_, query, symbol_file, segment, address, absolute_address);
        }
        attr_value_t add_symbol_section(const char *query, const char *symbol_file, const char *section, uint64 address, bool absolute_address) const {
            return iface_->add_symbol_section(obj_, query, symbol_file, section, address, absolute_address);
        }
        attr_value_t remove_symbol_file(debug_setup_id_t id) const {
            return iface_->remove_symbol_file(obj_, id);
        }
        void clear_symbol_files() const {
            iface_->clear_symbol_files(obj_);
        }
        attr_value_t symbol_files() const {
            return iface_->symbol_files(obj_);
        }
        attr_value_t symbol_files_for_ctx(const char *ctx_id) const {
            return iface_->symbol_files_for_ctx(obj_, ctx_id);
        }
        attr_value_t list_all_mappings(const char *ctx_id) const {
            return iface_->list_all_mappings(obj_, ctx_id);
        }
        attr_value_t add_path_map_entry(const char *query, const char *source, const char *dest) const {
            return iface_->add_path_map_entry(obj_, query, source, dest);
        }
        attr_value_t remove_path_map_entry(debug_setup_id_t id) const {
            return iface_->remove_path_map_entry(obj_, id);
        }
        void clear_path_map_entries() const {
            iface_->clear_path_map_entries(obj_);
        }
        attr_value_t path_map_entries() const {
            return iface_->path_map_entries(obj_);
        }
        attr_value_t path_map_entries_for_ctx(const char *ctx_id) const {
            return iface_->path_map_entries_for_ctx(obj_, ctx_id);
        }
        attr_value_t apply_path_map(const char *ctx_id, const char *filename) const {
            return iface_->apply_path_map(obj_, ctx_id, filename);
        }

        const DebugSetupInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugSetupInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_SETUP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugSetupInterface::ctype funcs {
                FromC::add_symbol_file,
                FromC::add_symbol_segment,
                FromC::add_symbol_section,
                FromC::remove_symbol_file,
                FromC::clear_symbol_files,
                FromC::symbol_files,
                FromC::symbol_files_for_ctx,
                FromC::list_all_mappings,
                FromC::add_path_map_entry,
                FromC::remove_path_map_entry,
                FromC::clear_path_map_entries,
                FromC::path_map_entries,
                FromC::path_map_entries_for_ctx,
                FromC::apply_path_map,
            };
            return &funcs;
        }
    };
};

class DebugQueryInterface {
  public:
    using ctype = debug_query_interface_t;

    // Function override and implemented by user
    virtual attr_value_t matching_contexts(const char *query) = 0;
    virtual attr_value_t get_context_group(const char *ctx_id) = 0;
    virtual attr_value_t get_context_parent(const char *ctx_id) = 0;
    virtual attr_value_t get_context_children(const char *ctx_id) = 0;
    virtual attr_value_t query_for_context_group(const char *ctx_id) = 0;
    virtual attr_value_t query_for_context_id(const char *ctx_id) = 0;
    virtual attr_value_t query_for_context_tree(const char *ctx_id) = 0;
    virtual attr_value_t context_name(const char *ctx_id) = 0;
    virtual attr_value_t context_id_for_object(conf_object_t *ctx_obj) = 0;
    virtual attr_value_t object_for_context(const char *ctx_id) = 0;
    virtual attr_value_t context_has_state(const char *ctx_id) = 0;
    virtual attr_value_t get_active_processor(const char *ctx_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t matching_contexts(conf_object_t *obj, const char *query) {
            return detail::get_interface<DebugQueryInterface>(obj)->matching_contexts(query);
        }
        static attr_value_t get_context_group(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->get_context_group(ctx_id);
        }
        static attr_value_t get_context_parent(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->get_context_parent(ctx_id);
        }
        static attr_value_t get_context_children(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->get_context_children(ctx_id);
        }
        static attr_value_t query_for_context_group(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->query_for_context_group(ctx_id);
        }
        static attr_value_t query_for_context_id(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->query_for_context_id(ctx_id);
        }
        static attr_value_t query_for_context_tree(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->query_for_context_tree(ctx_id);
        }
        static attr_value_t context_name(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->context_name(ctx_id);
        }
        static attr_value_t context_id_for_object(conf_object_t *obj, conf_object_t *ctx_obj) {
            return detail::get_interface<DebugQueryInterface>(obj)->context_id_for_object(ctx_obj);
        }
        static attr_value_t object_for_context(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->object_for_context(ctx_id);
        }
        static attr_value_t context_has_state(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->context_has_state(ctx_id);
        }
        static attr_value_t get_active_processor(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugQueryInterface>(obj)->get_active_processor(ctx_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t matching_contexts(const char *query) const {
            return iface_->matching_contexts(obj_, query);
        }
        attr_value_t get_context_group(const char *ctx_id) const {
            return iface_->get_context_group(obj_, ctx_id);
        }
        attr_value_t get_context_parent(const char *ctx_id) const {
            return iface_->get_context_parent(obj_, ctx_id);
        }
        attr_value_t get_context_children(const char *ctx_id) const {
            return iface_->get_context_children(obj_, ctx_id);
        }
        attr_value_t query_for_context_group(const char *ctx_id) const {
            return iface_->query_for_context_group(obj_, ctx_id);
        }
        attr_value_t query_for_context_id(const char *ctx_id) const {
            return iface_->query_for_context_id(obj_, ctx_id);
        }
        attr_value_t query_for_context_tree(const char *ctx_id) const {
            return iface_->query_for_context_tree(obj_, ctx_id);
        }
        attr_value_t context_name(const char *ctx_id) const {
            return iface_->context_name(obj_, ctx_id);
        }
        attr_value_t context_id_for_object(conf_object_t *ctx_obj) const {
            return iface_->context_id_for_object(obj_, ctx_obj);
        }
        attr_value_t object_for_context(const char *ctx_id) const {
            return iface_->object_for_context(obj_, ctx_id);
        }
        attr_value_t context_has_state(const char *ctx_id) const {
            return iface_->context_has_state(obj_, ctx_id);
        }
        attr_value_t get_active_processor(const char *ctx_id) const {
            return iface_->get_active_processor(obj_, ctx_id);
        }

        const DebugQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugQueryInterface::ctype funcs {
                FromC::matching_contexts,
                FromC::get_context_group,
                FromC::get_context_parent,
                FromC::get_context_children,
                FromC::query_for_context_group,
                FromC::query_for_context_id,
                FromC::query_for_context_tree,
                FromC::context_name,
                FromC::context_id_for_object,
                FromC::object_for_context,
                FromC::context_has_state,
                FromC::get_active_processor,
            };
            return &funcs;
        }
    };
};

class DebugStepInterface {
  public:
    using ctype = debug_step_interface_t;

    // Function override and implemented by user
    virtual attr_value_t instruction_into(const char *ctx_id) = 0;
    virtual attr_value_t into(const char *ctx_id) = 0;
    virtual attr_value_t instruction_over(const char *ctx_id) = 0;
    virtual attr_value_t over(const char *ctx_id) = 0;
    virtual attr_value_t out(const char *ctx_id) = 0;
    virtual attr_value_t reverse_instruction_into(const char *ctx_id) = 0;
    virtual attr_value_t reverse_into(const char *ctx_id) = 0;
    virtual attr_value_t reverse_instruction_over(const char *ctx_id) = 0;
    virtual attr_value_t reverse_over(const char *ctx_id) = 0;
    virtual attr_value_t reverse_out(const char *ctx_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t instruction_into(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->instruction_into(ctx_id);
        }
        static attr_value_t into(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->into(ctx_id);
        }
        static attr_value_t instruction_over(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->instruction_over(ctx_id);
        }
        static attr_value_t over(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->over(ctx_id);
        }
        static attr_value_t out(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->out(ctx_id);
        }
        static attr_value_t reverse_instruction_into(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->reverse_instruction_into(ctx_id);
        }
        static attr_value_t reverse_into(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->reverse_into(ctx_id);
        }
        static attr_value_t reverse_instruction_over(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->reverse_instruction_over(ctx_id);
        }
        static attr_value_t reverse_over(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->reverse_over(ctx_id);
        }
        static attr_value_t reverse_out(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugStepInterface>(obj)->reverse_out(ctx_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugStepInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t instruction_into(const char *ctx_id) const {
            return iface_->instruction_into(obj_, ctx_id);
        }
        attr_value_t into(const char *ctx_id) const {
            return iface_->into(obj_, ctx_id);
        }
        attr_value_t instruction_over(const char *ctx_id) const {
            return iface_->instruction_over(obj_, ctx_id);
        }
        attr_value_t over(const char *ctx_id) const {
            return iface_->over(obj_, ctx_id);
        }
        attr_value_t out(const char *ctx_id) const {
            return iface_->out(obj_, ctx_id);
        }
        attr_value_t reverse_instruction_into(const char *ctx_id) const {
            return iface_->reverse_instruction_into(obj_, ctx_id);
        }
        attr_value_t reverse_into(const char *ctx_id) const {
            return iface_->reverse_into(obj_, ctx_id);
        }
        attr_value_t reverse_instruction_over(const char *ctx_id) const {
            return iface_->reverse_instruction_over(obj_, ctx_id);
        }
        attr_value_t reverse_over(const char *ctx_id) const {
            return iface_->reverse_over(obj_, ctx_id);
        }
        attr_value_t reverse_out(const char *ctx_id) const {
            return iface_->reverse_out(obj_, ctx_id);
        }

        const DebugStepInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugStepInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_STEP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugStepInterface::ctype funcs {
                FromC::instruction_into,
                FromC::into,
                FromC::instruction_over,
                FromC::over,
                FromC::out,
                FromC::reverse_instruction_into,
                FromC::reverse_into,
                FromC::reverse_instruction_over,
                FromC::reverse_over,
                FromC::reverse_out,
            };
            return &funcs;
        }
    };
};

class DebugSymbolInterface {
  public:
    using ctype = debug_symbol_interface_t;

    // Function override and implemented by user
    virtual attr_value_t address_source(const char *ctx_id, uint64 address, uint64 size, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) = 0;
    virtual attr_value_t source_address(const char *ctx_id, const char *filename, uint32 line, uint32 column, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) = 0;
    virtual attr_value_t address_symbol(const char *ctx_id, uint64 address) = 0;
    virtual attr_value_t stack_depth(const char *ctx_id) = 0;
    virtual attr_value_t stack_frames(const char *ctx_id, int min, int max) = 0;
    virtual attr_value_t local_variables(const char *ctx_id, int frame) = 0;
    virtual attr_value_t local_arguments(const char *ctx_id, int frame) = 0;
    virtual attr_value_t expression_value(const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) = 0;
    virtual attr_value_t expression_type(const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) = 0;
    virtual attr_value_t type_info(const char *ctx_id, uint64 address_scope, const char *type) = 0;
    virtual attr_value_t type_to_string(attr_value_t type) = 0;
    virtual attr_value_t symbol_address(const char *ctx_id, int32 frame, const char *symbol) = 0;
    virtual attr_value_t address_string(const char *ctx_id, uint64 address, int maxlen) = 0;
    virtual attr_value_t lvalue_write(const char *ctx_id, int32 frame, const char *symbol, attr_value_t value) = 0;
    virtual attr_value_t address_write(const char *ctx_id, uint64 address, attr_value_t value) = 0;
    virtual attr_value_t address_read(const char *ctx_id, uint64 address, unsigned size) = 0;
    virtual attr_value_t struct_members(const char *ctx_id, uint64 address_scope, const char *struct_name) = 0;
    virtual attr_value_t struct_field(const char *ctx_id, uint64 address_scope, const char *struct_name, const char *field) = 0;
    virtual attr_value_t list_functions(const char *ctx_id) = 0;
    virtual attr_value_t list_global_variables(const char *ctx_id) = 0;
    virtual attr_value_t list_source_files(const char *ctx_id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t address_source(conf_object_t *obj, const char *ctx_id, uint64 address, uint64 size, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) {
            return detail::get_interface<DebugSymbolInterface>(obj)->address_source(ctx_id, address, size, cb, data);
        }
        static attr_value_t source_address(conf_object_t *obj, const char *ctx_id, const char *filename, uint32 line, uint32 column, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) {
            return detail::get_interface<DebugSymbolInterface>(obj)->source_address(ctx_id, filename, line, column, cb, data);
        }
        static attr_value_t address_symbol(conf_object_t *obj, const char *ctx_id, uint64 address) {
            return detail::get_interface<DebugSymbolInterface>(obj)->address_symbol(ctx_id, address);
        }
        static attr_value_t stack_depth(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolInterface>(obj)->stack_depth(ctx_id);
        }
        static attr_value_t stack_frames(conf_object_t *obj, const char *ctx_id, int min, int max) {
            return detail::get_interface<DebugSymbolInterface>(obj)->stack_frames(ctx_id, min, max);
        }
        static attr_value_t local_variables(conf_object_t *obj, const char *ctx_id, int frame) {
            return detail::get_interface<DebugSymbolInterface>(obj)->local_variables(ctx_id, frame);
        }
        static attr_value_t local_arguments(conf_object_t *obj, const char *ctx_id, int frame) {
            return detail::get_interface<DebugSymbolInterface>(obj)->local_arguments(ctx_id, frame);
        }
        static attr_value_t expression_value(conf_object_t *obj, const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) {
            return detail::get_interface<DebugSymbolInterface>(obj)->expression_value(ctx_id, frame, address_scope, expr);
        }
        static attr_value_t expression_type(conf_object_t *obj, const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) {
            return detail::get_interface<DebugSymbolInterface>(obj)->expression_type(ctx_id, frame, address_scope, expr);
        }
        static attr_value_t type_info(conf_object_t *obj, const char *ctx_id, uint64 address_scope, const char *type) {
            return detail::get_interface<DebugSymbolInterface>(obj)->type_info(ctx_id, address_scope, type);
        }
        static attr_value_t type_to_string(conf_object_t *obj, attr_value_t type) {
            return detail::get_interface<DebugSymbolInterface>(obj)->type_to_string(type);
        }
        static attr_value_t symbol_address(conf_object_t *obj, const char *ctx_id, int32 frame, const char *symbol) {
            return detail::get_interface<DebugSymbolInterface>(obj)->symbol_address(ctx_id, frame, symbol);
        }
        static attr_value_t address_string(conf_object_t *obj, const char *ctx_id, uint64 address, int maxlen) {
            return detail::get_interface<DebugSymbolInterface>(obj)->address_string(ctx_id, address, maxlen);
        }
        static attr_value_t lvalue_write(conf_object_t *obj, const char *ctx_id, int32 frame, const char *symbol, attr_value_t value) {
            return detail::get_interface<DebugSymbolInterface>(obj)->lvalue_write(ctx_id, frame, symbol, value);
        }
        static attr_value_t address_write(conf_object_t *obj, const char *ctx_id, uint64 address, attr_value_t value) {
            return detail::get_interface<DebugSymbolInterface>(obj)->address_write(ctx_id, address, value);
        }
        static attr_value_t address_read(conf_object_t *obj, const char *ctx_id, uint64 address, unsigned size) {
            return detail::get_interface<DebugSymbolInterface>(obj)->address_read(ctx_id, address, size);
        }
        static attr_value_t struct_members(conf_object_t *obj, const char *ctx_id, uint64 address_scope, const char *struct_name) {
            return detail::get_interface<DebugSymbolInterface>(obj)->struct_members(ctx_id, address_scope, struct_name);
        }
        static attr_value_t struct_field(conf_object_t *obj, const char *ctx_id, uint64 address_scope, const char *struct_name, const char *field) {
            return detail::get_interface<DebugSymbolInterface>(obj)->struct_field(ctx_id, address_scope, struct_name, field);
        }
        static attr_value_t list_functions(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolInterface>(obj)->list_functions(ctx_id);
        }
        static attr_value_t list_global_variables(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolInterface>(obj)->list_global_variables(ctx_id);
        }
        static attr_value_t list_source_files(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolInterface>(obj)->list_source_files(ctx_id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugSymbolInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t address_source(const char *ctx_id, uint64 address, uint64 size, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) const {
            return iface_->address_source(obj_, ctx_id, address, size, cb, data);
        }
        attr_value_t source_address(const char *ctx_id, const char *filename, uint32 line, uint32 column, void (*cb)(cbdata_call_t data, attr_value_t code_area), cbdata_register_t data) const {
            return iface_->source_address(obj_, ctx_id, filename, line, column, cb, data);
        }
        attr_value_t address_symbol(const char *ctx_id, uint64 address) const {
            return iface_->address_symbol(obj_, ctx_id, address);
        }
        attr_value_t stack_depth(const char *ctx_id) const {
            return iface_->stack_depth(obj_, ctx_id);
        }
        attr_value_t stack_frames(const char *ctx_id, int min, int max) const {
            return iface_->stack_frames(obj_, ctx_id, min, max);
        }
        attr_value_t local_variables(const char *ctx_id, int frame) const {
            return iface_->local_variables(obj_, ctx_id, frame);
        }
        attr_value_t local_arguments(const char *ctx_id, int frame) const {
            return iface_->local_arguments(obj_, ctx_id, frame);
        }
        attr_value_t expression_value(const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) const {
            return iface_->expression_value(obj_, ctx_id, frame, address_scope, expr);
        }
        attr_value_t expression_type(const char *ctx_id, int32 frame, uint64 address_scope, const char *expr) const {
            return iface_->expression_type(obj_, ctx_id, frame, address_scope, expr);
        }
        attr_value_t type_info(const char *ctx_id, uint64 address_scope, const char *type) const {
            return iface_->type_info(obj_, ctx_id, address_scope, type);
        }
        attr_value_t type_to_string(attr_value_t type) const {
            return iface_->type_to_string(obj_, type);
        }
        attr_value_t symbol_address(const char *ctx_id, int32 frame, const char *symbol) const {
            return iface_->symbol_address(obj_, ctx_id, frame, symbol);
        }
        attr_value_t address_string(const char *ctx_id, uint64 address, int maxlen) const {
            return iface_->address_string(obj_, ctx_id, address, maxlen);
        }
        attr_value_t lvalue_write(const char *ctx_id, int32 frame, const char *symbol, attr_value_t value) const {
            return iface_->lvalue_write(obj_, ctx_id, frame, symbol, value);
        }
        attr_value_t address_write(const char *ctx_id, uint64 address, attr_value_t value) const {
            return iface_->address_write(obj_, ctx_id, address, value);
        }
        attr_value_t address_read(const char *ctx_id, uint64 address, unsigned size) const {
            return iface_->address_read(obj_, ctx_id, address, size);
        }
        attr_value_t struct_members(const char *ctx_id, uint64 address_scope, const char *struct_name) const {
            return iface_->struct_members(obj_, ctx_id, address_scope, struct_name);
        }
        attr_value_t struct_field(const char *ctx_id, uint64 address_scope, const char *struct_name, const char *field) const {
            return iface_->struct_field(obj_, ctx_id, address_scope, struct_name, field);
        }
        attr_value_t list_functions(const char *ctx_id) const {
            return iface_->list_functions(obj_, ctx_id);
        }
        attr_value_t list_global_variables(const char *ctx_id) const {
            return iface_->list_global_variables(obj_, ctx_id);
        }
        attr_value_t list_source_files(const char *ctx_id) const {
            return iface_->list_source_files(obj_, ctx_id);
        }

        const DebugSymbolInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugSymbolInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_SYMBOL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugSymbolInterface::ctype funcs {
                FromC::address_source,
                FromC::source_address,
                FromC::address_symbol,
                FromC::stack_depth,
                FromC::stack_frames,
                FromC::local_variables,
                FromC::local_arguments,
                FromC::expression_value,
                FromC::expression_type,
                FromC::type_info,
                FromC::type_to_string,
                FromC::symbol_address,
                FromC::address_string,
                FromC::lvalue_write,
                FromC::address_write,
                FromC::address_read,
                FromC::struct_members,
                FromC::struct_field,
                FromC::list_functions,
                FromC::list_global_variables,
                FromC::list_source_files,
            };
            return &funcs;
        }
    };
};

class DebugSymbolFileInterface {
  public:
    using ctype = debug_symbol_file_interface_t;

    // Function override and implemented by user
    virtual attr_value_t open_symbol_file(const char *filename, uint64 address, bool absolute_address) = 0;
    virtual attr_value_t close_symbol_file(const char *ctx_id) = 0;
    virtual attr_value_t symbol_file_info(const char *ctx_id) = 0;
    virtual attr_value_t sections_info(const char *ctx_id) = 0;
    virtual attr_value_t segments_info(const char *ctx_id) = 0;
    virtual attr_value_t open_symbol_section(const char *filename, const char *section, uint64 address, bool absolute_address) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t open_symbol_file(conf_object_t *obj, const char *filename, uint64 address, bool absolute_address) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->open_symbol_file(filename, address, absolute_address);
        }
        static attr_value_t close_symbol_file(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->close_symbol_file(ctx_id);
        }
        static attr_value_t symbol_file_info(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->symbol_file_info(ctx_id);
        }
        static attr_value_t sections_info(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->sections_info(ctx_id);
        }
        static attr_value_t segments_info(conf_object_t *obj, const char *ctx_id) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->segments_info(ctx_id);
        }
        static attr_value_t open_symbol_section(conf_object_t *obj, const char *filename, const char *section, uint64 address, bool absolute_address) {
            return detail::get_interface<DebugSymbolFileInterface>(obj)->open_symbol_section(filename, section, address, absolute_address);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const DebugSymbolFileInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t open_symbol_file(const char *filename, uint64 address, bool absolute_address) const {
            return iface_->open_symbol_file(obj_, filename, address, absolute_address);
        }
        attr_value_t close_symbol_file(const char *ctx_id) const {
            return iface_->close_symbol_file(obj_, ctx_id);
        }
        attr_value_t symbol_file_info(const char *ctx_id) const {
            return iface_->symbol_file_info(obj_, ctx_id);
        }
        attr_value_t sections_info(const char *ctx_id) const {
            return iface_->sections_info(obj_, ctx_id);
        }
        attr_value_t segments_info(const char *ctx_id) const {
            return iface_->segments_info(obj_, ctx_id);
        }
        attr_value_t open_symbol_section(const char *filename, const char *section, uint64 address, bool absolute_address) const {
            return iface_->open_symbol_section(obj_, filename, section, address, absolute_address);
        }

        const DebugSymbolFileInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const DebugSymbolFileInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return DEBUG_SYMBOL_FILE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr DebugSymbolFileInterface::ctype funcs {
                FromC::open_symbol_file,
                FromC::close_symbol_file,
                FromC::symbol_file_info,
                FromC::sections_info,
                FromC::segments_info,
                FromC::open_symbol_section,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
