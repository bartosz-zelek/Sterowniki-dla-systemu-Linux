/*
  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;
device generic_pcie_switch_port;

import "utility.dml";
import "pci/pcie-to-pcie.dml";

parameter desc = "model of generic PCIe switch port";
parameter documentation
    = "The " + $classname + " class implements a generic PCIe switch port.\n\n"
    + "The port is hotpluggable, handles I/O, memory and prefetchable "
    + "transactions and has configurable vendor and device IDs. It does not "
    + "implement any memory or I/O BARs. It exposes PCI Express 2.0 and MSI-64 "
    + "capabilities.";

attribute is_upstream {
    parameter documentation = "Set to true for upstream port object";
    parameter configuration = "optional";
    parameter allocate_type = "bool";
}

attribute port_num {
    parameter documentation = "Port number";
    parameter configuration = "optional";
    parameter allocate_type = "uint32";
}

parameter pci_hotplug = true;
parameter forward_io = true;
parameter forward_io32 = true;
parameter forward_mem = true;
parameter forward_prefetchable = true;
parameter forward_prefetchable64 = true;

bank pci_config {
    parameter base_address_registers = ["nobar1", "nobar2"];

    register vendor_id is (no_reset) {
        parameter read_only = true;
        parameter hard_reset_value = 0x8086;
    }
    register device_id is (no_reset) {
        parameter read_only = true;
        parameter hard_reset_value = 0x0370;
    }
    register status {
        field c { parameter hard_reset_value = 1; }
    }
    register nobar1 @ 0x10 is (no_base_address_32);
    register nobar2 @ 0x14 is (no_base_address_32);


    /*
     * Capabilities
     */

    register capabilities_ptr { parameter hard_reset_value = $exp_offset; }

    /* PCI Express 2.0 */
    parameter exp_offset = 0x60;
    parameter exp_next_ptr = $msi_offset;
    is defining_pcie_capability_v2;
    register exp_capabilities {
        field dpt {
            parameter allocate = false;

            method set(value) {}
            method get() -> (value) { inline $read() -> (value); }

            method read() -> (value) {
                value = $is_upstream ? 0x5 : 0x6;
            }
        }
        field si {
            parameter allocate = false;

            method set(value) {}
            method get() -> (value) { inline $read() -> (value); }

            method read() -> (value) {
                value = $is_upstream ? 0x0 : 0x1;
            }
        }
    }
    register exp_dev_cap {
        field mpss { parameter hard_reset_value = 0x5; /* 4K */ }
    }
    register exp_slot_status {
        field pds { parameter hard_reset_value = $is_upstream ? 1 : 0; }
    }
    register exp_link_cap {
        field mls    { parameter hard_reset_value = 0x2;  /* 5.0+2.5 GT/s */ }
        field mlw    { parameter hard_reset_value = 0x20; /* x32 */ }
        field dlllar { parameter hard_reset_value = 1; }
        field lbn    { parameter hard_reset_value = 1; }
        field pn     { parameter hard_reset_value = $port_num; }
    }
    register exp_link_status {
        field ls     { parameter hard_reset_value = 0x2; }
        field nlw    { parameter hard_reset_value = 0x20; }
        field dllla  { parameter hard_reset_value = 1; }
    }
    register exp_link_control2 {
        field tls    { parameter hard_reset_value = 0x2; }
    }

    /* MSI (64-bit) */
    parameter msi_offset = 0xa0;
    parameter msi_next_ptr = 0;
    is defining_pci_msi64_capability;

    /* No extended configuration space capabilities */
    is defining_empty_pcie_extended_conf_space;
}

implement pci_express_hotplug {
    method presence_change(conf_object_t *src, int is_present) {
        log info, 2: "%s was plugged %s", SIM_object_name(src),
            is_present == 1 ? "in" : "out";
        $pci_config.exp_slot_status.pds = is_present;
    }

    method inject_power_fault() {
        log unimpl: "pci_express_hotplug::inject_power_fault";
    }

    method press_attention_button() {
        log unimpl: "pci_express_hotplug::press_attention_button";
    }

    method set_mrl_state(int locked) {
        log unimpl: "pci_express_hotplug::set_mrl_state";
    }

    method get_mrl_state() -> (int locked) {
        log unimpl: "pci_express_hotplug::get_mrl_state";
    }
}
