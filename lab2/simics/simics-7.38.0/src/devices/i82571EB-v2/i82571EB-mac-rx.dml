/*
  i82571EB-mac-rx.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

parameter RA_CNT = 16;

parameter MTA_CNT = 128;	// 128regs * 32bits = 4096 bits

bank csr {
    /* --------------------------------------------------------------
       RECEIVE REGISTERS
       -------------------------------------------------------------- */

    register psrctl  @ 0x02170 "Packet Split Receive Control";

    register radv   @ 0x0282c "Receive Interrupt Absolute Delay Timer";
    register rsrpd  @ 0x02c00 "Receive Small Packet Detect";
    register raid   @ 0x02c08 "Receive ACK Interrupt Delay";

    group rx_queue [$NUM_RECEIVE_QUEUES] {
	is rx_desc_queue;
        is ext_rx_desc_queue;
	parameter BA = 0x2800 + $i * 0x100;
	parameter rdmts  = $rctl.rdmts;
	parameter dtyp   = $rctl.dtyp;
	parameter bsize  = $rctl.bsize;
	parameter bsex   = $rctl.bsex;
	parameter flxbuf = $rctl.flxbuf;
	parameter psr_sz = $psrctl;
    }

    // This group defines the ral[0..15] and rah[0..15] registers, used to store receive MAC address
    group ra [i in 0 .. ($RA_CNT-1)] {
        is rx_mac_register;
        register low  @ 0x05400 + $i * 8 "Receive Address Low";
        register high @ 0x05404 + $i * 8 "Receive Address High";
    }

    register mrqc    @ 0x05818 "Multiple Receive Queues Command";

    event rx_delay is (intr_delay_evt) { parameter INTR = INTR_RXT0; }
    event ack_delay is (intr_delay_evt) { parameter INTR = INTR_ACK; }

    register rctl {
        is rx_buffer_ctrl;
	// reserved[0]
        field en[1]     is (read_write) "Receiver Enable";
        field sbp[2]    is (read_write) "Store Bad Packets";
        field upe[3]    is (read_write) "Unicast Promiscuous Enabled";
        field mpe[4]    is (read_write) "Multicast Promiscuous Enabled";
        field lpe[5]    is (read_write) "Long Packet Reception Enabled";
	field lbm[7:6]  is (unimplemented) "Loopback Mode";
	// rdmts and dtyp are defined in rx_buffer_ctrl
        field mo[13:12] is (read_write) "Multicast Offset";
	// reserved[14]
        field bam[15]   is (read_write) "Broadcast Accept Mode";
	// bsize defined in rx_buffer_ctrl
	field vfe[18]   is (read_write) "VLAN Filter Enable";
	field cfien[19] is (read_write) "Canonical Form Indicator Enable";
	field cfi[20]   is (read_write) "Canonical Form Indicator Bit Value";
	// reserved[21]
	field dpf[22]   is (unimplemented) "Discard Pause Frames";
        field pmcf[23]  is (unimplemented) "Pass MAC Control Frame";
	// reserved[24]
	// bsex[25] defined in rx_buffer_ctrl
        field secrc[26] is (read_write) "Strip Ethernet CRC from incoming Packet";
	// flxbuf[30:27] defined in rx_buffer_ctrl
	// reserved[31]
    }
    register psrctl is (write_mask) {
        parameter mask = 0x7F7F7F7F;
        parameter hard_reset_value = 0x00040402;
    }
    register radv  is (unimplemented);
    register rsrpd is (write_mask) { parameter mask = 0x00000FFF; }
    register raid  is (write_mask) { parameter mask = 0x0000FFFF; }
    register rssir is (write_1_clears);
    register rxcsum {
        field pcss[7:0]  is (read_write) "Packet Checksum Start";
        field ipofld[8]  is (read_write) "IP Checksum Off-load Enable";
        field tuofld[9]  is (read_write) "TCP/UDP Checksum Off-load Enable";

        /* PCSD is actually not present in i82571EB, but the generic Rx
           code wants it. By defining it here, we can avoid having yet another
           configuration parameter. */
        field pcsd[13]   is (unmapped) "Packet Checksum Disable" {
            parameter hard_reset_value = 0;
        }
	// reserved[31:10]
    }

    register rfctl {
        field iscsi_dis[0]   is (read_write) "iSCSI Disable";
        field iscsi_dwc[5:1] is (read_write) "iSCSI Dword Count";
        field nfsw_dis[6]    is (read_write) "NFS Write Disable";
        field nfsr_dis[7]    is (read_write) "NFS Read Disable";
        field nfs_ver[9:8]   is (read_write) "NFS Version";
	field ipv6_dis[10]   is (unimplemented) "IPv6 Disable";
	field ipv6xsum_dis[11] is (unimplemented) "IPv6 Xsum Disable";
        field ackdis[12]     is (read_write) "ACK Accelerate Disable";
        field ackd_dis[13]   is (read_write) "ACK Data Disable";
        field ipfrsp_dis[14] is (read_write) "IP Fragment Split Disable";
        field exsten[15]     is (read_write) "Extended Status Enable";
	// reserved[31:16]
    }

    register reta[$RETA_CNT] {
        /* The 'unmapped' is there only to avoid having yet another
           configuration parameter for the RSS CPU selection. */
        field cpu_idx [7:5] is (unmapped) "CPU index";
        field qidx[4:0] is (read_write) "Queue Index";
    }

    register mrqc {
        field mrqe[1:0] is (read_write) "Multiple Receive Queues Enable" {
            method write(value) {
                if ($rctl.en == 1) {
                    log "spec_violation", 1:
                    "can't modify %s's value when Receiver is enabled", $name;
                    return;
                }
                if ($this != value && value > 1) {
                    log "spec_violation", 1: "value %d for %s is reserved, %s",
                        value, $name, "adjusted to 0b00";
                    value = 0;
                }
                $this = value;
            }
        }
	field rssie[2] is (unimplemented);
	// reserved[15:3]
        field rssfe[21:16] is (read_write) "RSS Field Enable";
    }
}

template rx_buffer_ctrl {
    field rdmts[9:8] is (read_write)
        "Receive Descriptor Minimum Threshold Size";
    field dtyp[11:10]   is (read_write) "Descriptor Type";
    field bsize[17:16]  is (read_write) "Receive Buffer Size";
    field bsex[25]      is (read_write) "Buffer Size Extension";
    field flxbuf[30:27] is (read_write) "Flexible buffer Size";
}

template flow_ctl_register {
    // reserved[2:0]
    field rt[15:3] is (unimplemented) "Receive Threshold Value";
    // reserved[30:16]
    field b31[31] is (unimplemented) "XON Enable";
}
