/*
  IEEE 802.3 PHY functionality

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

/* This file requires a method loopback_mode() to be present, and it requires
   that $link.post_init is called from post_init().  In return, it defines
   attributes, interfaces etc. for an IEEE 802.3 PHY. It also defines the
   method link_is_up(), telling whether a link endpoint is connected. */

dml 1.4;
bitorder le;

import "utility.dml";
import "simics/devs/ethernet.dml";
import "simics/devs/ieee_802_3.dml";
import "simics/devs/signal.dml";

typedef struct {
    buffer_t frame;
    bool replace_crc;
} loopback_event_data_t;

attribute other_end_connected is bool_attr;

connect link is post_init {
    param documentation = "The Ethernet link that the PHY is connected to"
        + " or Nil if the PHY is disconnected.";
    interface ethernet_common {
        param required = true;
    }
    interface ethernet_cable {
        param required = false;
    }

    method link_is_up() -> (bool) {
        return ethernet_cable.val ? other_end_connected.val : link.obj != NULL;
    }

    /* Call link_status_changed in the mac as a side-effect of attribute
       writes, or, in the case of cable connection, when the other end is
       connected, but only if:
       - the link actually connected/disconnected
       - we are not doing reverse execution or checkpoint restore
       In addition, the call is delayed until post_init on object creation. */
    method status_changed() {
        local bool up = link_is_up();
        mac.link_status_changed(
            address.val, up ? IEEE_link_up : IEEE_link_unconnected);
        link_led.set_link(up);
    }

    session conf_object_t *old_obj;
    method set(conf_object_t *obj) {
        old_obj = this.obj;
        if (SIM_object_is_configured(dev.obj)
            && !SIM_is_restoring_state(dev.obj)) {
            if (ethernet_cable.val) {
                other_end_connected.val = false;
                ethernet_cable.link_status(false);
            }
        }
        default(obj);
        if (SIM_object_is_configured(dev.obj)
            && !SIM_is_restoring_state(dev.obj)) {
            if (obj)
                link_connected();
            else
                status_changed();
        }
    }
    method post_init() {
        if (!SIM_is_restoring_state(dev.obj)) {
            SIM_require_object(mac.obj);
            if (this.obj == NULL)
                status_changed();
            else
                link_connected();
        }
    }

    method link_connected() {
        if (ethernet_cable.val)
            ethernet_cable.link_status(true);
        else if (old_obj == NULL)
            status_changed();
    }

    method cable_other_end_changed(bool link_up) {
        if (link_up != other_end_connected.val) {
            log info, 2:
                "device on the other end of the Ethernet cable is now %s",
                link_up ? "connected" : "disconnected";
            other_end_connected.val = link_up;
            status_changed();
            // acknowledge the other end of the connection
            if (link_up) {
                assert this.obj;
                ethernet_cable.link_status(true);
            }
        }
    }
}

implement ethernet_cable {
    method link_status(bool link_up) {
        link.cable_other_end_changed(link_up);
    }
}

connect mac {
    param documentation
        = "Media access controller (MAC) object";
    param configuration = "required";
    interface ieee_802_3_mac_v3 {
        param required = false;
    }
    interface ieee_802_3_mac {
        param required = false;
    }
    method receive_frame(int address, const frags_t *frame, int crc_ok) {
        if (ieee_802_3_mac_v3.val) {
            ieee_802_3_mac_v3.receive_frame(address, frame, crc_ok);
        } else {
            assert ieee_802_3_mac.val;
            local dbuffer_t *db = new_dbuffer();
            dbuffer_append_external_data(db, frags_extract_alloc(frame),
                                         frags_len(frame), true);
            ieee_802_3_mac.receive_frame(address, db, crc_ok);
            dbuffer_free(db);
        }
    }

    method tx_bandwidth_available(int address) {
        if (ieee_802_3_mac_v3.val) {
            ieee_802_3_mac_v3.tx_bandwidth_available(address);
        } else {
            assert ieee_802_3_mac.val;
            ieee_802_3_mac.tx_bandwidth_available(address);
        }
    }
    method link_status_changed(int address, ieee_802_3_link_status_t status) {
        if (ieee_802_3_mac_v3.val) {
            ieee_802_3_mac_v3.link_status_changed(address, status);
        } else {
            assert ieee_802_3_mac.val;
            ieee_802_3_mac.link_status_changed(address, status);
        }
    }
    method validate(conf_object_t *obj) -> (bool) {
        return SIM_c_get_port_interface(obj, ieee_802_3_mac_v3.name, port)
            != NULL
            || SIM_c_get_port_interface(obj, ieee_802_3_mac.name, port)
            != NULL;
    }
}

template out_pin is connect {
    interface signal;
    session bool state;
    method set_state(bool state) {
        // caller must keep track of signal raise/lower state
        if (obj)
            if (state)
                signal.signal_raise();
            else
                signal.signal_lower();
        this.state = state;
    }
    method set(conf_object_t *obj) {
        // disconnect
        if (obj && state)
            signal.signal_lower();
        default(obj);
        // hotplug
        if (obj && state && SIM_object_is_configured(dev.obj)
            && !SIM_is_restoring_state(dev.obj))
            signal.signal_raise();
    }
}

connect link_led is (out_pin) {
    param documentation = "An object that"
        + " will get a high signal when the link status is up.";
    method set_link(bool state) {
        // Check the state before modifying the signal
        if (this.state != state){
            set_state(state);
        }
    }
}

template flash_led {
    event off is simple_time_event {
        method event() {
            set_state(false);
        }
    }
    method light_for(double duration) {
        // Turn on the LED and turn it off again after 'duration' seconds. If
        // it was already on, keep it on and turn it off after the duration.
        // The off time replaces any previous off time.

        // Use posted state of $off event to determine previous state 
        if (off.posted()) {
            off.remove();
            // Toggle the false state, so that we have the "correct" number of
            // flanks even if we exaggerate the length of the pulses.
            set_state(false);
            set_state(true);
        } else {
            set_state(true);
        }
        off.post(duration);
    }
}

connect tx_led is (out_pin, flash_led);
connect rx_led is (out_pin, flash_led);

attribute address is uint64_attr {
    param documentation
        = "PHY identifier sent in calls to ieee_802_3_mac interface methods.";
}

attribute tx_next_time is double_attr {
    param desc = "The earliest time at which that the network interface"
        + " may send another packet. Used for transmit bandwidth limitation.";
}

attribute tx_bandwidth is uint64_attr {
    param documentation
        = "The transmit bandwidth of the network interface in bits per"
        + " second. The network interface will limit the rate at which it"
        + " sends packets to remain below this bandwidth. Set to 0 for"
        + " unlimited bandwidth.";

    method frame_sent(const frags_t *frame) -> (double) {
        local double now = SIM_time(dev.obj);
        assert now >= tx_next_time.val;
        local double delay = frags_len(frame) * 8.0 / this.val;
        if (this.val != 0) {
            tx_next_time.val = now + delay;
        }
        return delay;
    }
}

attribute loopback_delay is double_attr {
    param documentation
        = "The time in seconds for sending back a frame when in loopback mode";
}

method check_tx_bandwidth() -> (bool) {
    local double time_left
        = tx_bandwidth.val == 0 ? 0.0 : tx_next_time.val - SIM_time(dev.obj);
    local bool ok = time_left <= 0;
    if (!ok) {
        announce_bandwidth_available.repost(time_left);
    }
    return ok;
}

method send_packet(const frags_t *frame, bool replace_crc) {
    if (link.obj) {
        log info, 3: "sending packet (%zd bytes)", frags_len(frame);
        link.ethernet_common.frame(
            frame, replace_crc ? Eth_Frame_CRC_Match : Eth_Frame_CRC_Unknown);
    } else {
        session bool warned = false;
        if (warned) {
            log info:
                "dropping packet - not connected to any link (will not warn again)";
            warned = true;
        }
    }
}

implement ieee_802_3_phy_v3 {
    method send_frame(const frags_t *frame, int replace_crc) -> (int) {
        local int result;
        local bool ok = dev.check_tx_bandwidth();
        if (!ok) {
            return -1;
        }
        local bool loopback = loopback_mode();
        if (loopback) {
            loopback_frame.launch(loopback_delay.val, frame,
                                        replace_crc != 0);
        } else {
            send_packet(frame, replace_crc != 0);
        }
        local double delay = tx_bandwidth.frame_sent(frame);
        // Instead of using the delay, just make it light up for 0.1 seconds so
        // it can be seen
        tx_led.light_for(0.1);
        return result;
    }
    method check_tx_bandwidth() -> (int) {
        local bool ok = dev.check_tx_bandwidth();
        return ok ? 1 : 0;
    }
}

implement ieee_802_3_phy_v2 {
    method send_frame(dbuffer_t *buf, int replace_crc) -> (int) {
        local frags_t f;
        frags_init_add(&f, dbuffer_read_all(buf), dbuffer_len(buf));
        return ieee_802_3_phy_v3.send_frame(&f, replace_crc);
    }
    method check_tx_bandwidth() -> (int) {
        return ieee_802_3_phy_v3.check_tx_bandwidth();
    }
    method add_mac(byte_string_t mac) {}
    method del_mac(byte_string_t mac) {}
    method add_mac_mask(byte_string_t mac, byte_string_t mask) {}
    method del_mac_mask(byte_string_t mac, byte_string_t mask) {}
    method set_promiscous_mode(int enable) {}
}

// legacy
implement ieee_802_3_phy {
    method send_frame(dbuffer_t *buf, int replace_crc) -> (int) {
        local frags_t f;
        frags_init_add(&f, dbuffer_read_all(buf), dbuffer_len(buf));
        return ieee_802_3_phy_v3.send_frame(&f, replace_crc);
    }
    method check_tx_bandwidth() -> (int) {
        return ieee_802_3_phy_v3.check_tx_bandwidth();
    }
    method add_mac(const uint8 *mac) {}
    method del_mac(const uint8 *mac) {}
    method add_mac_mask(const uint8 *mac, const uint8 *mask) {}
    method del_mac_mask(const uint8 *mac, const uint8 *mask) {}
    method set_promiscous_mode(int enable) {}
}

implement ethernet_common {
    method frame(const frags_t *frame, eth_frame_crc_status_t crc_status) {
        rx_led.light_for(0.1);
        local int32 crc_ok;
        if (crc_status == Eth_Frame_CRC_Match) {
            crc_ok = 1;
        } else if (crc_status == Eth_Frame_CRC_Mismatch) {
            crc_ok = 0;
        } else {
            log error: "%s.frame(): Invalid crc_status: %d",
                qname, crc_status;
            return;
        }
        log info, 3: "receiving packet (%zd bytes)", frags_len(frame);
        mac.receive_frame(address.val, frame, crc_ok);
    }
}

event announce_bandwidth_available is simple_time_event {
    method repost(double seconds) {
        remove();
        post(seconds);
    }
    method event() {
        mac.tx_bandwidth_available(address.val);
    }
}

event loopback_frame is custom_time_event {

    method launch(double delay, const frags_t *buf, bool replace_crc) {
        local loopback_event_data_t *data = new loopback_event_data_t;
        data->frame.data = frags_extract_alloc(buf);
        data->frame.len = frags_len(buf);
        data->replace_crc = replace_crc;
        post(delay, data);
    }

    method event(void *data_void) {
        local loopback_event_data_t *data = data_void;
        local frags_t frame;
        frags_init_add(&frame, data->frame.data, data->frame.len);
        log info, 4: "receiving frame in loopback mode";
        mac.receive_frame(address.val, &frame,
                          data->replace_crc ? 1 : 0);
        destroy(data);
    }

    method get_event_info(void *data) -> (attr_value_t) {
        local loopback_event_data_t *event = data;
        return SIM_make_attr_list(
            2, SIM_make_attr_data(event->frame.len, event->frame.data),
            SIM_make_attr_boolean(event->replace_crc));
    }

    method set_event_info(attr_value_t value) -> (void *) {
        local loopback_event_data_t *data = new loopback_event_data_t;
        local attr_value_t frame = SIM_attr_list_item(value, 0);
        data->frame.len = SIM_attr_data_size(frame);
        data->frame.data = new uint8[data->frame.len];
        memcpy(data->frame.data, SIM_attr_data(frame), data->frame.len);
        data->replace_crc = SIM_attr_boolean(SIM_attr_list_item(value, 1));
        return data;
    }

    method destroy(void *data) {
        local loopback_event_data_t *event = data;
        delete event->frame.data;
        delete event;
    }
}

method link_is_up() -> (bool) {
    return link.link_is_up();
}

method init() {
    loopback_delay.val = 0.00000001;
    tx_bandwidth.val = 100000000;
}
