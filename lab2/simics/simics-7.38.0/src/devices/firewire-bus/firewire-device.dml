/*
  firewire-device.dml - Common firewire device code

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;
bitorder be;
import "firewire-common.dml";

parameter firewire_phy default undefined;

implement firewire_device {
    method transfer(dbuffer_t *packet, int crc_calculated)
        -> (firewire_ack_code_t ack) {
        ack = Firewire_Ack_No_Ack;
        if (is_fw_packet_potentially_valid(packet) == 0) {
            log error: "invalid packet received";
            return;
        }
        if (is_fw_packet_phy(packet) != 0) {
            call $firewire_phy.handle_phy_packet(packet);
            ack = Firewire_Ack_No_Ack;
            return;
        }
        call $firewire_handle_packet(packet, crc_calculated) -> (ack);
    }

    method reset(uint16 new_id, uint8 root_id, uint32_array_t self_ids) {
        call $firewire_phy.bus_reset(new_id, root_id);
        call $firewire_handle_bus_reset(new_id, root_id, self_ids);
    }

    method get_self_id_template -> (uint32 self_id) {
        call $firewire_phy.get_self_id_template -> (self_id);
    }

    method get_rhb -> (int rhb) {
        call $firewire_phy.get_rhb -> (rhb);
    }
    method get_port_count -> (uint8 count) {
        call $firewire_phy.get_port_count -> (count);
    }
    method get_port_mask -> (uint16 mask) {
        call $firewire_phy.get_port_mask -> (mask);
    }
}

connect firewire_bus {
    parameter config_registers_bank default $firewire_config_registers;

    /*
     * Methods you can call on the firewire_bus
     */
    method transfer(dbuffer_t *pkt)
        -> (firewire_ack_code_t ack) {
        if ($obj != NULL)
            ack = $firewire_bus.transfer($dev.obj, pkt, 0);
    }

    method transfer_after_delay(delay, dbuffer_t *packet) {
        inline $firewire_delayed_transfer_event.post(delay, cast(packet,
                                                                 void *));
    }

    method reset {
        if ($obj != NULL)
            $firewire_bus.reset();
    }

    method unregister_all_channels {
        if ($obj == NULL) return;
        log info, 4: "unregistering for all channels";
        local int i;
        for (i = 0; i < 64; i++) {
            $firewire_bus.unregister_channel($dev.obj, i);
        }
    }

    method register_channel(uint6 c) {
        if ($obj == NULL) return;
        log info, 4: "registering for channel %d", c;
        $firewire_bus.register_channel($dev.obj, c);
    }

    /*
     * Here are the internal parts of the connect 
     */
    parameter configuration = "optional";
    interface firewire_bus {
        parameter required = true;
    }

    method validate(conf_object_t *obj) -> (bool valid) {
        if ($obj != NULL) {
            $firewire_bus.disconnect_device($dev.obj);
        }
        valid = true;
    }

    method after_set {
        if ($obj == NULL) return;
        $firewire_bus.connect_device($dev.obj);
        inline $update_bus_id;
        call $update_channel_registrations;
    }

    method update_bus_id {
        if ($obj != NULL)
            $firewire_bus.set_device_bus_id(
                $dev.obj, $config_registers_bank.node_ids.bus_id << 6);
    }
}

method update_channel_registrations default {
    /*
      Implement this method in your firewire device to update your channel
       registrations after the firewire_bus is set.
    */
}

method firewire_handle_phy_packet(dbuffer_t *packet) default {
    /*
      This is called after the PHY has handled the packet. Add any needed
      custom handling here.
     */
}

method firewire_handle_packet(dbuffer_t *packet, int crc_calculated)
    -> (firewire_ack_code_t ack) default {
    /*
      This is called to handle all packets except PHY packets. Add any needed
      custom handling here.
     */
}

method firewire_handle_bus_reset(uint16 new_id, uint8 root_id,
                                 uint32_array_t self_ids) default {
    /*
      Implement this to add what ever bus reset behavior you need.
     */
}

event firewire_delayed_transfer_event {
    parameter timebase = "seconds";

    method event(void *packet) {
        local dbuffer_t *buf = cast(packet, dbuffer_t *);
        local firewire_ack_code_t ack;
        log info, 2: "sending packet";
        call $firewire_bus.transfer(buf) -> (ack);
        dbuffer_free(buf);
    }

    method get_event_info(void *data) -> (attr_value_t info) {
        local dbuffer_t *buf = cast(data, dbuffer_t *);
        info = SIM_make_attr_data(dbuffer_len(buf), dbuffer_read_all(buf));
    }

    method set_event_info(attr_value_t info) -> (void *data) {
        local dbuffer_t *buf = new_dbuffer();
        local int size = SIM_attr_data_size(info);
        local uint8 *dest = dbuffer_append(buf, size);
        memcpy(dest, SIM_attr_data(info), size);
        data = cast(buf, void *);
    }

    method destroy(void *packet) {
        local dbuffer_t *buf = cast(packet, dbuffer_t *);
        dbuffer_free(buf);
    }
}

template register_read_alias {
    parameter real_register default undefined;
    parameter allocate = false;
    parameter configuration = "none";

    method read_access(generic_transaction_t *memop, msb1, lsb) -> (value) {
        inline $real_register.read_access(memop, msb1, lsb) -> (value);
    }
}

template set_register {
    is register_read_alias;

    method write_access(generic_transaction_t *memop, msb1, lsb, value) {
        local uint32 current;
        inline $real_register.get() -> (current);
        inline $real_register.write_access(memop, msb1, lsb, current | value);
    }
}

template clear_register {
    is register_read_alias;

    method write_access(generic_transaction_t *memop, msb1, lsb, value) {
        local uint32 current;
        inline $real_register.get() -> (current);
        inline $real_register.write_access(memop, msb1, lsb, current & ~value);
    }
}

/*
 * Define the minimal set of registers for a transaction capable node.
 */
template firewire_config_registers {
    parameter register_size = 4;
    parameter byte_order = "big-endian";
    parameter offset = 0xfffff0000000;
    parameter size = 0x400;

    /*
     * Implemented by all firewire nodes
     */
    register state_clear @ 0x0 is (clear_register) {
        parameter real_register = $state;
    }

    register state_set @ 0x4 is (set_register) {
        parameter real_register = $state;
    }

    register state @ undefined {
        parameter hard_reset_value = 0x00000080;
        field gone[16];
        field lost[24];
        field state[30:31] is (read_only);
    }

    register node_ids @ 0x8 {
        parameter hard_reset_value = 0xffc00000;
        field bus_id[0:9];
        field offset_id[10:15] is (read_only);

        method get_node_id -> (uint16 id) {
            id = ($bus_id << 6) | $offset_id;
        }

        method after_hard_reset {
            inline $firewire_bus.update_bus_id;
        }

        method after_write(mop) {
            inline $firewire_bus.update_bus_id;
        }

        method after_set {
            inline $firewire_bus.update_bus_id;
        }
    }

    register reset_start @ 0xc {
        field nt[31] is (read_zero);
        method after_write(mop) {
            call $command_reset;
        }
    }

    /*
     * Implemented by all transaction capable nodes
     */
    register split_timeout_hi @ 0x18 {
        field secs[29:31];
    }

    register split_timeout_lo @ 0x1c {
        field cycles[0:12] {
            parameter hard_reset_value = 800;
        }
    }

    register fairness_budget @ 0x218 {
        field pri_max[19:24] is (read_only) {
            parameter hard_reset_value = 0x0;
        }
        field pri_req[26:31];
    }
}

template PHY_1394a {
    parameter register_size = 1;

    parameter link_power_status default undefined;
    parameter port_count default 2;

    register Reg0 @ 0 {
        field phys_id[0:5];
        field r[6];
        field ps[7] is (unimplemented);
    }
    register Reg1 @ 1 {
        parameter hard_reset_value = 0x3f;
        field rhb[0] is (unimplemented);
        field ibr[1];
        field gap_count[2:7];
        method after_write(mop) {
            if ($ibr == 1) {
                call $firewire_bus.reset;
                $ibr = 0;
            }
        }
    }
    register Reg2 @ 2 {
        field extended[0:2] is (read_only) {
            parameter hard_reset_value = 0x7;
        }
        field total_ports[4:7] is (unimplemented);
    }
    register Reg3 @ 3 {
        field max_speed[0:2] is (read_only);
        field repeater_delay[4:7] is (read_only);
    }
    register Reg4 @ 4 {
        parameter hard_reset_value = 0xc0;
        field link_active[0];
        field contend[1];
        field delay_jitter[2:4] is (ignore_write);
        field pwr[5:7];
    }
    register Reg5 @ 5 {
        field resume_interrupt[0] is (unimplemented);
        field isbr[1];
        field loop[2] is (write_1_clears);
        field power_fail[3] is (write_1_clears);
        field timeout[4] is (write_1_clears);
        field port_event[5] is (unimplemented);
        field enable_accel[6] is (unimplemented);
        field enable_multi[7] is (unimplemented);
        method after_write(mop) {
            if ($isbr == 1) {
                call $firewire_bus.reset;
                $isbr = 0;
            }
        }
    }
    /* 6 is reserved */
    register Reg7 @ 7 {
        field page_select[0:2] is (unimplemented);
        field port_select[4:7];
        method after_write(mop) {
            if ($port_select >= $port_count) {
                log info: "PHY port_select value out of range";
            }
        }
    }

    register PortReg0 @ 8 {
        parameter configuration = "none";
        method read -> (val) {
            if ($Reg7.port_select < $port_count) {
                local uint64 val64;
                inline $Ports[$Reg7.port_select].Reg0.read_locally -> (val64);
                val = val64;
            } else {
                val = 0;
            }
        }
        method write(val) {
            if ($Reg7.port_select < $port_count)
                inline $Ports[$Reg7.port_select].Reg0.write_locally(val);
        }
    }

    register PortReg1 @ 9 {
        parameter configuration = "none";
        method read -> (val) {
            if ($Reg7.port_select < $port_count) {
                local uint64 val64;
                inline $Ports[$Reg7.port_select].Reg1.read_locally -> (val64);
                val = val64;
            } else {
                val = 0;
            }
        }
        method write(val) {
            if ($Reg7.port_select < $port_count)
                inline $Ports[$Reg7.port_select].Reg1.write_locally(val);
        }
    }

    group Ports[$port_count] {
        register Reg0 @ undefined is (locally_accessible_register) {
            field astat[0:1] is (unimplemented);
            field bstat[2:3] is (unimplemented);
            field child[4] is (unimplemented);
            field con[5] is (unimplemented);
            field bias[6] is (unimplemented);
            field disabled[7] {
                method write(val) {
                    local bool changed = $this != val;
                    $this = val;
                    call $firewire_bus.reset;
                }
            }
        }
        register Reg1 @ undefined is (locally_accessible_register) {
            field negotiated_speed[0:2] is (unimplemented);
            field interrupt_enable[3] is (unimplemented);
            field fault[4] is (unimplemented);
        }
    }

    /*
      The PHY bank takes responsibility for a lot of low level firewire
      protocol handling.
      */
    method bus_reset(uint16 new_id, uint8 root_id) {
        $Reg0.phys_id = new_id & 0x3f;
        $Reg0.r = cast(root_id == $Reg0.phys_id, uint1);
    }
    method handle_phy_packet(dbuffer_t *packet) {
        log info, 3: "handling PHY packet";
        local uint32 q = fw_extract_quadlet(packet, 0);
        switch (q[0:1]) {
        case 0: { /* PHY configuration packet */
            local uint1 r = q[8];
            local uint1 t = q[9];
            local uint6 pkt_id = q[2:7];
            local uint6 my_id = $Reg0.phys_id;
            if ((r == 0) && (t == 0)) {
                log unimpl: "extended PHY packets not implemented";
            }
            if (r == 1) {
                if (pkt_id == my_id) {
                    log info, 3: "setting root-holdoff bit";
                    $PHY.Reg1.rhb = 1;
                } else {
                    log info, 3: "clearing root-holdoff bit";
                    $PHY.Reg1.rhb = 0;
                }
            }
            if (t == 1) {
                $PHY.Reg1.gap_count = q[10:15];
                log info: "changed gap count to 0x%x", $PHY.Reg1.gap_count;
            }
            break;
        }
        case 1: /* Link-On packet */
            log unimpl: "Link-On packets not implemented";
            break;
        case 2: /* Self-ID packet */
            log info: "ignoring Self-ID packet outside bus configuration";
            break;
        default:
            log info: "unknown PHY packet";
        }
        call $firewire_handle_phy_packet(packet);
    }
    method get_self_id_template -> (uint32 self_id) {
        self_id = 0;
        self_id[9] = $Reg4.link_active & $link_power_status;
        self_id[10:15] = $Reg1.gap_count;
        self_id[20] = $Reg4.contend;
        self_id[21:23] = $Reg4.pwr;
    }
    method get_rhb -> (int rhb) {
        rhb = $Reg1.rhb;
    }
    method get_port_count -> (uint8 count) {
        count = $port_count;
    }
    method get_port_mask -> (uint16 mask) {
        mask = 0;
        local uint8 i;
        for (i = 0; i < $port_count; i++) {
            mask |= (~$Ports[i].Reg0.disabled) << i;
        }
    }
}

/*
 * A template for banks you want to be able to read and write from locally, ie
 * from this device.
 */
template locally_accessible_bank {
    method read_locally(offset, size) -> (success, value) {
        local generic_transaction_t mop;
        memset(&mop, 0, sizeof(mop));
        SIM_set_mem_op_type(&mop, Sim_Trans_Load);
        call $read_access(&mop, offset, size) -> (success, value);
    }
    method write_locally(offset, size, value) -> (success) {
        local generic_transaction_t mop;
        memset(&mop, 0, sizeof(mop));
        SIM_set_mem_op_type(&mop, Sim_Trans_Store);
        call $write_access(&mop, offset, size, value) -> (success);
    }
}

/*
 * Likewise for registers we want to access locally.
 */
template locally_accessible_register {
    method read_locally -> (value) {
        local generic_transaction_t mop;
        memset(&mop, 0, sizeof(mop));
        SIM_set_mem_op_type(&mop, Sim_Trans_Load);
        inline $read_access(&mop, undefined, undefined) -> (value);
    }
    method write_locally(value) {
        local generic_transaction_t mop;
        memset(&mop, 0, sizeof(mop));
        SIM_set_mem_op_type(&mop, Sim_Trans_Store);
        inline $write_access(&mop, undefined, undefined, value);
    }
}

