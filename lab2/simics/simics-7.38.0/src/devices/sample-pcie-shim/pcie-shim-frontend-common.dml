/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

//:: pre doc {{
dml 1.4;

import "utility.dml";
import "pcie/common.dml";

template pcie_shim_frontend_base {
    is pcie_device;
    is pcie_hot_reset;

    /* Propagate Hot Reset to RTL */
    implement pcie_device {
        method hot_reset() {
            downstream_shim.pcie_port_control.hot_reset();
            default();
        }
    }

    connect downstream_shim {
        param documentation = "Device receiving all downstream PCIe transactions"
            + " and is responsible for converting them to the emulator API";
        param configuration = "required";

        /* CFG, MEM, IO, MSG transactions */
        is map_target;

        /* Hot-Reset, set_secondary_bus_number */
        interface pcie_port_control;
    }

    bank pcie_config is physical_config_bank {
        method transaction_access(transaction_t *t, uint64 offset,
                                void *aux) -> (exception_type_t) {
            local pcie_type_t type = ATOM_get_transaction_pcie_type(t);

            log info, 3: "(%s) Incoming %stransaction: type (%s), %s addr=0x%llx, size=%lld",
                            this.qname,
                            SIM_transaction_is_inquiry(t) ? "*inquiry* " : "",
                            pcie_type_name(type),
                            SIM_transaction_is_read(t) ? "read" : "write",
                            offset,
                            SIM_transaction_size(t);
        
            if (SIM_transaction_is_inquiry(t))
                return default(t, offset, aux);

            if (type == PCIE_Type_Msg) {
                // The top 16 bits of the downstream address
                // is the device ID.  Not how real PCIe does it.
                if (ATOM_get_transaction_pcie_msg_route(t) == PCIE_Msg_Route_ID)
                    return downstream_shim.transaction.issue(t, get_device_id() << 48);
                else
                    return downstream_shim.transaction.issue(t, 0);
            }

            if (SIM_transaction_is_write(t))
                default(t, offset, aux);

            local exception_type_t ret =
                downstream_shim.transaction.issue(t, offset);

            return ret;
        }
    }
}

template pcie_shim_64_bit_bar is (memory_base_address_64) {
    param map_obj = downstream_shim.obj;
    method get_map_info() -> (map_info_t) {
        local map_info_t nfo = default();
        nfo.start = nfo.base;
        return nfo;
    }
}

template pcie_port_shim_frontend is pcie_shim_frontend_base {
    bank pcie_config is type_1_bank;

    is pcie_device;
    is pcie_translator;

    // Upstream, back towards the port or switch that this port is connected to
    group txl_target {
        /* Forward all received upstream transaction further upstream */
        param mem = upstream_target.map_target;
        param msg = mem;
    }

    connect upstream_target is upstream_target;

    bank pcie_config {
        register secondary_bus_number {
            method pcie_write(uint64 value) {
                this.val = value;
                cfg.update_map();
                msg.update_map();
            }
        }
        register subordinate_bus_number {
            method pcie_write(uint64 value) {
                this.val = value;
                cfg.update_map();
                msg.update_map();
            }
        }
        register bridge_control {
            field sbr {
                /* In Simics a hot-reset is triggered here.
                * Now with an emulator it is the emulators responsibility
                * to trigger a hot reset downstream when itself receveives the write access to
                * the secondary but reset field.
                */
                method pcie_write(uint64 value) {
                    this.val = value;
                }
            }
        }
        group cfg           { param map_obj = downstream_shim.obj; }
        group io            { param map_obj = downstream_shim.obj; }
        group memory        { param map_obj = downstream_shim.obj; }
        group prefetchable  { param map_obj = downstream_shim.obj; }
        group msg           { param map_obj = downstream_shim.obj; }
        group message {
            method operation(transaction_t *t, uint64 addr) -> (bool) {
                /* This code path cannot happen */
                assert(false);
            }
        }
    }
}

template pcie_endpoint_shim_frontend is pcie_shim_frontend_base {
    is pcie_endpoint;

    /* Add port to forward upstream transactions from the real endpoint */
    port upstream {
        implement translator {
            method translate(uint64 addr, access_t access,
                            const map_target_t *default_target)
                            -> (translation_t) {
                return { .target = upstream_target.map_target, ... };
            }
        }
    }
}
// }}

