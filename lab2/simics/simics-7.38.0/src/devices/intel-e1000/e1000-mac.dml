/*
  e1000-mac.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "reset-ports.dml";

parameter ICH8_ETHERNET_LAN  default false;
parameter ICH9_ETHERNET_LAN  default false;
parameter ICH10_ETHERNET_LAN default false;
parameter I82571EB_ETHERNET_LAN default false;
parameter I82574_ETHERNET_LAN default false;
parameter I82576EB_ETHERNET_LAN default false;
parameter I82583V_ETHERNET_LAN default false;
parameter I210_ETHERNET_LAN default false;
parameter VLAN_PACKET_FILTER default false;

parameter e1000_limitations = "<ul>"
    + "<li>Flow Control is unimplemented.</li>"
    + "<li>Power Management is unimplemented.</li>"
    + "<li>Load configuration from non-volatile memory is unimplemented.</li>"
;

/* Does the device use the regular Interrupt Delay Enable
   mechanism for throttling Tx interrupts, or does it use
   the newer pacing mechanism used in e.g 82576EB?
   If you are unsure about which mechanism your device
   uses, look for a bit called "ide" in the CMD field of
   the Tx descriptor. If there is one, you are using the
   Interrupt Delay Enable mechanism.
*/
parameter INTERRUPT_DELAY_ENABLE default false;

/* Does the device use the TCP/IP Context Tx
   Descriptors? If not, take a look at the i82576EB
   code, which implements the Advanced Context
   Descriptors.
*/
parameter TCPIP_TX_CONTEXT default false;

/* How any transmit queues does the device have?
*/
parameter NUM_TRANSMIT_QUEUES default 1;

/* How any receive queues does the device have?
*/
parameter NUM_RECEIVE_QUEUES default 1;

/* Does the device have an EEPROM?
*/
parameter HAS_EEPROM default false;

/* Does the device have ACK interrupt acceleration?
 * If you are unsure, check the RFCTL register for the ACK_DIS bit.
 * If there is an ACK_DIS bit, set this option to true.
*/
parameter HAS_ACK_ACCELERATION default false;

/* Does the device have RSS (Receive Side Scaling)?
*/
parameter HAS_RSS default false;

/* Does the device have RSS CPU selection?
 * If you are unsure, check the RETA registers for a CPU index.
 * If there is one, set this option to true.
*/
parameter HAS_RSS_CPU_SELECTION default false;

/* Does the device have small packet detection?
 * If you are unsure, check for a register called RSRPD.
 * If there is one, set this option to true.
*/
parameter HAS_SMALL_PACKET_DETECTION default false;

/* Does the device have MTDq version 1 virtualization?
 * If you are unsure, check if there is one RTDR register per Rx queue.
 * If so, set this option to true.
*/
parameter HAS_MTDq1 default false;

/* Does the device have TIMESYNC support?
 * If you are unsure, check if there is a TSYNCRXCTL register.
 * If so, set this option to true.
*/
parameter HAS_TIMESYNC default false;

/* Does the device have extended interrupts?
 * If you are unsure, check if there is a EICR register.
 * If so, set this option to true.
*/
parameter HAS_EXTENDED_INTERRUPTS default false;

/* Does the device have interrupt automasking?
 * If you are unsure, check if there is a IAME bit in the CTRL_EXT register.
 * If so, set this option to true.
*/
parameter HAS_INTERRUPT_AUTOMASKING default false;

/* Does the device have interrupt cause statistics?
 * If you are unsure, check if there is a ICRXPTC register.
 * If so, set this option to true.
*/
parameter HAS_INTERRUPT_STATISTICS default false;

/* Does the device have a CEXTERR register?
 * If so, set this option to true.
*/
parameter HAS_CEXTERR_REGISTER default false;

/* Does the device have Tx interrupt delay?
 * If you are unsure, check if there is a TIDV register.
 * If so, set this option to true.
*/
parameter HAS_TX_INTERRUPT_DELAY default false;

/* Does the device have Tx arbitration counters?
 * If you are unsure, check if there is a TARC register.
 * If so, set this option to true.
*/
parameter HAS_TARC default false;

/* Does the device have Tx descriptor threshold interrupts?
 * If you are unsure, check for TXQE and TXD_LOW bits in the ICR register.
 * If so, set this option to true.
*/
parameter HAS_TX_THRESHOLD_INTERRUPTS default false;

/* Does the device have L2 Ethernet Type filters?
 * If you are unsure, check if there are ETQF registers.
 * If so, set this option to true.
*/
parameter HAS_L2_ETHTYPE_FILTERS default false;

import "e1000-mac-types.dml";
import "e1000-mac-rx.dml";
import "e1000-mac-tx.dml";
import "e1000-mac-statistics.dml";
import "e1000-mac-timesync.dml";
import "e1000-pci-common.dml";

attribute phy_address {
    parameter documentation = "Address of attached external PHY";
    parameter configuration = "required";
    parameter allocate_type = "int32";
}

connect phy {
    parameter documentation = "connects to external PHY";
    parameter configuration = "required";
    interface ieee_802_3_phy_v2;
}

connect mii {
    parameter documentation = "connect to external PHY for MDIO access";
    parameter configuration = "required";
    interface mii_management;
}

implement ieee_802_3_mac {
    method receive_frame(int phy, dbuffer_t *buf, int crc_ok) -> (int ret) {
        ret = 0;
        if (phy == $phy_address)
            inline $csr.receive_frame(buf, crc_ok);
        else
            log "info", 4: "ignores frame with incorrect phy address %d, phy_addr: %d", phy, $phy_address;
    }
    method tx_bandwidth_available(int phy) {
        call $ieee_802_3_mac_v3.tx_bandwidth_available(phy);
    }
    method link_status_changed(int phy, ieee_802_3_link_status_t status) {
        call $ieee_802_3_mac_v3.link_status_changed(phy, status);
    }
}

implement ieee_802_3_mac_v3 {
    method receive_frame(int phy, const frags_t *frame, int crc_ok) {
        local dbuffer_t *db = new_dbuffer();
        dbuffer_append_external_data(db, frags_extract_alloc(frame),
                                     frags_len(frame), true);
        local int dummy;
        call $ieee_802_3_mac.receive_frame(phy, db, crc_ok) -> (dummy);
        dbuffer_free(db);
    }

    method tx_bandwidth_available(int phy) {
        if (phy == $phy_address)
            inline $csr.tx_bandwidth_available();
    }

    method link_status_changed(int phy, ieee_802_3_link_status_t status) {
        if (phy == $phy_address) {
            $csr.status.lu = status == IEEE_link_up ? 1 : 0;
            call $csr.raise_interrupt(INTR_LSC);
        }
    }
}

method memory_read(void *dst, physical_address_t src,
                   physical_address_t length) {
    local exception_type_t e;
    call $pci_data_from_memory(Sim_Addr_Space_Memory, dst, src, length) -> (e);
    log "info", 4: "read %d bytes from 0x%x", length, src;
    if (e != Sim_PE_No_Exception) {
        log "error": "an error occurred when reading target memory(0x%x): %d",
          src, cast(e, int);
        throw;
    }
}

method memory_write(physical_address_t dst, const void *src,
                    physical_address_t length) {
    local exception_type_t e;
    call $pci_data_to_memory(Sim_Addr_Space_Memory, src, dst, length) -> (e);
    log "info", 4: "write %d bytes to 0x%x", length, dst;
    if (e != Sim_PE_No_Exception) {
        log "error": "an error occurred when writing target memory(0x%x): %d",
          dst, cast(e, int);
        throw;
    }
}

parameter NVM_CSUM = 0xbaba;
parameter EEPROM_SIZE = 64;

constant EE_STATE_IDLE = 0;
constant EE_STATE_ADDR = 1;
constant EE_STATE_READ = 2;

attribute eeprom[$EEPROM_SIZE] {
    parameter documentation = "EEPROM (for mac address)";
    parameter configuration = "optional";
    parameter allocate_type = "uint16";
}

method update_eeprom_csum() {
    local int i;
    local uint16 csum = 0;

    for (i = 0; i < $EEPROM_SIZE - 1; i++) {
        csum += $eeprom[i];
    }
    $eeprom[$EEPROM_SIZE - 1] = $NVM_CSUM - csum;
}

method update_eeprom_macaddress(int *macbytes) {
    local int i;
    for (i = 0; i < 3; i++) {
        $eeprom[i] = (macbytes[i*2 + 1]<<8) | macbytes[i*2];
    }
    call $update_eeprom_csum();
}

/* need to set word 55 in eeprom to 0xffff, otherwise
some versions of linux and vmware drivers think
there is an alternate mac address */
method update_eeprom_alt_mac() {
    $eeprom[55]=0xffff;
    call $update_eeprom_csum();
}

bank csr {
    parameter register_size = 4;
    parameter function = 0;
    parameter partial  = true;
    parameter overlapping = true;

    /*
     * General Registers
     */
    register ctrl        @ 0x00000 "Device Control";
    register status      @ 0x00008 "Device Status";
    register strap       @ 0x0000c "Strapping Option";//for ICH9/10
    register eec         @ 0x00010 "EEPROM/Flash Control";
    register eerd        @ 0x00014 "EEPROM Read";
    register ctrl_ext    @ 0x00018 "Extended Device Control";
    register fla         @ 0x0001c "Flash Access";
    register mdic        @ 0x00020 "MDI Control";

    if($VLAN_PACKET_FILTER) {
        register vet @ 0x00038 "VLAN Ether Type" {
            is write_mask;
            parameter mask = 0x0000FFFF;
        }
    }

    if($HAS_EEPROM) {
        register ee_bit_index is (unmapped);
        register ee_addr is (unmapped);
        register ee_status is (unmapped);
        register ee_op is (unmapped);
        register ee_data is (unmapped);
        register ee_state is (unmapped);

        register eec is (read_write) {
            field ee_sk   [0];
            field ee_cs   [1];
            field ee_di   [2];
            field ee_do   [3];
            field fwe     [5:4];
            field ee_req  [6];
            field ee_gnt  [7];
            field ee_pres [8] is (ignore_write) {
                parameter hard_reset_value = 1;
            }
            field auto_rd [9] is (ignore_write) {
                parameter hard_reset_value = 1;
            }
            field ee_addr_size [10];
            field ee_size [14:11];
            field nvadds  [16:15];
            field aupden  [20];
            field nvmtype [23:23] is (read_only);

            method after_write(memop) {
                /* Grant EEPROM access if requested */
                $ee_gnt = $ee_req;

                if($ee_cs == 0 && $ee_gnt == 1 && $ee_sk == 1) {
                    switch($ee_state) {
                    case EE_STATE_IDLE:
                        /* Shift in the opcode */
                        $ee_op[7-$ee_bit_index] = $ee_di;
                        $ee_bit_index++;
                        if($ee_bit_index == 8) {
                            $ee_state = EE_STATE_ADDR;
                            $ee_bit_index = 0;
                        }
                        break;
                    case EE_STATE_ADDR:
                        /* Shift in the address */
                        $ee_addr[8-$ee_bit_index] = $ee_di;
                        $ee_bit_index++;
                        if($ee_bit_index == 8) {
                            $ee_state = EE_STATE_READ;
                            $ee_bit_index = 0;
                        }
                        break;
                    case EE_STATE_READ:
                        if($ee_bit_index == 0) {
                            $ee_data[7:0] = $eeprom[$ee_addr / 2][15:8];
                            $ee_data[15:8] = $eeprom[$ee_addr / 2][7:0];
                        }
                        $ee_do = $ee_data[15-$ee_bit_index];
                        $ee_bit_index++;
                        if($ee_bit_index == 16) {
                            $ee_bit_index = 0;
                            $ee_addr += 2;
                            if($ee_addr/2 == $EEPROM_SIZE) {
                                $ee_addr = 0;
                            }
                        }
                        break;
                    }
                } else {
                    if($ee_cs == 1 || $ee_req == 0) {
                        $ee_state = EE_STATE_IDLE;
                        $ee_op = 0;
                        $ee_addr = 0;
                        $ee_bit_index = 0;
                    }
                }
            }
        }

        register eerd is (read_write) {
            field data[31:16] {
                method read() -> (val) {
                    if ($address < $EEPROM_SIZE) {
                        val = $eeprom[$address];
                    } else {
                        log "info", 2: "address %d out of eeprom range",
                            $address;
                        val = 0;
                    }
                }
            }
            field address[15:2];
            field done[1] {
                method read() -> (val) {
                    val = 1;
                }
            }
            field start[0];
        }
    } else {
        register eerd is (unimplemented);
    }

}

template register_alias {
    parameter target default undefined;
    parameter allocate = false;
    method read_access(mop, msb1, lsb) -> (val) {
        inline $target.read_access(mop, msb1, lsb) -> (val);
    }
    method write_access(mop, msb1, lsb, val) {
        inline $target.write_access(mop, msb1, lsb, val);
    }
    method get -> (val) {
        inline $target.get -> (val);
    }
    method set(val) {
        inline $target.set(val);
    }
}
