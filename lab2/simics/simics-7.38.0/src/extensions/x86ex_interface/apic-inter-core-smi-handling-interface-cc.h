// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2023 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef X86EX_INTERFACE_APIC_INTER_CORE_SMI_HANDLING_INTERFACE_CC_H
#define X86EX_INTERFACE_APIC_INTER_CORE_SMI_HANDLING_INTERFACE_CC_H

#include "apic-inter-core-smi-handling-interface.h"

#include <simics/iface/interface-info.h>
#include <simics/utility.h>  // get_interface

namespace simics {
namespace iface {

class ApicInterCoreSmiHandlingInterface {
  public:
    using ctype = apic_inter_core_smi_handling_interface_t;

    // Function override and implemented by user
    virtual int handling_needed() = 0;
    virtual void stall_cpu() = 0;
    virtual void unstall_cpu() = 0;
    virtual void trigger_post_smi_send_action(conf_object_t *target_apic) = 0;
    virtual void trigger_smi_receive_action(conf_object_t *src_apic) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int handling_needed(conf_object_t *obj) {
            return get_interface<ApicInterCoreSmiHandlingInterface>(obj)->handling_needed();
        }
        static void stall_cpu(conf_object_t *obj) {
            get_interface<ApicInterCoreSmiHandlingInterface>(obj)->stall_cpu();
        }
        static void unstall_cpu(conf_object_t *obj) {
            get_interface<ApicInterCoreSmiHandlingInterface>(obj)->unstall_cpu();
        }
        static void trigger_post_smi_send_action(conf_object_t *obj, conf_object_t *target_apic) {
            get_interface<ApicInterCoreSmiHandlingInterface>(obj)->trigger_post_smi_send_action(target_apic);
        }
        static void trigger_smi_receive_action(conf_object_t *obj, conf_object_t *src_apic) {
            get_interface<ApicInterCoreSmiHandlingInterface>(obj)->trigger_smi_receive_action(src_apic);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ApicInterCoreSmiHandlingInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int handling_needed() const {
            return iface_->handling_needed(obj_);
        }
        void stall_cpu() const {
            iface_->stall_cpu(obj_);
        }
        void unstall_cpu() const {
            iface_->unstall_cpu(obj_);
        }
        void trigger_post_smi_send_action(conf_object_t *target_apic) const {
            iface_->trigger_post_smi_send_action(obj_, target_apic);
        }
        void trigger_smi_receive_action(conf_object_t *src_apic) const {
            iface_->trigger_smi_receive_action(obj_, src_apic);
        }

        const ApicInterCoreSmiHandlingInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ApicInterCoreSmiHandlingInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return APIC_INTER_CORE_SMI_HANDLING_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ApicInterCoreSmiHandlingInterface::ctype funcs {
                FromC::handling_needed,
                FromC::stall_cpu,
                FromC::unstall_cpu,
                FromC::trigger_post_smi_send_action,
                FromC::trigger_smi_receive_action,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
