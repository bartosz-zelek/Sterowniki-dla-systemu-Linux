# Â© 2014 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.


import os
import re
import shutil
import argparse

# When Simics searches for a device info XML file, the conf-class name
# is mangled and used as XML filename. The task of this script is to
# copy DMLC-generated XML files to the path where Simics will search
# for it. This is done by extracting the classname from the XML
# filename.

def get_filename(src):
    (base, suff) = os.path.splitext(src)
    assert suff == '.xml'
    xml = base + '.xml'
    with open(xml) as f:
        f.readline()
        # We can assume that the XML is on the form generated by DMLC,
        # allowing us to parse it with a regexp
        classname = re.match(r'<device name="([^"]*)', f.readline()).group(1)
        return classname.replace('-', '_') + suff

def copy_files(dest, files):
    for src in files:
        shutil.copyfile(src, os.path.join(
            dest, get_filename(src)))

def print_dist_list(files):
    for src in files:
        print('$(HOST)/lib/%s' % os.path.basename(get_filename(src)))

def main():
    parser = argparse.ArgumentParser("process DMLC-generated XML files")
    parser.add_argument(
        'files', nargs='*', default=[], help="operate on these XML files")
    parser.add_argument(
        '--copy-to', dest='copy_to',
        help="copy files to this location")
    parser.add_argument(
        '--dist-list', dest='dist_list', action='store_true',
        help="print entries for dist.list")
    parser.add_argument(
        '--marker', dest='marker',
        help="touch this file after success")
    args = parser.parse_args()
    if args.copy_to:
        copy_files(args.copy_to, args.files)
    if args.dist_list:
        print_dist_list(args.files)
    if args.marker:
        open(args.marker, 'w').close()

if __name__ == '__main__':
    main()
