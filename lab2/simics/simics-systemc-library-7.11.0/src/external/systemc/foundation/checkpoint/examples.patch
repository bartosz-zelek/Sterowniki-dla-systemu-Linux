diff --git a/examples/tlm/common/include/at_target_1_phase.h b/examples/tlm/common/include/at_target_1_phase.h
index 00bc0be..55b1b08 100644
--- a/examples/tlm/common/include/at_target_1_phase.h
+++ b/examples/tlm/common/include/at_target_1_phase.h
@@ -64,6 +74,9 @@ class at_target_1_phase                               /// at_target_1_phase
   , const sc_core::sc_time    read_response_delay   ///< read response delay (SC_TIME, SC_NS)
   , const sc_core::sc_time    write_response_delay  ///< write response delay (SC_TIME, SC_NS)
   );
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
 
 //=====================================================================
 ///	@brief Implementation of call from Initiator. 
diff --git a/examples/tlm/common/include/lt_initiator.h b/examples/tlm/common/include/lt_initiator.h
index bed0546..c8dafe5 100644
--- a/examples/tlm/common/include/lt_initiator.h
+++ b/examples/tlm/common/include/lt_initiator.h
@@ -73,6 +83,15 @@ public:
    sc_core::sc_port<sc_core::sc_fifo_in_if  <gp_ptr> > request_in_port;  
    sc_core::sc_port<sc_core::sc_fifo_out_if <gp_ptr> > response_out_port;
 
+#if INTC_CHKPT
+   // State variables stored as part of the checkpoint
+   tlm::tlm_generic_payload *transaction_ptr;
+   sc_core::sc_time delay;
+   bool m_would_block;
+   bool m_trans_sent;
+   unsigned char m_data_buffer[4];
+#endif
+
 private:
   tlm::tlm_response_status gp_status;
   unsigned int            m_ID;                     // initiator ID
diff --git a/examples/tlm/common/include/lt_synch_target.h b/examples/tlm/common/include/lt_synch_target.h
index 8349ed8..4b2c653 100644
--- a/examples/tlm/common/include/lt_synch_target.h
+++ b/examples/tlm/common/include/lt_synch_target.h
@@ -43,6 +53,11 @@ class lt_synch_target
 // Member Methods =====================================================
 	
   public:	  
+
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //=====================================================================
 ///	@fn lt_synch_target
 ///
diff --git a/examples/tlm/common/include/lt_target.h b/examples/tlm/common/include/lt_target.h
index 943ddcc..392af4b 100644
--- a/examples/tlm/common/include/lt_target.h
+++ b/examples/tlm/common/include/lt_target.h
@@ -65,6 +75,10 @@ class lt_target
   , const sc_core::sc_time    write_response_delay  ///< write response delay (SC_TIME, SC_NS)
   );
  
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
   private:
 	    
 /// b_transport() - Blocking Transport
diff --git a/examples/tlm/common/include/lt_td_initiator.h b/examples/tlm/common/include/lt_td_initiator.h
index 1cc6c64..5b4a4f6 100644
--- a/examples/tlm/common/include/lt_td_initiator.h
+++ b/examples/tlm/common/include/lt_td_initiator.h
@@ -44,6 +54,9 @@ class lt_td_initiator                                 // lt_td_initiator
   :  public sc_core::sc_module                        // module base class 
 {
 public:
+#if INTC_CHKPT
+    struct checkpoint_access;
+#endif
 // Constructor ================================================================= 
     lt_td_initiator                                   // constructor
     ( sc_core::sc_module_name name                    // module name
@@ -76,6 +89,14 @@ public:
    
    sc_core::sc_time      m_delay;
 
+#if INTC_CHKPT
+   // State variables stored as part of the checkpoint
+   tlm::tlm_generic_payload *transaction_ptr;
+   bool m_would_block;
+   bool m_trans_sent;
+   unsigned char m_data_buffer[4];
+#endif
+
 private:
   tlm::tlm_response_status gp_status;
   unsigned int            m_ID;                     // initiator ID
diff --git a/examples/tlm/common/include/memory.h b/examples/tlm/common/include/memory.h
index 3642329..ab8b514 100644
--- a/examples/tlm/common/include/memory.h
+++ b/examples/tlm/common/include/memory.h
@@ -39,6 +49,10 @@ class memory
   
   public:
     
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //=====================================================================
 /// @fn memory.h
 //
diff --git a/examples/tlm/common/include/traffic_generator.h b/examples/tlm/common/include/traffic_generator.h
index 94fd19b..10c0243 100644
--- a/examples/tlm/common/include/traffic_generator.h
+++ b/examples/tlm/common/include/traffic_generator.h
@@ -34,6 +44,10 @@
 
 #include "tlm.h"                              	// TLM headers
 #include <queue>                                // queue header from std lib
+#if INTC_CHKPT
+#include <map>
+#include <set>
+#endif
 
 class traffic_generator                       	// traffic_generator
 : public sc_core::sc_module                    	// sc_module
@@ -43,6 +57,10 @@ class traffic_generator                       	// traffic_generator
 
   public:
 
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //=============================================================================
 ///  @fn traffic_generator
 //  
@@ -96,6 +114,10 @@ class traffic_generator                       	// traffic_generator
   {
     public:
     
+#if INTC_CHKPT
+    struct checkpoint_access;
+#endif
+
     tg_queue_c                                            /// tg_queue_c constructor
     ( void
     )
@@ -189,5 +211,17 @@ class traffic_generator                       	// traffic_generator
   
   /// Port for responses from the initiator
   sc_core::sc_port<sc_core::sc_fifo_in_if  <gp_ptr> > response_in_port;
+
+#if INTC_CHKPT
+  // State variables stored as part of the checkpoint
+  std::map<gp_ptr, unsigned int> m_payload_writes_in_flight;
+  std::set<gp_ptr> m_payload_reads_in_flight;
+  unsigned int i;
+  unsigned int j;
+  unsigned int m_read_i;
+  unsigned int w_data;
+  sc_dt::uint64 m_mem_address;
+  gp_ptr transaction_ptr;
+#endif
 };
 #endif /* __TRAFFIC_GENERATOR_H__ */
diff --git a/examples/tlm/common/src/lt_initiator.cpp b/examples/tlm/common/src/lt_initiator.cpp
index 5952413..d19723c 100644
--- a/examples/tlm/common/src/lt_initiator.cpp
+++ b/examples/tlm/common/src/lt_initiator.cpp
@@ -57,6 +67,16 @@ lt_initiator::lt_initiator                        // constructor
 
   // register thread process
   SC_THREAD(initiator_thread);                  
+#if INTC_CHKPT
+  transaction_ptr = 0;
+  delay = SC_ZERO_TIME;
+  m_would_block = true;
+  m_trans_sent = false;
+  m_data_buffer[0] = 0;
+  m_data_buffer[1] = 0;
+  m_data_buffer[2] = 0;
+  m_data_buffer[3] = 0;
+#endif
 }
 
 /*==============================================================================
@@ -69,7 +89,11 @@ lt_initiator::lt_initiator                        // constructor
 ==============================================================================*/
 void lt_initiator::initiator_thread(void)   ///< initiator thread
 {  
+#if !INTC_CHKPT
   tlm::tlm_generic_payload *transaction_ptr;    ///< transaction pointer
+#else
+  // transaction_ptr is stored as part of the checkpoint
+#endif
   std::ostringstream       msg;                 ///< log message
 
   while (true) 
@@ -77,9 +101,19 @@ void lt_initiator::initiator_thread(void)   ///< initiator thread
 //=============================================================================
 // Read FIFO to Get new transaction GP from the traffic generator 
 //=============================================================================
+#if INTC_CHKPT
+    if (transaction_ptr == 0) {
+      if (m_would_block)
+        sc_core::wait(request_in_port->data_written_event());
+
+      transaction_ptr = request_in_port->read();
+      delay = SC_ZERO_TIME;
+    }
+#else
     transaction_ptr = request_in_port->read();  // get request from input fifo
   
     sc_time delay         = SC_ZERO_TIME;       // Create delay objects 
+#endif
 
     std::ostringstream  msg;           
     msg.str("");
@@ -89,7 +123,16 @@ void lt_initiator::initiator_thread(void)   ///< initiator thread
         << delay << ")";
     REPORT_INFO(filename,  __FUNCTION__, msg.str());
 
+#if INTC_CHKPT
+    if (!m_trans_sent) {
+      initiator_socket->b_transport(*transaction_ptr, delay);
+      m_trans_sent = true;
+      assert (transaction_ptr->get_data_length() == 4);
+      memcpy(m_data_buffer, transaction_ptr->get_data_ptr(), 4);
+    }
+#else
     initiator_socket->b_transport(*transaction_ptr, delay);
+#endif
     
     gp_status = transaction_ptr->get_response_status();
     
@@ -110,6 +153,11 @@ void lt_initiator::initiator_thread(void)   ///< initiator thread
     }
     
     response_out_port->write(transaction_ptr);  // return txn to traffic gen
+#if INTC_CHKPT
+    m_trans_sent = false;
+    transaction_ptr = 0;
+    m_would_block = request_in_port->num_available() == 0;
+#endif
   } // end while true
 } // end initiator_thread 
 
diff --git a/examples/tlm/common/src/lt_td_initiator.cpp b/examples/tlm/common/src/lt_td_initiator.cpp
index 6cb29f4..939fc29 100644
--- a/examples/tlm/common/src/lt_td_initiator.cpp
+++ b/examples/tlm/common/src/lt_td_initiator.cpp
@@ -56,6 +66,15 @@ lt_td_initiator::lt_td_initiator                        // constructor
   tlm_utils::tlm_quantumkeeper::set_global_quantum(sc_core::sc_time(500,sc_core::SC_NS));
   // register thread process
   SC_THREAD(initiator_thread);                  
+#if INTC_CHKPT
+  transaction_ptr = 0;
+  m_would_block = true;
+  m_trans_sent = false;
+  m_data_buffer[0] = 0;
+  m_data_buffer[1] = 0;
+  m_data_buffer[2] = 0;
+  m_data_buffer[3] = 0;
+#endif
 }
 
 /*==============================================================================
@@ -68,7 +87,11 @@ lt_td_initiator::lt_td_initiator                        // constructor
 ==============================================================================*/
 void lt_td_initiator::initiator_thread(void)   ///< initiator thread
 {  
+#if !INTC_CHKPT
   tlm::tlm_generic_payload *transaction_ptr;    ///< transaction pointer
+#else
+  // transaction_ptr is stored as part of the checkpoint
+#endif
   std::ostringstream       msg;                 ///< log message
     
 
@@ -77,6 +100,11 @@ void lt_td_initiator::initiator_thread(void)   ///< initiator thread
 //=============================================================================
 // Read FIFO to Get new transaction GP from the traffic generator 
 //=============================================================================
+#if INTC_CHKPT
+    if (transaction_ptr == 0) {
+      if (m_would_block)
+        sc_core::wait(request_in_port->data_written_event());
+#endif
     transaction_ptr = request_in_port->read();  // get request from input fifo
     
     msg.str("");
@@ -88,7 +116,17 @@ void lt_td_initiator::initiator_thread(void)   ///< initiator thread
         << m_delay << ")";
     REPORT_INFO(filename,  __FUNCTION__, msg.str());
 
+#if INTC_CHKPT
+    }
+    if (!m_trans_sent) {
+      initiator_socket->b_transport(*transaction_ptr, m_delay);
+      m_trans_sent = true;
+      assert (transaction_ptr->get_data_length() == 4);
+      memcpy(m_data_buffer, transaction_ptr->get_data_ptr(), 4);
+    }
+#else
     initiator_socket->b_transport(*transaction_ptr, m_delay);
+#endif
     
     gp_status = transaction_ptr->get_response_status();
     
@@ -125,6 +163,11 @@ void lt_td_initiator::initiator_thread(void)   ///< initiator thread
     }
     
     response_out_port->write(transaction_ptr);  // return txn to traffic gen
+#if INTC_CHKPT
+    m_trans_sent = false;
+    transaction_ptr = 0;
+    m_would_block = request_in_port->num_available() == 0;
+#endif
   } // end while true
 } // end initiator_thread 
 
diff --git a/examples/tlm/common/src/traffic_generator.cpp b/examples/tlm/common/src/traffic_generator.cpp
index c6b60be..71bf2f3 100644
--- a/examples/tlm/common/src/traffic_generator.cpp
+++ b/examples/tlm/common/src/traffic_generator.cpp
@@ -74,6 +84,14 @@ traffic_generator::traffic_generator            // @todo keep me, lose other con
 , m_check_all         ( true              )
 { 
   SC_THREAD(traffic_generator_thread);
+#if INTC_CHKPT
+  i = 0;
+  j = 0;
+  m_read_i = 0;
+  w_data = 0;
+  m_mem_address = 0;
+  transaction_ptr = 0;
+#endif
   
   // build transaction pool 
   for (unsigned int i = 0; i < max_txns; i++ )
@@ -95,32 +113,58 @@ traffic_generator::traffic_generator_thread
   msg << "Initiator: " << m_ID << " Starting Traffic";
   REPORT_INFO(filename, __FUNCTION__, msg.str());
   
+#if !INTC_CHKPT
   tlm::tlm_generic_payload  *transaction_ptr;   ///< transaction pointer
+#else
+  // transaction_ptr is stored as part of the checkpoint
+#endif
   unsigned char             *data_buffer_ptr;   ///< data buffer pointer
   
   // outer loop of a simple memory test generate addresses
 
   sc_dt::uint64 base_address;
    
+#if INTC_CHKPT
+  for (;i < 2; i++ )
+#else
   for (unsigned int i = 0; i < 2; i++ )
+#endif
   {
     base_address = i ? m_base_address_2 : m_base_address_1; 
 
     sc_dt::uint64 mem_address = base_address; 
+#if INTC_CHKPT
+    mem_address += (m_txn_data_size * j);
+#endif
 
     // write loop 
     
+#if INTC_CHKPT
+    for (; j < 16; j++)
+#else
     for (unsigned int j = 0; j < 16; j++ )
+#endif
     {
+#if INTC_CHKPT
+      if(!m_transaction_queue.is_empty() && transaction_ptr == 0)
+#else
       if(!m_transaction_queue.is_empty())
+#endif
       {
+#if INTC_CHKPT
+        mem_address = base_address + (m_txn_data_size * j);
+#endif
         transaction_ptr = m_transaction_queue.dequeue ();
         transaction_ptr->acquire();
 	++m_active_txn_count;
         
         data_buffer_ptr = transaction_ptr->get_data_ptr();
 
+#if INTC_CHKPT
+        w_data = (unsigned int)mem_address;
+#else
         unsigned int w_data = (unsigned int)mem_address;
+#endif
         
         // invert data on second pass
         if (i==1)
@@ -158,22 +202,40 @@ traffic_generator::traffic_generator_thread
         mem_address += m_txn_data_size;
         
         // send write request
+#if INTC_CHKPT
+        m_payload_writes_in_flight.insert(std::make_pair(transaction_ptr, w_data));
+        // Implicit call of wait
+#endif
         request_out_port->write (transaction_ptr);
       }
       
       check_complete();   
+#if INTC_CHKPT
+      transaction_ptr = 0;
+#endif
     }
     
     check_all_complete();
     
     // read loop 
   
+#if INTC_CHKPT
+    for (; m_read_i < 16; m_read_i++)
+#else
     mem_address = base_address; 
    
     for (unsigned int i = 0; i < 16; i++ )
+#endif
     {
+#if INTC_CHKPT
+      if(!m_transaction_queue.is_empty() && transaction_ptr == 0)
+#else
       if(!m_transaction_queue.is_empty())
+#endif
       {
+#if INTC_CHKPT
+        mem_address = base_address + (m_txn_data_size * m_read_i);
+#endif
         transaction_ptr = m_transaction_queue.dequeue ();
         transaction_ptr->acquire();
 	++m_active_txn_count;
@@ -205,13 +267,24 @@ traffic_generator::traffic_generator_thread
         mem_address += m_txn_data_size; 
         
         // send write request
+#if INTC_CHKPT
+        m_payload_reads_in_flight.insert(transaction_ptr);
+        // Implicit call of wait
+#endif
         request_out_port->write (transaction_ptr); 
       }
         
       check_complete();
+#if INTC_CHKPT
+      transaction_ptr = 0;
+#endif
     } // end read loop
    
     check_all_complete();
+#if INTC_CHKPT
+    j = 0;
+    m_read_i = 0;
+#endif
   }
 
   msg.str ("");
@@ -233,6 +306,9 @@ void traffic_generator::check_complete (void)
       || m_check_all 
       || ( response_in_port->num_available() > 0 ) )
   {
+#if INTC_CHKPT
+    // Implicit call of wait
+#endif
     response_in_port->read(transaction_ptr);
     
     if (transaction_ptr ->get_response_status() != tlm::TLM_OK_RESPONSE)
@@ -267,6 +343,10 @@ void traffic_generator::check_complete (void)
     }
     transaction_ptr->release();
     --m_active_txn_count;
+#if INTC_CHKPT
+    m_payload_writes_in_flight.erase(transaction_ptr);
+    m_payload_reads_in_flight.erase(transaction_ptr);
+#endif
   }
 } // end check_complete
 
diff --git a/examples/tlm/lt/include/initiator_top.h b/examples/tlm/lt/include/initiator_top.h
index 6fdb0c2..980ec1e 100644
--- a/examples/tlm/lt/include/initiator_top.h
+++ b/examples/tlm/lt/include/initiator_top.h
@@ -43,6 +53,11 @@ class initiator_top
 {
 
 public:
+
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //Member Methods  ==============================================================  	  
 //==============================================================================
 ///  @fn initiator_top::initiator_top
diff --git a/examples/tlm/lt_temporal_decouple/include/initiator_top.h b/examples/tlm/lt_temporal_decouple/include/initiator_top.h
index 628f49d..16c59ab 100644
--- a/examples/tlm/lt_temporal_decouple/include/initiator_top.h
+++ b/examples/tlm/lt_temporal_decouple/include/initiator_top.h
@@ -42,6 +52,11 @@ class initiator_top
   , virtual public tlm::tlm_bw_transport_if<>  // inherit from TLM interfaces
 {
 public:
+
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //Member Methods  ==============================================================  
 //==============================================================================
 ///  @fn initiator_top::initiator_top
diff --git a/examples/tlm/lt_temporal_decouple/include/td_initiator_top.h b/examples/tlm/lt_temporal_decouple/include/td_initiator_top.h
index 4b7f85b..e5abf6b 100644
--- a/examples/tlm/lt_temporal_decouple/include/td_initiator_top.h
+++ b/examples/tlm/lt_temporal_decouple/include/td_initiator_top.h
@@ -44,6 +54,10 @@ class td_initiator_top
 {
 public:
 	  
+#if INTC_CHKPT
+  struct checkpoint_access;
+#endif
+
 //=====================================================================
 ///  @fn td_initiator_top::td_initiator_top
 //	    
