diff --git a/src/sysc/communication/sc_event_queue.h b/src/sysc/communication/sc_event_queue.h
index c2bcae2..5a3d986 100644
--- a/src/sysc/communication/sc_event_queue.h
+++ b/src/sysc/communication/sc_event_queue.h
@@ -76,6 +76,8 @@ class sc_event_queue:
   public sc_event_queue_if,
   public sc_module
 {
+    friend class simContextProxyCheckpoint;
+
  public:
 
     SC_HAS_PROCESS( sc_event_queue );
diff --git a/src/sysc/communication/sc_fifo.h b/src/sysc/communication/sc_fifo.h
index 00aa791..311e500 100644
--- a/src/sysc/communication/sc_fifo.h
+++ b/src/sysc/communication/sc_fifo.h
@@ -50,6 +50,8 @@ class sc_fifo
   public sc_fifo_out_if<T>,
   public sc_prim_channel
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     // constructors
diff --git a/src/sysc/communication/sc_mutex.h b/src/sysc/communication/sc_mutex.h
index d279e30..fe9fa9b 100644
--- a/src/sysc/communication/sc_mutex.h
+++ b/src/sysc/communication/sc_mutex.h
@@ -44,6 +44,8 @@ class sc_mutex
 : public sc_mutex_if,
   public sc_object
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     // constructors and destructor
diff --git a/src/sysc/communication/sc_prim_channel.h b/src/sysc/communication/sc_prim_channel.h
index b2e41fc..813d412 100644
--- a/src/sysc/communication/sc_prim_channel.h
+++ b/src/sysc/communication/sc_prim_channel.h
@@ -43,6 +43,7 @@ class sc_prim_channel
 : public sc_object
 {
     friend class sc_prim_channel_registry;
+    friend class simContextProxyCheckpoint;
 
 public:
     enum { list_end = 0xdb };
@@ -228,6 +229,7 @@ private:
 class sc_prim_channel_registry
 {
     friend class sc_simcontext;
+    friend class simContextProxyCheckpoint;
 
 public:
 
diff --git a/src/sysc/communication/sc_semaphore.h b/src/sysc/communication/sc_semaphore.h
index f1baef9..646fe83 100644
--- a/src/sysc/communication/sc_semaphore.h
+++ b/src/sysc/communication/sc_semaphore.h
@@ -44,6 +44,8 @@ class sc_semaphore
 : public sc_semaphore_if,
   public sc_object
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     // constructors
diff --git a/src/sysc/communication/sc_signal.h b/src/sysc/communication/sc_signal.h
index f9cab04..f7afbaa 100644
--- a/src/sysc/communication/sc_signal.h
+++ b/src/sysc/communication/sc_signal.h
@@ -74,6 +74,8 @@ class sc_signal
   , public    sc_prim_channel
   , protected sc_writer_policy_check<POL>
 {
+    friend class simContextProxyCheckpoint;
+
 protected:
     typedef sc_signal_inout_if<T>       if_type;
     typedef sc_signal<T,POL>            this_type;
@@ -284,6 +286,8 @@ class sc_signal<bool,POL>
   , public    sc_prim_channel
   , protected sc_writer_policy_check<POL>
 {
+    friend class simContextProxyCheckpoint;
+
 protected:
     typedef sc_signal_inout_if<bool>    if_type;
     typedef sc_signal<bool,POL>         this_type;
@@ -447,6 +451,8 @@ class sc_signal<sc_dt::sc_logic,POL>
   , public    sc_prim_channel
   , protected sc_writer_policy_check<POL>
 {
+    friend class simContextProxyCheckpoint;
+
 protected:
     typedef sc_signal_inout_if<sc_dt::sc_logic> if_type;
     typedef sc_signal<sc_dt::sc_logic,POL>      this_type;
diff --git a/src/sysc/communication/sc_signal_resolved.h b/src/sysc/communication/sc_signal_resolved.h
index a0fa6f4..18de45a 100644
--- a/src/sysc/communication/sc_signal_resolved.h
+++ b/src/sysc/communication/sc_signal_resolved.h
@@ -47,6 +47,8 @@ extern const sc_dt::sc_logic_value_t sc_logic_resolution_tbl[4][4];
 class sc_signal_resolved
 : public sc_signal<sc_dt::sc_logic,SC_MANY_WRITERS>
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     // typedefs
diff --git a/src/sysc/communication/sc_signal_rv.h b/src/sysc/communication/sc_signal_rv.h
index 7322381..ba06d4e 100644
--- a/src/sysc/communication/sc_signal_rv.h
+++ b/src/sysc/communication/sc_signal_rv.h
@@ -93,6 +93,8 @@ template <int W>
 class sc_signal_rv
 : public sc_signal<sc_dt::sc_lv<W>, SC_MANY_WRITERS>
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     // typedefs
diff --git a/src/sysc/kernel/sc_event.cpp b/src/sysc/kernel/sc_event.cpp
index 901b478..eb64d4c 100644
--- a/src/sysc/kernel/sc_event.cpp
+++ b/src/sysc/kernel/sc_event.cpp
@@ -241,6 +241,10 @@ void sc_event::register_event( const char* leaf_name )
 	else
 	    m_simc->add_child_event( this );
     }
+    else
+    {
+        m_simc->insert_kernel_event(m_name, this).swap(m_name);
+    }
 }
 
 void
@@ -319,6 +323,10 @@ sc_event::~sc_event()
     {
 	sc_object_manager* object_manager_p = m_simc->get_object_manager();
 	object_manager_p->remove_event( m_name );
+
+        // always try to remove the event, no need to check for
+        // SC_KERNEL_EVENT_PREFIX
+        m_simc->remove_kernel_event(m_name);
     }
 }
 
diff --git a/src/sysc/kernel/sc_event.h b/src/sysc/kernel/sc_event.h
index 1c7d68b..1dfac19 100644
--- a/src/sysc/kernel/sc_event.h
+++ b/src/sysc/kernel/sc_event.h
@@ -253,6 +253,7 @@ class sc_event
     friend class sc_thread_process;
     template<typename IF, sc_writer_policy POL> friend class sc_signal;
     friend void sc_thread_cor_fn( void* arg );
+    friend class simContextProxyCheckpoint;
 
 public:
 
@@ -338,6 +339,7 @@ class sc_event_timed
 {
     friend class sc_event;
     friend class sc_simcontext;
+    friend class simContextProxyCheckpoint;
 
     friend int sc_notify_time_compare( const void*, const void* );
 
diff --git a/src/sysc/kernel/sc_method_process.h b/src/sysc/kernel/sc_method_process.h
index 3fee2c3..535e833 100644
--- a/src/sysc/kernel/sc_method_process.h
+++ b/src/sysc/kernel/sc_method_process.h
@@ -108,6 +108,7 @@ class sc_method_process : public sc_process_b {
     friend class sc_process_handle;
     friend class sc_simcontext;
     friend class sc_runnable;
+    friend class simContextProxyCheckpoint;
 
     friend void next_trigger( sc_simcontext* );
     friend void next_trigger( const sc_event&,
diff --git a/src/sysc/kernel/sc_process.cpp b/src/sysc/kernel/sc_process.cpp
index 0407d10..8fba6e8 100644
--- a/src/sysc/kernel/sc_process.cpp
+++ b/src/sysc/kernel/sc_process.cpp
@@ -172,6 +172,25 @@ void sc_process_b::delete_process()
 
     if ( this != sc_get_current_process_b() )
     {
+        // The thread objects are deleted in sc_simcontext::clean()
+        switch ( m_process_kind )
+        {
+          case SC_THREAD_PROC_:
+          case SC_CTHREAD_PROC_:
+            if (sc_get_curr_simcontext()->has_ended_process(
+                    SCAST<sc_thread_handle>( this ))) {
+                m_references_n = 1;
+                return;
+            }
+            break;
+          // The method objects are deleted in sc_simcontext::clean() in
+          // sc_process_table::~sc_process_table()
+          case SC_METHOD_PROC_:
+              m_references_n = 1;
+              return;
+          default:
+              break;
+        }
         delete this;
     }
   
@@ -206,7 +225,7 @@ std::string sc_process_b::dump_state() const
 {
     std::string result;
     result = "[";
-    if ( m_state == ps_normal ) 
+    if ( m_state == ps_normal || m_state == ps_bit_initialized)
     {
         result += " normal";
     }
diff --git a/src/sysc/kernel/sc_process.h b/src/sysc/kernel/sc_process.h
index 6466f55..aa92219 100644
--- a/src/sysc/kernel/sc_process.h
+++ b/src/sysc/kernel/sc_process.h
@@ -287,6 +287,7 @@ class sc_process_b : public sc_object {
     friend sc_process_handle sc_get_current_process_handle();
     friend void sc_thread_cor_fn( void* arg );
     friend bool timed_out( sc_simcontext* );
+    friend class simContextProxyCheckpoint;
 
   public:
     enum process_throw_type {
@@ -302,6 +303,7 @@ class sc_process_b : public sc_object {
 	ps_bit_ready_to_run = 2,  // process is ready to run.
         ps_bit_suspended = 4,     // process is suspended.
 	ps_bit_zombie = 8,        // process is a zombie.
+        ps_bit_initialized = 0x40000000,  // process has been run.
         ps_normal = 0             // must be zero.
     };
 
diff --git a/src/sysc/kernel/sc_process_handle.h b/src/sysc/kernel/sc_process_handle.h
index 60585df..2844a26 100644
--- a/src/sysc/kernel/sc_process_handle.h
+++ b/src/sysc/kernel/sc_process_handle.h
@@ -75,6 +75,8 @@ class sc_process_handle {
     friend class sc_sensitive_pos;
     friend class sc_sensitive_neg;
     friend class sc_thread_process;
+    friend class simContextProxyCheckpoint;
+    friend class sc_simcontext;
 
   public:
     inline sc_process_handle();
diff --git a/src/sysc/kernel/sc_runnable.h b/src/sysc/kernel/sc_runnable.h
index 025eaed..8762a15 100644
--- a/src/sysc/kernel/sc_runnable.h
+++ b/src/sysc/kernel/sc_runnable.h
@@ -41,6 +41,7 @@ namespace sc_core {
 
 class sc_runnable
 {
+    friend class simContextProxyCheckpoint;
 
   public:
     sc_runnable();
diff --git a/src/sysc/kernel/sc_simcontext.cpp b/src/sysc/kernel/sc_simcontext.cpp
index 144da1e..d0e63ba 100644
--- a/src/sysc/kernel/sc_simcontext.cpp
+++ b/src/sysc/kernel/sc_simcontext.cpp
@@ -99,33 +99,6 @@ namespace sc_core {
 
 sc_stop_mode stop_mode = SC_STOP_FINISH_DELTA;
 
-// ----------------------------------------------------------------------------
-//  CLASS : sc_process_table
-//
-//  Container class that keeps track of all method processes,
-//  (c)thread processes.
-// ----------------------------------------------------------------------------
-
-class sc_process_table
-{
-  public:
-
-    sc_process_table();
-    ~sc_process_table();
-    void push_front( sc_method_handle );
-    void push_front( sc_thread_handle );
-    sc_method_handle method_q_head();
-    sc_method_handle remove( sc_method_handle );
-    sc_thread_handle thread_q_head();
-    sc_thread_handle remove( sc_thread_handle );
-
-
-  private:
-
-    sc_method_handle  m_method_q;  // Queue of existing method processes.
-    sc_thread_handle  m_thread_q;  // Queue of existing thread processes.
-};
-
 
 // IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
 
@@ -241,7 +214,6 @@ sc_process_table::remove( sc_thread_handle handle_ )
     return 0;
 }
 
-inline
 sc_thread_handle 
 sc_process_table::thread_q_head()
 {
@@ -411,6 +383,11 @@ sc_simcontext::init()
 void
 sc_simcontext::clean()
 {
+    // The erase of the iterator deletes the thread object indirectly via
+    // sc_process_b::delete_process()
+    while (m_ended_processes_.begin() != m_ended_processes_.end())
+        m_ended_processes_.erase(m_ended_processes_.begin());
+
     delete m_object_manager;
     delete m_module_registry;
     delete m_port_registry;
@@ -433,6 +410,17 @@ sc_simcontext::clean()
     delete m_error;
 }
 
+void sc_simcontext::insert_ended_process(sc_thread_process *p) {
+    m_ended_processes_[p->name()] = sc_process_handle(p);
+}
+
+void sc_simcontext::remove_ended_process(sc_thread_process *p) {
+    m_ended_processes_.erase(p->name());
+}
+
+bool sc_simcontext::has_ended_process(sc_thread_process *p) {
+    return m_ended_processes_.find(p->name()) != m_ended_processes_.end();
+}
 
 sc_simcontext::sc_simcontext() :
     m_object_manager(0), m_module_registry(0), m_port_registry(0),
diff --git a/src/sysc/kernel/sc_simcontext.h b/src/sysc/kernel/sc_simcontext.h
index c173b1b..a78544d 100644
--- a/src/sysc/kernel/sc_simcontext.h
+++ b/src/sysc/kernel/sc_simcontext.h
@@ -35,6 +35,10 @@
 #include "sysc/utils/sc_hash.h"
 #include "sysc/utils/sc_pq.h"
 
+#include <map>
+#include <sstream>
+#include <utility>
+
 namespace sc_core {
 
 // forward declarations
@@ -147,6 +151,7 @@ class sc_simcontext
     friend class sc_prim_channel;
     friend class sc_cthread_process;
     friend class sc_thread_process;
+    friend class simContextProxyCheckpoint;
     friend sc_dt::uint64 sc_delta_count();
     friend const std::vector<sc_event*>& sc_get_top_level_events(
         const sc_simcontext* simc_p);
@@ -361,11 +366,44 @@ private:
     sc_cor_pkg*                 m_cor_pkg; // the simcontext's coroutine package
     sc_cor*                     m_cor;     // the simcontext's coroutine
 
+    std::map<std::string, std::pair<int, sc_event *> > m_kernel_event_table;
+    std::map<std::string, sc_process_handle> m_ended_processes_;
+
 private:
 
     // disabled
     sc_simcontext( const sc_simcontext& );
     sc_simcontext& operator = ( const sc_simcontext& );
+
+public:
+
+    std::string insert_kernel_event(const std::string &name, sc_event *obj) {
+        std::map<std::string, std::pair<int, sc_event *> >::iterator i;
+        i = m_kernel_event_table.find(name);
+        if (i == m_kernel_event_table.end()) {
+            m_kernel_event_table[name] = std::make_pair(0, obj);
+            return name;
+        }
+
+        std::stringstream ss;
+        ss << name << "_" << ++i->second.first;
+        return insert_kernel_event(ss.str(), obj);
+    }
+    sc_event *find_kernel_event(const std::string &name) {
+        std::map<std::string, std::pair<int, sc_event *> >::iterator i;
+        i = m_kernel_event_table.find(name);
+        if (i == m_kernel_event_table.end())
+            return NULL;
+
+        return i->second.second;
+    }
+    void remove_kernel_event(const std::string &name) {
+        m_kernel_event_table.erase(name);
+    }
+
+    void insert_ended_process(sc_thread_process *p);
+    void remove_ended_process(sc_thread_process *p);
+    bool has_ended_process(sc_thread_process *p);
 };
 
 // IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
diff --git a/src/sysc/kernel/sc_simcontext_int.h b/src/sysc/kernel/sc_simcontext_int.h
index e7c370b..60cc7df 100644
--- a/src/sysc/kernel/sc_simcontext_int.h
+++ b/src/sysc/kernel/sc_simcontext_int.h
@@ -58,6 +58,34 @@
 
 namespace sc_core {
 
+// ----------------------------------------------------------------------------
+//  CLASS : sc_process_table
+//
+//  Container class that keeps track of all method processes,
+//  (c)thread processes.
+// ----------------------------------------------------------------------------
+
+class sc_process_table
+{
+    friend class simContextProxyCheckpoint;
+  public:
+
+    sc_process_table();
+    ~sc_process_table();
+    void push_front( sc_method_handle );
+    void push_front( sc_thread_handle );
+    sc_method_handle method_q_head();
+    sc_method_handle remove( sc_method_handle );
+    sc_thread_handle thread_q_head();
+    sc_thread_handle remove( sc_thread_handle );
+
+
+  private:
+
+    sc_method_handle  m_method_q;  // Queue of existing method processes.
+    sc_thread_handle  m_thread_q;  // Queue of existing thread processes.
+};
+
 inline
 const char*
 sc_get_current_process_name()
diff --git a/src/sysc/kernel/sc_thread_process.cpp b/src/sysc/kernel/sc_thread_process.cpp
index 63cedcf..a1e029e 100644
--- a/src/sysc/kernel/sc_thread_process.cpp
+++ b/src/sysc/kernel/sc_thread_process.cpp
@@ -108,6 +108,7 @@ void sc_thread_cor_fn( void* arg )
 
     // PROCESS THE THREAD AND PROCESS ANY EXCEPTIONS THAT ARE THROWN:
 
+    thread_h->m_state |= sc_process_b::ps_bit_initialized;
     while( true ) {
 
         try {
@@ -130,6 +131,9 @@ void sc_thread_cor_fn( void* arg )
         }
         break;
     }
+    // Test for detached process
+    if (sc_find_object(thread_h->name()))
+        simc_p->insert_ended_process(thread_h);
 
     sc_process_b*    active_p = sc_get_current_process_b();
 
diff --git a/src/sysc/kernel/sc_thread_process.h b/src/sysc/kernel/sc_thread_process.h
index a4b902d..b29dd02 100644
--- a/src/sysc/kernel/sc_thread_process.h
+++ b/src/sysc/kernel/sc_thread_process.h
@@ -110,6 +110,8 @@ class sc_thread_process : public sc_process_b {
     friend void wait( const sc_time&, const sc_event&, sc_simcontext* );
     friend void wait( const sc_time&, const sc_event_or_list&, sc_simcontext* );
     friend void wait( const sc_time&, const sc_event_and_list&, sc_simcontext*);
+    friend class simContextProxyCheckpoint;
+
   public:
     sc_thread_process( const char* name_p, bool free_host, 
         SC_ENTRY_FUNC method_p, sc_process_host* host_p, 
diff --git a/src/sysc/kernel/sc_time.h b/src/sysc/kernel/sc_time.h
index 6d29584..435942c 100644
--- a/src/sysc/kernel/sc_time.h
+++ b/src/sysc/kernel/sc_time.h
@@ -72,6 +72,8 @@ enum sc_time_unit
 
 class sc_time
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     typedef sc_dt::uint64 value_type;
diff --git a/src/sysc/utils/sc_pq.h b/src/sysc/utils/sc_pq.h
index 2a1c274..9e169af 100644
--- a/src/sysc/utils/sc_pq.h
+++ b/src/sysc/utils/sc_pq.h
@@ -41,6 +41,8 @@ namespace sc_core {
 
 class sc_ppq_base
 {
+    friend class simContextProxyCheckpoint;
+
 public:
 
     typedef int (*compare_fn_t)( const void*, const void* );
diff --git a/src/tlm_utils/peq_with_get.h b/src/tlm_utils/peq_with_get.h
index 9037daa..53541c7 100644
--- a/src/tlm_utils/peq_with_get.h
+++ b/src/tlm_utils/peq_with_get.h
@@ -31,6 +31,8 @@ namespace tlm_utils {
 template <class PAYLOAD>
 class peq_with_get : public sc_core::sc_object
 {
+    friend class sc_core::simContextProxyCheckpoint;
+
 public:
   typedef PAYLOAD transaction_type;
   typedef std::pair<const sc_core::sc_time, transaction_type*> pair_type;
diff --git a/src/tlm_utils/tlm_quantumkeeper.h b/src/tlm_utils/tlm_quantumkeeper.h
index fcbf82b..fa42632 100644
--- a/src/tlm_utils/tlm_quantumkeeper.h
+++ b/src/tlm_utils/tlm_quantumkeeper.h
@@ -34,6 +34,8 @@ namespace tlm_utils {
   //
   class tlm_quantumkeeper
   {
+      friend class sc_core::simContextProxyCheckpoint;
+
   public:
     //
     // Static setters/getters for the global quantum value.
