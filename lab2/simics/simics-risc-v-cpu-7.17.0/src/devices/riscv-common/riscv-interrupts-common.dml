/*
  Â© 2019 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

import "simics/arch/risc-v.dml";
import "simics/devs/signal.dml";

template sig is (signal_connect) {
    interface signal;
    method raise() default {
        if (signal.val && !signal.high) {
            if (port)
                log info, 4: "raise signal %s:%s", SIM_object_name(obj), port;
            else
                log info, 4: "raise signal %s", SIM_object_name(obj);
        }
        set_level(1);
    }
    method lower() default {
        if (signal.val && signal.high) {
            if (port)
                log info, 4: "lower signal %s:%s", SIM_object_name(obj), port;
            else
                log info, 4: "lower signal %s", SIM_object_name(obj);
        }
        set_level(0);
    }
}

template checking_offset is bank {
    shared method read(uint64 offset, uint64 bytes,
                       void *aux) -> (uint64) throws {
        if (is_disabled()) {
            log info, 1 then 2: "read while device is disabled, ignored";
            return 0;
        }

        try {
            check_offset(offset);
        } catch {
            return unmapped_read(offset, bytes, aux);
        }
        local uint64 value;
        value = default(offset, bytes, aux);
        return value;
    }

    shared method write(uint64 offset, uint64 value, uint64 bytes,
                        void *aux) throws {
        if (is_disabled()) {
            log info, 1 then 2: "write while device is disabled, ignored";
            return;
        }

        try {
            check_offset(offset);
        } catch {
            unmapped_write(offset, value, bytes, aux);
            return;
        }
        default(offset, value, bytes, aux);
    }

    shared method is_disabled() -> (bool);

    shared method check_offset(uint64 offset) throws;
}

method port_attr(attr_value_t hart, const char *portname) -> (attr_value_t) {
    local strbuf_t pobjname;
    sb_init(&pobjname);

    sb_addfmt(&pobjname, "port.%s", portname);
    local conf_object_t *pobj =
        SIM_object_descendant(SIM_attr_object(hart), sb_str(&pobjname));
    sb_free(&pobjname);
    if (pobj)
        return SIM_make_attr_object(pobj);
    return SIM_make_attr_list(2, hart, SIM_make_attr_string(portname));
}

template hreset_mark is hreset {
    port HRESET {
        implement signal {
            saved bool high;
            method signal_raise() default {
                log info, 3: "signal raised";
                high = true;
                default();
            }
            method signal_lower() default {
                log info, 3: "signal lowered";
                high = false;
                default();
            }
        }
    }
}

template ignore_while_reset is bank {
    method transaction_access(transaction_t *t, uint64 offset,
                              void *aux) -> (exception_type_t) default {
        if (HRESET.signal.high) {
            log info, 2: "reset asserted, access ignored";
            if (SIM_transaction_is_read(t))
                SIM_set_transaction_value_le(t, 0);
            return Sim_PE_No_Exception;
        }
        return default(t, offset, aux);
    }
}
