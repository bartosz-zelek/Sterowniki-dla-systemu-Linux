# Â© 2025 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.

local $boot_type = (params.get machine:software:boot_disk:medium)

if `simenv.boot_type.startswith('HDD')` {
    local $used_hdd_id = `int(simenv.boot_type[3])`
    local $unused_hdd_id = 1 - $used_hdd_id
    local $disk_param = "machine:hardware:storage:disk" + $used_hdd_id
    params.setdefault $disk_param +  ":image" (params.get machine:software:boot_disk:image)
    $disk_param = "machine:hardware:storage:disk" + $unused_hdd_id
    # When not having a size value set by the user for the unused disk
    # create some large empty disk
    if not (params.get $disk_param +  ":size") {
        params.setdefault $disk_param +  ":size" "1Ti"
    }
} else {
    # if not booting from HDD, and when not having size values set by the user
    # create some large empty disks
    if not (params.get machine:hardware:storage:disk0:size) {
        params.setdefault machine:hardware:storage:disk0:size "1Ti"
    }
    if not (params.get machine:hardware:storage:disk1:size) {
        params.setdefault machine:hardware:storage:disk1:size "1Ti"
    }
}

run-script "%script%/hardware.yml" namespace = machine:hardware
local $system = (params.get machine:hardware:output:system)
instantiate-components $system

if $boot_type == "CDR" {
    local $cdr = (new-cdrom-image
        file = (params.get machine:software:boot_disk:image)
        name = $system + ".cdrom.disk"
    )
    $system.cdrom.cd.insert $system.cdrom.disk
    $system.mb.simics_uefi->selected_boot_option = "UEFI Simics Turbo CD-ROM VT00001"
} else if $boot_type == "USB" {
    load-module usb-comp
    local $usb_disk = (new-usb-disk-comp
        file = (params.get machine:software:boot_disk:image)
        name = $system + ".usb_disk")
    $usb_disk.connect-to $system.mb.sb
    $system.mb.simics_uefi->selected_boot_option = "UEFI USB Device"
} else if `simenv.boot_type.startswith('HDD')`{
    local $used_hdd_id = `int(simenv.boot_type[3])`
    $system.mb.simics_uefi->selected_boot_option = ("UEFI Simics Turbo Harddrive VT0000" + (2 + $used_hdd_id))
}

## Name system
$system->system_info = (params.get machine:system_info)

## Set a time quantum that provides reasonable performance
set-time-quantum cell = ((($system->cpu_list)[0])->cell) seconds = 0.0001

## Set up Ethernet
run-script "%simics%/targets/common/ethernet-setup.yml" namespace = network:switch
if (params.get network:switch:create_network) {
    local $ethernet_switch = (params.get network:switch:ethernet_switch:name)
    connect ($ethernet_switch.get-free-connector) (params.get machine:hardware:output:eth_slot)
    instantiate-components (params.get network:switch:ethernet_switch:name)
}

run-script "%simics%/targets/common/sn-setup.yml" namespace = network:service_node

