/*
  ich-ports.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

attribute coma_level {
    parameter documentation = "Interrupt Level of COM A";
    parameter configuration = "required";
    parameter allocate_type = "uint32";
}

attribute comb_level {
    parameter documentation = "Interrupt Level of COM B";
    parameter configuration = "required";
    parameter allocate_type = "uint32";
}

connect comb_pirq is (pirq_connect) {
    parameter documentation = "Connection to interrupt controller for COMB";
}

connect coma_pirq is (pirq_connect) {
    parameter documentation = "Connection to interrupt controller for COMB";
}

connect serial_port[4] {
    parameter documentation = "Connections to registers bank of NS16550 object";
}

port com1_in is (in_irq_port) { parameter decode = 0b000; }
port com2_in is (in_irq_port) { parameter decode = 0b001; }
port com3_in is (in_irq_port) { parameter decode = 0b111; }
port com4_in is (in_irq_port) { parameter decode = 0b101; }

bank pci_config {
    register io_dec size 2 @ 0x80 "I/O Decode Range Register" {
        field FDD[12]   is (unimplemented) "FDD Decode Range";
        field LPT[9:8]  is (unimplemented) "LPT Decode Range";
        field COMB[6:4] is (serial_port_field) "COMB Decode Range" {
            parameter hard_reset_value = 0x0;
            parameter map_func = 2;
        }
        field COMA[2:0] is (serial_port_field) "COMA Decode Range" {
            parameter hard_reset_value = 0x1;
            parameter map_func = 1;
        }
    }
}

method serial_port_raise_interrupt(int index) {
    if (index == 0)
        inline $coma_pirq.raise($coma_level);
    else
        inline $comb_pirq.raise($comb_level);
}

method serial_port_lower_interrupt(int index) {
    if (index == 0)
        inline $coma_pirq.lower($coma_level);
    else
        inline $comb_pirq.lower($comb_level);
}

template serial_port_field {
    parameter map_func default undefined;
    method write(val) {
        call $remove_map($this);
        call $add_map(val);
        $this = val;
    }
    method get_map_index(uint3 decode) -> (int index) {
        index = -1;
        switch (decode) {
        case 0: index = 0; break; //COM1
        case 1: index = 1; break; //COM2
        case 5: index = 3; break; //COM4
        case 7: index = 2; break; //COM3
        default: break;
        }
    }

    method hard_reset() {
        if (SIM_object_is_configured($dev.obj)) {
            inline $write($hard_reset_value);
        } else
            $this = $hard_reset_value;
    }

    method soft_reset() {
        inline $write($soft_reset_value);
    }

    method remove_map(uint3 decode) {
        if (defined $map_func) {
            local int index;
            inline $get_map_index(decode) -> (index);

            if (index >= 0 && $pci_bus.obj && $serial_port[index].obj)
                $pci_bus.pci_bus.remove_map($serial_port[index].obj,
                                            Sim_Addr_Space_IO, $map_func);
        }
    }

    method add_map(uint3 decode) {
        if (defined $map_func) {
            local int index;
            inline $get_map_index(decode) -> (index);
            if ( ($name == "COMA" && !$lpc_en.coma_en) 
              || ($name == "COMB" && !$lpc_en.comb_en) ) {
                return;
            }

            if (index >= 0 && $pci_bus.obj && $serial_port[index].obj) {
                local map_info_t info;
                memset(&info, 0, sizeoftype(map_info_t));
                info.length = 8;
                info.function = $map_func;
                info.base = 0x3F8 - (index & 1) * 256 - (index > 1 ? 16 : 0);

                $pci_bus.pci_bus.add_map($serial_port[index].obj,
                                         Sim_Addr_Space_IO, NULL, info);
            }
        }
    }
}

template in_irq_port {
    parameter decode default undefined;

    implement signal {
        method signal_raise() {
            if ($pci_config.io_dec.COMA == $decode) {
                call $serial_port_raise_interrupt(0);
            } else if ($pci_config.io_dec.COMB == $decode) {
                call $serial_port_raise_interrupt(1);
            }
        }

        method signal_lower() {
            if ($pci_config.io_dec.COMA == $decode) {
                call $serial_port_lower_interrupt(0);
            } else if ($pci_config.io_dec.COMB == $decode) {
                call $serial_port_lower_interrupt(1);
            }
        }
    }
}

method reset_serial_ports_mapping() {
    call $pci_config.io_dec.COMB.soft_reset();
    call $pci_config.io_dec.COMA.soft_reset();
}
