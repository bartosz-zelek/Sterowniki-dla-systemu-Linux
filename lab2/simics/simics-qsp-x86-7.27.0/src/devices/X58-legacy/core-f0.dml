/*
  © 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

device x58_core_f0_legacy;
parameter classname = "x58-core-f0-legacy";

parameter desc = "unit for address mapping, VTd, ctrl/status, misc";
parameter documentation = "Address Mapping, VTd, Ctrl/Status, Misc unit in the "
    + "Intel® X58 Express Chipset. - legacy variant, using old PCIe libraries";

import "pci/common.dml";
import "x58-pcie-header.dml";

is pcie_device;

connect remap_unit0 {
    parameter documentation = "DMA/Interrupt remapping unit 0 to connect to.";
    parameter configuration = "required";
    interface pci_upstream;
}

connect remap_unit1 {
    parameter documentation = "DMA/Interrupt remapping unit 1 to connect to.";
    parameter configuration = "required";
    interface pci_upstream;
}

bank pci_config {
    register device_id { parameter hard_reset_value = 0x342e; }
    register status {
        field c { parameter hard_reset_value = 1; }
    }
    register class_code { parameter hard_reset_value = 0x080000; }
    register header_type {
        field mf { parameter hard_reset_value = 1; }
    }

    register base_address_0 @ 0x10 is (no_base_address_32);
    register base_address_1 @ 0x14 is (no_base_address_32);
    register base_address_2 @ 0x18 is (no_base_address_32);
    register base_address_3 @ 0x1c is (no_base_address_32);
    register base_address_4 @ 0x20 is (no_base_address_32);
    register base_address_5 @ 0x24 is (no_base_address_32);

    register capabilities_ptr { parameter hard_reset_value = 0x40; }

    is defining_pcie_capability_v2;
    parameter exp_offset = 0x40;
    parameter exp_next_ptr = 0x0;
    register exp_dev_cap {
        field rber { parameter hard_reset_value = 0x1; }
    }
    register exp_link_cap {
        field l1el   { parameter hard_reset_value = 0x7; }
        field sder   { parameter hard_reset_value = 0x1; }
        field dlllar { parameter hard_reset_value = 0x1; }
        field lbn    { parameter hard_reset_value = 0x1; }
    }
    register exp_link_status {
        field scc { parameter hard_reset_value = 0x1; }
    }
    register exp_slot_control {
        field aic { parameter hard_reset_value = 0x3; }
        field pic { parameter hard_reset_value = 0x3; }
        field pcc { parameter hard_reset_value = 0x1; }
    }
    register exp_root_cap {
        field csv  { parameter hard_reset_value = 0x1; }
    }

    register vtbar size 4 @ 0x180 {
        field addr   [31:13];
        field enable [0];

        method remove_map() {
            log "info", 2: "Removing VTBAR mapping";
            inline $require_pci_bus();
            $pci_bus.pci_bus.remove_map($remap_unit0.obj, Sim_Addr_Space_Memory, 0);
            $pci_bus.pci_bus.remove_map($remap_unit1.obj, Sim_Addr_Space_Memory, 0);
        }

        method add_map() {
            local int map_result;
            local map_info_t info;
            memset(&info, 0, sizeoftype(map_info_t));
            info.base = $addr << 13;
            info.length = 1 << 12;
            info.function = 0;
            info.align_size = 4;

            map_result = $pci_bus.pci_bus.add_map(
                $remap_unit0.obj, Sim_Addr_Space_Memory, NULL, info);
            if (map_result != 0)
                log "info", 2: "Adding VTBAR mapping for remapping unit0 to 0x%llx", info.base;
            else
                log "error": "Failed adding VTBAR mapping for remapping unit0 to 0x%llx", info.base;

            info.base = ($addr << 13) + 0x1000;
            map_result = $pci_bus.pci_bus.add_map(
                $remap_unit1.obj, Sim_Addr_Space_Memory, NULL, info);
            if (map_result != 0)
                log "info", 2: "Adding VTBAR mapping for remapping unit1 to 0x%llx", info.base;
            else
                log "error": "Failed adding VTBAR mapping for remapping unit1 to 0x%llx", info.base;
        }

        method update() {
            inline $remove_map();
            if ($enable) {
                inline $add_map();
            }
        }

        method after_write(memop) {
            call $update();
        }
    }
}

method post_init() {
    if (!SIM_is_restoring_state($dev.obj)) {
        call $pci_config.vtbar.update();
    }
}
