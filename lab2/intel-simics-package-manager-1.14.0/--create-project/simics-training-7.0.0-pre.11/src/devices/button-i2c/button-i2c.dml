/*
  Â© 2018 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

/*
----------------------------------------------------------------------------------

  button-i2c  : I2C device that reports presses on a button over I2C
              : Works as an I2C master using I2C write to notify another I2C device
              : Part of Simics training materials

*/

dml 1.4;

device button_i2c;

param desc = "button on I2C bus";

param documentation = "I2C device that reports the status of a button, and can send button press notifications over I2C.  The button is simulated in the System Panel.";


//=============================================================================
// I2C slave interface
// 
// Keep track of active transactions on the bus - to avoid sending when bus is busy
// 
// React to read - report current state of the button
//
// React to write - store value in current state, i.e. 0 clears 
//                  (intentionally stupid implementation like cheap hw would do it)
//
// Note that unless the device gets a 'clear' operation, it will keep the button
// pressed notification alive
//
//-----------------------------------------------------------------------------
import "utility.dml";
import "simics/devs/i2c.dml";
import "simics/devs/signal.dml";

loggroup i2c_comms;

// I2C link connection - back towards master
connect i2c_link {
    param desc = "I2C link Connection";
    param configuration = "optional";
    interface i2c_master_v2;
    interface i2c_slave_v2;
}

//
// i2c_slave_v2 inbound interface, in a port 
// i2c_master_v2 inbound interface, in the same port 
//
port i2c_in {
    param desc = "Inbound I2C traffic - both master and slave interfaces";
     
    implement i2c_slave_v2 {
        method start(uint8 address) {
            log info, 3, i2c_comms: "i2c_slave.start_request([%d][%d])", address[7:1], address[0];
    
            // Note that the bus becomes busy
            log info, 3, i2c_comms: "i2c bus is now busy";
            i2cregs.i2c_slave_state.busy.set_val(1);            
    
            // is this for this device?
            if (address[7:1] == dev.address.val) {
                // acknowledge start request
                log info, 2, i2c_comms: "i2c start message targeting device received (addr=0x%.2x)", address;
                
                // Comms now inside a transaction 
                i2cregs.i2c_slave_state.active.set_val(1);            
                
                // and then send ack to master that we did indeed get it 
                i2c_link.i2c_master_v2.acknowledge(I2C_ack);
            } else {
                // OK, start was for some other device. 
                // Make sure that we are not thinking we are active. 
                i2cregs.i2c_slave_state.active.set_val(0);  
                // And send a noack 
                i2c_link.i2c_master_v2.acknowledge(I2C_noack);
            }
            
            update_i2c_notify_statemachine_start();
        }
    
        method read() {
            // Log that we receive
            log info, 3, i2c_comms: "read incoming";
                            
            // Check if we are in a transaction at all
            if (i2cregs.i2c_slave_state.active.get_val() == 1) {
                local uint8 readvalue;
                readvalue = i2cregs.button_pressed.val; 
                
                // some helpful logging
                log info, 3, i2c_comms: "read received, inside transaction";
                log info, 3 : "I2C read of button value: replying with %d", readvalue;
                
                // Reply with the current button value
                i2c_link.i2c_master_v2.read_response(readvalue);
                
            } 
            else
            {
                // Active is zero but we got a read
                log spec_viol, 1, i2c_comms: "I2C read seen without preceding start, replying zero";
                i2c_link.i2c_master_v2.read_response(0);            
            }
            
        }
    
        method write(uint8 value) {
            // Log that we receive
            log info, 4, i2c_comms: "write incoming";
            
            // Check if we are in a transaction at all
            if (i2cregs.i2c_slave_state.active.get_val() == 1) {
                // This is ours
                log info, 2, i2c_comms: "write received, inside transaction, value = 0x%.2x", value;
                
                // acknowledge write request
                i2c_link.i2c_master_v2.acknowledge(I2C_ack);
    
                // Update the button state with the received byte
                i2cregs.button_pressed.val = value; 
    
                // save last written byte for diagnostics
                written_value.val = value;
            
            } 
            else
            {
                // Active is zero but we got a write
                log spec_viol, 1, i2c_comms: "I2C write seen without preceding start, ignoring";
            }
        }
    
        method stop() {
            // Log that we see a stop - 
            // i2c in Simics makes ALL devices see this, even if they were
            // not the device targeted by the current transaction 
            log info, 4, i2c_comms: "stop incoming";
            
            // Note that bus is now free
            log info, 3, i2c_comms: "i2c bus is now free";
            i2cregs.i2c_slave_state.busy.set_val(0);
                        
            // If we are active, log that we got a stop
            if (i2cregs.i2c_slave_state.active.get_val() == 1) {
                log info, 2, i2c_comms: "stop received inside transaction, setting device state to inactive";
                // terminate the transaction
                i2cregs.i2c_slave_state.active.set_val(0);
                // do not send an ACK - I2C protocol is done once we see
                // the stop message and does not expect or accept an ack from here 
            }
            
            update_i2c_notify_statemachine_stop();
        }
    
        method addresses() -> (attr_value_t) {
            local attr_value_t result;
            result = SIM_make_attr_list(
                2, SIM_make_attr_uint64(address.val * 2),
                SIM_make_attr_uint64(address.val * 2 + 1));
            return result;
        }
    }  // end of slave interface 
    
} // end of port

attribute address is (uint64_attr) {
    param documentation = "7-bit address on the i2c bus. It can be any "
        + "valid i2c address in range of [0, 127].";
    param configuration = "required";
}


attribute notify_address is (uint64_attr) {
    param documentation = "I2C address to send button press notifications (writes) to.";
    param configuration = "required";
}


//=============================================================================
// I2C master interface
// 
// This is a state machine that goes through a number of states stored in the
// i2c_master_state register in the i2c register bank. 
//
// All places that react to events in the notify state machine should call
// this.  
// 
//-----------------------------------------------------------------------------

// Second part of the port
port i2c_in {

    implement i2c_master_v2 {
        method acknowledge(i2c_ack_t ack_value) {
            log info, 3, i2c_comms : "i2c ack incoming (%d)", ack_value;
            
            update_i2c_notify_statemachine_ack(ack_value);
        }
        method read_response(uint8 value) {
            log spec_viol, 1, i2c_comms : "Button is not doing any reads, but still got a read_response, something is off";
        }
    }

}

//-----------------------------------------------------------------------------
// i2c sending state machine
//-----------------------------------------------------------------------------

param not_working = 0;
param wait_for_free_bus = 1;
param wait_for_arbitration= 2; 
param wait_for_write_ack = 3;
param wait_for_write_ack_2 = 4;

// Methods called when start, ack, stop happen
method update_i2c_notify_statemachine_start() {
    if ( i2cregs.i2c_master_state.val == not_working ) {
        // OK, just not doing anything 
        return;
    }
    if ( i2cregs.i2c_master_state.val == wait_for_arbitration ) {
        // we lost arbitration
        log info, 3, i2c_comms : "Lost this arbitration round, wait for bus to free up";
        i2cregs.i2c_master_state.val = wait_for_free_bus;
    }
}

method update_i2c_notify_statemachine_ack(i2c_ack_t ack_value) {
    log info, 3, i2c_comms : "update_i2c_notify_statemachine_ack(%d)", ack_value;
    
    if ( ack_value == I2C_noack ) {
        // noack = something is wrong. Finish up and do nothing more. 
        log info, 3, i2c_comms : "  noAck - ending transaction";
         i2cregs.i2c_master_state.val = not_working;
         i2c_link.i2c_slave_v2.stop();
    } else {
        // ack = we did get an ack, check current state for what to do 
        if ( i2cregs.i2c_master_state.val == wait_for_arbitration ) {
           // we won arbitration and can continue to do writes!  
           // first a 'b' and then our own address 
            log info, 3, i2c_comms : "  We have won arbitration, sending 'b'";
            i2cregs.i2c_master_state.val = wait_for_write_ack;
            i2c_link.i2c_slave_v2.write( 'b' );
              
        } else if ( i2cregs.i2c_master_state.val == wait_for_write_ack ) {
            // first write succeeded, now we can do the second
            log info, 3, i2c_comms : "  Sending out second byte (%d)", address.val;            
            i2cregs.i2c_master_state.val = wait_for_write_ack_2;
            i2c_link.i2c_slave_v2.write( address.val );  
            
        } else if ( i2cregs.i2c_master_state.val == wait_for_write_ack_2 ) {
            // second write acked, terminate sending
            // end the send 
            log info, 3, i2c_comms : "update_i2c_notify_statemachine_ack - write completed, stop";                        
            i2cregs.i2c_master_state.val = not_working;
            i2c_link.i2c_slave_v2.stop();
        }
        
    }
}

method update_i2c_notify_statemachine_stop() {   
    if ( i2cregs.i2c_master_state.val == not_working ) {
        // OK, just not doing anything 
        return;
    }
    if ( i2cregs.i2c_master_state.val == wait_for_free_bus ) {
        // this is called when we are waiting for a free link and 
        // the model sees a stop call - which means we have the chance
        // to grab the bus and send
        i2cregs.i2c_master_state.val = wait_for_arbitration;
        i2c_link.i2c_slave_v2.start( (notify_address.val << 1) + 0 );  // 0 bit == write
        return;
    } 
    
    // Log spurious activity
    log info, 3, i2c_comms : "Stop action in state machine called but not in a state where it can do something, something is off";
}

// 
// Call this method to begin the process of sending out a notification
//
method start_send_i2c_notify() {
    log info, 3, i2c_comms: "Starting to send notification over i2c bus";
    // Check that we are not already trying to send
    // if so, we just ignore the new button press
    if ( i2cregs.i2c_master_state.val != not_working ) {
        log info, 1: "Trying to send a second notification while one is already ongoing, discarding";
        return;
    } 
    
    // Check if the bus is free
    if ( i2cregs.i2c_slave_state.busy.get_val() == 1 ) {
        log info, 3, i2c_comms: "Bus is busy, set up to wait for it to get freed";
        // We have noted a busy bus
        // Set the bus to wait for it to become free
        i2cregs.i2c_master_state.val = wait_for_free_bus;
    } else {
        local int start_address = (notify_address.val << 1) + 0;
        log info, 3, i2c_comms: "Bus is free, send start(%d) to get going", start_address;
        // Get going
        i2c_link.i2c_slave_v2.start( start_address );  // 0 bit == write 
        i2cregs.i2c_master_state.val = wait_for_arbitration; 
    }
}


//=============================================================================
// Signal interface from the system panel (or other source)
// 
// We react to the "signal raise" and ignore signal lowering
// 
// Note that the device needs to keep track of the current state locally, 
// since signal interfaces only report changes, not the current state. 
//
//-----------------------------------------------------------------------------
port button_in {
    param desc = "Button presses from the panel";
    
    implement signal {
        method signal_raise() {
            log info, 2: "button pressed (signal raised)";
            
            // remember that we have a button press
            i2cregs.button_pressed.val = 1;
            
            // start process of sending notification across I2C
            start_send_i2c_notify();
        }
        method signal_lower() {
            log info, 3: "button released, doing nothing";
        }
    }
}




//=============================================================================
// Device registers 
// - The registers could be done as attributes as they are not memory-mapped
// - Putting them with addresses in a bank makes them visible to various
//   inspection tools
// - Register offsets are old-school byte-packed
//-----------------------------------------------------------------------------

bank i2cregs {
    // Put I2C registers into a register bank for debug access from Simics
    // Note that this is not how most i2c devices do their modeling
    param desc = "Register bank holding I2C state (not software addressable)";
    
    param register_size = 1;
    
    register button_pressed @ 0x00 is (read_only) "Has the button been pressed?";
        
    register i2c_slave_state @ 0x03 is (read_only)  {
        field active   @ [0]   {
            param desc = "Active inbound transaction targeting this device";
        }            
        field busy   @ [1]   {
            param desc = "Is the I2C bus busy? (from start() to stop() call)";
        }            
        field rsv  @ [7:2] is (reserved);
    }
    
    register i2c_master_state @ 0x04 is (read_only) "Hold current notify state machine state";
}



// For debug and test purposes
attribute written_value is (uint64_attr) {
    param documentation = "Last byte written to this device.";
}

