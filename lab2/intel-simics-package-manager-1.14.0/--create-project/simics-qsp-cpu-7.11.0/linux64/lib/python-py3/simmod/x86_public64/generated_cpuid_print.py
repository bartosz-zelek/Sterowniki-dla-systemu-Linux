"""
/*
  This file is autogenerated. Do not edit directly.

  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/
"""

# Python source generated for classes: ['x86-skylake', 'x86QSP2', 'x86-sandybridge', 'x86-broadwell-xeon', 'x86-knights-landing', 'x86-knights-mill', 'x86-silvermont', 'x86-airmont', 'x86-haswell', 'x86-haswell-xeon', 'x86-goldmont', 'x86-goldmont-plus', 'x86-cooper-lake', 'x86ex-skx', 'x86ex-cfl', 'x86ex-clx', 'x86-experimental-fred', 'x86-goldencove-server', 'x86-tnt', 'x86-tnt-lkf', 'x86-snc', 'x86-snc-client', 'x86-snc-lkf', 'x86-wlc', 'x86ex-cnl', 'x86-glc', 'x86-glc-adl', 'x86-grt-adl']

import cli
def print_cpuid(obj, req_leaf, verbose = False, overridden = True, internal = False):
    if internal:
        verbose = True

    table_head = ""
    table_head += "      Leaf     Subleaf         EAX         EBX         ECX         EDX\n"
    table_head += "----------------------------------------------------------------------\n"

    # Text to be printed is message
    message = table_head
    # Value to be returned: subleaves in regular mode, individual fields in verbose mode
    # Value does not include table headers and other supplementary info
    value = None
    compact_lines = print_compact_cpuid(obj, overridden, req_leaf)
    message += '\n'.join(compact_lines)
    value = compact_lines
    if verbose:
        message += "\n---- CPUID bit field values ----\n"
        verbose_lines = print_verbose_cpuid(obj, internal, req_leaf)
        message +='\n'.join(verbose_lines)
        value = verbose_lines
    return cli.command_return(message, value)

def print_compact_cpuid(obj, overridden, req_leaf):
    # Determine when to cut the list of regular and extended leaves
    max_regular_leaf = obj.iface.x86_cpuid_query.cpuid_query(0, 0).a
    max_extend_leaf = obj.iface.x86_cpuid_query.cpuid_query(0x80000000, 0).a

    def get_leaf_0x0():
        # Return empty result if the leaf is outside present ranges
        if ((0x0 > max_regular_leaf and 0x0 < 0x40000000)
           or (0x0 > 0x4fffffff and 0x0 < 0x80000000)
           or (0x0 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x0 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x0, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_leaf_override is not None) or
                False):
                  omarks[0] = "*"
            if (False):
                  omarks[1] = "*"
            if (False):
                  omarks[2] = "*"
            if (False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x0           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x0

    def get_leaf_0x1():
        # Return empty result if the leaf is outside present ranges
        if ((0x1 > max_regular_leaf and 0x1 < 0x40000000)
           or (0x1 > 0x4fffffff and 0x1 < 0x80000000)
           or (0x1 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_stepping_id_override is not None) or
                (obj.cpuid_model_override is not None) or
                (obj.cpuid_family_id_override is not None) or
                (obj.cpuid_processor_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1_eax_14_15_override is not None) or
                (obj.cpuid_ext_model_id_override is not None) or
                (obj.cpuid_ext_family_id_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1_eax_28_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_brand_index_override is not None) or
                (obj.cpuid_clflush_size_override is not None) or
                (obj.cpuid_max_ids_override is not None) or
                (obj.cpuid_cpuid_physical_apic_id_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_sse3_override is not None) or
                (obj.cpuid_pclmulqdq_override is not None) or
                (obj.cpuid_dtes64_override is not None) or
                (obj.cpuid_monitor_mwait_enabled_override is not None) or
                (obj.cpuid_ds_cpl_override is not None) or
                (obj.cpuid_vmx_override is not None) or
                (obj.cpuid_smx_override is not None) or
                (obj.cpuid_eist_override is not None) or
                (obj.cpuid_tm2_override is not None) or
                (obj.cpuid_ssse3_override is not None) or
                (obj.cpuid_cnxt_id_override is not None) or
                (obj.cpuid_sdbg_override is not None) or
                (obj.cpuid_fma_override is not None) or
                (obj.cpuid_cmpxchg16b_override is not None) or
                (obj.cpuid_xtpr_update_ctl_override is not None) or
                (obj.cpuid_pdcm_override is not None) or
                (obj.cpuid_reserved_ecx_16_override is not None) or
                (obj.cpuid_pcid_override is not None) or
                (obj.cpuid_dca_override is not None) or
                (obj.cpuid_sse4_1_override is not None) or
                (obj.cpuid_sse4_2_override is not None) or
                (obj.cpuid_x2apic_override is not None) or
                (obj.cpuid_movbe_override is not None) or
                (obj.cpuid_popcnt_override is not None) or
                (obj.cpuid_tsc_deadline_override is not None) or
                (obj.cpuid_aes_override is not None) or
                (obj.cpuid_has_xsave_override is not None) or
                (obj.cpuid_osxsave_override is not None) or
                (obj.cpuid_has_avx_override is not None) or
                (obj.cpuid_f16c_override is not None) or
                (obj.cpuid_rdrand_override is not None) or
                (obj.cpuid_not_used_ecx_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_has_fpu_override is not None) or
                (obj.cpuid_vme_override is not None) or
                (obj.cpuid_de_override is not None) or
                (obj.cpuid_pse_override is not None) or
                (obj.cpuid_tsc_override is not None) or
                (obj.cpuid_has_msr_override is not None) or
                (obj.cpuid_pae_override is not None) or
                (obj.cpuid_has_mce_override is not None) or
                (obj.cpuid_cmpxchg8b_override is not None) or
                (obj.cpuid_has_apic_override is not None) or
                (obj.cpuid_reserved_edx_10_override is not None) or
                (obj.cpuid_sysenter_override is not None) or
                (obj.cpuid_has_mtrr_override is not None) or
                (obj.cpuid_pge_override is not None) or
                (obj.cpuid_mca_override is not None) or
                (obj.cpuid_has_pat_override is not None) or
                (obj.cpuid_pse36_override is not None) or
                (obj.cpuid_psn_override is not None) or
                (obj.cpuid_clflush_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1_3_20_20_override is not None) or
                (obj.cpuid_debug_store_override is not None) or
                (obj.cpuid_acpi_override is not None) or
                (obj.cpuid_mmx_override is not None) or
                (obj.cpuid_has_fxsr_override is not None) or
                (obj.cpuid_sse_override is not None) or
                (obj.cpuid_sse2_override is not None) or
                (obj.cpuid_self_snoop_override is not None) or
                (obj.cpuid_htt_override is not None) or
                (obj.cpuid_tm_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1_3_30_30_override is not None) or
                (obj.cpuid_pbe_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x1           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1

    def get_leaf_0x2():
        # Return empty result if the leaf is outside present ranges
        if ((0x2 > max_regular_leaf and 0x2 < 0x40000000)
           or (0x2 > 0x4fffffff and 0x2 < 0x80000000)
           or (0x2 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x2 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x2, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_descr_num_override is not None) or
                (obj.cpuid_llc_descr_override is not None) or
                (obj.cpuid_tlb_descr_override is not None) or
                (obj.cpuid_null_descr_2_eax_31_24_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_prefetch_size_override is not None) or
                (obj.cpuid_null_descr_2_ebx_8_15_override is not None) or
                (obj.cpuid_null_descr_2_ebx_16_23_override is not None) or
                (obj.cpuid_null_descr_2_ebx_24_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_null_descr_2_ecx_0_7_override is not None) or
                (obj.cpuid_null_descr_2_ecx_8_15_override is not None) or
                (obj.cpuid_null_descr_2_ecx_16_23_override is not None) or
                (obj.cpuid_null_descr_2_ecx_24_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_null_descr_2_edx_0_7_override is not None) or
                (obj.cpuid_null_descr_2_edx_8_15_override is not None) or
                (obj.cpuid_null_descr_2_edx_16_23_override is not None) or
                (obj.cpuid_null_descr_2_edx_24_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x2           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x2

    def get_leaf_0x4():
        # Return empty result if the leaf is outside present ranges
        if ((0x4 > max_regular_leaf and 0x4 < 0x40000000)
           or (0x4 > 0x4fffffff and 0x4 < 0x80000000)
           or (0x4 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x4 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cache_type_l1d_override is not None) or
                (obj.cpuid_cache_level_l1d_override is not None) or
                (obj.cpuid_sel_init_lvl_l1d_override is not None) or
                (obj.cpuid_fully_assoc_l1d_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_0_eax_10_13_override is not None) or
                (obj.cpuid_max_shar_ids_l1d_override is not None) or
                (obj.cpuid_max_ids_pkg_l1d_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_line_size_l1d_override is not None) or
                (obj.cpuid_phys_partit_l1d_override is not None) or
                (obj.cpuid_assoc_ways_l1d_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_number_sets_l1d_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_wbinvd_invd_l1d_override is not None) or
                (obj.cpuid_cache_incl_l1d_override is not None) or
                (obj.cpuid_complex_idx_l1d_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_0_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x4           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x4 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cache_type_l1i_override is not None) or
                (obj.cpuid_cache_level_l1i_override is not None) or
                (obj.cpuid_sel_init_lvl_l1i_override is not None) or
                (obj.cpuid_fully_assoc_l1i_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_1_eax_10_13_override is not None) or
                (obj.cpuid_max_shar_ids_l1i_override is not None) or
                (obj.cpuid_max_ids_pkg_l1i_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_line_size_l1i_override is not None) or
                (obj.cpuid_phys_partit_l1i_override is not None) or
                (obj.cpuid_assoc_ways_l1i_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_number_sets_l1i_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_wbinvd_invd_l1i_override is not None) or
                (obj.cpuid_cache_incl_l1i_override is not None) or
                (obj.cpuid_complex_idx_l1i_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_1_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x4           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x4 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cache_type_l2_override is not None) or
                (obj.cpuid_cache_level_l2_override is not None) or
                (obj.cpuid_sel_init_lvl_l2_override is not None) or
                (obj.cpuid_fully_assoc_l2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_2_eax_10_13_override is not None) or
                (obj.cpuid_max_shar_ids_l2_override is not None) or
                (obj.cpuid_max_ids_pkg_l2_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_line_size_l2_override is not None) or
                (obj.cpuid_phys_partit_l2_override is not None) or
                (obj.cpuid_assoc_ways_l2_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_number_sets_l2_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_wbinvd_invd_l2_override is not None) or
                (obj.cpuid_cache_incl_l2_override is not None) or
                (obj.cpuid_complex_idx_l2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_2_3_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_2_3_4_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_2_edx_5_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x4           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x4 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cache_type_l3_override is not None) or
                (obj.cpuid_cache_level_l3_override is not None) or
                (obj.cpuid_sel_init_lvl_l3_override is not None) or
                (obj.cpuid_fully_assoc_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_3_eax_10_13_override is not None) or
                (obj.cpuid_max_shar_ids_l3_override is not None) or
                (obj.cpuid_max_ids_pkg_l3_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_line_size_l3_override is not None) or
                (obj.cpuid_phys_partit_l3_override is not None) or
                (obj.cpuid_assoc_ways_l3_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_number_sets_l3_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_wbinvd_invd_l3_override is not None) or
                (obj.cpuid_cache_incl_l3_override is not None) or
                (obj.cpuid_complex_idx_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_3_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x4           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x4 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x4_4_0_0_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_0_5_7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_0_8_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_0_9_9_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_eax_10_13_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_0_14_25_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_0_26_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x4_4_1_0_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_1_12_21_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_1_22_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x4_4_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x4_4_3_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_3_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_3_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x4_4_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x4           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x4

    def get_leaf_0x5():
        # Return empty result if the leaf is outside present ranges
        if ((0x5 > max_regular_leaf and 0x5 < 0x40000000)
           or (0x5 > 0x4fffffff and 0x5 < 0x80000000)
           or (0x5 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x5 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x5, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_monitor_min_size_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x5_eax_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_monitor_max_size_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x5_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_mwait_extensions_override is not None) or
                (obj.cpuid_interrupt_break_mwait_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x5_ecx_2_2_override is not None) or
                (obj.cpuid_monitorless_mwait_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x5_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_num_c0_substates_override is not None) or
                (obj.cpuid_num_c1_substates_override is not None) or
                (obj.cpuid_num_c2_substates_override is not None) or
                (obj.cpuid_num_c3_substates_override is not None) or
                (obj.cpuid_num_c4_substates_override is not None) or
                (obj.cpuid_num_c5_substates_override is not None) or
                (obj.cpuid_num_c6_substates_override is not None) or
                (obj.cpuid_num_c7_substates_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x5           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x5

    def get_leaf_0x6():
        # Return empty result if the leaf is outside present ranges
        if ((0x6 > max_regular_leaf and 0x6 < 0x40000000)
           or (0x6 > 0x4fffffff and 0x6 < 0x80000000)
           or (0x6 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x6 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x6, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_digital_therm_sensor_override is not None) or
                (obj.cpuid_turbo_boost_available_override is not None) or
                (obj.cpuid_arat_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_eax_3_3_override is not None) or
                (obj.cpuid_pln_override is not None) or
                (obj.cpuid_therm_sensor_override is not None) or
                (obj.cpuid_has_pkg_lvl_therm_override is not None) or
                (obj.cpuid_hwp_base_override is not None) or
                (obj.cpuid_hwp_interrupts_override is not None) or
                (obj.cpuid_hwp_activity_windows_override is not None) or
                (obj.cpuid_hwp_energy_performance_preference_override is not None) or
                (obj.cpuid_hwp_request_pkg_support_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_eax_12_12_override is not None) or
                (obj.cpuid_hdc_override is not None) or
                (obj.cpuid_hw_guided_sched_override is not None) or
                (obj.cpuid_hwp_highest_change_notification_override is not None) or
                (obj.cpuid_hwp_peci_support_override is not None) or
                (obj.cpuid_hwp_thread_request_support_override is not None) or
                (obj.cpuid_hwp_req_msr_override is not None) or
                (obj.cpuid_hw_sched_int_override is not None) or
                (obj.cpuid_ignore_idle_hwp_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_0_21_21_override is not None) or
                (obj.cpuid_hwp_ctrl_msr_supp_override is not None) or
                (obj.cpuid_hw_sched_plus_int_override is not None) or
                (obj.cpuid_hw_sched_plus_thread_metadata_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_eax_25_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_int_threshold_num_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_ebx_4_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_hw_coordination_feedb_override is not None) or
                (obj.cpuid_acnt2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_ecx_2_2_override is not None) or
                (obj.cpuid_perf_energy_bias_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_ecx_4_7_override is not None) or
                (obj.cpuid_hgs_plus_supp_classes_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_hgs_capabilities_override is not None) or
                (obj.cpuid_hgs_table_size_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x6_edx_12_15_override is not None) or
                (obj.cpuid_hgs_table_index_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x6           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x6

    def get_leaf_0x7():
        # Return empty result if the leaf is outside present ranges
        if ((0x7 > max_regular_leaf and 0x7 < 0x40000000)
           or (0x7 > 0x4fffffff and 0x7 < 0x80000000)
           or (0x7 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x7 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_input_subleaf_7_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_fsgsbase_override is not None) or
                (obj.cpuid_tsc_adjust_override is not None) or
                (obj.cpuid_sgx_override is not None) or
                (obj.cpuid_bmi1_override is not None) or
                (obj.cpuid_hle_override is not None) or
                (obj.cpuid_avx2_override is not None) or
                (obj.cpuid_fdp_deprecation_override is not None) or
                (obj.cpuid_smep_override is not None) or
                (obj.cpuid_bmi2_override is not None) or
                (obj.cpuid_enh_string_instr_override is not None) or
                (obj.cpuid_invpcid_override is not None) or
                (obj.cpuid_rtm_override is not None) or
                (obj.cpuid_rdt_m_override is not None) or
                (obj.cpuid_fpu_cs_ds_deprecation_override is not None) or
                (obj.cpuid_has_mpx_override is not None) or
                (obj.cpuid_rdt_a_override is not None) or
                (obj.cpuid_has_avx512f_override is not None) or
                (obj.cpuid_avx512dq_override is not None) or
                (obj.cpuid_rdseed_override is not None) or
                (obj.cpuid_adx_override is not None) or
                (obj.cpuid_has_smap_override is not None) or
                (obj.cpuid_avx512ifma_override is not None) or
                (obj.cpuid_reserved_ebx_22_override is not None) or
                (obj.cpuid_clflushopt_override is not None) or
                (obj.cpuid_clwb_override is not None) or
                (obj.cpuid_rtit_override is not None) or
                (obj.cpuid_avx512pf_override is not None) or
                (obj.cpuid_avx512er_override is not None) or
                (obj.cpuid_avx512cd_override is not None) or
                (obj.cpuid_sha_override is not None) or
                (obj.cpuid_avx512bw_override is not None) or
                (obj.cpuid_avx512vl_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_prefetchwt1_override is not None) or
                (obj.cpuid_avx512vbmi_override is not None) or
                (obj.cpuid_umip_override is not None) or
                (obj.cpuid_pku_override is not None) or
                (obj.cpuid_ospke_override is not None) or
                (obj.cpuid_waitpkg_override is not None) or
                (obj.cpuid_avx512_vbmi2_override is not None) or
                (obj.cpuid_cet_ss_override is not None) or
                (obj.cpuid_gfni_override is not None) or
                (obj.cpuid_vaes_override is not None) or
                (obj.cpuid_vpclmulqdq_override is not None) or
                (obj.cpuid_avx512vnni_override is not None) or
                (obj.cpuid_avx512_bitalg_override is not None) or
                (obj.cpuid_tme_override is not None) or
                (obj.cpuid_avx512_vpopcntdq_override is not None) or
                (obj.cpuid_fzm_override is not None) or
                (obj.cpuid_la57_override is not None) or
                (obj.cpuid_mawau_override is not None) or
                (obj.cpuid_rdpid_override is not None) or
                (obj.cpuid_kl_supported_override is not None) or
                (obj.cpuid_bus_lock_intercept_override is not None) or
                (obj.cpuid_cldemote_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_2_26_26_override is not None) or
                (obj.cpuid_movdiri_override is not None) or
                (obj.cpuid_movdir64b_override is not None) or
                (obj.cpuid_enqcmd_override is not None) or
                (obj.cpuid_sgx_lc_override is not None) or
                (obj.cpuid_pks_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_sgx_tem_override is not None) or
                (obj.cpuid_server_attestation_override is not None) or
                (obj.cpuid_avx512_4vnniw_override is not None) or
                (obj.cpuid_avx512_4fmaps_override is not None) or
                (obj.cpuid_fast_short_rep_movsb_override is not None) or
                (obj.cpuid_user_interrupts_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_edx_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_3_7_7_override is not None) or
                (obj.cpuid_avx512vp2intersect_override is not None) or
                (obj.cpuid_srbds_ctrl_override is not None) or
                (obj.cpuid_md_clear_override is not None) or
                (obj.cpuid_rtm_always_abort_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_3_12_12_override is not None) or
                (obj.cpuid_tsx_force_abort_override is not None) or
                (obj.cpuid_serialize_override is not None) or
                (obj.cpuid_hetero_override is not None) or
                (obj.cpuid_tsxldtrk_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_3_17_17_override is not None) or
                (obj.cpuid_pconfig_override is not None) or
                (obj.cpuid_arch_lbrs_override is not None) or
                (obj.cpuid_cet_ibt_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_0_3_21_21_override is not None) or
                (obj.cpuid_amx_bf16_override is not None) or
                (obj.cpuid_avx512fp16_override is not None) or
                (obj.cpuid_amx_tile_override is not None) or
                (obj.cpuid_amx_int8_override is not None) or
                (obj.cpuid_ibrs_ibpb_override is not None) or
                (obj.cpuid_stibp_override is not None) or
                (obj.cpuid_l1d_flush_override is not None) or
                (obj.cpuid_arch_capabilities_override is not None) or
                (obj.cpuid_core_capabilities_override is not None) or
                (obj.cpuid_ssbd_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x7           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x7 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sha512_override is not None) or
                (obj.cpuid_sm3_override is not None) or
                (obj.cpuid_sm4_override is not None) or
                (obj.cpuid_rao_int_override is not None) or
                (obj.cpuid_avx_vnni_override is not None) or
                (obj.cpuid_avx512_bf16_override is not None) or
                (obj.cpuid_lass_override is not None) or
                (obj.cpuid_cmpccxadd_override is not None) or
                (obj.cpuid_arch_perfmon_ext_leaf_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_9_9_override is not None) or
                (obj.cpuid_fast_zero_movsb_override is not None) or
                (obj.cpuid_fast_short_stosb_override is not None) or
                (obj.cpuid_fast_short_cmpsb_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_13_13_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_14_14_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_15_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_16_16_override is not None) or
                (obj.cpuid_fred_override is not None) or
                (obj.cpuid_lkgs_override is not None) or
                (obj.cpuid_wrmsrns_override is not None) or
                (obj.cpuid_nmi_source_override is not None) or
                (obj.cpuid_amx_fp16_override is not None) or
                (obj.cpuid_hgs_plus_hreset_override is not None) or
                (obj.cpuid_avx_ifma_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_24_24_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_25_25_override is not None) or
                (obj.cpuid_arch_lam_override is not None) or
                (obj.cpuid_msrlist_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_28_28_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_29_29_override is not None) or
                (obj.cpuid_invd_disable_post_bios_done_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_0_31_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_ppin_override is not None) or
                (obj.cpuid_tse_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_ebx_2_2_override is not None) or
                (obj.cpuid_cpuidmaxval_lim_rmv_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_ebx_4_28_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_1_29_29_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_1_30_30_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_1_31_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_1_2_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_2_1_1_override is not None) or
                (obj.cpuid_x86s_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_ecx_3_3_override is not None) or
                (obj.cpuid_sipi64_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_2_5_5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_2_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_ecx_7_29_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_2_30_30_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_2_31_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_1_edx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_3_3_override is not None) or
                (obj.cpuid_avx_vnni_int8_override is not None) or
                (obj.cpuid_avx_ne_convert_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_7_7_override is not None) or
                (obj.cpuid_amx_complex_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_9_9_override is not None) or
                (obj.cpuid_avx_vnni_int16_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_11_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_12_12_override is not None) or
                (obj.cpuid_utmr_override is not None) or
                (obj.cpuid_prefetchiti_override is not None) or
                (obj.cpuid_user_msr_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_16_16_override is not None) or
                (obj.cpuid_uiret_loads_uif_override is not None) or
                (obj.cpuid_cet_sss_override is not None) or
                (obj.cpuid_avx10_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_20_20_override is not None) or
                (obj.cpuid_apx_f_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_22_22_override is not None) or
                (obj.cpuid_monitorless_mwait_alt_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_24_24_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_edx_25_29_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_30_30_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_1_3_31_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x7           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x7 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x7_2_eax_0_9_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_2_0_10_10_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_2_0_11_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_2_0_12_12_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_2_eax_13_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_2_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_2_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_pfsd_bit_override is not None) or
                (obj.cpuid_ipred_ctrl_override is not None) or
                (obj.cpuid_rrsba_ctrl_override is not None) or
                (obj.cpuid_ddpd_ctrl_override is not None) or
                (obj.cpuid_bhi_ctrl_override is not None) or
                (obj.cpuid_mcdt_no_override is not None) or
                (obj.cpuid_memory_ctrl_override is not None) or
                (obj.cpuid_mon_umon_mitg_no_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_2_edx_8_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x7           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x7 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x7_3_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_3_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_3_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_3_3_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_3_edx_1_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x7           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x7 subleaf 15
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 15)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x7_15_0_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x7_15_eax_1_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_15_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_15_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x7_15_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x7          15  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x7

    def get_leaf_0x9():
        # Return empty result if the leaf is outside present ranges
        if ((0x9 > max_regular_leaf and 0x9 < 0x40000000)
           or (0x9 > 0x4fffffff and 0x9 < 0x80000000)
           or (0x9 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x9 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x9, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_platform_dca_cap_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x9_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x9_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x9_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0x9           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x9

    def get_leaf_0xa():
        # Return empty result if the leaf is outside present ranges
        if ((0xa > max_regular_leaf and 0xa < 0x40000000)
           or (0xa > 0x4fffffff and 0xa < 0x80000000)
           or (0xa > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0xa subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0xa, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_perfmon_version_override is not None) or
                (obj.cpuid_num_perf_counters_override is not None) or
                (obj.cpuid_perf_counter_width_override is not None) or
                (obj.cpuid_perf_events_length_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_core_cycle_not_avail_override is not None) or
                (obj.cpuid_inst_retired_not_avail_override is not None) or
                (obj.cpuid_ref_cycle_not_avail_override is not None) or
                (obj.cpuid_llc_ref_evt_not_avail_override is not None) or
                (obj.cpuid_llc_ref_miss_not_avail_override is not None) or
                (obj.cpuid_branch_retir_not_avail_override is not None) or
                (obj.cpuid_branch_mispr_not_avail_override is not None) or
                (obj.cpuid_topdown_slots_not_avail_override is not None) or
                (obj.cpuid_topdown_backend_bound_not_avail_override is not None) or
                (obj.cpuid_topdown_bad_speculation_not_avail_override is not None) or
                (obj.cpuid_topdown_frontend_bound_not_avail_override is not None) or
                (obj.cpuid_topdown_retiring_not_avail_override is not None) or
                (obj.cpuid_lbr_entry_inserts_not_avail_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_ebx_13_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_fixed_counter_support_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_fixed_perf_ctr_num_override is not None) or
                (obj.cpuid_fixed_perf_ctr_width_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_edx_13_13_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_3_14_14_override is not None) or
                (obj.cpuid_anythread_deprecation_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_3_16_16_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_3_17_19_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xa_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xa           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0xa

    def get_leaf_0xb():
        # Return empty result if the leaf is outside present ranges
        if ((0xb > max_regular_leaf and 0xb < 0x40000000)
           or (0xb > 0x4fffffff and 0xb < 0x80000000)
           or (0xb > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0xb subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0xb, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_nxt_lvl_apic_shift_sl0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_0_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_num_logic_cpus_level0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_0_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_level_number_0_override is not None) or
                (obj.cpuid_level_type_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_0_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_x2apic_id_sl0_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xb           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xb subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0xb, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_nxt_lvl_apic_shift_sl1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_1_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_num_logic_cpus_level1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_1_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_level_number_1_override is not None) or
                (obj.cpuid_level_type_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xb_1_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_x2apic_id_sl1_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xb           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0xb

    def get_leaf_0xd():
        # Return empty result if the leaf is outside present ranges
        if ((0xd > max_regular_leaf and 0xd < 0x40000000)
           or (0xd > 0x4fffffff and 0xd < 0x80000000)
           or (0xd > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0xd subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xcr0_mask_lo_x87_override is not None) or
                (obj.cpuid_xcr0_mask_lo_sse_override is not None) or
                (obj.cpuid_xcr0_mask_lo_avx256_override is not None) or
                (obj.cpuid_xcr0_mask_lo_mpx_bndregs_override is not None) or
                (obj.cpuid_xcr0_mask_lo_mpx_bndcfs_override is not None) or
                (obj.cpuid_xcr0_mask_lo_avx3_kmask_override is not None) or
                (obj.cpuid_xcr0_mask_lo_avx3_zmm_lo_override is not None) or
                (obj.cpuid_xcr0_mask_lo_avx3_zmm_hi_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_0_eax_8_8_override is not None) or
                (obj.cpuid_xcr0_mask_lo_pkru_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_0_eax_10_12_override is not None) or
                (obj.cpuid_xcr0_mask_lo_ia32_xss_lo_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_0_eax_14_15_override is not None) or
                (obj.cpuid_xcr0_mask_lo_ia32_xss_hi_override is not None) or
                (obj.cpuid_xcr0_mask_lo_tileconfig_override is not None) or
                (obj.cpuid_xcr0_mask_lo_tiledata_override is not None) or
                (obj.cpuid_xcr0_mask_lo_apx_f_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_0_eax_20_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_area_enabled_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_area_supported_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_xcr0_mask_upper_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_has_xsaveopt_override is not None) or
                (obj.cpuid_has_xsavec_override is not None) or
                (obj.cpuid_has_xgetbv_override is not None) or
                (obj.cpuid_has_xsaves_override is not None) or
                (obj.cpuid_xfd_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_1_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsaves_area_enabled_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_1_ecx_0_7_override is not None) or
                (obj.cpuid_xss_mask_lo_pt_override is not None) or
                (obj.cpuid_xss_mask_lo_xcr0_override is not None) or
                (obj.cpuid_xss_mask_lo_pasid_override is not None) or
                (obj.cpuid_xss_mask_lo_cet_u_override is not None) or
                (obj.cpuid_xss_mask_lo_cet_s_override is not None) or
                (obj.cpuid_xss_mask_lo_hdc_override is not None) or
                (obj.cpuid_xss_mask_lo_uint_override is not None) or
                (obj.cpuid_xss_mask_lo_arch_lbr_override is not None) or
                (obj.cpuid_xss_mask_lo_hwp_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_1_ecx_17_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_xss_mask_upper_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_2_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_2_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_2_override is not None) or
                (obj.cpuid_xsave_aligned_2_override is not None) or
                (obj.cpuid_xsave_xfd_fail_2_override is not None) or
                (obj.cpuid_xsave_benign_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_2_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_2_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_3_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_3_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_3_override is not None) or
                (obj.cpuid_xsave_aligned_3_override is not None) or
                (obj.cpuid_xsave_xfd_fail_3_override is not None) or
                (obj.cpuid_xsave_benign_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_3_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_3_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_4_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_4_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_4_override is not None) or
                (obj.cpuid_xsave_aligned_4_override is not None) or
                (obj.cpuid_xsave_xfd_fail_4_override is not None) or
                (obj.cpuid_xsave_benign_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_4_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_4_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_5_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_5_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_5_override is not None) or
                (obj.cpuid_xsave_aligned_5_override is not None) or
                (obj.cpuid_xsave_xfd_fail_5_override is not None) or
                (obj.cpuid_xsave_benign_5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_5_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_5_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_6_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_6_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_6_override is not None) or
                (obj.cpuid_xsave_aligned_6_override is not None) or
                (obj.cpuid_xsave_xfd_fail_6_override is not None) or
                (obj.cpuid_xsave_benign_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_6_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_6_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 7
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 7)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_7_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_7_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_7_override is not None) or
                (obj.cpuid_xsave_aligned_7_override is not None) or
                (obj.cpuid_xsave_xfd_fail_7_override is not None) or
                (obj.cpuid_xsave_benign_7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_7_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_7_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           7  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 8
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 8)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_rtit_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_8_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_rtit_override is not None) or
                (obj.cpuid_xsave_aligned_8_override is not None) or
                (obj.cpuid_xsave_xfd_fail_rtit_override is not None) or
                (obj.cpuid_xsave_benign_rtit_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_8_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_8_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           8  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 9
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 9)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_pku_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_pku_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_pku_override is not None) or
                (obj.cpuid_xsave_aligned_9_override is not None) or
                (obj.cpuid_xsave_xfd_fail_pku_override is not None) or
                (obj.cpuid_xsave_benign_pku_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_9_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_9_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd           9  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 10
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 10)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_pasid_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_10_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_pasid_override is not None) or
                (obj.cpuid_xsave_aligned_10_override is not None) or
                (obj.cpuid_xsave_xfd_fail_pasid_override is not None) or
                (obj.cpuid_xsave_benign_pasid_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_10_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_10_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          10  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 11
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 11)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_cet_u_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_cet_u_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_cet_u_override is not None) or
                (obj.cpuid_xsave_aligned_cet_u_override is not None) or
                (obj.cpuid_xsave_xfd_fail_cet_u_override is not None) or
                (obj.cpuid_xsave_benign_cet_u_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_11_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_11_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          11  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 12
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 12)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_cet_s_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_cet_s_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_cet_s_override is not None) or
                (obj.cpuid_xsave_aligned_0xc_override is not None) or
                (obj.cpuid_xsave_xfd_fail_cet_s_override is not None) or
                (obj.cpuid_xsave_benign_cet_s_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_12_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_12_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          12  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 13
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 13)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_13_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_13_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_ia32_xss_13_override is not None) or
                (obj.cpuid_xsave_aligned_13_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_13_ecx_2_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_13_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          13  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 14
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 14)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_uint_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_0xe_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_uint_override is not None) or
                (obj.cpuid_xsave_aligned_0xe_override is not None) or
                (obj.cpuid_xsave_xfd_fail_uint_override is not None) or
                (obj.cpuid_xsave_benign_uint_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_14_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_14_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          14  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 15
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 15)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_arch_lbr_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_arch_lbr_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_arch_lbr_override is not None) or
                (obj.cpuid_xsave_aligned_arch_lbr_override is not None) or
                (obj.cpuid_xsave_xfd_fail_arch_lbr_override is not None) or
                (obj.cpuid_xsave_benign_arch_lbr_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_15_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_15_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          15  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 16
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 16)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_hwp_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_hwp_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_hwp_override is not None) or
                (obj.cpuid_xsave_aligned_hwp_override is not None) or
                (obj.cpuid_xsave_xfd_fail_hwp_override is not None) or
                (obj.cpuid_xsave_benign_hwp_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_16_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_16_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          16  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 17
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 17)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_tileconfig_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_tileconfig_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_tileconfig_override is not None) or
                (obj.cpuid_xsave_aligned_tileconfig_override is not None) or
                (obj.cpuid_xsave_xfd_fail_tileconfig_override is not None) or
                (obj.cpuid_xsave_benign_tileconfig_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_17_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_17_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          17  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 18
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 18)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_tiledata_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_tiledata_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_tiledata_override is not None) or
                (obj.cpuid_xsave_aligned_tiledata_override is not None) or
                (obj.cpuid_xsave_xfd_fail_tiledata_override is not None) or
                (obj.cpuid_xsave_benign_tiledata_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_18_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_18_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          18  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xd subleaf 19
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 19)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_xsave_area_apx_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_xsave_offset_apx_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_xsave_supervisor_apx_override is not None) or
                (obj.cpuid_xsave_aligned_apx_override is not None) or
                (obj.cpuid_xsave_xfd_faulting_apx_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xd_19_ecx_3_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xd_19_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xd          19  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0xd

    def get_leaf_0xf():
        # Return empty result if the leaf is outside present ranges
        if ((0xf > max_regular_leaf and 0xf < 0x40000000)
           or (0xf > 0x4fffffff and 0xf < 0x80000000)
           or (0xf > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0xf subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0xf, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0xf_0_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_max_rmid_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xf_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0xf_0_edx_0_0_override is not None) or
                (obj.cpuid_rdt_m_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xf_0_edx_2_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xf           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0xf subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0xf, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0xf_1_0_0_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xf_1_eax_4_7_override is not None) or
                (obj.cpuid_ia32_qm_ctr_overflow_override is not None) or
                (obj.cpuid_io_l3_occupancy_monitor_override is not None) or
                (obj.cpuid_io_l3_ext_bm_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xf_1_eax_11_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_l3_conversion_factor_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_l3_max_rmid_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_l3_occupancy_monitor_override is not None) or
                (obj.cpuid_l3_total_bm_override is not None) or
                (obj.cpuid_l3_local_bm_override is not None) or
                (obj.cpuid_cpuid_rsvd_0xf_1_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '       0xf           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0xf

    def get_leaf_0x10():
        # Return empty result if the leaf is outside present ranges
        if ((0x10 > max_regular_leaf and 0x10 < 0x40000000)
           or (0x10 > 0x4fffffff and 0x10 < 0x80000000)
           or (0x10 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x10 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x10_0_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_0_ebx_0_0_override is not None) or
                (obj.cpuid_rdt_a_l3_override is not None) or
                (obj.cpuid_rdt_a_l2_override is not None) or
                (obj.cpuid_rdt_a_mba_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_0_ebx_4_4_override is not None) or
                (obj.cpuid_rtd_a_mem_bw_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_0_1_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_0_ebx_7_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x10 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_rdt_a_l3_bitmask_length_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_1_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_rdt_a_l3_bitmap_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_1_ecx_0_0_override is not None) or
                (obj.cpuid_rdt_io_a_l3_override is not None) or
                (obj.cpuid_rdt_a_l3_cdp_override is not None) or
                (obj.cpuid_rdt_a_l3_non_contig_mask_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_1_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_rdt_a_l3_max_cos_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_1_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x10 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_rdt_a_l2_bitmask_length_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_2_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_rdt_a_l2_bitmap_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_2_ecx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_2_2_1_1_override is not None) or
                (obj.cpuid_rdt_a_l2_cdp_override is not None) or
                (obj.cpuid_rdt_a_l2_non_contig_mask_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_2_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_rdt_a_l2_max_cos_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_2_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x10 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_rdt_a_mba_tval_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_3_eax_12_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_3_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_rdt_a_mba_per_thread_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_3_2_1_1_override is not None) or
                (obj.cpuid_rdt_a_mba_lin_override is not None) or
                (obj.cpuid_rtd_a_mba_non_contig_vals_supp_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_3_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_rdt_a_mba_max_cos_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_3_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x10 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_qos_enf_mba_max_core_throttling_override is not None) or
                (obj.cpuid_qos_enf_mba_ia32_qos_core_bw_thrtl_n_msrs_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_5_eax_12_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_5_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_5_ecx_0_2_override is not None) or
                (obj.cpuid_qos_enf_mba_bw_control_is_linear_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_5_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_qos_enf_mba_max_cos_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_5_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x10 subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x10_6_0_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_6_0_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x10_6_eax_2_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_6_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_6_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x10_6_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x10           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x10

    def get_leaf_0x12():
        # Return empty result if the leaf is outside present ranges
        if ((0x12 > max_regular_leaf and 0x12 < 0x40000000)
           or (0x12 > 0x4fffffff and 0x12 < 0x80000000)
           or (0x12 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x12 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx1_override is not None) or
                (obj.cpuid_sgx2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_0_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_0_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_eax_4_4_override is not None) or
                (obj.cpuid_sgx_enclv_override is not None) or
                (obj.cpuid_sgx_trackc_override is not None) or
                (obj.cpuid_sgx_everifyreport2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_0_8_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_eax_9_9_override is not None) or
                (obj.cpuid_sgx_eupdatesvn_override is not None) or
                (obj.cpuid_edeccssa_override is not None) or
                (obj.cpuid_ereport2_egetkey256_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_eax_13_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_sgx_miscselect_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x12_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_sgx_enc_size_32_override is not None) or
                (obj.cpuid_sgx_enc_size_64_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_0_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_secs_attr_mask_00_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_secs_attr_mask_32_63_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_secs_attr_mask_64_95_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_secs_attr_mask_96_127_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region0_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_2_eax_4_11_override is not None) or
                (obj.cpuid_epc0_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc0_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_2_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc0_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_2_ecx_4_11_override is not None) or
                (obj.cpuid_epc0_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc0_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_2_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region1_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_3_eax_4_11_override is not None) or
                (obj.cpuid_epc1_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc1_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_3_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc1_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_3_ecx_4_11_override is not None) or
                (obj.cpuid_epc1_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc1_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_3_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region2_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_4_eax_4_11_override is not None) or
                (obj.cpuid_epc2_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc2_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_4_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc2_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_4_ecx_4_11_override is not None) or
                (obj.cpuid_epc2_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc2_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_4_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region3_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_5_eax_4_11_override is not None) or
                (obj.cpuid_epc3_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc3_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_5_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc3_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_5_ecx_4_11_override is not None) or
                (obj.cpuid_epc3_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc3_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_5_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region4_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_6_eax_4_11_override is not None) or
                (obj.cpuid_epc4_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc4_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_6_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc4_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_6_ecx_4_11_override is not None) or
                (obj.cpuid_epc4_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc4_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_6_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 7
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 7)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region5_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_7_eax_4_11_override is not None) or
                (obj.cpuid_epc5_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc5_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_7_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc5_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_7_ecx_4_11_override is not None) or
                (obj.cpuid_epc5_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc5_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_7_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           7  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 8
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 8)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region6_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_8_eax_4_11_override is not None) or
                (obj.cpuid_epc6_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc6_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_8_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc6_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_8_ecx_4_11_override is not None) or
                (obj.cpuid_epc6_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc6_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_8_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           8  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x12 subleaf 9
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 9)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_sgx_region7_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_9_eax_4_11_override is not None) or
                (obj.cpuid_epc7_phys_addr_31_12_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_epc7_phys_addr_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_9_ebx_20_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_epc7_prot_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_9_ecx_4_11_override is not None) or
                (obj.cpuid_epc7_size_31_12_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_epc7_size_51_32_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x12_9_edx_20_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x12           9  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x12

    def get_leaf_0x14():
        # Return empty result if the leaf is outside present ranges
        if ((0x14 > max_regular_leaf and 0x14 < 0x40000000)
           or (0x14 > 0x4fffffff and 0x14 < 0x80000000)
           or (0x14 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x14 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x14, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_rtit_subleaf_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cr3_filtering_override is not None) or
                (obj.cpuid_cycle_accurate_mode_override is not None) or
                (obj.cpuid_ip_filtering_override is not None) or
                (obj.cpuid_mtc_supported_override is not None) or
                (obj.cpuid_ptwrite_override is not None) or
                (obj.cpuid_power_event_trace_override is not None) or
                (obj.cpuid_psb_pmi_injection_override is not None) or
                (obj.cpuid_event_trace_enable_override is not None) or
                (obj.cpuid_tnt_disable_override is not None) or
                (obj.cpuid_trigger_tracing_supp_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_0_1_10_10_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_0_1_11_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_0_ebx_12_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_topa_output_override is not None) or
                (obj.cpuid_topa_multiple_regions_override is not None) or
                (obj.cpuid_single_range_output_override is not None) or
                (obj.cpuid_trace_fabric_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_0_ecx_4_30_override is not None) or
                (obj.cpuid_ip_payload_lip_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x14_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x14           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x14 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x14, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_address_ranges_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_1_eax_3_7_override is not None) or
                (obj.cpuid_ia32_rtit_triggern_cfg_msrs_num_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_1_eax_11_15_override is not None) or
                (obj.cpuid_mtc_period_options_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cycle_threshold_value_override is not None) or
                (obj.cpuid_psb_frequencies_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_trigger_action_attribution_override is not None) or
                (obj.cpuid_trigger_actions_trace_pause_and_resume_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_1_ecx_2_14_override is not None) or
                (obj.cpuid_trigger_input_dr_match_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x14_1_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x14_1_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x14           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x14

    def get_leaf_0x15():
        # Return empty result if the leaf is outside present ranges
        if ((0x15 > max_regular_leaf and 0x15 < 0x40000000)
           or (0x15 > 0x4fffffff and 0x15 < 0x80000000)
           or (0x15 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x15 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x15, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_denominator_tsc_to_core_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_numerator_tsc_to_core_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_soc_crystal_frequency_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x15_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x15           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x15

    def get_leaf_0x16():
        # Return empty result if the leaf is outside present ranges
        if ((0x16 > max_regular_leaf and 0x16 < 0x40000000)
           or (0x16 > 0x4fffffff and 0x16 < 0x80000000)
           or (0x16 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x16 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x16, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_base_freq_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x16_eax_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_max_freq_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x16_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_bus_freq_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x16_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x16_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x16           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x16

    def get_leaf_0x17():
        # Return empty result if the leaf is outside present ranges
        if ((0x17 > max_regular_leaf and 0x17 < 0x40000000)
           or (0x17 > 0x4fffffff and 0x17 < 0x80000000)
           or (0x17 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x17 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_input_subleaf_0x17_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_soc_vendor_id_override is not None) or
                (obj.cpuid_is_vendor_scheme_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x17_0_ebx_17_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_soc_project_id_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_soc_stepping_id_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x17           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x17 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_soc_vendor_brand_str_01_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_02_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_03_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_04_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x17           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x17 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_soc_vendor_brand_str_05_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_06_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_07_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_08_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x17           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x17 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_soc_vendor_brand_str_09_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_10_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_11_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_soc_vendor_brand_str_12_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x17           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x17

    def get_leaf_0x18():
        # Return empty result if the leaf is outside present ranges
        if ((0x18 > max_regular_leaf and 0x18 < 0x40000000)
           or (0x18 > 0x4fffffff and 0x18 < 0x80000000)
           or (0x18 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x18 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_dcp_max_subleaf_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x18_0_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x18_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x18_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_1_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l1_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l1_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l1_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_1_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_1_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l1_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l1_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l1_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l1_override is not None) or
                (obj.cpuid_dcp_fully_associative_l1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_1_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l1_override is not None) or
                (obj.cpuid_dcp_number_asids_l1_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_2_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l2_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l2_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l2_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_2_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_2_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l2_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l2_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l2_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l2_override is not None) or
                (obj.cpuid_dcp_fully_associative_l2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_2_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l2_override is not None) or
                (obj.cpuid_dcp_number_asids_l2_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_3_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l3_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l3_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l3_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_3_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_3_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l3_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l3_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l3_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l3_override is not None) or
                (obj.cpuid_dcp_fully_associative_l3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_3_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l3_override is not None) or
                (obj.cpuid_dcp_number_asids_l3_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_4_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l4_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l4_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l4_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_4_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_4_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l4_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l4_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l4_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l4_override is not None) or
                (obj.cpuid_dcp_fully_associative_l4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_4_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l4_override is not None) or
                (obj.cpuid_dcp_number_asids_l4_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_5_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l5_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l5_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l5_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_5_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_5_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l5_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l5_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l5_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l5_override is not None) or
                (obj.cpuid_dcp_fully_associative_l5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_5_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l5_override is not None) or
                (obj.cpuid_dcp_number_asids_l5_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_6_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l6_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l6_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l6_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_6_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_6_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l6_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l6_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l6_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l6_override is not None) or
                (obj.cpuid_dcp_fully_associative_l6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_6_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l6_override is not None) or
                (obj.cpuid_dcp_number_asids_l6_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 7
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 7)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_7_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l7_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l7_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l7_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_7_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_7_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l7_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l7_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l7_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l7_override is not None) or
                (obj.cpuid_dcp_fully_associative_l7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_7_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l7_override is not None) or
                (obj.cpuid_dcp_number_asids_l7_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           7  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x18 subleaf 8
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 8)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x18_8_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_dcp_4_kb_page_size_supported_l8_override is not None) or
                (obj.cpuid_dcp_2_mb_page_size_supported_l8_override is not None) or
                (obj.cpuid_dcp_4_mb_page_size_supported_l8_override is not None) or
                (obj.cpuid_dcp_1_gb_page_size_supported_l8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_8_ebx_4_7_override is not None) or
                (obj.cpuid_dcp_partitioning_l8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_8_ebx_11_15_override is not None) or
                (obj.cpuid_dcp_ways_associativity_l8_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_dcp_number_sets_l8_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_dcp_translation_cache_type_l8_override is not None) or
                (obj.cpuid_dcp_translation_cache_lvl_l8_override is not None) or
                (obj.cpuid_dcp_fully_associative_l8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x18_8_edx_9_13_override is not None) or
                (obj.cpuid_dcp_max_number_threads_sharing_l8_override is not None) or
                (obj.cpuid_dcp_number_asids_l8_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x18           8  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x18

    def get_leaf_0x19():
        # Return empty result if the leaf is outside present ranges
        if ((0x19 > max_regular_leaf and 0x19 < 0x40000000)
           or (0x19 > 0x4fffffff and 0x19 < 0x80000000)
           or (0x19 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x19 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x19, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_kl_cpl0_restriction_override is not None) or
                (obj.cpuid_kl_decrypt_only_restriction_override is not None) or
                (obj.cpuid_kl_encrypt_only_restriction_override is not None) or
                (obj.cpuid_kl_process_restriction_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x19_eax_4_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_aes_kl_enabled_override is not None) or
                (obj.cpuid_kl_enclave_load_override is not None) or
                (obj.cpuid_kl_aes_wide_override is not None) or
                (obj.cpuid_kl_vaes_override is not None) or
                (obj.cpuid_kl_iwkeybackup_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x19_ebx_5_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_kl_no_backup_override is not None) or
                (obj.cpuid_kl_random_iwkey_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x19_ecx_2_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x19_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x19           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x19

    def get_leaf_0x1a():
        # Return empty result if the leaf is outside present ranges
        if ((0x1a > max_regular_leaf and 0x1a < 0x40000000)
           or (0x1a > 0x4fffffff and 0x1a < 0x80000000)
           or (0x1a > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1a subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1a, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_hetero_model_id_override is not None) or
                (obj.cpuid_hetero_core_type_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1a_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1a_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1a_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1a           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1a

    def get_leaf_0x1b():
        # Return empty result if the leaf is outside present ranges
        if ((0x1b > max_regular_leaf and 0x1b < 0x40000000)
           or (0x1b > 0x4fffffff and 0x1b < 0x80000000)
           or (0x1b > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1b subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1b, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_pconfig_subleaf_type_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1b_0_eax_12_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_target_id1_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_target_id2_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_target_id3_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1b           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1b

    def get_leaf_0x1c():
        # Return empty result if the leaf is outside present ranges
        if ((0x1c > max_regular_leaf and 0x1c < 0x40000000)
           or (0x1c > 0x4fffffff and 0x1c < 0x80000000)
           or (0x1c > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1c subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1c, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_lbr_depth_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1c_eax_8_29_override is not None) or
                (obj.cpuid_lbr_deep_cstate_reset_override is not None) or
                (obj.cpuid_lbr_ip_values_contain_lip_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_lbr_cpl_filtering_override is not None) or
                (obj.cpuid_lbr_branch_filtering_override is not None) or
                (obj.cpuid_lbr_call_stack_mode_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1c_ebx_3_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_lbr_mispredict_bit_override is not None) or
                (obj.cpuid_lbr_timed_lbrs_override is not None) or
                (obj.cpuid_lbr_branch_type_field_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1c_ecx_3_15_override is not None) or
                (obj.cpuid_lbr_event_logging_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1c_ecx_20_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1c_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1c           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1c

    def get_leaf_0x1d():
        # Return empty result if the leaf is outside present ranges
        if ((0x1d > max_regular_leaf and 0x1d < 0x40000000)
           or (0x1d > 0x4fffffff and 0x1d < 0x80000000)
           or (0x1d > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1d subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1d, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_impl_max_palette_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1d_0_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1d_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1d_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1d           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x1d subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1d, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_palette_1_total_tile_bytes_override is not None) or
                (obj.cpuid_palette_1_bytes_per_tile_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_palette_1_bytes_per_row_override is not None) or
                (obj.cpuid_palette_1_max_names_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_palette_1_max_rows_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1d_1_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1d_1_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1d           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1d

    def get_leaf_0x1e():
        # Return empty result if the leaf is outside present ranges
        if ((0x1e > max_regular_leaf and 0x1e < 0x40000000)
           or (0x1e > 0x4fffffff and 0x1e < 0x80000000)
           or (0x1e > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1e subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1e, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x1e_0_0_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_impl_tmul_maxk_override is not None) or
                (obj.cpuid_impl_tmul_maxn_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_0_ebx_24_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1e_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1e_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1e           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x1e subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1e, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_amx_int8_mirror_override is not None) or
                (obj.cpuid_amx_bf16_mirror_override is not None) or
                (obj.cpuid_amx_complex_mirror_override is not None) or
                (obj.cpuid_amx_fp16_mirror_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_0_4_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_0_5_5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_0_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_0_7_7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_0_8_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1e_1_eax_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1e_1_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1e_1_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x1e_1_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1e           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1e

    def get_leaf_0x1f():
        # Return empty result if the leaf is outside present ranges
        if ((0x1f > max_regular_leaf and 0x1f < 0x40000000)
           or (0x1f > 0x4fffffff and 0x1f < 0x80000000)
           or (0x1f > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x1f subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_topo_1f_shift_level0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_0_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_topo_1f_num_cpus_level0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_0_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_topo_1f_level_number0_override is not None) or
                (obj.cpuid_topo_1f_level_type0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_0_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_topo_1f_x2apic_id0_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1f           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x1f subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_topo_1f_shift_level1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_1_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_topo_1f_num_cpus_level1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_1_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_topo_1f_level_number1_override is not None) or
                (obj.cpuid_topo_1f_level_type1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_1_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_topo_1f_x2apic_id1_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1f           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x1f subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_topo_1f_shift_level2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_2_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_topo_1f_num_cpus_level2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_2_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_topo_1f_level_number2_override is not None) or
                (obj.cpuid_topo_1f_level_type2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_2_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_topo_1f_x2apic_id2_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1f           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x1f subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_topo_1f_shift_level3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_3_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_topo_1f_num_cpus_level3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_3_ebx_16_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_topo_1f_level_number3_override is not None) or
                (obj.cpuid_topo_1f_level_type3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x1f_3_ecx_16_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_topo_1f_x2apic_id3_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x1f           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x1f

    def get_leaf_0x20():
        # Return empty result if the leaf is outside present ranges
        if ((0x20 > max_regular_leaf and 0x20 < 0x40000000)
           or (0x20 > 0x4fffffff and 0x20 < 0x80000000)
           or (0x20 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x20 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x20, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_subleaf_num_of_leaf_0x20_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_hgs_plus_hreset_enabling_override is not None) or
                (obj.cpuid_hgs_plus_hreset_reserved_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x20_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x20_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x20           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x20

    def get_leaf_0x21():
        # Return empty result if the leaf is outside present ranges
        if ((0x21 > max_regular_leaf and 0x21 < 0x40000000)
           or (0x21 > 0x4fffffff and 0x21 < 0x80000000)
           or (0x21 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x21 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_0_0_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_0_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_0_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_0_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_1_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_1_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_1_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_1_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_1_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_2_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_2_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_2_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_2_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_2_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_3_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_3_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_3_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_3_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_3_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_4_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_4_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_4_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_4_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_4_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_5_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_5_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_5_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_5_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_5_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_6_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_6_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_6_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_6_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_6_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 7
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 7)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_7_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_7_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_7_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_7_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_7_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           7  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 8
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 8)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_8_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_8_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_8_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_8_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_8_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           8  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 9
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 9)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_9_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_9_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_9_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_9_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_9_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21           9  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 10
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 10)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_10_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_10_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_10_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_10_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_10_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          10  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 11
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 11)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_11_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_11_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_11_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_11_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_11_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          11  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 12
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 12)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_12_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_12_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_12_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_12_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_12_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          12  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 13
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 13)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_13_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_13_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_13_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_13_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_13_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          13  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 14
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 14)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_14_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_14_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_14_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_14_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_14_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          14  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 15
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 15)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_15_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_15_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_15_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_15_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_15_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          15  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 16
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 16)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_16_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_16_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_16_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_16_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_16_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          16  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 17
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 17)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_17_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_17_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_17_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_17_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_17_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          17  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x21 subleaf 18
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 18)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x21_18_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x21_18_0_9_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_18_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_18_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x21_18_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x21          18  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x21

    def get_leaf_0x22():
        # Return empty result if the leaf is outside present ranges
        if ((0x22 > max_regular_leaf and 0x22 < 0x40000000)
           or (0x22 > 0x4fffffff and 0x22 < 0x80000000)
           or (0x22 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x22 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_0_0_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_0_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_0_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_0_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x22 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_1_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_1_0_9_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_1_0_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_1_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_1_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_1_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x22 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_2_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_2_0_9_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_2_0_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_2_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_2_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_2_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x22 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_3_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_3_0_9_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_3_0_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_3_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_3_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_3_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x22 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_4_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_4_0_9_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_4_0_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_4_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_4_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_4_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x22 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x22_5_0_0_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_5_0_9_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x22_5_0_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_5_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_5_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x22_5_3_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x22           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x22

    def get_leaf_0x23():
        # Return empty result if the leaf is outside present ranges
        if ((0x23 > max_regular_leaf and 0x23 < 0x40000000)
           or (0x23 > 0x4fffffff and 0x23 < 0x80000000)
           or (0x23 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x23 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_valid_subleaf_bitmap_of_0x23_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_0_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_tma_slots_per_cycle_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_0_ecx_8_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x23 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_gp_counter_bitmap_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_fixed_counter_bitmap_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_1_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_1_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x23 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_acr_pmc_reloaded_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_acr_fixed_reloaded_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_gp_cnt_cause_reload_bitmap_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_fx_cnt_cause_reload_bitmap_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x23 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_perfmon_events_bitmap_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_3_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_3_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_3_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x23 subleaf 4
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 4)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x23_4_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_4_ebx_0_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_4_7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_8_9_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_ebx_10_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_16_23_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_ebx_24_28_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_29_29_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_1_30_30_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x23_4_ebx_31_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_4_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x23_4_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           4  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x23 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_apebs_gp_counter_bitmap_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_gp_counter_pdist_pdir_bitmap_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_apebs_fixed_counter_bitmap_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_fixed_counter_pdist_pdir_bitmap_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x23           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x23

    def get_leaf_0x24():
        # Return empty result if the leaf is outside present ranges
        if ((0x24 > max_regular_leaf and 0x24 < 0x40000000)
           or (0x24 > 0x4fffffff and 0x24 < 0x80000000)
           or (0x24 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x24 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x24, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_input_subleaf_0x24_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_converged_isa_version_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x24_0_ebx_8_15_override is not None) or
                (obj.cpuid_support_128_vectors_override is not None) or
                (obj.cpuid_support_256_vectors_override is not None) or
                (obj.cpuid_support_512_vectors_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x24_0_ebx_19_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x24_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x24_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x24           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x24 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x24, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x24_1_0_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x24_1_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x24_1_2_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x24_1_ecx_1_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x24_1_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x24           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x24

    def get_leaf_0x27():
        # Return empty result if the leaf is outside present ranges
        if ((0x27 > max_regular_leaf and 0x27 < 0x40000000)
           or (0x27 > 0x4fffffff and 0x27 < 0x80000000)
           or (0x27 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x27 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x27, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x27_0_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_0_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_0_edx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_0_3_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_0_edx_2_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x27           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x27 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x27, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x27_1_0_0_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_eax_4_8_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_0_9_9_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_0_10_10_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_eax_11_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_1_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_1_2_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x27_1_3_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_3_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_3_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x27_1_edx_3_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x27           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x27

    def get_leaf_0x28():
        # Return empty result if the leaf is outside present ranges
        if ((0x28 > max_regular_leaf and 0x28 < 0x40000000)
           or (0x28 > 0x4fffffff and 0x28 < 0x80000000)
           or (0x28 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x28 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_0_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_0_ebx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_1_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_1_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_1_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_ebx_4_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_1_5_5_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_1_6_6_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_0_ebx_7_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x28 subleaf 1
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 1)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_1_0_0_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_1_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_1_ecx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_2_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_2_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_2_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_1_3_0_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_1_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           1  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x28 subleaf 2
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 2)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_2_0_0_4_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_eax_5_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_2_1_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_2_ecx_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_2_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_2_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_2_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_2_3_0_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_2_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           2  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x28 subleaf 3
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 3)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_3_0_0_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_3_eax_12_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_3_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_3_2_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_3_2_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_3_2_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_3_ecx_3_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_3_3_0_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_3_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           3  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x28 subleaf 5
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 5)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_5_0_0_7_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_5_0_8_11_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_5_eax_12_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_5_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_5_ecx_0_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_5_2_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_5_ecx_4_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_5_3_0_15_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_5_edx_16_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           5  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        # Collect data for leaf 0x28 subleaf 6
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 6)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x28_6_0_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_6_0_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x28_6_eax_2_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_6_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_6_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x28_6_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x28           6  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x28

    def get_leaf_0x29():
        # Return empty result if the leaf is outside present ranges
        if ((0x29 > max_regular_leaf and 0x29 < 0x40000000)
           or (0x29 > 0x4fffffff and 0x29 < 0x80000000)
           or (0x29 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x29 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x29, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x29_0_0_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x29_0_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x29_0_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x29_0_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '      0x29           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x29

    def get_leaf_0x40000123():
        # Return empty result if the leaf is outside present ranges
        if ((0x40000123 > max_regular_leaf and 0x40000123 < 0x40000000)
           or (0x40000123 > 0x4fffffff and 0x40000123 < 0x80000000)
           or (0x40000123 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x40000123 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x40000123, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x40000123_0_0_0_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x40000123_0_1_1_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x40000123_0_2_2_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x40000123_0_3_3_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x40000123_eax_4_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x40000123_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x40000123_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x40000123_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x40000123           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x40000123

    def get_leaf_0x80000000():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000000 > max_regular_leaf and 0x80000000 < 0x40000000)
           or (0x80000000 > 0x4fffffff and 0x80000000 < 0x80000000)
           or (0x80000000 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000000 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000000, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_max_ext_leaf_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000000_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000000_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000000_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000000           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000000

    def get_leaf_0x80000001():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000001 > max_regular_leaf and 0x80000001 < 0x40000000)
           or (0x80000001 > 0x4fffffff and 0x80000001 < 0x80000000)
           or (0x80000001 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000001 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000001, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_leaf_0x80000001_eax_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000001_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_has_lahf64_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_ecx_1_4_override is not None) or
                (obj.cpuid_lzcnt_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_ecx_6_7_override is not None) or
                (obj.cpuid_prefetchw_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_ecx_9_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000001_edx_0_10_override is not None) or
                (obj.cpuid_syscall_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_edx_12_19_override is not None) or
                (obj.cpuid_nx_enabled_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_edx_21_25_override is not None) or
                (obj.cpuid_has_page1gb_override is not None) or
                (obj.cpuid_rdtscp_tsc_aux_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_edx_28_28_override is not None) or
                (obj.cpuid_has_longmode_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000001_edx_30_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000001           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000001

    def get_leaf_0x80000002():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000002 > max_regular_leaf and 0x80000002 < 0x40000000)
           or (0x80000002 > 0x4fffffff and 0x80000002 < 0x80000000)
           or (0x80000002 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000002 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000002, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_brand_string_01_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_brand_string_02_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_brand_string_03_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_brand_string_04_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000002           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000002

    def get_leaf_0x80000003():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000003 > max_regular_leaf and 0x80000003 < 0x40000000)
           or (0x80000003 > 0x4fffffff and 0x80000003 < 0x80000000)
           or (0x80000003 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000003 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000003, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_brand_string_05_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_brand_string_06_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_brand_string_07_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_brand_string_08_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000003           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000003

    def get_leaf_0x80000004():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000004 > max_regular_leaf and 0x80000004 < 0x40000000)
           or (0x80000004 > 0x4fffffff and 0x80000004 < 0x80000000)
           or (0x80000004 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000004 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000004, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_brand_string_09_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_brand_string_10_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_brand_string_11_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_brand_string_12_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000004           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000004

    def get_leaf_0x80000006():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000006 > max_regular_leaf and 0x80000006 < 0x40000000)
           or (0x80000006 > 0x4fffffff and 0x80000006 < 0x80000000)
           or (0x80000006 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000006 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000006, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x80000006_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000006_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cache_line_size_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000006_ecx_8_11_override is not None) or
                (obj.cpuid_l2_assoc_type_override is not None) or
                (obj.cpuid_cache_size_1k_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000006_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000006           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000006

    def get_leaf_0x80000007():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000007 > max_regular_leaf and 0x80000007 < 0x40000000)
           or (0x80000007 > 0x4fffffff and 0x80000007 < 0x80000000)
           or (0x80000007 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000007 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000007, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_cpuid_rsvd_0x80000007_eax_0_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000007_ebx_0_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000007_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000007_edx_0_7_override is not None) or
                (obj.cpuid_invariant_tsc_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000007_edx_9_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000007           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000007

    def get_leaf_0x80000008():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000008 > max_regular_leaf and 0x80000008 < 0x40000000)
           or (0x80000008 > 0x4fffffff and 0x80000008 < 0x80000000)
           or (0x80000008 > max_extend_leaf)):
            return list()
        res = list()
        # Collect data for leaf 0x80000008 subleaf 0
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000008, 0)
        # Check all CPUID fields for being overridden. Mark register if at least one its field is.
        omarks=[" ", " ", " ", ""] # Marks for indicating overridden registers
        if overridden:
            if ((obj.cpuid_physical_bits_override is not None) or
                (obj.cpuid_linaddr_width_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000008_eax_16_31_override is not None) or
                False):
                  omarks[0] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000008_ebx_0_8_override is not None) or
                (obj.cpuid_wbnoinvd_override is not None) or
                (obj.cpuid_cpuid_rsvd_0x80000008_ebx_10_31_override is not None) or
                False):
                  omarks[1] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000008_ecx_0_31_override is not None) or
                False):
                  omarks[2] = "*"
            if ((obj.cpuid_cpuid_rsvd_0x80000008_edx_0_31_override is not None) or
                False):
                  omarks[3] = "*"
        # Do not print lines with all zeroes, unless they have visible overrides in them
        has_overrides = ''.join(omarks).find('*') != -1 # at least one asterisk in omarks
        if (has_overrides or query.a != 0 or query.b != 0 or query.c != 0 or query.d != 0):
            line = '0x80000008           0  %#10x%s %#10x%s %#10x%s %#10x%s' % ( query.a, omarks[0], query.b, omarks[1], query.c, omarks[2], query.d, omarks[3] )
            res.append(line)
        return res # end of get_leaf_0x80000008

    leaf_functions = {
              0x0: get_leaf_0x0,
              0x1: get_leaf_0x1,
              0x2: get_leaf_0x2,
              0x4: get_leaf_0x4,
              0x5: get_leaf_0x5,
              0x6: get_leaf_0x6,
              0x7: get_leaf_0x7,
              0x9: get_leaf_0x9,
              0xa: get_leaf_0xa,
              0xb: get_leaf_0xb,
              0xd: get_leaf_0xd,
              0xf: get_leaf_0xf,
             0x10: get_leaf_0x10,
             0x12: get_leaf_0x12,
             0x14: get_leaf_0x14,
             0x15: get_leaf_0x15,
             0x16: get_leaf_0x16,
             0x17: get_leaf_0x17,
             0x18: get_leaf_0x18,
             0x19: get_leaf_0x19,
             0x1a: get_leaf_0x1a,
             0x1b: get_leaf_0x1b,
             0x1c: get_leaf_0x1c,
             0x1d: get_leaf_0x1d,
             0x1e: get_leaf_0x1e,
             0x1f: get_leaf_0x1f,
             0x20: get_leaf_0x20,
             0x21: get_leaf_0x21,
             0x22: get_leaf_0x22,
             0x23: get_leaf_0x23,
             0x24: get_leaf_0x24,
             0x27: get_leaf_0x27,
             0x28: get_leaf_0x28,
             0x29: get_leaf_0x29,
       0x40000123: get_leaf_0x40000123,
       0x80000000: get_leaf_0x80000000,
       0x80000001: get_leaf_0x80000001,
       0x80000002: get_leaf_0x80000002,
       0x80000003: get_leaf_0x80000003,
       0x80000004: get_leaf_0x80000004,
       0x80000006: get_leaf_0x80000006,
       0x80000007: get_leaf_0x80000007,
       0x80000008: get_leaf_0x80000008,
    }

    res = list()

    if req_leaf < 0: # print all leaves
        for leaf in sorted(leaf_functions.keys()):
            fn = leaf_functions[leaf]
            res.extend(fn())
    elif ((req_leaf <= max_regular_leaf)
            or (req_leaf >= 0x40000000 and req_leaf <= 0x4fffffff)
            or (req_leaf >= 0x80000000 and req_leaf <= max_extend_leaf)):
        fn = leaf_functions.get(req_leaf, (lambda:([''])))
        res.extend(fn())
    else:
        res.extend([''])
    return res
    # End of print_compact_cpuid()
def print_verbose_cpuid(obj, internal, req_leaf):
    # Determine when to cut the list of regular and extended leaves
    max_regular_leaf = obj.iface.x86_cpuid_query.cpuid_query(0, 0).a
    max_extend_leaf = obj.iface.x86_cpuid_query.cpuid_query(0x80000000, 0).a

    def missing_leaf():
       return ['-- Leaf is not present']

    def get_leaf_0x0():
        # Return empty result if the leaf is outside present ranges
        if ((0x0 > max_regular_leaf and 0x0 < 0x40000000)
           or (0x0 > 0x4fffffff and 0x0 < 0x80000000)
           or (0x0 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x0, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_leaf_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum Input Value for Basic CPUID Information"
        if internal: line += " (max_leaf, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - 'Genu' part of GenuineIntel"
        if internal: line += " (genu_str_ebx, const)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - 'ntel' part of GenuineIntel"
        if internal: line += " (genu_str_ecx, const)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - 'ineI' part of GenuineIntel"
        if internal: line += " (genu_str_edx, const)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x0

    def get_leaf_0x1():
        # Return empty result if the leaf is outside present ranges
        if ((0x1 > max_regular_leaf and 0x1 < 0x40000000)
           or (0x1 > 0x4fffffff and 0x1 < 0x80000000)
           or (0x1 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1, 0)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_stepping_id_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - Stepping ID"
        if internal: line += " (stepping_id, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000000f0) >> 4
        osign = " "
        if obj.cpuid_model_override is not None: osign="*"
        line = "EAX[ 4: 7] "+" %#10x %s" % (val, osign) +" - Model"
        if internal: line += " (model, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000f00) >> 8
        osign = " "
        if obj.cpuid_family_id_override is not None: osign="*"
        line = "EAX[ 8:11] "+" %#10x %s" % (val, osign) +" - Family ID"
        if internal: line += " (family_id, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00003000) >> 12
        osign = " "
        if obj.cpuid_processor_type_override is not None: osign="*"
        line = "EAX[12:13] "+" %#10x %s" % (val, osign) +" - Processor Type"
        if internal: line += " (processor_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000f0000) >> 16
        osign = " "
        if obj.cpuid_ext_model_id_override is not None: osign="*"
        line = "EAX[16:19] "+" %#10x %s" % (val, osign) +" - Extended Model ID"
        if internal: line += " (ext_model_id, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x0ff00000) >> 20
        osign = " "
        if obj.cpuid_ext_family_id_override is not None: osign="*"
        line = "EAX[20:27] "+" %#10x %s" % (val, osign) +" - Extended Family ID"
        if internal: line += " (ext_family_id, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_brand_index_override is not None: osign="*"
        line = "EBX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Brand Index"
        if internal: line += " (brand_index, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_clflush_size_override is not None: osign="*"
        line = "EBX[ 8:15] "+" %#10x %s" % (val, osign) +" - CLFLUSH line size"
        if internal: line += " (clflush_size, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_max_ids_override is not None: osign="*"
        line = "EBX[16:23] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for logical processors in physical package"
        if internal: line += " (max_ids, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_cpuid_physical_apic_id_override is not None: osign="*"
        line = "EBX[24:31] "+" %#10x %s" % (val, osign) +" - Initial APIC ID"
        if internal: line += " (cpuid_physical_apic_id, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_sse3_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - SSE3 Streaming SIMD Extensions 3"
        if internal: line += " (sse3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_pclmulqdq_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Processor supports PCLMULQDQ (Carry-Less Multiplication Quadword) Instruction"
        if internal: line += " (pclmulqdq, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dtes64_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 64-bit DS area layout"
        if internal: line += " (dtes64, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_monitor_mwait_enabled_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - MONITOR and MWAIT instructions are supported"
        if internal: line += " (monitor_mwait_enabled, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_ds_cpl_override is not None: osign="*"
        line = "ECX[ 4: 4] "+" %#10x %s" % (val, osign) +" - DS-CPL. CPL Qualified Debug Store"
        if internal: line += " (ds_cpl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_vmx_override is not None: osign="*"
        line = "ECX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Virtual Machine Extensions"
        if internal: line += " (vmx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_smx_override is not None: osign="*"
        line = "ECX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Safer Mode Extensions"
        if internal: line += " (smx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_eist_override is not None: osign="*"
        line = "ECX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Enhanced Intel SpeedStep Technology"
        if internal: line += " (eist, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_tm2_override is not None: osign="*"
        line = "ECX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Thermal Monitor 2"
        if internal: line += " (tm2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_ssse3_override is not None: osign="*"
        line = "ECX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Supplemental Streaming SIMD Extensions 3 (SSSE3)"
        if internal: line += " (ssse3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_cnxt_id_override is not None: osign="*"
        line = "ECX[10:10] "+" %#10x %s" % (val, osign) +" - L1 Context ID"
        if internal: line += " (cnxt_id, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_sdbg_override is not None: osign="*"
        line = "ECX[11:11] "+" %#10x %s" % (val, osign) +" - Indicates the support of IA32_DEBUG_INTERFACE MSR for silicon debug"
        if internal: line += " (sdbg, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_fma_override is not None: osign="*"
        line = "ECX[12:12] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates the processor supports FMA extensions using YMM state"
        if internal: line += " (fma, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_cmpxchg16b_override is not None: osign="*"
        line = "ECX[13:13] "+" %#10x %s" % (val, osign) +" - CMPXCHG16B Available"
        if internal: line += " (cmpxchg16b, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_xtpr_update_ctl_override is not None: osign="*"
        line = "ECX[14:14] "+" %#10x %s" % (val, osign) +" - xTPR Update Control"
        if internal: line += " (xtpr_update_ctl, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_pdcm_override is not None: osign="*"
        line = "ECX[15:15] "+" %#10x %s" % (val, osign) +" - Perfmon and Debug Capability"
        if internal: line += " (pdcm, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_reserved_ecx_16_override is not None: osign="*"
        line = "ECX[16:16] "+" %#10x %s" % (val, osign) +" - Reserved CPUID field"
        if internal: line += " (reserved_ecx_16, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_pcid_override is not None: osign="*"
        line = "ECX[17:17] "+" %#10x %s" % (val, osign) +" - Process-context identifiers"
        if internal: line += " (pcid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_dca_override is not None: osign="*"
        line = "ECX[18:18] "+" %#10x %s" % (val, osign) +" - Indicates the processor supports the ability to prefetch data from a memory mapped device"
        if internal: line += " (dca, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_sse4_1_override is not None: osign="*"
        line = "ECX[19:19] "+" %#10x %s" % (val, osign) +" - SSE 4.1 support"
        if internal: line += " (sse4_1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_sse4_2_override is not None: osign="*"
        line = "ECX[20:20] "+" %#10x %s" % (val, osign) +" - SSE 4.2 support"
        if internal: line += " (sse4_2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00200000) >> 21
        osign = " "
        if obj.cpuid_x2apic_override is not None: osign="*"
        line = "ECX[21:21] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates that the processor supports x2APIC feature"
        if internal: line += " (x2apic, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_movbe_override is not None: osign="*"
        line = "ECX[22:22] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates that the processor supports MOVBE instruction"
        if internal: line += " (movbe, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_popcnt_override is not None: osign="*"
        line = "ECX[23:23] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates that the processor supports the POPCNT instruction"
        if internal: line += " (popcnt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_tsc_deadline_override is not None: osign="*"
        line = "ECX[24:24] "+" %#10x %s" % (val, osign) +" - Indicates that lAPIC timer supports one-shot operation using a TSC deadline value"
        if internal: line += " (tsc_deadline, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x02000000) >> 25
        osign = " "
        if obj.cpuid_aes_override is not None: osign="*"
        line = "ECX[25:25] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates that the processor supports the AESNI instruction extensions"
        if internal: line += " (aes, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_has_xsave_override is not None: osign="*"
        line = "ECX[26:26] "+" %#10x %s" % (val, osign) +" - Processor supports the XSAVE/XRSTOR, XSETBV/XGETBV, XCR0"
        if internal: line += " (has_xsave, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_osxsave_override is not None: osign="*"
        line = "ECX[27:27] "+" %#10x %s" % (val, osign) +" - OS has enabled XSETBV/XGETBV instructions to access XCR0, and support for processor extended state management using XSAVE/XRSTOR"
        if internal: line += " (osxsave, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x10000000) >> 28
        osign = " "
        if obj.cpuid_has_avx_override is not None: osign="*"
        line = "ECX[28:28] "+" %#10x %s" % (val, osign) +" - Processor supports the AVX instruction extensions"
        if internal: line += " (has_avx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_f16c_override is not None: osign="*"
        line = "ECX[29:29] "+" %#10x %s" % (val, osign) +" - Processor supports 16-bit floating-point conversion instructions"
        if internal: line += " (f16c, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_rdrand_override is not None: osign="*"
        line = "ECX[30:30] "+" %#10x %s" % (val, osign) +" - A value of 1 indicates that processor supports RDRAND instruction"
        if internal: line += " (rdrand, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_not_used_ecx_31_override is not None: osign="*"
        line = "ECX[31:31] "+" %#10x %s" % (val, osign) +" - Always returns zero"
        if internal: line += " (not_used_ecx_31, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_has_fpu_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Floating Point Unit On-Chip"
        if internal: line += " (has_fpu, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_vme_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Virtual 8086 Mode Enhancements"
        if internal: line += " (vme, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_de_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Debugging Extensions"
        if internal: line += " (de, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_pse_override is not None: osign="*"
        line = "EDX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Page Size Extension"
        if internal: line += " (pse, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_tsc_override is not None: osign="*"
        line = "EDX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Time Stamp Counter"
        if internal: line += " (tsc, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_has_msr_override is not None: osign="*"
        line = "EDX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Model Specific Registers RDMSR and WRMSR Instructions"
        if internal: line += " (has_msr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_pae_override is not None: osign="*"
        line = "EDX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Physical Address Extension"
        if internal: line += " (pae, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_has_mce_override is not None: osign="*"
        line = "EDX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Machine Check Exception"
        if internal: line += " (has_mce, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_cmpxchg8b_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - CMPXCHG8B Instruction"
        if internal: line += " (cmpxchg8b, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_has_apic_override is not None: osign="*"
        line = "EDX[ 9: 9] "+" %#10x %s" % (val, osign) +" - APIC On-Chip"
        if internal: line += " (has_apic, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_reserved_edx_10_override is not None: osign="*"
        line = "EDX[10:10] "+" %#10x %s" % (val, osign) +" - Reserved CPUID field"
        if internal: line += " (reserved_edx_10, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_sysenter_override is not None: osign="*"
        line = "EDX[11:11] "+" %#10x %s" % (val, osign) +" - SYSENTER and SYSEXIT Instructions"
        if internal: line += " (sysenter, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_has_mtrr_override is not None: osign="*"
        line = "EDX[12:12] "+" %#10x %s" % (val, osign) +" - Memory Type Range Registers"
        if internal: line += " (has_mtrr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_pge_override is not None: osign="*"
        line = "EDX[13:13] "+" %#10x %s" % (val, osign) +" - Page Global Bit"
        if internal: line += " (pge, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_mca_override is not None: osign="*"
        line = "EDX[14:14] "+" %#10x %s" % (val, osign) +" - Machine Check Architecture"
        if internal: line += " (mca, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00008000) >> 15
        osign = " "
        line = "EDX[15:15] "+" %#10x %s" % (val, osign) +" - Conditional Move Instructions"
        if internal: line += " (cmov, const)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_has_pat_override is not None: osign="*"
        line = "EDX[16:16] "+" %#10x %s" % (val, osign) +" - Page Attribute Table"
        if internal: line += " (has_pat, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_pse36_override is not None: osign="*"
        line = "EDX[17:17] "+" %#10x %s" % (val, osign) +" - 36-Bit Page Size Extension"
        if internal: line += " (pse36, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_psn_override is not None: osign="*"
        line = "EDX[18:18] "+" %#10x %s" % (val, osign) +" - Processor Serial Number"
        if internal: line += " (psn, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_clflush_override is not None: osign="*"
        line = "EDX[19:19] "+" %#10x %s" % (val, osign) +" - CLFLUSH Instruction"
        if internal: line += " (clflush, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00200000) >> 21
        osign = " "
        if obj.cpuid_debug_store_override is not None: osign="*"
        line = "EDX[21:21] "+" %#10x %s" % (val, osign) +" - Debug Store"
        if internal: line += " (debug_store, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_acpi_override is not None: osign="*"
        line = "EDX[22:22] "+" %#10x %s" % (val, osign) +" - Thermal Monitor and Software Controlled Clock Facilities"
        if internal: line += " (acpi, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_mmx_override is not None: osign="*"
        line = "EDX[23:23] "+" %#10x %s" % (val, osign) +" - Intel MMX Technology"
        if internal: line += " (mmx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_has_fxsr_override is not None: osign="*"
        line = "EDX[24:24] "+" %#10x %s" % (val, osign) +" - FXSAVE and FXRSTOR Instructions"
        if internal: line += " (has_fxsr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x02000000) >> 25
        osign = " "
        if obj.cpuid_sse_override is not None: osign="*"
        line = "EDX[25:25] "+" %#10x %s" % (val, osign) +" - Streaming SIMD Extension"
        if internal: line += " (sse, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_sse2_override is not None: osign="*"
        line = "EDX[26:26] "+" %#10x %s" % (val, osign) +" - Streaming SIMD Extension 2"
        if internal: line += " (sse2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_self_snoop_override is not None: osign="*"
        line = "EDX[27:27] "+" %#10x %s" % (val, osign) +" - Self Snoop"
        if internal: line += " (self_snoop, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x10000000) >> 28
        osign = " "
        if obj.cpuid_htt_override is not None: osign="*"
        line = "EDX[28:28] "+" %#10x %s" % (val, osign) +" - Max APIC IDs reserved field is Valid"
        if internal: line += " (htt, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_tm_override is not None: osign="*"
        line = "EDX[29:29] "+" %#10x %s" % (val, osign) +" - Thermal Monitor"
        if internal: line += " (tm, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_pbe_override is not None: osign="*"
        line = "EDX[31:31] "+" %#10x %s" % (val, osign) +" - Pending Break Enable"
        if internal: line += " (pbe, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1

    def get_leaf_0x2():
        # Return empty result if the leaf is outside present ranges
        if ((0x2 > max_regular_leaf and 0x2 < 0x40000000)
           or (0x2 > 0x4fffffff and 0x2 < 0x80000000)
           or (0x2 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x2, 0)
        val = (query.a & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_descr_num_override is not None: osign="*"
        line = "EAX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Number of descriptors returned by this leaf"
        if internal: line += " (descr_num, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_llc_descr_override is not None: osign="*"
        line = "EAX[ 8:15] "+" %#10x %s" % (val, osign) +" - LLC descriptor"
        if internal: line += " (llc_descr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_tlb_descr_override is not None: osign="*"
        line = "EAX[16:23] "+" %#10x %s" % (val, osign) +" - TLB descriptor"
        if internal: line += " (tlb_descr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_null_descr_2_eax_31_24_override is not None: osign="*"
        line = "EAX[24:31] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_eax_31_24, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_prefetch_size_override is not None: osign="*"
        line = "EBX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Prefetching size"
        if internal: line += " (prefetch_size, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_null_descr_2_ebx_8_15_override is not None: osign="*"
        line = "EBX[ 8:15] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ebx_8_15, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_null_descr_2_ebx_16_23_override is not None: osign="*"
        line = "EBX[16:23] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ebx_16_23, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_null_descr_2_ebx_24_31_override is not None: osign="*"
        line = "EBX[24:31] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ebx_24_31, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_null_descr_2_ecx_0_7_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ecx_0_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_null_descr_2_ecx_8_15_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ecx_8_15, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_null_descr_2_ecx_16_23_override is not None: osign="*"
        line = "ECX[16:23] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ecx_16_23, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_null_descr_2_ecx_24_31_override is not None: osign="*"
        line = "ECX[24:31] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_ecx_24_31, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_null_descr_2_edx_0_7_override is not None: osign="*"
        line = "EDX[ 0: 7] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_edx_0_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_null_descr_2_edx_8_15_override is not None: osign="*"
        line = "EDX[ 8:15] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_edx_8_15, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_null_descr_2_edx_16_23_override is not None: osign="*"
        line = "EDX[16:23] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_edx_16_23, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_null_descr_2_edx_24_31_override is not None: osign="*"
        line = "EDX[24:31] "+" %#10x %s" % (val, osign) +" - NULL descriptor"
        if internal: line += " (null_descr_2_edx_24_31, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x2

    def get_leaf_0x4():
        # Return empty result if the leaf is outside present ranges
        if ((0x4 > max_regular_leaf and 0x4 < 0x40000000)
           or (0x4 > 0x4fffffff and 0x4 < 0x80000000)
           or (0x4 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x4 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 0)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_cache_type_l1d_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Cache Type Field"
        if internal: line += " (cache_type_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_cache_level_l1d_override is not None: osign="*"
        line = "EAX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Cache Level"
        if internal: line += " (cache_level_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_sel_init_lvl_l1d_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Self initializing cache level (does not need SW initialization)"
        if internal: line += " (sel_init_lvl_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_fully_assoc_l1d_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Fully Associative cache"
        if internal: line += " (fully_assoc_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_max_shar_ids_l1d_override is not None: osign="*"
        line = "EAX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for logical processors sharing this cache"
        if internal: line += " (max_shar_ids_l1d, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_max_ids_pkg_l1d_override is not None: osign="*"
        line = "EAX[26:31] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for processor cores in the physical"
        if internal: line += " (max_ids_pkg_l1d, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_line_size_l1d_override is not None: osign="*"
        line = "EBX[ 0:11] "+" %#10x %s" % (val, osign) +" - System Coherency Line Size"
        if internal: line += " (line_size_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x003ff000) >> 12
        osign = " "
        if obj.cpuid_phys_partit_l1d_override is not None: osign="*"
        line = "EBX[12:21] "+" %#10x %s" % (val, osign) +" - Physical Line Partitions"
        if internal: line += " (phys_partit_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffc00000) >> 22
        osign = " "
        if obj.cpuid_assoc_ways_l1d_override is not None: osign="*"
        line = "EBX[22:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (assoc_ways_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_number_sets_l1d_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of Sets"
        if internal: line += " (number_sets_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_wbinvd_invd_l1d_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Write-Back Invalidate/Invalidate"
        if internal: line += " (wbinvd_invd_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_cache_incl_l1d_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Cache Inclusiveness"
        if internal: line += " (cache_incl_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_complex_idx_l1d_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Complex Cache Indexing"
        if internal: line += " (complex_idx_l1d, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x4 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 1)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_cache_type_l1i_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Cache Type Field"
        if internal: line += " (cache_type_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_cache_level_l1i_override is not None: osign="*"
        line = "EAX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Cache Level"
        if internal: line += " (cache_level_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_sel_init_lvl_l1i_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Self initializing cache level (does not need SW initialization)"
        if internal: line += " (sel_init_lvl_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_fully_assoc_l1i_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Fully Associative cache"
        if internal: line += " (fully_assoc_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_max_shar_ids_l1i_override is not None: osign="*"
        line = "EAX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for logical processors sharing this cache"
        if internal: line += " (max_shar_ids_l1i, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_max_ids_pkg_l1i_override is not None: osign="*"
        line = "EAX[26:31] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for processor cores in the physical"
        if internal: line += " (max_ids_pkg_l1i, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_line_size_l1i_override is not None: osign="*"
        line = "EBX[ 0:11] "+" %#10x %s" % (val, osign) +" - System Coherency Line Size"
        if internal: line += " (line_size_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x003ff000) >> 12
        osign = " "
        if obj.cpuid_phys_partit_l1i_override is not None: osign="*"
        line = "EBX[12:21] "+" %#10x %s" % (val, osign) +" - Physical Line Partitions"
        if internal: line += " (phys_partit_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffc00000) >> 22
        osign = " "
        if obj.cpuid_assoc_ways_l1i_override is not None: osign="*"
        line = "EBX[22:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (assoc_ways_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_number_sets_l1i_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of Sets"
        if internal: line += " (number_sets_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_wbinvd_invd_l1i_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Write-Back Invalidate/Invalidate"
        if internal: line += " (wbinvd_invd_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_cache_incl_l1i_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Cache Inclusiveness"
        if internal: line += " (cache_incl_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_complex_idx_l1i_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Complex Cache Indexing"
        if internal: line += " (complex_idx_l1i, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x4 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 2)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_cache_type_l2_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Cache Type Field"
        if internal: line += " (cache_type_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_cache_level_l2_override is not None: osign="*"
        line = "EAX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Cache Level"
        if internal: line += " (cache_level_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_sel_init_lvl_l2_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Self Initializingcache level (does not need SW initialization)"
        if internal: line += " (sel_init_lvl_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_fully_assoc_l2_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Fully Associative cache"
        if internal: line += " (fully_assoc_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_max_shar_ids_l2_override is not None: osign="*"
        line = "EAX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for logical processors sharing this cache"
        if internal: line += " (max_shar_ids_l2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_max_ids_pkg_l2_override is not None: osign="*"
        line = "EAX[26:31] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for processor cores in the physical"
        if internal: line += " (max_ids_pkg_l2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_line_size_l2_override is not None: osign="*"
        line = "EBX[ 0:11] "+" %#10x %s" % (val, osign) +" - System Coherency Line Size"
        if internal: line += " (line_size_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x003ff000) >> 12
        osign = " "
        if obj.cpuid_phys_partit_l2_override is not None: osign="*"
        line = "EBX[12:21] "+" %#10x %s" % (val, osign) +" - Physical Line Partitions"
        if internal: line += " (phys_partit_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffc00000) >> 22
        osign = " "
        if obj.cpuid_assoc_ways_l2_override is not None: osign="*"
        line = "EBX[22:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (assoc_ways_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_number_sets_l2_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of Sets"
        if internal: line += " (number_sets_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_wbinvd_invd_l2_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Write-Back Invalidate/Invalidate"
        if internal: line += " (wbinvd_invd_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_cache_incl_l2_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Cache Inclusiveness"
        if internal: line += " (cache_incl_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_complex_idx_l2_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Complex Cache Indexing"
        if internal: line += " (complex_idx_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x4 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 3)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_cache_type_l3_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Cache Type Field"
        if internal: line += " (cache_type_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_cache_level_l3_override is not None: osign="*"
        line = "EAX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Cache Level"
        if internal: line += " (cache_level_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_sel_init_lvl_l3_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Self Initializingcache level (does not need SW initialization)"
        if internal: line += " (sel_init_lvl_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_fully_assoc_l3_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Fully Associative cache"
        if internal: line += " (fully_assoc_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_max_shar_ids_l3_override is not None: osign="*"
        line = "EAX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for logical processors sharing this cache"
        if internal: line += " (max_shar_ids_l3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_max_ids_pkg_l3_override is not None: osign="*"
        line = "EAX[26:31] "+" %#10x %s" % (val, osign) +" - Maximum number of addressable IDs for processor cores in the physical"
        if internal: line += " (max_ids_pkg_l3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_line_size_l3_override is not None: osign="*"
        line = "EBX[ 0:11] "+" %#10x %s" % (val, osign) +" - System Coherency Line Size"
        if internal: line += " (line_size_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x003ff000) >> 12
        osign = " "
        if obj.cpuid_phys_partit_l3_override is not None: osign="*"
        line = "EBX[12:21] "+" %#10x %s" % (val, osign) +" - Physical Line Partitions"
        if internal: line += " (phys_partit_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffc00000) >> 22
        osign = " "
        if obj.cpuid_assoc_ways_l3_override is not None: osign="*"
        line = "EBX[22:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (assoc_ways_l3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_number_sets_l3_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of Sets"
        if internal: line += " (number_sets_l3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_wbinvd_invd_l3_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Write-Back Invalidate/Invalidate"
        if internal: line += " (wbinvd_invd_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_cache_incl_l3_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Cache Inclusiveness"
        if internal: line += " (cache_incl_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_complex_idx_l3_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Complex Cache Indexing"
        if internal: line += " (complex_idx_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x4 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x4, 4)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x4

    def get_leaf_0x5():
        # Return empty result if the leaf is outside present ranges
        if ((0x5 > max_regular_leaf and 0x5 < 0x40000000)
           or (0x5 > 0x4fffffff and 0x5 < 0x80000000)
           or (0x5 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x5, 0)
        val = (query.a & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_monitor_min_size_override is not None: osign="*"
        line = "EAX[ 0:15] "+" %#10x %s" % (val, osign) +" - Smallest monitor-line size in bytes"
        if internal: line += " (monitor_min_size, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_monitor_max_size_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Largest monitor-line size in bytes"
        if internal: line += " (monitor_max_size, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_mwait_extensions_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Enumeration of Monitor-Mwait extensions"
        if internal: line += " (mwait_extensions, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_interrupt_break_mwait_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Treat interrupts as break for MWAIT even when interrupts disabled"
        if internal: line += " (interrupt_break_mwait, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_monitorless_mwait_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Monitorless Mwait"
        if internal: line += " (monitorless_mwait, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_num_c0_substates_override is not None: osign="*"
        line = "EDX[ 0: 3] "+" %#10x %s" % (val, osign) +" - Number of C0 sub C-states supported using MWAIT"
        if internal: line += " (num_c0_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000f0) >> 4
        osign = " "
        if obj.cpuid_num_c1_substates_override is not None: osign="*"
        line = "EDX[ 4: 7] "+" %#10x %s" % (val, osign) +" - Number of C1 sub C-states supported using MWAIT"
        if internal: line += " (num_c1_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000f00) >> 8
        osign = " "
        if obj.cpuid_num_c2_substates_override is not None: osign="*"
        line = "EDX[ 8:11] "+" %#10x %s" % (val, osign) +" - Number of C2 sub C-states supported using MWAIT"
        if internal: line += " (num_c2_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000f000) >> 12
        osign = " "
        if obj.cpuid_num_c3_substates_override is not None: osign="*"
        line = "EDX[12:15] "+" %#10x %s" % (val, osign) +" - Number of C3 sub C-states supported using MWAIT"
        if internal: line += " (num_c3_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000f0000) >> 16
        osign = " "
        if obj.cpuid_num_c4_substates_override is not None: osign="*"
        line = "EDX[16:19] "+" %#10x %s" % (val, osign) +" - Number of C4 sub C-states supported using MWAIT"
        if internal: line += " (num_c4_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00f00000) >> 20
        osign = " "
        if obj.cpuid_num_c5_substates_override is not None: osign="*"
        line = "EDX[20:23] "+" %#10x %s" % (val, osign) +" - Number of C5 sub C-states supported using MWAIT"
        if internal: line += " (num_c5_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0f000000) >> 24
        osign = " "
        if obj.cpuid_num_c6_substates_override is not None: osign="*"
        line = "EDX[24:27] "+" %#10x %s" % (val, osign) +" - Number of C6 sub C-states supported using MWAIT"
        if internal: line += " (num_c6_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xf0000000) >> 28
        osign = " "
        if obj.cpuid_num_c7_substates_override is not None: osign="*"
        line = "EDX[28:31] "+" %#10x %s" % (val, osign) +" - Number of C7 sub C-states supported using MWAIT"
        if internal: line += " (num_c7_substates, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x5

    def get_leaf_0x6():
        # Return empty result if the leaf is outside present ranges
        if ((0x6 > max_regular_leaf and 0x6 < 0x40000000)
           or (0x6 > 0x4fffffff and 0x6 < 0x80000000)
           or (0x6 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x6, 0)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_digital_therm_sensor_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Digital temperature sensor is supported if set"
        if internal: line += " (digital_therm_sensor, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_turbo_boost_available_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Intel Turbo Boost Technology Available"
        if internal: line += " (turbo_boost_available, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_arat_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - APIC-Timer-always-running feature is supported if set"
        if internal: line += " (arat, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_pln_override is not None: osign="*"
        line = "EAX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Power limit notification controls are supported if set"
        if internal: line += " (pln, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_therm_sensor_override is not None: osign="*"
        line = "EAX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Clock modulation duty cycle extension is supported if set"
        if internal: line += " (therm_sensor, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_has_pkg_lvl_therm_override is not None: osign="*"
        line = "EAX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Package thermal management is supported if set"
        if internal: line += " (has_pkg_lvl_therm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_hwp_base_override is not None: osign="*"
        line = "EAX[ 7: 7] "+" %#10x %s" % (val, osign) +" - HWP base registers (IA32_PM_ENABLE[bit 0], IA32_HWP_CAPABILITIES, IA32_HWP_REQUEST, IA32_HWP_STATUS) are supported if set"
        if internal: line += " (hwp_base, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_hwp_interrupts_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - IA32_HWP_INTERRUPT MSR is supported if set"
        if internal: line += " (hwp_interrupts, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_hwp_activity_windows_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - IA32_HWP_REQUEST[bits 41:32] is supported if set"
        if internal: line += " (hwp_activity_windows, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_hwp_energy_performance_preference_override is not None: osign="*"
        line = "EAX[10:10] "+" %#10x %s" % (val, osign) +" - IA32_HWP_REQUEST[bits 31:24] is supported if set"
        if internal: line += " (hwp_energy_performance_preference, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_hwp_request_pkg_support_override is not None: osign="*"
        line = "EAX[11:11] "+" %#10x %s" % (val, osign) +" - HWP Request Pkg Support"
        if internal: line += " (hwp_request_pkg_support, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_hdc_override is not None: osign="*"
        line = "EAX[13:13] "+" %#10x %s" % (val, osign) +" - HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1, IA32_THREAD_STALL MSRs are supported if set"
        if internal: line += " (hdc, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_hw_guided_sched_override is not None: osign="*"
        line = "EAX[14:14] "+" %#10x %s" % (val, osign) +" - Intel(R) Turbo Boost Max Technology 3.0 available"
        if internal: line += " (hw_guided_sched, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_hwp_highest_change_notification_override is not None: osign="*"
        line = "EAX[15:15] "+" %#10x %s" % (val, osign) +" - HWP Highest Performance change supported if set"
        if internal: line += " (hwp_highest_change_notification, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_hwp_peci_support_override is not None: osign="*"
        line = "EAX[16:16] "+" %#10x %s" % (val, osign) +" - HWP PECI override is supported if set"
        if internal: line += " (hwp_peci_support, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_hwp_thread_request_support_override is not None: osign="*"
        line = "EAX[17:17] "+" %#10x %s" % (val, osign) +" - Flexible HWP is supported if set"
        if internal: line += " (hwp_thread_request_support, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_hwp_req_msr_override is not None: osign="*"
        line = "EAX[18:18] "+" %#10x %s" % (val, osign) +" - Fast access mode for the IA32_HWP_REQUEST is supported if set"
        if internal: line += " (hwp_req_msr, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_hw_sched_int_override is not None: osign="*"
        line = "EAX[19:19] "+" %#10x %s" % (val, osign) +" - HW Scheduler Interface"
        if internal: line += " (hw_sched_int, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_ignore_idle_hwp_override is not None: osign="*"
        line = "EAX[20:20] "+" %#10x %s" % (val, osign) +" - Ignoring Idle Logical Processor HWP request is supported if set"
        if internal: line += " (ignore_idle_hwp, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_hwp_ctrl_msr_supp_override is not None: osign="*"
        line = "EAX[22:22] "+" %#10x %s" % (val, osign) +" - HWP Control MSR Support. The IA32_HWP_CTL MSR is supported if set"
        if internal: line += " (hwp_ctrl_msr_supp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_hw_sched_plus_int_override is not None: osign="*"
        line = "EAX[23:23] "+" %#10x %s" % (val, osign) +" - Intel Thread Director supported if set"
        if internal: line += " (hw_sched_plus_int, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_hw_sched_plus_thread_metadata_override is not None: osign="*"
        line = "EAX[24:24] "+" %#10x %s" % (val, osign) +" - Intel Thread Director metadata supported if set"
        if internal: line += " (hw_sched_plus_thread_metadata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_int_threshold_num_override is not None: osign="*"
        line = "EBX[ 0: 3] "+" %#10x %s" % (val, osign) +" - Number of Interrupt Thresholds in Digital Thermal Sensor"
        if internal: line += " (int_threshold_num, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_hw_coordination_feedb_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Hardware Coordination Feedback Capability (Presence of IA32_MPERF and IA32_APERF)"
        if internal: line += " (hw_coordination_feedb, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_acnt2_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - ACNT2 Capability"
        if internal: line += " (acnt2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_perf_energy_bias_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - The processor supports performance-energy bias preference"
        if internal: line += " (perf_energy_bias, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_hgs_plus_supp_classes_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Number of support classes for the HW guided scheduler"
        if internal: line += " (hgs_plus_supp_classes, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_hgs_capabilities_override is not None: osign="*"
        line = "EDX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Bitmap of supported HW guided scheduler interface capabilities"
        if internal: line += " (hgs_capabilities, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000f00) >> 8
        osign = " "
        if obj.cpuid_hgs_table_size_override is not None: osign="*"
        line = "EDX[ 8:11] "+" %#10x %s" % (val, osign) +" - Size of the HW guided scheduler information table in number of pages"
        if internal: line += " (hgs_table_size, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_hgs_table_index_override is not None: osign="*"
        line = "EDX[16:31] "+" %#10x %s" % (val, osign) +" - Index (starting from 0) of this logical processors row in the hardware feedback table"
        if internal: line += " (hgs_table_index, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x6

    def get_leaf_0x7():
        # Return empty result if the leaf is outside present ranges
        if ((0x7 > max_regular_leaf and 0x7 < 0x40000000)
           or (0x7 > 0x4fffffff and 0x7 < 0x80000000)
           or (0x7 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x7 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_input_subleaf_7_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Reports the maximum supported input value for supported leaf 7 subleaves"
        if internal: line += " (max_input_subleaf_7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_fsgsbase_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Support RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE"
        if internal: line += " (fsgsbase, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_tsc_adjust_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - IA32_TSC_ADJUST MSR is supported if 1"
        if internal: line += " (tsc_adjust, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_sgx_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Intel(R) Software Guard Extensions (Intel(R) SGX)"
        if internal: line += " (sgx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_bmi1_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - BMI1 support"
        if internal: line += " (bmi1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_hle_override is not None: osign="*"
        line = "EBX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Hardware Lock Elision support (removed)"
        if internal: line += " (hle, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_avx2_override is not None: osign="*"
        line = "EBX[ 5: 5] "+" %#10x %s" % (val, osign) +" - AVX2 support"
        if internal: line += " (avx2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_fdp_deprecation_override is not None: osign="*"
        line = "EBX[ 6: 6] "+" %#10x %s" % (val, osign) +" - x87 FPU Data Pointer is updated only on x87 exceptions"
        if internal: line += " (fdp_deprecation, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_smep_override is not None: osign="*"
        line = "EBX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Supervisor-Mode Execution Prevention"
        if internal: line += " (smep, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_bmi2_override is not None: osign="*"
        line = "EBX[ 8: 8] "+" %#10x %s" % (val, osign) +" - BMI2 support"
        if internal: line += " (bmi2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_enh_string_instr_override is not None: osign="*"
        line = "EBX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Supports Enhanced REP MOVSB/STOSB"
        if internal: line += " (enh_string_instr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_invpcid_override is not None: osign="*"
        line = "EBX[10:10] "+" %#10x %s" % (val, osign) +" - Support of INVPCID instruction for system software that manages process-context identifiers"
        if internal: line += " (invpcid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_rtm_override is not None: osign="*"
        line = "EBX[11:11] "+" %#10x %s" % (val, osign) +" - Restricted Transactional Memory support"
        if internal: line += " (rtm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_rdt_m_override is not None: osign="*"
        line = "EBX[12:12] "+" %#10x %s" % (val, osign) +" - Intel(R) Resource Director Technology Monitoring capability"
        if internal: line += " (rdt_m, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_fpu_cs_ds_deprecation_override is not None: osign="*"
        line = "EBX[13:13] "+" %#10x %s" % (val, osign) +" - Deprecates FPU CS and FPU DS values"
        if internal: line += " (fpu_cs_ds_deprecation, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_has_mpx_override is not None: osign="*"
        line = "EBX[14:14] "+" %#10x %s" % (val, osign) +" - Memory Protection Extensions. Deprecated"
        if internal: line += " (has_mpx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_rdt_a_override is not None: osign="*"
        line = "EBX[15:15] "+" %#10x %s" % (val, osign) +" - Intel(R) Resource Director Technology Allocation capability"
        if internal: line += " (rdt_a, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_has_avx512f_override is not None: osign="*"
        line = "EBX[16:16] "+" %#10x %s" % (val, osign) +" - Support of AVX-512 Foundation instructions operating on ZMM states and opmask registers"
        if internal: line += " (has_avx512f, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_avx512dq_override is not None: osign="*"
        line = "EBX[17:17] "+" %#10x %s" % (val, osign) +" - Support of AVX-512 DQ instructions"
        if internal: line += " (avx512dq, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_rdseed_override is not None: osign="*"
        line = "EBX[18:18] "+" %#10x %s" % (val, osign) +" - RDSEED Instruction"
        if internal: line += " (rdseed, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_adx_override is not None: osign="*"
        line = "EBX[19:19] "+" %#10x %s" % (val, osign) +" - ADX Extensions"
        if internal: line += " (adx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_has_smap_override is not None: osign="*"
        line = "EBX[20:20] "+" %#10x %s" % (val, osign) +" - Supervisor Memory Access Prevention"
        if internal: line += " (has_smap, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00200000) >> 21
        osign = " "
        if obj.cpuid_avx512ifma_override is not None: osign="*"
        line = "EBX[21:21] "+" %#10x %s" % (val, osign) +" - AVX-512 IFMA"
        if internal: line += " (avx512ifma, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_reserved_ebx_22_override is not None: osign="*"
        line = "EBX[22:22] "+" %#10x %s" % (val, osign) +" - Reserved field"
        if internal: line += " (reserved_ebx_22, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_clflushopt_override is not None: osign="*"
        line = "EBX[23:23] "+" %#10x %s" % (val, osign) +" - CLFLUSHOPT instruction"
        if internal: line += " (clflushopt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_clwb_override is not None: osign="*"
        line = "EBX[24:24] "+" %#10x %s" % (val, osign) +" - CLWB instruction"
        if internal: line += " (clwb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x02000000) >> 25
        osign = " "
        if obj.cpuid_rtit_override is not None: osign="*"
        line = "EBX[25:25] "+" %#10x %s" % (val, osign) +" - Intel Processor Trace"
        if internal: line += " (rtit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_avx512pf_override is not None: osign="*"
        line = "EBX[26:26] "+" %#10x %s" % (val, osign) +" - A collection of VGATHERPF0xxx/VGATHERPF1xxx/VSCATTERPF0xxx/VSCATTERPF1xxx instructions are supported"
        if internal: line += " (avx512pf, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_avx512er_override is not None: osign="*"
        line = "EBX[27:27] "+" %#10x %s" % (val, osign) +" - Support of the AVX-512 Exponential and Reciprocal instructions"
        if internal: line += " (avx512er, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x10000000) >> 28
        osign = " "
        if obj.cpuid_avx512cd_override is not None: osign="*"
        line = "EBX[28:28] "+" %#10x %s" % (val, osign) +" - The family of VPCONFLICT/VPLZCNT/VPBROADCASTM instructions are supported"
        if internal: line += " (avx512cd, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_sha_override is not None: osign="*"
        line = "EBX[29:29] "+" %#10x %s" % (val, osign) +" - Support of Secure Hash Algorithm extension"
        if internal: line += " (sha, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_avx512bw_override is not None: osign="*"
        line = "EBX[30:30] "+" %#10x %s" % (val, osign) +" - AVX-512 BW"
        if internal: line += " (avx512bw, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_avx512vl_override is not None: osign="*"
        line = "EBX[31:31] "+" %#10x %s" % (val, osign) +" - AVX-512 VL"
        if internal: line += " (avx512vl, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_prefetchwt1_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - PREFETCHWT1 instruction"
        if internal: line += " (prefetchwt1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_avx512vbmi_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - AVX-512 VBMI"
        if internal: line += " (avx512vbmi, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_umip_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - UMIP, User Mode Instruction Prevention"
        if internal: line += " (umip, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_pku_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Protection keys for user-mode pages"
        if internal: line += " (pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_ospke_override is not None: osign="*"
        line = "ECX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Protection keys enabled"
        if internal: line += " (ospke, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_waitpkg_override is not None: osign="*"
        line = "ECX[ 5: 5] "+" %#10x %s" % (val, osign) +" - UMONITOR/UMWAIT/TPAUSE instructions"
        if internal: line += " (waitpkg, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_avx512_vbmi2_override is not None: osign="*"
        line = "ECX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Additional byte, word, dword and qword capabilities, an addition to AVX512"
        if internal: line += " (avx512_vbmi2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_cet_ss_override is not None: osign="*"
        line = "ECX[ 7: 7] "+" %#10x %s" % (val, osign) +" - IntelÂ® Control-flow Enforcement Technology shadow stack feature"
        if internal: line += " (cet_ss, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_gfni_override is not None: osign="*"
        line = "ECX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Galois Field New Instructions"
        if internal: line += " (gfni, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_vaes_override is not None: osign="*"
        line = "ECX[ 9: 9] "+" %#10x %s" % (val, osign) +" - VAES supported"
        if internal: line += " (vaes, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_vpclmulqdq_override is not None: osign="*"
        line = "ECX[10:10] "+" %#10x %s" % (val, osign) +" - VPCLMULQDQ supported"
        if internal: line += " (vpclmulqdq, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_avx512vnni_override is not None: osign="*"
        line = "ECX[11:11] "+" %#10x %s" % (val, osign) +" - VNNI supported"
        if internal: line += " (avx512vnni, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_avx512_bitalg_override is not None: osign="*"
        line = "ECX[12:12] "+" %#10x %s" % (val, osign) +" - IntelÂ® AVX-512 support for VPOPCNT[BW] and VPSHUFBITQMB"
        if internal: line += " (avx512_bitalg, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_tme_override is not None: osign="*"
        line = "ECX[13:13] "+" %#10x %s" % (val, osign) +" - Total memory encryption"
        if internal: line += " (tme, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_avx512_vpopcntdq_override is not None: osign="*"
        line = "ECX[14:14] "+" %#10x %s" % (val, osign) +" - IntelÂ® AVX VPOPCNTD and VPOPCNTQ"
        if internal: line += " (avx512_vpopcntdq, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_fzm_override is not None: osign="*"
        line = "ECX[15:15] "+" %#10x %s" % (val, osign) +" - Fast zero memory"
        if internal: line += " (fzm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_la57_override is not None: osign="*"
        line = "ECX[16:16] "+" %#10x %s" % (val, osign) +" - 5-level paging"
        if internal: line += " (la57, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x003e0000) >> 17
        osign = " "
        if obj.cpuid_mawau_override is not None: osign="*"
        line = "ECX[17:21] "+" %#10x %s" % (val, osign) +" - MAWAU (Deprecated)"
        if internal: line += " (mawau, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_rdpid_override is not None: osign="*"
        line = "ECX[22:22] "+" %#10x %s" % (val, osign) +" - RDPID. Supports read processor ID if 1"
        if internal: line += " (rdpid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_kl_supported_override is not None: osign="*"
        line = "ECX[23:23] "+" %#10x %s" % (val, osign) +" - Keylocker extension supported"
        if internal: line += " (kl_supported, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_bus_lock_intercept_override is not None: osign="*"
        line = "ECX[24:24] "+" %#10x %s" % (val, osign) +" - Bus Lock Intercept"
        if internal: line += " (bus_lock_intercept, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x02000000) >> 25
        osign = " "
        if obj.cpuid_cldemote_override is not None: osign="*"
        line = "ECX[25:25] "+" %#10x %s" % (val, osign) +" - CLDEMOTE instruction"
        if internal: line += " (cldemote, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_movdiri_override is not None: osign="*"
        line = "ECX[27:27] "+" %#10x %s" % (val, osign) +" - MOVDIRI supported"
        if internal: line += " (movdiri, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x10000000) >> 28
        osign = " "
        if obj.cpuid_movdir64b_override is not None: osign="*"
        line = "ECX[28:28] "+" %#10x %s" % (val, osign) +" - MOVDIR64B supported"
        if internal: line += " (movdir64b, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_enqcmd_override is not None: osign="*"
        line = "ECX[29:29] "+" %#10x %s" % (val, osign) +" - ENQCMD and ENQCMDS supported"
        if internal: line += " (enqcmd, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_sgx_lc_override is not None: osign="*"
        line = "ECX[30:30] "+" %#10x %s" % (val, osign) +" - Intel SGX Launch Configuration"
        if internal: line += " (sgx_lc, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_pks_override is not None: osign="*"
        line = "ECX[31:31] "+" %#10x %s" % (val, osign) +" - Protection Keys for Supervisor Pages"
        if internal: line += " (pks, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_sgx_tem_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - SGX TEM is supported if 1"
        if internal: line += " (sgx_tem, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_server_attestation_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Server Attestation Mode"
        if internal: line += " (server_attestation, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_avx512_4vnniw_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Quad vector neural network new instructions"
        if internal: line += " (avx512_4vnniw, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_avx512_4fmaps_override is not None: osign="*"
        line = "EDX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Quad vector fused multiple-add packed single instructions"
        if internal: line += " (avx512_4fmaps, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_fast_short_rep_movsb_override is not None: osign="*"
        line = "EDX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Fast Short REP MOVSB support"
        if internal: line += " (fast_short_rep_movsb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_user_interrupts_override is not None: osign="*"
        line = "EDX[ 5: 5] "+" %#10x %s" % (val, osign) +" - User Interrupts support"
        if internal: line += " (user_interrupts, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_avx512vp2intersect_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - VP2INTERSECT[D/Q]"
        if internal: line += " (avx512vp2intersect, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_srbds_ctrl_override is not None: osign="*"
        line = "EDX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Enumerates support for the IA32_MCU_OPT_CTRL MSR and indicates that its bit 0 (RNGDS_MITG_DIS) is also supported"
        if internal: line += " (srbds_ctrl, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_md_clear_override is not None: osign="*"
        line = "EDX[10:10] "+" %#10x %s" % (val, osign) +" - Processor Support for Buffer Overwriting Microarchitectural Data Sampling"
        if internal: line += " (md_clear, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_rtm_always_abort_override is not None: osign="*"
        line = "EDX[11:11] "+" %#10x %s" % (val, osign) +" - Execution of XBEGIN immediately aborts and transitions to the specified fallback address"
        if internal: line += " (rtm_always_abort, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_tsx_force_abort_override is not None: osign="*"
        line = "EDX[13:13] "+" %#10x %s" % (val, osign) +" - Processors that set this bit support the TSX_FORCE_ABORT MSR"
        if internal: line += " (tsx_force_abort, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_serialize_override is not None: osign="*"
        line = "EDX[14:14] "+" %#10x %s" % (val, osign) +" - Indicates SERIALIZE instruction support"
        if internal: line += " (serialize, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_hetero_override is not None: osign="*"
        line = "EDX[15:15] "+" %#10x %s" % (val, osign) +" - Indicates heterogeneous system"
        if internal: line += " (hetero, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_tsxldtrk_override is not None: osign="*"
        line = "EDX[16:16] "+" %#10x %s" % (val, osign) +" - TSX suspend load address tracking"
        if internal: line += " (tsxldtrk, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_pconfig_override is not None: osign="*"
        line = "EDX[18:18] "+" %#10x %s" % (val, osign) +" - PCONFIG instruction available"
        if internal: line += " (pconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_arch_lbrs_override is not None: osign="*"
        line = "EDX[19:19] "+" %#10x %s" % (val, osign) +" - Architectural LBRs"
        if internal: line += " (arch_lbrs, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_cet_ibt_override is not None: osign="*"
        line = "EDX[20:20] "+" %#10x %s" % (val, osign) +" - IntelÂ® Control-flow Enforcement Technology indirect branch tracking feature"
        if internal: line += " (cet_ibt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_amx_bf16_override is not None: osign="*"
        line = "EDX[22:22] "+" %#10x %s" % (val, osign) +" - AMX tile computational operations on bfloat16 numbers"
        if internal: line += " (amx_bf16, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_avx512fp16_override is not None: osign="*"
        line = "EDX[23:23] "+" %#10x %s" % (val, osign) +" - AVX512 FP16 extension"
        if internal: line += " (avx512fp16, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x01000000) >> 24
        osign = " "
        if obj.cpuid_amx_tile_override is not None: osign="*"
        line = "EDX[24:24] "+" %#10x %s" % (val, osign) +" - AMX tile support"
        if internal: line += " (amx_tile, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x02000000) >> 25
        osign = " "
        if obj.cpuid_amx_int8_override is not None: osign="*"
        line = "EDX[25:25] "+" %#10x %s" % (val, osign) +" - AMX tile computational operations on 8-bit integers"
        if internal: line += " (amx_int8, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_ibrs_ibpb_override is not None: osign="*"
        line = "EDX[26:26] "+" %#10x %s" % (val, osign) +" - Indirect Branch Restricted Speculation and Indirect Branch Predictor Barrier are supported"
        if internal: line += " (ibrs_ibpb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_stibp_override is not None: osign="*"
        line = "EDX[27:27] "+" %#10x %s" % (val, osign) +" - Single Thread Indirect Branch Predictors are supported"
        if internal: line += " (stibp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x10000000) >> 28
        osign = " "
        if obj.cpuid_l1d_flush_override is not None: osign="*"
        line = "EDX[28:28] "+" %#10x %s" % (val, osign) +" - Enumerates support for L1D_FLUSH MSR and command"
        if internal: line += " (l1d_flush, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_arch_capabilities_override is not None: osign="*"
        line = "EDX[29:29] "+" %#10x %s" % (val, osign) +" - IA32_ARCH_CAPABILITIES supported"
        if internal: line += " (arch_capabilities, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_core_capabilities_override is not None: osign="*"
        line = "EDX[30:30] "+" %#10x %s" % (val, osign) +" - IA32_CORE_CAPABILITIES supported"
        if internal: line += " (core_capabilities, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_ssbd_override is not None: osign="*"
        line = "EDX[31:31] "+" %#10x %s" % (val, osign) +" - Enumerates support for Speculative Store Bypass Disable (SSBD)"
        if internal: line += " (ssbd, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x7 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 1)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_sha512_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Secure Hash Algorithm with 512 bits digest"
        if internal: line += " (sha512, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_sm3_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - SM3 hash function"
        if internal: line += " (sm3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_sm4_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - SM4 blockcipher algorithm"
        if internal: line += " (sm4, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_rao_int_override is not None: osign="*"
        line = "EAX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Supports RAO-INT instructions"
        if internal: line += " (rao_int, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_avx_vnni_override is not None: osign="*"
        line = "EAX[ 4: 4] "+" %#10x %s" % (val, osign) +" - AVX-VNNI support"
        if internal: line += " (avx_vnni, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_avx512_bf16_override is not None: osign="*"
        line = "EAX[ 5: 5] "+" %#10x %s" % (val, osign) +" - AVX512 BFLOAT16 inputs and conversion instructions from IEEE single precision"
        if internal: line += " (avx512_bf16, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_lass_override is not None: osign="*"
        line = "EAX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Linear address space separation"
        if internal: line += " (lass, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_cmpccxadd_override is not None: osign="*"
        line = "EAX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Support CMPccXADD instructions"
        if internal: line += " (cmpccxadd, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_arch_perfmon_ext_leaf_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Arch PerfMon Extended leaf is supported"
        if internal: line += " (arch_perfmon_ext_leaf, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_fast_zero_movsb_override is not None: osign="*"
        line = "EAX[10:10] "+" %#10x %s" % (val, osign) +" - Executing REP MOVSB with a length of 0 has the same latency as a length of 1"
        if internal: line += " (fast_zero_movsb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_fast_short_stosb_override is not None: osign="*"
        line = "EAX[11:11] "+" %#10x %s" % (val, osign) +" - STOSB is faster than MOVSB at all lengths, including zero length and up to 128 bytes"
        if internal: line += " (fast_short_stosb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_fast_short_cmpsb_override is not None: osign="*"
        line = "EAX[12:12] "+" %#10x %s" % (val, osign) +" - CMPSB/SCASB of up to 128 bytes is done in 13 cycles"
        if internal: line += " (fast_short_cmpsb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_fred_override is not None: osign="*"
        line = "EAX[17:17] "+" %#10x %s" % (val, osign) +" - Flexible Return and Event Delivery"
        if internal: line += " (fred, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_lkgs_override is not None: osign="*"
        line = "EAX[18:18] "+" %#10x %s" % (val, osign) +" - LKGS instruction (load into IA32_KERNEL_GS_BASE)"
        if internal: line += " (lkgs, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_wrmsrns_override is not None: osign="*"
        line = "EAX[19:19] "+" %#10x %s" % (val, osign) +" - WRMSRNS instruction"
        if internal: line += " (wrmsrns, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_nmi_source_override is not None: osign="*"
        line = "EAX[20:20] "+" %#10x %s" % (val, osign) +" - If 1, supports NMI-source reporting"
        if internal: line += " (nmi_source, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00200000) >> 21
        osign = " "
        if obj.cpuid_amx_fp16_override is not None: osign="*"
        line = "EAX[21:21] "+" %#10x %s" % (val, osign) +" - AMX tile computational operations on FP16 numbers"
        if internal: line += " (amx_fp16, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00400000) >> 22
        osign = " "
        if obj.cpuid_hgs_plus_hreset_override is not None: osign="*"
        line = "EAX[22:22] "+" %#10x %s" % (val, osign) +" - Hardware Guided Scheduling Plus HRESET support"
        if internal: line += " (hgs_plus_hreset, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_avx_ifma_override is not None: osign="*"
        line = "EAX[23:23] "+" %#10x %s" % (val, osign) +" - AVX IFMA instructions"
        if internal: line += " (avx_ifma, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_arch_lam_override is not None: osign="*"
        line = "EAX[26:26] "+" %#10x %s" % (val, osign) +" - Linear Address Masking"
        if internal: line += " (arch_lam, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_msrlist_override is not None: osign="*"
        line = "EAX[27:27] "+" %#10x %s" % (val, osign) +" - Supports the RDMSRLIST and WRMSRLIST instructions"
        if internal: line += " (msrlist, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_invd_disable_post_bios_done_override is not None: osign="*"
        line = "EAX[30:30] "+" %#10x %s" % (val, osign) +" - INVD_DISABLE_POST_BIOS_DONE. If 1, supports INVD execution prevention after BIOS Done."
        if internal: line += " (invd_disable_post_bios_done, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_ppin_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Enumerates the presence of the IA32_PPIN and IA32_PPIN_CTL MSRs"
        if internal: line += " (ppin, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_tse_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Enumerates the presence of TSE ISA"
        if internal: line += " (tse, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_cpuidmaxval_lim_rmv_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Enumerates support for setting Limit CPUID maxval bit (bit 22) in IA32_MISC_ENABLE MSR (MSR 1A0H) 0 = CPU supports setting Limit CPUID Maxval bit 1 = IA32_MISC_ENABLE MSR[bit 22] is reserved"
        if internal: line += " (cpuidmaxval_lim_rmv, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_x86s_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Feature bit to enumerate support for X86S, which is a long mode only IA subset (no 16bit mode, not 32bit ring 0, some other deprecations)"
        if internal: line += " (x86s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_sipi64_override is not None: osign="*"
        line = "ECX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Indicate presence of the IA32_ENTRY_STRUCT_PTR MSR, enabling 64bit SIPI"
        if internal: line += " (sipi64, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_avx_vnni_int8_override is not None: osign="*"
        line = "EDX[ 4: 4] "+" %#10x %s" % (val, osign) +" - AVX VNNI for bytes"
        if internal: line += " (avx_vnni_int8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_avx_ne_convert_override is not None: osign="*"
        line = "EDX[ 5: 5] "+" %#10x %s" % (val, osign) +" - AVX NE Convert"
        if internal: line += " (avx_ne_convert, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_amx_complex_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - AMX-COMPLEX"
        if internal: line += " (amx_complex, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_avx_vnni_int16_override is not None: osign="*"
        line = "EDX[10:10] "+" %#10x %s" % (val, osign) +" - AVX VNNI for words"
        if internal: line += " (avx_vnni_int16, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_utmr_override is not None: osign="*"
        line = "EDX[13:13] "+" %#10x %s" % (val, osign) +" - UTMR. If 1, supports user-timer events."
        if internal: line += " (utmr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_prefetchiti_override is not None: osign="*"
        line = "EDX[14:14] "+" %#10x %s" % (val, osign) +" - Support of the PREFETCHIT0/1 instructions"
        if internal: line += " (prefetchiti, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_user_msr_override is not None: osign="*"
        line = "EDX[15:15] "+" %#10x %s" % (val, osign) +" - USER_MSR"
        if internal: line += " (user_msr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_uiret_loads_uif_override is not None: osign="*"
        line = "EDX[17:17] "+" %#10x %s" % (val, osign) +" - UIRET loads UIF"
        if internal: line += " (uiret_loads_uif, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_cet_sss_override is not None: osign="*"
        line = "EDX[18:18] "+" %#10x %s" % (val, osign) +" - If 1, indicates that an operating system can enable supervisor shadow stacks as long as it ensures that a supervisor shadow stack cannot become prematurely busy due to page faults (see Section 17.2.3 of the IntelÂ® 64 and IA-32 Architectures Software Developer's Manual, Volume 1)."
        if internal: line += " (cet_sss, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_avx10_override is not None: osign="*"
        line = "EDX[19:19] "+" %#10x %s" % (val, osign) +" - AVX10 converged vector ISA leaf 0x24 is available"
        if internal: line += " (avx10, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00200000) >> 21
        osign = " "
        if obj.cpuid_apx_f_override is not None: osign="*"
        line = "EDX[21:21] "+" %#10x %s" % (val, osign) +" - Advanced Performance Extensions"
        if internal: line += " (apx_f, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00800000) >> 23
        osign = " "
        if obj.cpuid_monitorless_mwait_alt_override is not None: osign="*"
        line = "EDX[23:23] "+" %#10x %s" % (val, osign) +" - Monitorless MWAIT (alternative enumeration)"
        if internal: line += " (monitorless_mwait_alt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x7 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 2)
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_pfsd_bit_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Enumerates support of IA32_SPEC_CTRL.PFSD bit"
        if internal: line += " (pfsd_bit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_ipred_ctrl_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Indirect branch prediction disable, indicating that IA32_SPEC_CTRL.IPRED_DIS_U/S are supported"
        if internal: line += " (ipred_ctrl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_rrsba_ctrl_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Bottomless RSB disabled, indicating that IA32_SPEC_CTRL.RRSBA_DIS_U/S are supported"
        if internal: line += " (rrsba_ctrl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_ddpd_ctrl_override is not None: osign="*"
        line = "EDX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Data dependent prefetcher disabling, indicating that IA32_SPEC_CTRL.DDPD_U is supported"
        if internal: line += " (ddpd_ctrl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_bhi_ctrl_override is not None: osign="*"
        line = "EDX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Stew-based prediction disabled, indicating that IA32_SPEC_CTRL.BHI_DIS is supported"
        if internal: line += " (bhi_ctrl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_mcdt_no_override is not None: osign="*"
        line = "EDX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Processors that enumerate this bit as 1 do not exhibit MXCSR Configuration Dependent Timing (MCDT) behavior and do not need to be mitigated to avoid data-dependent behavior for certain instructions"
        if internal: line += " (mcdt_no, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_memory_ctrl_override is not None: osign="*"
        line = "EDX[ 6: 6] "+" %#10x %s" % (val, osign) +" - If 1, supports the UC-lock disable feature"
        if internal: line += " (memory_ctrl, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_mon_umon_mitg_no_override is not None: osign="*"
        line = "EDX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Processors that enumerate this bit as 1 aren't affected by the MONITOR/UMONITOR scaling limitation and don't require any mitigation"
        if internal: line += " (mon_umon_mitg_no, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x7 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 3)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x7 subleaf  15")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x7, 15)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x7

    def get_leaf_0x9():
        # Return empty result if the leaf is outside present ranges
        if ((0x9 > max_regular_leaf and 0x9 < 0x40000000)
           or (0x9 > 0x4fffffff and 0x9 < 0x80000000)
           or (0x9 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x9")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x9, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_platform_dca_cap_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address 1F8H)"
        if internal: line += " (platform_dca_cap, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x9

    def get_leaf_0xa():
        # Return empty result if the leaf is outside present ranges
        if ((0xa > max_regular_leaf and 0xa < 0x40000000)
           or (0xa > 0x4fffffff and 0xa < 0x80000000)
           or (0xa > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0xa")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xa, 0)
        val = (query.a & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_perfmon_version_override is not None: osign="*"
        line = "EAX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Version ID of architectural performance monitoring"
        if internal: line += " (perfmon_version, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_num_perf_counters_override is not None: osign="*"
        line = "EAX[ 8:15] "+" %#10x %s" % (val, osign) +" - Number of general-purpose performance monitoring counter per logical processor"
        if internal: line += " (num_perf_counters, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00ff0000) >> 16
        osign = " "
        if obj.cpuid_perf_counter_width_override is not None: osign="*"
        line = "EAX[16:23] "+" %#10x %s" % (val, osign) +" - Bit width of general-purpose, performance monitoring counter"
        if internal: line += " (perf_counter_width, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_perf_events_length_override is not None: osign="*"
        line = "EAX[24:31] "+" %#10x %s" % (val, osign) +" - Length of EBX bit vector to enumerate architectural performance monitoring events"
        if internal: line += " (perf_events_length, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_core_cycle_not_avail_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Core cycle event not available if 1"
        if internal: line += " (core_cycle_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_inst_retired_not_avail_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Instruction retired event not available if 1"
        if internal: line += " (inst_retired_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_ref_cycle_not_avail_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Reference cycles event not available if 1"
        if internal: line += " (ref_cycle_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_llc_ref_evt_not_avail_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Last-level cache reference event not available if 1"
        if internal: line += " (llc_ref_evt_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_llc_ref_miss_not_avail_override is not None: osign="*"
        line = "EBX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Last-level cache misses event not available if 1"
        if internal: line += " (llc_ref_miss_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_branch_retir_not_avail_override is not None: osign="*"
        line = "EBX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Branch instruction retired event not available if 1"
        if internal: line += " (branch_retir_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_branch_mispr_not_avail_override is not None: osign="*"
        line = "EBX[ 6: 6] "+" %#10x %s" % (val, osign) +" - Branch mispredict retired event not available if 1"
        if internal: line += " (branch_mispr_not_avail, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_topdown_slots_not_avail_override is not None: osign="*"
        line = "EBX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Top-down slots event not available if 1 or if EAX[31:24]<8."
        if internal: line += " (topdown_slots_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_topdown_backend_bound_not_avail_override is not None: osign="*"
        line = "EBX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Top-down backend bound event not available if 1"
        if internal: line += " (topdown_backend_bound_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_topdown_bad_speculation_not_avail_override is not None: osign="*"
        line = "EBX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Top-down bad speculation event not available if 1"
        if internal: line += " (topdown_bad_speculation_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_topdown_frontend_bound_not_avail_override is not None: osign="*"
        line = "EBX[10:10] "+" %#10x %s" % (val, osign) +" - Top-down frontend bound event not available if 1"
        if internal: line += " (topdown_frontend_bound_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_topdown_retiring_not_avail_override is not None: osign="*"
        line = "EBX[11:11] "+" %#10x %s" % (val, osign) +" - Top-down retiring event not available if 1"
        if internal: line += " (topdown_retiring_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_lbr_entry_inserts_not_avail_override is not None: osign="*"
        line = "EBX[12:12] "+" %#10x %s" % (val, osign) +" - LBR entry inserted event not available if 1"
        if internal: line += " (lbr_entry_inserts_not_avail, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_fixed_counter_support_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Fixed counter supported"
        if internal: line += " (fixed_counter_support, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_fixed_perf_ctr_num_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Number of fixed-function performance counters (if Version ID > 1)"
        if internal: line += " (fixed_perf_ctr_num, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00001fe0) >> 5
        osign = " "
        if obj.cpuid_fixed_perf_ctr_width_override is not None: osign="*"
        line = "EDX[ 5:12] "+" %#10x %s" % (val, osign) +" - Bit width of fixed-function performance counters (if Version ID > 1)"
        if internal: line += " (fixed_perf_ctr_width, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_anythread_deprecation_override is not None: osign="*"
        line = "EDX[15:15] "+" %#10x %s" % (val, osign) +" - AnyThread deprecation"
        if internal: line += " (anythread_deprecation, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0xa

    def get_leaf_0xb():
        # Return empty result if the leaf is outside present ranges
        if ((0xb > max_regular_leaf and 0xb < 0x40000000)
           or (0xb > 0x4fffffff and 0xb < 0x80000000)
           or (0xb > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0xb subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xb, 0)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_nxt_lvl_apic_shift_sl0_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (nxt_lvl_apic_shift_sl0, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_num_logic_cpus_level0_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level type"
        if internal: line += " (num_logic_cpus_level0, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_level_number_0_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (level_number_0, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_level_type_0_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (level_type_0, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_x2apic_id_sl0_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID of the current logical processor"
        if internal: line += " (x2apic_id_sl0, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xb subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xb, 1)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_nxt_lvl_apic_shift_sl1_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (nxt_lvl_apic_shift_sl1, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_num_logic_cpus_level1_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level type"
        if internal: line += " (num_logic_cpus_level1, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_level_number_1_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (level_number_1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_level_type_1_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (level_type_1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_x2apic_id_sl1_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID of the current logical processor"
        if internal: line += " (x2apic_id_sl1, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0xb

    def get_leaf_0xd():
        # Return empty result if the leaf is outside present ranges
        if ((0xd > max_regular_leaf and 0xd < 0x40000000)
           or (0xd > 0x4fffffff and 0xd < 0x80000000)
           or (0xd > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 0)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xcr0_mask_lo_x87_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - x87 bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_x87, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xcr0_mask_lo_sse_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - SSE bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_sse, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xcr0_mask_lo_avx256_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - AVX256 bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_avx256, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xcr0_mask_lo_mpx_bndregs_override is not None: osign="*"
        line = "EAX[ 3: 3] "+" %#10x %s" % (val, osign) +" - MPX BNDREGS bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_mpx_bndregs, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_xcr0_mask_lo_mpx_bndcfs_override is not None: osign="*"
        line = "EAX[ 4: 4] "+" %#10x %s" % (val, osign) +" - MPX BNDCFS bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_mpx_bndcfs, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_xcr0_mask_lo_avx3_kmask_override is not None: osign="*"
        line = "EAX[ 5: 5] "+" %#10x %s" % (val, osign) +" - KMASK bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_avx3_kmask, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_xcr0_mask_lo_avx3_zmm_lo_override is not None: osign="*"
        line = "EAX[ 6: 6] "+" %#10x %s" % (val, osign) +" - ZMM high part 15:0 bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_avx3_zmm_lo, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_xcr0_mask_lo_avx3_zmm_hi_override is not None: osign="*"
        line = "EAX[ 7: 7] "+" %#10x %s" % (val, osign) +" - ZMM full 31:16 bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_avx3_zmm_hi, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_xcr0_mask_lo_pkru_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - PKRU bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_pkru, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_xcr0_mask_lo_ia32_xss_lo_override is not None: osign="*"
        line = "EAX[13:13] "+" %#10x %s" % (val, osign) +" - IA32_XSS lower half bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_ia32_xss_lo, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_xcr0_mask_lo_ia32_xss_hi_override is not None: osign="*"
        line = "EAX[16:16] "+" %#10x %s" % (val, osign) +" - IA32_XSS upper half bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_ia32_xss_hi, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_xcr0_mask_lo_tileconfig_override is not None: osign="*"
        line = "EAX[17:17] "+" %#10x %s" % (val, osign) +" - XTILECFG bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_tileconfig, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_xcr0_mask_lo_tiledata_override is not None: osign="*"
        line = "EAX[18:18] "+" %#10x %s" % (val, osign) +" - TILEDATA bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_tiledata, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00080000) >> 19
        osign = " "
        if obj.cpuid_xcr0_mask_lo_apx_f_override is not None: osign="*"
        line = "EAX[19:19] "+" %#10x %s" % (val, osign) +" - APX_F bit of the lower 32 bits of XCR0"
        if internal: line += " (xcr0_mask_lo_apx_f, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_enabled_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum size (bytes) of XSAVE area required by enabled features in XCR0"
        if internal: line += " (xsave_area_enabled, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_supported_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum size (bytes from the beginning of the XSAVE/XRSTOR save area) of the XSAVE/XRSTOR save area required by all supported features in the processor; i.e all the valid bit fields in XCR0"
        if internal: line += " (xsave_area_supported, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xcr0_mask_upper_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Reports the valid bit fields of the upper 32 bits of XCR0"
        if internal: line += " (xcr0_mask_upper, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 1)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_has_xsaveopt_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - XSAVEOPT is available"
        if internal: line += " (has_xsaveopt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_has_xsavec_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - XSAVEC is available"
        if internal: line += " (has_xsavec, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_has_xgetbv_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XGETBV is available"
        if internal: line += " (has_xgetbv, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_has_xsaves_override is not None: osign="*"
        line = "EAX[ 3: 3] "+" %#10x %s" % (val, osign) +" - XSAVES is available"
        if internal: line += " (has_xsaves, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_xfd_override is not None: osign="*"
        line = "EAX[ 4: 4] "+" %#10x %s" % (val, osign) +" - XFD support"
        if internal: line += " (xfd, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsaves_area_enabled_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Reports size required by XSAVES for features in (XCR0 | IA32_XSS)"
        if internal: line += " (xsaves_area_enabled, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_xss_mask_lo_pt_override is not None: osign="*"
        line = "ECX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Processor trace bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_pt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_xss_mask_lo_xcr0_override is not None: osign="*"
        line = "ECX[ 9: 9] "+" %#10x %s" % (val, osign) +" - XCR0 bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_xcr0, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_xss_mask_lo_pasid_override is not None: osign="*"
        line = "ECX[10:10] "+" %#10x %s" % (val, osign) +" - PASID bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_pasid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_xss_mask_lo_cet_u_override is not None: osign="*"
        line = "ECX[11:11] "+" %#10x %s" % (val, osign) +" - CET_USER bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_xss_mask_lo_cet_s_override is not None: osign="*"
        line = "ECX[12:12] "+" %#10x %s" % (val, osign) +" - CET_SUPERVISOR bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00002000) >> 13
        osign = " "
        if obj.cpuid_xss_mask_lo_hdc_override is not None: osign="*"
        line = "ECX[13:13] "+" %#10x %s" % (val, osign) +" - HDC bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_hdc, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00004000) >> 14
        osign = " "
        if obj.cpuid_xss_mask_lo_uint_override is not None: osign="*"
        line = "ECX[14:14] "+" %#10x %s" % (val, osign) +" - User interrupt bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_uint, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_xss_mask_lo_arch_lbr_override is not None: osign="*"
        line = "ECX[15:15] "+" %#10x %s" % (val, osign) +" - Architectural LBR bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_xss_mask_lo_hwp_override is not None: osign="*"
        line = "ECX[16:16] "+" %#10x %s" % (val, osign) +" - HWP bit of the lower 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_lo_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xss_mask_upper_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Reports the valid bit fields of the upper 32 bits of IA32_XSS MSR"
        if internal: line += " (xss_mask_upper, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 2)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_2_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_2_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_2_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_2_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_2_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_2_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 3)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_3_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_3_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_3_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_3_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_3_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_3_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 4)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_4_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_4_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_4_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_4, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_4_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_4, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_4_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_4, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_4_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_4, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 5)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_5_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_5_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_5_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_5, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_5_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_5, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_5_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_5, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_5_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_5, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 6)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_6_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_6_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_6_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_6, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_6_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_6, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_6_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_6, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_6_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_6, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   7")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 7)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_7_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_7_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_7_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_7_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_7_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_7_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_7, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   8")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 8)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_rtit_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Intel PT XSAVES area size"
        if internal: line += " (xsave_area_rtit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_8_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_rtit_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Intel PT is supervisor state"
        if internal: line += " (xsave_supervisor_rtit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_8_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_8, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_rtit_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_rtit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_rtit_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_rtit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf   9")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 9)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_pku_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - PKU XSAVE area size"
        if internal: line += " (xsave_area_pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_pku_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - PKU XSAVE area offset"
        if internal: line += " (xsave_offset_pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_pku_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - PKU is supervisor state"
        if internal: line += " (xsave_supervisor_pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_9_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_9, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_pku_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_pku_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_pku, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  10")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 10)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_pasid_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - XSAVES size of PASID area"
        if internal: line += " (xsave_area_pasid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_10_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_10, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_pasid_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - XSAVE PASID state is supervisor state"
        if internal: line += " (xsave_supervisor_pasid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_10_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_10, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_pasid_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_pasid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_pasid_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_pasid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  11")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 11)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_cet_u_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - CET user mode state XSAVE area size"
        if internal: line += " (xsave_area_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_cet_u_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - CET user mode state XSAVE area offset"
        if internal: line += " (xsave_offset_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_cet_u_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - CET user mode state is supervisor state"
        if internal: line += " (xsave_supervisor_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_cet_u_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_cet_u_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_cet_u_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_cet_u, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  12")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 12)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_cet_s_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - CET supervisor mode state XSAVE area size"
        if internal: line += " (xsave_area_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_cet_s_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - CET supervisor mode state XSAVE area offset"
        if internal: line += " (xsave_offset_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_cet_s_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - CET supervisor mode state is supervisor state"
        if internal: line += " (xsave_supervisor_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_0xc_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_0xc, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_cet_s_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_cet_s_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_cet_s, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  13")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 13)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_13_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The size in bytes of the save area for an extended state feature associated with this sub-leaf"
        if internal: line += " (xsave_area_13, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_13_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_13, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_ia32_xss_13_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - When set, indicates that this extended feature corresponds to a valid bit in IA32_XSS (and not XCR0)"
        if internal: line += " (xsave_ia32_xss_13, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_13_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_13, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  14")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 14)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_uint_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - UINT mode state XSAVE area size"
        if internal: line += " (xsave_area_uint, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_0xe_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - The offset in bytes of this extended state component's save area from the beginning of the XSAVE/XRSTOR area"
        if internal: line += " (xsave_offset_0xe, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_uint_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - UINT mode state is supervisor state"
        if internal: line += " (xsave_supervisor_uint, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_0xe_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - The bit is set if, when the compacted format of an XSAVE area is used, this extended state component located on the next 64-byte boundary following the preceding state component (otherwise, it is located immediately following the preceding state component)"
        if internal: line += " (xsave_aligned_0xe, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_uint_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_uint, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_uint_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_uint, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  15")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 15)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_arch_lbr_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Arch LBR XSAVE area size"
        if internal: line += " (xsave_area_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_arch_lbr_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Arch LBR XSAVE area offset"
        if internal: line += " (xsave_offset_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_arch_lbr_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Arch LBR is supervisor state"
        if internal: line += " (xsave_supervisor_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_arch_lbr_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Arch LBR aligned"
        if internal: line += " (xsave_aligned_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_arch_lbr_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_arch_lbr_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_arch_lbr, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  16")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 16)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_hwp_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - HWP mode state XSAVE area size"
        if internal: line += " (xsave_area_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_hwp_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - HWP XSAVE offset"
        if internal: line += " (xsave_offset_hwp, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_hwp_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - HWP mode state is supervisor state"
        if internal: line += " (xsave_supervisor_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_hwp_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - HWP XSAVE aligned"
        if internal: line += " (xsave_aligned_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_hwp_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XFD faulting"
        if internal: line += " (xsave_xfd_fail_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_hwp_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_hwp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  17")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 17)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_tileconfig_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - XTILECFG state XSAVE area size"
        if internal: line += " (xsave_area_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_tileconfig_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - XTILECFG state XSAVE area offset"
        if internal: line += " (xsave_offset_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_tileconfig_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - XTILECFG state is supervisor state"
        if internal: line += " (xsave_supervisor_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_tileconfig_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - XTILECFG state is 64-byte aligned when used in compacted form"
        if internal: line += " (xsave_aligned_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_tileconfig_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - XTILECFG state supports XFD failing"
        if internal: line += " (xsave_xfd_fail_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_tileconfig_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_tileconfig, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  18")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 18)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_tiledata_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - TTILEDATA state XSAVE area size"
        if internal: line += " (xsave_area_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_tiledata_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - TTILEDATA state XSAVE area offset"
        if internal: line += " (xsave_offset_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_tiledata_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - TTILEDATA state is supervisor state"
        if internal: line += " (xsave_supervisor_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_tiledata_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - TTILEDATA state is 64-byte aligned when used in compacted form"
        if internal: line += " (xsave_aligned_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_fail_tiledata_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - TTILEDATA state supports XFD failing"
        if internal: line += " (xsave_xfd_fail_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_xsave_benign_tiledata_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Benign"
        if internal: line += " (xsave_benign_tiledata, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xd subleaf  19")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xd, 19)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_area_apx_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - APX state XSAVE area size"
        if internal: line += " (xsave_area_apx, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_xsave_offset_apx_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - APX state XSAVE area offset"
        if internal: line += " (xsave_offset_apx, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_xsave_supervisor_apx_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - APX state is supervisor state"
        if internal: line += " (xsave_supervisor_apx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_xsave_aligned_apx_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - APX state is 64-byte aligned when used in compacted form"
        if internal: line += " (xsave_aligned_apx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_xsave_xfd_faulting_apx_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - APX supports XFD faulting"
        if internal: line += " (xsave_xfd_faulting_apx, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0xd

    def get_leaf_0xf():
        # Return empty result if the leaf is outside present ranges
        if ((0xf > max_regular_leaf and 0xf < 0x40000000)
           or (0xf > 0x4fffffff and 0xf < 0x80000000)
           or (0xf > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0xf subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xf, 0)
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_rmid_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum range (zero-based) of RMID within this physical processor of all types"
        if internal: line += " (max_rmid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_rdt_m_l3_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - L3 Cache Intel(R) RDT Monitoring"
        if internal: line += " (rdt_m_l3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0xf subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0xf, 1)
        val = (query.a & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_ia32_qm_ctr_overflow_override is not None: osign="*"
        line = "EAX[ 8: 8] "+" %#10x %s" % (val, osign) +" - If 1, indicates the presence of an overflow bit in the IA32_QM_CTR MSR (bit 61)."
        if internal: line += " (ia32_qm_ctr_overflow, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_io_l3_occupancy_monitor_override is not None: osign="*"
        line = "EAX[ 9: 9] "+" %#10x %s" % (val, osign) +" - If 1, indicates the presence of non-CPU agent Intel RDT CMT support."
        if internal: line += " (io_l3_occupancy_monitor, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_io_l3_ext_bm_override is not None: osign="*"
        line = "EAX[10:10] "+" %#10x %s" % (val, osign) +" - If 1, indicates the presence of non-CPU agent Intel RDT MBM support."
        if internal: line += " (io_l3_ext_bm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_l3_conversion_factor_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Conversion factor from reported IA32_QM_CTR value to occupancy metric (bytes)"
        if internal: line += " (l3_conversion_factor, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_l3_max_rmid_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum range (zero-based) of RMID of L3 Cache Intel(R) RDT Monitoring"
        if internal: line += " (l3_max_rmid, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_l3_occupancy_monitor_override is not None: osign="*"
        line = "EDX[ 0: 0] "+" %#10x %s" % (val, osign) +" - L3 occupancy monitoring"
        if internal: line += " (l3_occupancy_monitor, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_l3_total_bm_override is not None: osign="*"
        line = "EDX[ 1: 1] "+" %#10x %s" % (val, osign) +" - L3 Total Bandwidth monitoring"
        if internal: line += " (l3_total_bm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_l3_local_bm_override is not None: osign="*"
        line = "EDX[ 2: 2] "+" %#10x %s" % (val, osign) +" - L3 Local Bandwidth monitoring"
        if internal: line += " (l3_local_bm, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0xf

    def get_leaf_0x10():
        # Return empty result if the leaf is outside present ranges
        if ((0x10 > max_regular_leaf and 0x10 < 0x40000000)
           or (0x10 > 0x4fffffff and 0x10 < 0x80000000)
           or (0x10 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 0)
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_rdt_a_l3_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - L3 Cache Allocation Technology"
        if internal: line += " (rdt_a_l3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_rdt_a_l2_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - L2 Cache Allocation Technology"
        if internal: line += " (rdt_a_l2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_rdt_a_mba_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Memory Bandwidth Allocation"
        if internal: line += " (rdt_a_mba, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_rtd_a_mem_bw_override is not None: osign="*"
        line = "EBX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Supports Cache Bandwidth Allocation if 1"
        if internal: line += " (rtd_a_mem_bw, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 1)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l3_bitmask_length_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Length of the capacity bit mask for the corresponding ResID using minus-one notation"
        if internal: line += " (rdt_a_l3_bitmask_length, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l3_bitmap_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bit-granular map of isolation/contention of allocation units"
        if internal: line += " (rdt_a_l3_bitmap, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_rdt_io_a_l3_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Indicates L3 CAT for non-CPU agents is supported"
        if internal: line += " (rdt_io_a_l3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_rdt_a_l3_cdp_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Code and Data Prioritization Technology"
        if internal: line += " (rdt_a_l3_cdp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_rdt_a_l3_non_contig_mask_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Non-contiguous mask support"
        if internal: line += " (rdt_a_l3_non_contig_mask, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l3_max_cos_override is not None: osign="*"
        line = "EDX[ 0:15] "+" %#10x %s" % (val, osign) +" - Highest COS number supported for this ResID"
        if internal: line += " (rdt_a_l3_max_cos, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 2)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l2_bitmask_length_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Length of the capacity bit mask for the corresponding ResID using minus-one notation"
        if internal: line += " (rdt_a_l2_bitmask_length, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l2_bitmap_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bit-granular map of isolation/contention of allocation units"
        if internal: line += " (rdt_a_l2_bitmap, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_rdt_a_l2_cdp_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Code and Data Prioritization Technology"
        if internal: line += " (rdt_a_l2_cdp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_rdt_a_l2_non_contig_mask_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Non-contiguous mask support"
        if internal: line += " (rdt_a_l2_non_contig_mask, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_l2_max_cos_override is not None: osign="*"
        line = "EDX[ 0:15] "+" %#10x %s" % (val, osign) +" - Highest COS number supported for this ResID"
        if internal: line += " (rdt_a_l2_max_cos, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 3)
        val = (query.a & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_mba_tval_override is not None: osign="*"
        line = "EAX[ 0:11] "+" %#10x %s" % (val, osign) +" - Reports the maximum MBA throttling value supported for the corresponding ResID using minus-one notation"
        if internal: line += " (rdt_a_mba_tval, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_rdt_a_mba_per_thread_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Per-thread Memory Bandwidth Allocation controls are supported"
        if internal: line += " (rdt_a_mba_per_thread, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_rdt_a_mba_lin_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Reports whether the response of the delay values is linear"
        if internal: line += " (rdt_a_mba_lin, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_rtd_a_mba_non_contig_vals_supp_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Non Contiguous Values Supported"
        if internal: line += " (rtd_a_mba_non_contig_vals_supp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_rdt_a_mba_max_cos_override is not None: osign="*"
        line = "EDX[ 0:15] "+" %#10x %s" % (val, osign) +" - Highest COS number supported for this ResID"
        if internal: line += " (rdt_a_mba_max_cos, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 5)
        val = (query.a & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_qos_enf_mba_max_core_throttling_override is not None: osign="*"
        line = "EAX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Reports the maximum core throttling level supported for the corresponding ResID. Add one to the return value to get the number of throttling levels supported."
        if internal: line += " (qos_enf_mba_max_core_throttling, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000f00) >> 8
        osign = " "
        if obj.cpuid_qos_enf_mba_ia32_qos_core_bw_thrtl_n_msrs_override is not None: osign="*"
        line = "EAX[ 8:11] "+" %#10x %s" % (val, osign) +" - If 1, indicates the logical processor scope of the IA32_QoS_Core_BW_Thrtl_n MSRs"
        if internal: line += " (qos_enf_mba_ia32_qos_core_bw_thrtl_n_msrs, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_qos_enf_mba_bw_control_is_linear_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - If 1, the response of the bandwidth control is approximately linear. If 0, the response of the bandwidth control is non-linear."
        if internal: line += " (qos_enf_mba_bw_control_is_linear, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_qos_enf_mba_max_cos_override is not None: osign="*"
        line = "EDX[ 0:15] "+" %#10x %s" % (val, osign) +" - Highest Class of Service (COS) number supported for this ResID."
        if internal: line += " (qos_enf_mba_max_cos, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x10 subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x10, 6)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x10

    def get_leaf_0x12():
        # Return empty result if the leaf is outside present ranges
        if ((0x12 > max_regular_leaf and 0x12 < 0x40000000)
           or (0x12 > 0x4fffffff and 0x12 < 0x80000000)
           or (0x12 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 0)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_sgx1_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Collection of SGX1 leaf functions"
        if internal: line += " (sgx1, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_sgx2_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Collection of SGX2 leaf functions"
        if internal: line += " (sgx2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_sgx_enclv_override is not None: osign="*"
        line = "EAX[ 5: 5] "+" %#10x %s" % (val, osign) +" - ENCLV leaves EINCVIRTCHILD, EDECVIRTCHILD, and ESETCONTEXT"
        if internal: line += " (sgx_enclv, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_sgx_trackc_override is not None: osign="*"
        line = "EAX[ 6: 6] "+" %#10x %s" % (val, osign) +" - ENCLS leaves ETRACKC, ERDINFO, ELDBC, and ELDUC"
        if internal: line += " (sgx_trackc, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_sgx_everifyreport2_override is not None: osign="*"
        line = "EAX[ 7: 7] "+" %#10x %s" % (val, osign) +" - EVERIFYREPORT2"
        if internal: line += " (sgx_everifyreport2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000400) >> 10
        osign = " "
        if obj.cpuid_sgx_eupdatesvn_override is not None: osign="*"
        line = "EAX[10:10] "+" %#10x %s" % (val, osign) +" - EUPDATESVN"
        if internal: line += " (sgx_eupdatesvn, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_edeccssa_override is not None: osign="*"
        line = "EAX[11:11] "+" %#10x %s" % (val, osign) +" - If 1, indicates Intel SGX supports ENCLU instruction leaf EDECCSSA."
        if internal: line += " (edeccssa, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00001000) >> 12
        osign = " "
        if obj.cpuid_ereport2_egetkey256_override is not None: osign="*"
        line = "EAX[12:12] "+" %#10x %s" % (val, osign) +" - ereport2_egetkey256"
        if internal: line += " (ereport2_egetkey256, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_sgx_miscselect_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bit vector of supported extended SGX features"
        if internal: line += " (sgx_miscselect, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_sgx_enc_size_32_override is not None: osign="*"
        line = "EDX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Maximum enclave size (in Bytes) not in 64-bit mode = 2 ^ v"
        if internal: line += " (sgx_enc_size_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_sgx_enc_size_64_override is not None: osign="*"
        line = "EDX[ 8:15] "+" %#10x %s" % (val, osign) +" - Maximum enclave size (in Bytes) in 64-bit mode = 2 ^ v"
        if internal: line += " (sgx_enc_size_64, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 1)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_secs_attr_mask_00_31_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Report the valid bit fields of bits [31:0] of SECS.ATTRIBUTES that software can set with ECREATE"
        if internal: line += " (secs_attr_mask_00_31, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_secs_attr_mask_32_63_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Report the valid bit fields of bits [32:63] of SECS.ATTRIBUTES that software can set with ECREATE"
        if internal: line += " (secs_attr_mask_32_63, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_secs_attr_mask_64_95_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Report the valid bit fields of bits [64:95] of SECS.ATTRIBUTES that software can set with ECREATE"
        if internal: line += " (secs_attr_mask_64_95, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_secs_attr_mask_96_127_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Report the valid bit fields of bits [96:127] of SECS.ATTRIBUTES that software can set with ECREATE"
        if internal: line += " (secs_attr_mask_96_127, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 2)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region0_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region0_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc0_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc0_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc0_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc0_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc0_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc0_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc0_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc0_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc0_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc0_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 3)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region1_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region1_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc1_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc1_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc1_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc1_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc1_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc1_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc1_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc1_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc1_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc1_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 4)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region2_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region2_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc2_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc2_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc2_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc2_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc2_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc2_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc2_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc2_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc2_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc2_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 5)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region3_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region3_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc3_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc3_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc3_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc3_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc3_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc3_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc3_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc3_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc3_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc3_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 6)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region4_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region4_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc4_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc4_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc4_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc4_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc4_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc4_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc4_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc4_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc4_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc4_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   7")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 7)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region5_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region5_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc5_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc5_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc5_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc5_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc5_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc5_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc5_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc5_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc5_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc5_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   8")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 8)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region6_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region6_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc6_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc6_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc6_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc6_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc6_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc6_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc6_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc6_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc6_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc6_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x12 subleaf   9")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x12, 9)
        val = (query.a & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_sgx_region7_type_override is not None: osign="*"
        line = "EAX[ 0: 3] "+" %#10x %s" % (val, osign) +" - SGX subleaf region type description"
        if internal: line += " (sgx_region7_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc7_phys_addr_31_12_override is not None: osign="*"
        line = "EAX[12:31] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 31:12"
        if internal: line += " (epc7_phys_addr_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc7_phys_addr_51_32_override is not None: osign="*"
        line = "EBX[ 0:19] "+" %#10x %s" % (val, osign) +" - EPC base physical address bits 51:32"
        if internal: line += " (epc7_phys_addr_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000000f) >> 0
        osign = " "
        if obj.cpuid_epc7_prot_type_override is not None: osign="*"
        line = "ECX[ 0: 3] "+" %#10x %s" % (val, osign) +" - The EPC section is confidentiality, integrity and replay protected"
        if internal: line += " (epc7_prot_type, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xfffff000) >> 12
        osign = " "
        if obj.cpuid_epc7_size_31_12_override is not None: osign="*"
        line = "ECX[12:31] "+" %#10x %s" % (val, osign) +" - Bits 31:12 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc7_size_31_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000fffff) >> 0
        osign = " "
        if obj.cpuid_epc7_size_51_32_override is not None: osign="*"
        line = "EDX[ 0:19] "+" %#10x %s" % (val, osign) +" - Bits 51:32 of the size of the corresponding EPC section within the Processor Reserved Memory"
        if internal: line += " (epc7_size_51_32, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x12

    def get_leaf_0x14():
        # Return empty result if the leaf is outside present ranges
        if ((0x14 > max_regular_leaf and 0x14 < 0x40000000)
           or (0x14 > 0x4fffffff and 0x14 < 0x80000000)
           or (0x14 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x14 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x14, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_rtit_subleaf_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum number of sub-leaves that supported in leaf 0x14"
        if internal: line += " (max_rtit_subleaf, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_cr3_filtering_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Indicates that IA32_RTIT_CTL.CR3Filter can be set to 1, and that IA32_RTIT_CR3_MATCH MSR can be accessed"
        if internal: line += " (cr3_filtering, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_cycle_accurate_mode_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Cycle Accurate Mode, Configurable PSB support"
        if internal: line += " (cycle_accurate_mode, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_ip_filtering_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - IP filltering, TraceStop and Preserve PT MSRs across warm reset"
        if internal: line += " (ip_filtering, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_mtc_supported_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - MTC supported"
        if internal: line += " (mtc_supported, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_ptwrite_override is not None: osign="*"
        line = "EBX[ 4: 4] "+" %#10x %s" % (val, osign) +" - PTWRITE support"
        if internal: line += " (ptwrite, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_power_event_trace_override is not None: osign="*"
        line = "EBX[ 5: 5] "+" %#10x %s" % (val, osign) +" - Power Event Trace support"
        if internal: line += " (power_event_trace, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000040) >> 6
        osign = " "
        if obj.cpuid_psb_pmi_injection_override is not None: osign="*"
        line = "EBX[ 6: 6] "+" %#10x %s" % (val, osign) +" - PSB/PMI Injection support"
        if internal: line += " (psb_pmi_injection, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000080) >> 7
        osign = " "
        if obj.cpuid_event_trace_enable_override is not None: osign="*"
        line = "EBX[ 7: 7] "+" %#10x %s" % (val, osign) +" - Writes can set IA32_RTIT_CTL[31], enabling Event Trace packet generation"
        if internal: line += " (event_trace_enable, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_tnt_disable_override is not None: osign="*"
        line = "EBX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Writes can set IA32_RTIT_CTL[55], disabling TNT packet generation"
        if internal: line += " (tnt_disable, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_trigger_tracing_supp_override is not None: osign="*"
        line = "EBX[ 9: 9] "+" %#10x %s" % (val, osign) +" - Trigger Tracing Supported"
        if internal: line += " (trigger_tracing_supp, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_topa_output_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Indicates that tracing can be enabled"
        if internal: line += " (topa_output, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_topa_multiple_regions_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - ToPA tables can hold any number of output entries, up to maximum allowed by IA32_RTIT_OUTPUT_MASK_PTRS MSR"
        if internal: line += " (topa_multiple_regions, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_single_range_output_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Single-Range Output Supported"
        if internal: line += " (single_range_output, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_trace_fabric_override is not None: osign="*"
        line = "ECX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Output to Platform Trace Fabric"
        if internal: line += " (trace_fabric, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_ip_payload_lip_override is not None: osign="*"
        line = "ECX[31:31] "+" %#10x %s" % (val, osign) +" - Generated packets which contain IP payload have LIP values, which include the CS base component"
        if internal: line += " (ip_payload_lip, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x14 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x14, 1)
        val = (query.a & 0x00000007) >> 0
        osign = " "
        if obj.cpuid_address_ranges_override is not None: osign="*"
        line = "EAX[ 0: 2] "+" %#10x %s" % (val, osign) +" - Number of Address Ranges Supported"
        if internal: line += " (address_ranges, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_ia32_rtit_triggern_cfg_msrs_num_override is not None: osign="*"
        line = "EAX[ 8:10] "+" %#10x %s" % (val, osign) +" - Number of IA32_RTIT_TRIGGERx_CFG MSRs. The number of triggers supported is 4x this value."
        if internal: line += " (ia32_rtit_triggern_cfg_msrs_num, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_mtc_period_options_override is not None: osign="*"
        line = "EAX[16:31] "+" %#10x %s" % (val, osign) +" - MTC Period Options Supported"
        if internal: line += " (mtc_period_options, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_cycle_threshold_value_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Cycle Threshold Values Supported"
        if internal: line += " (cycle_threshold_value, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_psb_frequencies_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - PSB Frequencies Supported"
        if internal: line += " (psb_frequencies, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_trigger_action_attribution_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Trigger Action Attribution Supported"
        if internal: line += " (trigger_action_attribution, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_trigger_actions_trace_pause_and_resume_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Trigger Actions Trace Pause and Resume Supported"
        if internal: line += " (trigger_actions_trace_pause_and_resume, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00008000) >> 15
        osign = " "
        if obj.cpuid_trigger_input_dr_match_override is not None: osign="*"
        line = "ECX[15:15] "+" %#10x %s" % (val, osign) +" - Trigger Input DR Match Supported"
        if internal: line += " (trigger_input_dr_match, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x14

    def get_leaf_0x15():
        # Return empty result if the leaf is outside present ranges
        if ((0x15 > max_regular_leaf and 0x15 < 0x40000000)
           or (0x15 > 0x4fffffff and 0x15 < 0x80000000)
           or (0x15 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x15")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x15, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_denominator_tsc_to_core_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - An unsigned integer which is the denominator of the TSC/core crystal clock ratio"
        if internal: line += " (denominator_tsc_to_core, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_numerator_tsc_to_core_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - An unsigned integer which is the numerator of the TSC/core crystal clock ratio"
        if internal: line += " (numerator_tsc_to_core, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_crystal_frequency_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - SoC Crystal Frequency in Hz"
        if internal: line += " (soc_crystal_frequency, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x15

    def get_leaf_0x16():
        # Return empty result if the leaf is outside present ranges
        if ((0x16 > max_regular_leaf and 0x16 < 0x40000000)
           or (0x16 > 0x4fffffff and 0x16 < 0x80000000)
           or (0x16 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x16")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x16, 0)
        val = (query.a & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_base_freq_override is not None: osign="*"
        line = "EAX[ 0:15] "+" %#10x %s" % (val, osign) +" - CPU Base Frequency (in MHz)"
        if internal: line += " (base_freq, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_max_freq_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Maximum Frequency (in MHz)"
        if internal: line += " (max_freq, cr)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_bus_freq_override is not None: osign="*"
        line = "ECX[ 0:15] "+" %#10x %s" % (val, osign) +" - Bus (Reference) Frequency (in MHz)"
        if internal: line += " (bus_freq, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x16

    def get_leaf_0x17():
        # Return empty result if the leaf is outside present ranges
        if ((0x17 > max_regular_leaf and 0x17 < 0x40000000)
           or (0x17 > 0x4fffffff and 0x17 < 0x80000000)
           or (0x17 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x17 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_input_subleaf_0x17_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum input subleaf for leaf 0x17"
        if internal: line += " (max_input_subleaf_0x17, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_id_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - SoC vendor ID"
        if internal: line += " (soc_vendor_id, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_is_vendor_scheme_override is not None: osign="*"
        line = "EBX[16:16] "+" %#10x %s" % (val, osign) +" - Whether the SoC Vendor ID field is assigned via an industry standard enumeration scheme or by Intel"
        if internal: line += " (is_vendor_scheme, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_project_id_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Project ID"
        if internal: line += " (soc_project_id, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_stepping_id_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Stepping ID"
        if internal: line += " (soc_stepping_id, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x17 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 1)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_01_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_01, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_02_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_02, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_03_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_03, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_04_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_04, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x17 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 2)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_05_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_05, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_06_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_06, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_07_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_07, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_08_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_08, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x17 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x17, 3)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_09_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_09, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_10_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_10, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_11_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_11, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_soc_vendor_brand_str_12_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of SoC Vendor Brand String. UTF-8 string"
        if internal: line += " (soc_vendor_brand_str_12, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x17

    def get_leaf_0x18():
        # Return empty result if the leaf is outside present ranges
        if ((0x18 > max_regular_leaf and 0x18 < 0x40000000)
           or (0x18 > 0x4fffffff and 0x18 < 0x80000000)
           or (0x18 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_max_subleaf_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Deterministic Cache Parameters max subleaf number"
        if internal: line += " (dcp_max_subleaf, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 1)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l1_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l1_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l1_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l1_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l1_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l1_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l1_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l1_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l1_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l1_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l1_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l1_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l1, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 2)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l2_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l2_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l2_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l2_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l2_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l2_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l2_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l2_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l2_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l2_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l2_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l2_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l2, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 3)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l3_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l3_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l3_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l3_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l3_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l3_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l3_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l3_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l3_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l3_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l3_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l3_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l3, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 4)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l4_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l4_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l4_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l4_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l4_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l4_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l4_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l4_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l4_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l4_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l4_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l4_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l4, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 5)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l5_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l5_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l5_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l5_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l5_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l5_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l5_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l5_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l5_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l5_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l5_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l5_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l5, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 6)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l6_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l6_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l6_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l6_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l6_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l6_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l6_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l6_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l6_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l6_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l6_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l6_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l6, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   7")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 7)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l7_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l7_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l7_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l7_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l7_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l7_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l7_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l7_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l7_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l7_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l7_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l7_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l7, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x18 subleaf   8")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x18, 8)
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_dcp_4_kb_page_size_supported_l8_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - 4 KB page size supported by this structure"
        if internal: line += " (dcp_4_kb_page_size_supported_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_dcp_2_mb_page_size_supported_l8_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - 2 MB page size supported by this structure"
        if internal: line += " (dcp_2_mb_page_size_supported_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_dcp_4_mb_page_size_supported_l8_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - 4 MB page size supported by this structure"
        if internal: line += " (dcp_4_mb_page_size_supported_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_dcp_1_gb_page_size_supported_l8_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - 1 GB page size supported by this structure"
        if internal: line += " (dcp_1_gb_page_size_supported_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000700) >> 8
        osign = " "
        if obj.cpuid_dcp_partitioning_l8_override is not None: osign="*"
        line = "EBX[ 8:10] "+" %#10x %s" % (val, osign) +" - Partitioning"
        if internal: line += " (dcp_partitioning_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_dcp_ways_associativity_l8_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Ways of associativity"
        if internal: line += " (dcp_ways_associativity_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_dcp_number_sets_l8_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Number of sets"
        if internal: line += " (dcp_number_sets_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_dcp_translation_cache_type_l8_override is not None: osign="*"
        line = "EDX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Translation Cache Type"
        if internal: line += " (dcp_translation_cache_type_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x000000e0) >> 5
        osign = " "
        if obj.cpuid_dcp_translation_cache_lvl_l8_override is not None: osign="*"
        line = "EDX[ 5: 7] "+" %#10x %s" % (val, osign) +" - Translation Cache Level"
        if internal: line += " (dcp_translation_cache_lvl_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_dcp_fully_associative_l8_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Fully associative structure"
        if internal: line += " (dcp_fully_associative_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x03ffc000) >> 14
        osign = " "
        if obj.cpuid_dcp_max_number_threads_sharing_l8_override is not None: osign="*"
        line = "EDX[14:25] "+" %#10x %s" % (val, osign) +" - Maximum number of threads sharing this cache"
        if internal: line += " (dcp_max_number_threads_sharing_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xfc000000) >> 26
        osign = " "
        if obj.cpuid_dcp_number_asids_l8_override is not None: osign="*"
        line = "EDX[26:31] "+" %#10x %s" % (val, osign) +" - Number of linear-address spaces (ASIDs) supported in this structure for PCID"
        if internal: line += " (dcp_number_asids_l8, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x18

    def get_leaf_0x19():
        # Return empty result if the leaf is outside present ranges
        if ((0x19 > max_regular_leaf and 0x19 < 0x40000000)
           or (0x19 > 0x4fffffff and 0x19 < 0x80000000)
           or (0x19 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x19")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x19, 0)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_kl_cpl0_restriction_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - CPL0 restriction type supported, meaning that handle can be restricted to be used only in CPL0"
        if internal: line += " (kl_cpl0_restriction, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_kl_decrypt_only_restriction_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Decrypt only restriction type supported, meaning that handle can be restricted to be used only in decryption"
        if internal: line += " (kl_decrypt_only_restriction, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_kl_encrypt_only_restriction_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Encrypt only restriction type supported, meaning that handle can be restricted to be used only in encryption"
        if internal: line += " (kl_encrypt_only_restriction, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_kl_process_restriction_override is not None: osign="*"
        line = "EAX[ 3: 3] "+" %#10x %s" % (val, osign) +" - process restriction type supported, meaning that handle can be restricted to be used for specific process"
        if internal: line += " (kl_process_restriction, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_aes_kl_enabled_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Indicates whether Keylocker is currently fully enabled"
        if internal: line += " (aes_kl_enabled, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_kl_enclave_load_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Indicates whether enclave can load wrapping key"
        if internal: line += " (kl_enclave_load, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_kl_aes_wide_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Indicates AES*WIDE*KL support"
        if internal: line += " (kl_aes_wide, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_kl_vaes_override is not None: osign="*"
        line = "EBX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Indicates vAES*KL support"
        if internal: line += " (kl_vaes, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000010) >> 4
        osign = " "
        if obj.cpuid_kl_iwkeybackup_override is not None: osign="*"
        line = "EBX[ 4: 4] "+" %#10x %s" % (val, osign) +" - Indicates IWKeyBackup is supported and read/write KL MSRs"
        if internal: line += " (kl_iwkeybackup, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_kl_no_backup_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - NoBackup Support"
        if internal: line += " (kl_no_backup, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_kl_random_iwkey_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Indicates whether random IWKey supported"
        if internal: line += " (kl_random_iwkey, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x19

    def get_leaf_0x1a():
        # Return empty result if the leaf is outside present ranges
        if ((0x1a > max_regular_leaf and 0x1a < 0x40000000)
           or (0x1a > 0x4fffffff and 0x1a < 0x80000000)
           or (0x1a > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1a")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1a, 0)
        val = (query.a & 0x00ffffff) >> 0
        osign = " "
        if obj.cpuid_hetero_model_id_override is not None: osign="*"
        line = "EAX[ 0:23] "+" %#10x %s" % (val, osign) +" - Native model ID"
        if internal: line += " (hetero_model_id, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xff000000) >> 24
        osign = " "
        if obj.cpuid_hetero_core_type_override is not None: osign="*"
        line = "EAX[24:31] "+" %#10x %s" % (val, osign) +" - Native core type"
        if internal: line += " (hetero_core_type, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1a

    def get_leaf_0x1b():
        # Return empty result if the leaf is outside present ranges
        if ((0x1b > max_regular_leaf and 0x1b < 0x40000000)
           or (0x1b > 0x4fffffff and 0x1b < 0x80000000)
           or (0x1b > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1b subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1b, 0)
        val = (query.a & 0x00000fff) >> 0
        osign = " "
        if obj.cpuid_pconfig_subleaf_type_override is not None: osign="*"
        line = "EAX[ 0:11] "+" %#10x %s" % (val, osign) +" - PCONFIG subleaf type"
        if internal: line += " (pconfig_subleaf_type, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_target_id1_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Target ID1"
        if internal: line += " (target_id1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_target_id2_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Target ID2"
        if internal: line += " (target_id2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_target_id3_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Target ID3"
        if internal: line += " (target_id3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1b

    def get_leaf_0x1c():
        # Return empty result if the leaf is outside present ranges
        if ((0x1c > max_regular_leaf and 0x1c < 0x40000000)
           or (0x1c > 0x4fffffff and 0x1c < 0x80000000)
           or (0x1c > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1c")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1c, 0)
        val = (query.a & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_lbr_depth_override is not None: osign="*"
        line = "EAX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Supported LBR depth"
        if internal: line += " (lbr_depth, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x40000000) >> 30
        osign = " "
        if obj.cpuid_lbr_deep_cstate_reset_override is not None: osign="*"
        line = "EAX[30:30] "+" %#10x %s" % (val, osign) +" - Deep C-state reset"
        if internal: line += " (lbr_deep_cstate_reset, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x80000000) >> 31
        osign = " "
        if obj.cpuid_lbr_ip_values_contain_lip_override is not None: osign="*"
        line = "EAX[31:31] "+" %#10x %s" % (val, osign) +" - IP values contain LIP"
        if internal: line += " (lbr_ip_values_contain_lip, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_lbr_cpl_filtering_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - CPL filtering supported"
        if internal: line += " (lbr_cpl_filtering, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_lbr_branch_filtering_override is not None: osign="*"
        line = "EBX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Branch filtering supported"
        if internal: line += " (lbr_branch_filtering, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_lbr_call_stack_mode_override is not None: osign="*"
        line = "EBX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Call-stack mode supported"
        if internal: line += " (lbr_call_stack_mode, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_lbr_mispredict_bit_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Mispredict bit supported"
        if internal: line += " (lbr_mispredict_bit, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_lbr_timed_lbrs_override is not None: osign="*"
        line = "ECX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Timed LBRs supported"
        if internal: line += " (lbr_timed_lbrs, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_lbr_branch_type_field_override is not None: osign="*"
        line = "ECX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Branch type field supported"
        if internal: line += " (lbr_branch_type_field, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000f0000) >> 16
        osign = " "
        if obj.cpuid_lbr_event_logging_override is not None: osign="*"
        line = "ECX[16:19] "+" %#10x %s" % (val, osign) +" - Event Logging Supported bitmap."
        if internal: line += " (lbr_event_logging, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1c

    def get_leaf_0x1d():
        # Return empty result if the leaf is outside present ranges
        if ((0x1d > max_regular_leaf and 0x1d < 0x40000000)
           or (0x1d > 0x4fffffff and 0x1d < 0x80000000)
           or (0x1d > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1d subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1d, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_impl_max_palette_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Highest numbered palette subleaf"
        if internal: line += " (impl_max_palette, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1d subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1d, 1)
        val = (query.a & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_palette_1_total_tile_bytes_override is not None: osign="*"
        line = "EAX[ 0:15] "+" %#10x %s" % (val, osign) +" - Palette 1 total_tile_bytes"
        if internal: line += " (palette_1_total_tile_bytes, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_palette_1_bytes_per_tile_override is not None: osign="*"
        line = "EAX[16:31] "+" %#10x %s" % (val, osign) +" - Palette 1 bytes_per_tile"
        if internal: line += " (palette_1_bytes_per_tile, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_palette_1_bytes_per_row_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Palette 1 bytes_per_row"
        if internal: line += " (palette_1_bytes_per_row, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_palette_1_max_names_override is not None: osign="*"
        line = "EBX[16:31] "+" %#10x %s" % (val, osign) +" - Palette 1 max_names"
        if internal: line += " (palette_1_max_names, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_palette_1_max_rows_override is not None: osign="*"
        line = "ECX[ 0:15] "+" %#10x %s" % (val, osign) +" - Palette 1 max_rows"
        if internal: line += " (palette_1_max_rows, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1d

    def get_leaf_0x1e():
        # Return empty result if the leaf is outside present ranges
        if ((0x1e > max_regular_leaf and 0x1e < 0x40000000)
           or (0x1e > 0x4fffffff and 0x1e < 0x80000000)
           or (0x1e > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1e subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1e, 0)
        val = (query.b & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_impl_tmul_maxk_override is not None: osign="*"
        line = "EBX[ 0: 7] "+" %#10x %s" % (val, osign) +" - tmul_maxk (rows or cols), SIMICSTS-1487"
        if internal: line += " (impl_tmul_maxk, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00ffff00) >> 8
        osign = " "
        if obj.cpuid_impl_tmul_maxn_override is not None: osign="*"
        line = "EBX[ 8:23] "+" %#10x %s" % (val, osign) +" - tmul_maxn (column bytes), SIMICSTS-1487"
        if internal: line += " (impl_tmul_maxn, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1e subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1e, 1)
        val = (query.a & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_amx_int8_mirror_override is not None: osign="*"
        line = "EAX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Mirror of amx_int8 CPUID:07H.00H:EDX[25], HSD-14022148820"
        if internal: line += " (amx_int8_mirror, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000002) >> 1
        osign = " "
        if obj.cpuid_amx_bf16_mirror_override is not None: osign="*"
        line = "EAX[ 1: 1] "+" %#10x %s" % (val, osign) +" - Mirror of amx_bf16 CPUID:07H.00H:EDX[22]"
        if internal: line += " (amx_bf16_mirror, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000004) >> 2
        osign = " "
        if obj.cpuid_amx_complex_mirror_override is not None: osign="*"
        line = "EAX[ 2: 2] "+" %#10x %s" % (val, osign) +" - Mirror of amx_complex CPUID:07H.01H:EDX[8]"
        if internal: line += " (amx_complex_mirror, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x00000008) >> 3
        osign = " "
        if obj.cpuid_amx_fp16_mirror_override is not None: osign="*"
        line = "EAX[ 3: 3] "+" %#10x %s" % (val, osign) +" - Mirror of amx_fp16 CPUID:07H.01H:EAX[21]"
        if internal: line += " (amx_fp16_mirror, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1e

    def get_leaf_0x1f():
        # Return empty result if the leaf is outside present ranges
        if ((0x1f > max_regular_leaf and 0x1f < 0x40000000)
           or (0x1f > 0x4fffffff and 0x1f < 0x80000000)
           or (0x1f > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1f subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 0)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_topo_1f_shift_level0_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (topo_1f_shift_level0, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_num_cpus_level0_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level"
        if internal: line += " (topo_1f_num_cpus_level0, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_level_number0_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (topo_1f_level_number0, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_topo_1f_level_type0_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (topo_1f_level_type0, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_x2apic_id0_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID the current logical processor"
        if internal: line += " (topo_1f_x2apic_id0, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1f subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 1)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_topo_1f_shift_level1_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (topo_1f_shift_level1, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_num_cpus_level1_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level"
        if internal: line += " (topo_1f_num_cpus_level1, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_level_number1_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (topo_1f_level_number1, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_topo_1f_level_type1_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (topo_1f_level_type1, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_x2apic_id1_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID the current logical processor"
        if internal: line += " (topo_1f_x2apic_id1, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1f subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 2)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_topo_1f_shift_level2_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (topo_1f_shift_level2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_num_cpus_level2_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level"
        if internal: line += " (topo_1f_num_cpus_level2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_level_number2_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (topo_1f_level_number2, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_topo_1f_level_type2_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (topo_1f_level_type2, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_x2apic_id2_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID the current logical processor"
        if internal: line += " (topo_1f_x2apic_id2, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x1f subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x1f, 3)
        val = (query.a & 0x0000001f) >> 0
        osign = " "
        if obj.cpuid_topo_1f_shift_level3_override is not None: osign="*"
        line = "EAX[ 0: 4] "+" %#10x %s" % (val, osign) +" - Bits to shift right on x2APIC ID to get a unique topology ID of the next level type"
        if internal: line += " (topo_1f_shift_level3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x0000ffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_num_cpus_level3_override is not None: osign="*"
        line = "EBX[ 0:15] "+" %#10x %s" % (val, osign) +" - Number of logical processors at this level type"
        if internal: line += " (topo_1f_num_cpus_level3, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_level_number3_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Level number. Same value in input ECX[0:7]"
        if internal: line += " (topo_1f_level_number3, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_topo_1f_level_type3_override is not None: osign="*"
        line = "ECX[ 8:15] "+" %#10x %s" % (val, osign) +" - Level Type"
        if internal: line += " (topo_1f_level_type3, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_topo_1f_x2apic_id3_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - x2APIC ID the current logical processor"
        if internal: line += " (topo_1f_x2apic_id3, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x1f

    def get_leaf_0x20():
        # Return empty result if the leaf is outside present ranges
        if ((0x20 > max_regular_leaf and 0x20 < 0x40000000)
           or (0x20 > 0x4fffffff and 0x20 < 0x80000000)
           or (0x20 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x20 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x20, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_subleaf_num_of_leaf_0x20_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Max number of supported subleaf in leaf 0x20"
        if internal: line += " (max_subleaf_num_of_leaf_0x20, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_hgs_plus_hreset_enabling_override is not None: osign="*"
        line = "EBX[ 0: 0] "+" %#10x %s" % (val, osign) +" - Indicates the support of HRESET EAX[0] parameter and IA32_HRESET_ENALBE[0] MSR for enabling HGS+ History reset"
        if internal: line += " (hgs_plus_hreset_enabling, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xfffffffe) >> 1
        osign = " "
        if obj.cpuid_hgs_plus_hreset_reserved_override is not None: osign="*"
        line = "EBX[ 1:31] "+" %#10x %s" % (val, osign) +" - Reserved for HRESET EAX[31:1] and IA32_HRESET_ENABLE[31:1] capabilities"
        if internal: line += " (hgs_plus_hreset_reserved, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x20

    def get_leaf_0x21():
        # Return empty result if the leaf is outside present ranges
        if ((0x21 > max_regular_leaf and 0x21 < 0x40000000)
           or (0x21 > 0x4fffffff and 0x21 < 0x80000000)
           or (0x21 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 1)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 2)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 3)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 4)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 5)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 6)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   7")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 7)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   8")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 8)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf   9")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 9)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  10")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 10)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  11")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 11)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  12")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 12)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  13")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 13)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  14")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 14)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  15")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 15)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  16")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 16)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  17")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 17)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x21 subleaf  18")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x21, 18)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x21

    def get_leaf_0x22():
        # Return empty result if the leaf is outside present ranges
        if ((0x22 > max_regular_leaf and 0x22 < 0x40000000)
           or (0x22 > 0x4fffffff and 0x22 < 0x80000000)
           or (0x22 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 1)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 2)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 3)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 4)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x22 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x22, 5)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x22

    def get_leaf_0x23():
        # Return empty result if the leaf is outside present ranges
        if ((0x23 > max_regular_leaf and 0x23 < 0x40000000)
           or (0x23 > 0x4fffffff and 0x23 < 0x80000000)
           or (0x23 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_valid_subleaf_bitmap_of_0x23_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Valid sub-leaf bitmap"
        if internal: line += " (valid_subleaf_bitmap_of_0x23, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_tma_slots_per_cycle_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Number of slots per cycle. This number can be multiplied by the number of cycles to determine the total number of slots."
        if internal: line += " (tma_slots_per_cycle, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 1)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_gp_counter_bitmap_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - General purpose counter bitmap"
        if internal: line += " (gp_counter_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_fixed_counter_bitmap_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Fixed counter bitmap"
        if internal: line += " (fixed_counter_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 2)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_acr_pmc_reloaded_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bitmap of PMCs can be reloaded by Auto Counter Reload"
        if internal: line += " (acr_pmc_reloaded, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_acr_fixed_reloaded_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bitmap of Fixed counters can be reloaded by Auto Counter Reload"
        if internal: line += " (acr_fixed_reloaded, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_gp_cnt_cause_reload_bitmap_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bitmap of general purpose counters which can cause a reload"
        if internal: line += " (gp_cnt_cause_reload_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_fx_cnt_cause_reload_bitmap_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Bitmap of fixed counters which can cause a reload"
        if internal: line += " (fx_cnt_cause_reload_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 3)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_perfmon_events_bitmap_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - PerfMon events bitmap"
        if internal: line += " (perfmon_events_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   4")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 4)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x23 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x23, 5)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_apebs_gp_counter_bitmap_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Architectural PEBS general purpose counter bitmap"
        if internal: line += " (apebs_gp_counter_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_gp_counter_pdist_pdir_bitmap_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Architectural PEBS general purpose counter bitmap that support PDIST/PDIR"
        if internal: line += " (gp_counter_pdist_pdir_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_apebs_fixed_counter_bitmap_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Architectural PEBS fixed counter bitmap"
        if internal: line += " (apebs_fixed_counter_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_fixed_counter_pdist_pdir_bitmap_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Architectural PEBS fixed counter bitmap that supports PDIST/PDIR"
        if internal: line += " (fixed_counter_pdist_pdir_bitmap, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x23

    def get_leaf_0x24():
        # Return empty result if the leaf is outside present ranges
        if ((0x24 > max_regular_leaf and 0x24 < 0x40000000)
           or (0x24 > 0x4fffffff and 0x24 < 0x80000000)
           or (0x24 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x24 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x24, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_input_subleaf_0x24_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - The maximum input value for supported leaf 0x24 subleaves"
        if internal: line += " (max_input_subleaf_0x24, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_converged_isa_version_override is not None: osign="*"
        line = "EBX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Converged Vector ISA version"
        if internal: line += " (converged_isa_version, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00010000) >> 16
        osign = " "
        if obj.cpuid_support_128_vectors_override is not None: osign="*"
        line = "EBX[16:16] "+" %#10x %s" % (val, osign) +" - 128-bit vector support"
        if internal: line += " (support_128_vectors, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00020000) >> 17
        osign = " "
        if obj.cpuid_support_256_vectors_override is not None: osign="*"
        line = "EBX[17:17] "+" %#10x %s" % (val, osign) +" - 256-bit vector support"
        if internal: line += " (support_256_vectors, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00040000) >> 18
        osign = " "
        if obj.cpuid_support_512_vectors_override is not None: osign="*"
        line = "EBX[18:18] "+" %#10x %s" % (val, osign) +" - 512-bit vector support"
        if internal: line += " (support_512_vectors, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x24 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x24, 1)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x24

    def get_leaf_0x27():
        # Return empty result if the leaf is outside present ranges
        if ((0x27 > max_regular_leaf and 0x27 < 0x40000000)
           or (0x27 > 0x4fffffff and 0x27 < 0x80000000)
           or (0x27 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x27 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x27, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x27 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x27, 1)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x27

    def get_leaf_0x28():
        # Return empty result if the leaf is outside present ranges
        if ((0x28 > max_regular_leaf and 0x28 < 0x40000000)
           or (0x28 > 0x4fffffff and 0x28 < 0x80000000)
           or (0x28 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   1")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 1)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   2")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 2)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   3")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 3)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   5")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 5)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        at_least_one_field_shown = False
        res.append("-- Leaf 0x28 subleaf   6")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x28, 6)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x28

    def get_leaf_0x29():
        # Return empty result if the leaf is outside present ranges
        if ((0x29 > max_regular_leaf and 0x29 < 0x40000000)
           or (0x29 > 0x4fffffff and 0x29 < 0x80000000)
           or (0x29 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x29 subleaf   0")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x29, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x29

    def get_leaf_0x40000123():
        # Return empty result if the leaf is outside present ranges
        if ((0x40000123 > max_regular_leaf and 0x40000123 < 0x40000000)
           or (0x40000123 > 0x4fffffff and 0x40000123 < 0x80000000)
           or (0x40000123 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x40000123")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x40000123, 0)
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x40000123

    def get_leaf_0x80000000():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000000 > max_regular_leaf and 0x80000000 < 0x40000000)
           or (0x80000000 > 0x4fffffff and 0x80000000 < 0x80000000)
           or (0x80000000 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000000")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000000, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_max_ext_leaf_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Maximum Input Value for Extended Function CPUID Information"
        if internal: line += " (max_ext_leaf, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000000

    def get_leaf_0x80000001():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000001 > max_regular_leaf and 0x80000001 < 0x40000000)
           or (0x80000001 > 0x4fffffff and 0x80000001 < 0x80000000)
           or (0x80000001 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000001")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000001, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_leaf_0x80000001_eax_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - CPUID 0x80000001 EAX"
        if internal: line += " (leaf_0x80000001_eax, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000001) >> 0
        osign = " "
        if obj.cpuid_has_lahf64_override is not None: osign="*"
        line = "ECX[ 0: 0] "+" %#10x %s" % (val, osign) +" - LAHF/SAHF available in 64 bit mode"
        if internal: line += " (has_lahf64, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000020) >> 5
        osign = " "
        if obj.cpuid_lzcnt_override is not None: osign="*"
        line = "ECX[ 5: 5] "+" %#10x %s" % (val, osign) +" - LZCNT available"
        if internal: line += " (lzcnt, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_prefetchw_override is not None: osign="*"
        line = "ECX[ 8: 8] "+" %#10x %s" % (val, osign) +" - PREFETCHW available"
        if internal: line += " (prefetchw, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00000800) >> 11
        osign = " "
        if obj.cpuid_syscall_override is not None: osign="*"
        line = "EDX[11:11] "+" %#10x %s" % (val, osign) +" - SYSCALL/SYSRET available in 64-bit mode"
        if internal: line += " (syscall, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x00100000) >> 20
        osign = " "
        if obj.cpuid_nx_enabled_override is not None: osign="*"
        line = "EDX[20:20] "+" %#10x %s" % (val, osign) +" - Execute Disable bit available"
        if internal: line += " (nx_enabled, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x04000000) >> 26
        osign = " "
        if obj.cpuid_has_page1gb_override is not None: osign="*"
        line = "EDX[26:26] "+" %#10x %s" % (val, osign) +" - 1 GB Pages available"
        if internal: line += " (has_page1gb, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x08000000) >> 27
        osign = " "
        if obj.cpuid_rdtscp_tsc_aux_override is not None: osign="*"
        line = "EDX[27:27] "+" %#10x %s" % (val, osign) +" - RDTSCP and TSC_AUX MSR are available"
        if internal: line += " (rdtscp_tsc_aux, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0x20000000) >> 29
        osign = " "
        if obj.cpuid_has_longmode_override is not None: osign="*"
        line = "EDX[29:29] "+" %#10x %s" % (val, osign) +" - Intel 64 Architecture available"
        if internal: line += " (has_longmode, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000001

    def get_leaf_0x80000002():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000002 > max_regular_leaf and 0x80000002 < 0x40000000)
           or (0x80000002 > 0x4fffffff and 0x80000002 < 0x80000000)
           or (0x80000002 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000002")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000002, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_01_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_01, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_02_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_02, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_03_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_03, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_04_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_04, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000002

    def get_leaf_0x80000003():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000003 > max_regular_leaf and 0x80000003 < 0x40000000)
           or (0x80000003 > 0x4fffffff and 0x80000003 < 0x80000000)
           or (0x80000003 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000003")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000003, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_05_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_05, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_06_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_06, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_07_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_07, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_08_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_08, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000003

    def get_leaf_0x80000004():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000004 > max_regular_leaf and 0x80000004 < 0x40000000)
           or (0x80000004 > 0x4fffffff and 0x80000004 < 0x80000000)
           or (0x80000004 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000004")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000004, 0)
        val = (query.a & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_09_override is not None: osign="*"
        line = "EAX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_09, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_10_override is not None: osign="*"
        line = "EBX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_10, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_11_override is not None: osign="*"
        line = "ECX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_11, func)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.d & 0xffffffff) >> 0
        osign = " "
        if obj.cpuid_brand_string_12_override is not None: osign="*"
        line = "EDX[ 0:31] "+" %#10x %s" % (val, osign) +" - Part of Processor Brand string"
        if internal: line += " (brand_string_12, func)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000004

    def get_leaf_0x80000006():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000006 > max_regular_leaf and 0x80000006 < 0x40000000)
           or (0x80000006 > 0x4fffffff and 0x80000006 < 0x80000000)
           or (0x80000006 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000006")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000006, 0)
        val = (query.c & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_cache_line_size_override is not None: osign="*"
        line = "ECX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Cache Line Size in bytes"
        if internal: line += " (cache_line_size, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0x0000f000) >> 12
        osign = " "
        if obj.cpuid_l2_assoc_type_override is not None: osign="*"
        line = "ECX[12:15] "+" %#10x %s" % (val, osign) +" - L2 Associativity field"
        if internal: line += " (l2_assoc_type, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.c & 0xffff0000) >> 16
        osign = " "
        if obj.cpuid_cache_size_1k_override is not None: osign="*"
        line = "ECX[16:31] "+" %#10x %s" % (val, osign) +" - Cache Size in 1K units"
        if internal: line += " (cache_size_1k, field)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000006

    def get_leaf_0x80000007():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000007 > max_regular_leaf and 0x80000007 < 0x40000000)
           or (0x80000007 > 0x4fffffff and 0x80000007 < 0x80000000)
           or (0x80000007 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000007")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000007, 0)
        val = (query.d & 0x00000100) >> 8
        osign = " "
        if obj.cpuid_invariant_tsc_override is not None: osign="*"
        line = "EDX[ 8: 8] "+" %#10x %s" % (val, osign) +" - Invariant TSC available"
        if internal: line += " (invariant_tsc, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000007

    def get_leaf_0x80000008():
        # Return empty result if the leaf is outside present ranges
        if ((0x80000008 > max_regular_leaf and 0x80000008 < 0x40000000)
           or (0x80000008 > 0x4fffffff and 0x80000008 < 0x80000000)
           or (0x80000008 > max_extend_leaf)):
            return list()
        res = list()
        at_least_one_field_shown = False
        res.append("-- Leaf 0x80000008")
        query = obj.iface.x86_cpuid_query.cpuid_query(0x80000008, 0)
        val = (query.a & 0x000000ff) >> 0
        osign = " "
        if obj.cpuid_physical_bits_override is not None: osign="*"
        line = "EAX[ 0: 7] "+" %#10x %s" % (val, osign) +" - Physical Address width"
        if internal: line += " (physical_bits, field)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.a & 0x0000ff00) >> 8
        osign = " "
        if obj.cpuid_linaddr_width_override is not None: osign="*"
        line = "EAX[ 8:15] "+" %#10x %s" % (val, osign) +" - Linear Address width"
        if internal: line += " (linaddr_width, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        val = (query.b & 0x00000200) >> 9
        osign = " "
        if obj.cpuid_wbnoinvd_override is not None: osign="*"
        line = "EBX[ 9: 9] "+" %#10x %s" % (val, osign) +" - WBNOINVD instruction"
        if internal: line += " (wbnoinvd, fuse)"
        res.append(line)
        at_least_one_field_shown = True
        if not at_least_one_field_shown: # the leaf was actually empty
            res.pop() # delete already printed header line
        return res # end of get_leaf_0x80000008

    leaf_functions = {
              0x0: get_leaf_0x0,
              0x1: get_leaf_0x1,
              0x2: get_leaf_0x2,
              0x4: get_leaf_0x4,
              0x5: get_leaf_0x5,
              0x6: get_leaf_0x6,
              0x7: get_leaf_0x7,
              0x9: get_leaf_0x9,
              0xa: get_leaf_0xa,
              0xb: get_leaf_0xb,
              0xd: get_leaf_0xd,
              0xf: get_leaf_0xf,
             0x10: get_leaf_0x10,
             0x12: get_leaf_0x12,
             0x14: get_leaf_0x14,
             0x15: get_leaf_0x15,
             0x16: get_leaf_0x16,
             0x17: get_leaf_0x17,
             0x18: get_leaf_0x18,
             0x19: get_leaf_0x19,
             0x1a: get_leaf_0x1a,
             0x1b: get_leaf_0x1b,
             0x1c: get_leaf_0x1c,
             0x1d: get_leaf_0x1d,
             0x1e: get_leaf_0x1e,
             0x1f: get_leaf_0x1f,
             0x20: get_leaf_0x20,
             0x21: get_leaf_0x21,
             0x22: get_leaf_0x22,
             0x23: get_leaf_0x23,
             0x24: get_leaf_0x24,
             0x27: get_leaf_0x27,
             0x28: get_leaf_0x28,
             0x29: get_leaf_0x29,
       0x40000123: get_leaf_0x40000123,
       0x80000000: get_leaf_0x80000000,
       0x80000001: get_leaf_0x80000001,
       0x80000002: get_leaf_0x80000002,
       0x80000003: get_leaf_0x80000003,
       0x80000004: get_leaf_0x80000004,
       0x80000006: get_leaf_0x80000006,
       0x80000007: get_leaf_0x80000007,
       0x80000008: get_leaf_0x80000008,
    }

    res = list()

    if req_leaf < 0: # print all leaves
        for leaf in sorted(leaf_functions.keys()):
            fn = leaf_functions[leaf]
            res.extend(fn())
    elif ((req_leaf <= max_regular_leaf)
            or (req_leaf >= 0x40000000 and req_leaf <= 0x4fffffff)
            or (req_leaf >= 0x80000000 and req_leaf <= max_extend_leaf)):
        fn = leaf_functions.get(req_leaf, missing_leaf)
        res.extend(fn())
    else:
        res.extend(missing_leaf())
    return res
    # End of print_verbose_cpuid()
