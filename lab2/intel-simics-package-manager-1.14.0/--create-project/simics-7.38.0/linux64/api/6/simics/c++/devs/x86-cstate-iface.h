// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_X86_CSTATE_IFACE_H
#define SIMICS_CPP_DEVS_X86_CSTATE_IFACE_H

#include "simics/devs/x86-cstate-iface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class X86CstateInterface {
  public:
    using ctype = x86_cstate_interface_t;

    // Function override and implemented by user
    virtual x86_cstate_t get_cstate() = 0;
    virtual void set_cstate(uint32 state, uint32 sub_state) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static x86_cstate_t get_cstate(conf_object_t *cpu_obj) {
            return detail::get_interface<X86CstateInterface>(cpu_obj)->get_cstate();
        }
        static void set_cstate(conf_object_t *cpu_obj, uint32 state, uint32 sub_state) {
            detail::get_interface<X86CstateInterface>(cpu_obj)->set_cstate(state, sub_state);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const X86CstateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        x86_cstate_t get_cstate() const {
            return iface_->get_cstate(obj_);
        }
        void set_cstate(uint32 state, uint32 sub_state) const {
            iface_->set_cstate(obj_, state, sub_state);
        }

        const X86CstateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const X86CstateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return X86_CSTATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr X86CstateInterface::ctype funcs {
                FromC::get_cstate,
                FromC::set_cstate,
            };
            return &funcs;
        }
    };
};

class X86PkgCstateInterface {
  public:
    using ctype = x86_pkg_cstate_interface_t;

    // Function override and implemented by user
    virtual x86_cstate_t get_pkg_cstate() = 0;
    virtual void set_pkg_cstate(uint32 state, uint32 sub_state) = 0;
    virtual void pkg_cstate_update(bool notify) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static x86_cstate_t get_pkg_cstate(conf_object_t *cpu_obj) {
            return detail::get_interface<X86PkgCstateInterface>(cpu_obj)->get_pkg_cstate();
        }
        static void set_pkg_cstate(conf_object_t *cpu_obj, uint32 state, uint32 sub_state) {
            detail::get_interface<X86PkgCstateInterface>(cpu_obj)->set_pkg_cstate(state, sub_state);
        }
        static void pkg_cstate_update(conf_object_t *cpu_obj, bool notify) {
            detail::get_interface<X86PkgCstateInterface>(cpu_obj)->pkg_cstate_update(notify);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const X86PkgCstateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        x86_cstate_t get_pkg_cstate() const {
            return iface_->get_pkg_cstate(obj_);
        }
        void set_pkg_cstate(uint32 state, uint32 sub_state) const {
            iface_->set_pkg_cstate(obj_, state, sub_state);
        }
        void pkg_cstate_update(bool notify) const {
            iface_->pkg_cstate_update(obj_, notify);
        }

        const X86PkgCstateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const X86PkgCstateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return X86_PKG_CSTATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr X86PkgCstateInterface::ctype funcs {
                FromC::get_pkg_cstate,
                FromC::set_pkg_cstate,
                FromC::pkg_cstate_update,
            };
            return &funcs;
        }
    };
};

class X86CstateNotificationInterface {
  public:
    using ctype = x86_cstate_notification_interface_t;

    // Function override and implemented by user
    virtual void notification(conf_object_t *cpu, uint32 state, uint32 sub_state) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void notification(conf_object_t *listener, conf_object_t *cpu, uint32 state, uint32 sub_state) {
            detail::get_interface<X86CstateNotificationInterface>(listener)->notification(cpu, state, sub_state);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const X86CstateNotificationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void notification(conf_object_t *cpu, uint32 state, uint32 sub_state) const {
            iface_->notification(obj_, cpu, state, sub_state);
        }

        const X86CstateNotificationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const X86CstateNotificationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return X86_CSTATE_NOTIFICATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr X86CstateNotificationInterface::ctype funcs {
                FromC::notification,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
