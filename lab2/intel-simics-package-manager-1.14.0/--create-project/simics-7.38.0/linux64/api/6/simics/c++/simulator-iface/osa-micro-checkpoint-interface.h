// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_MICRO_CHECKPOINT_INTERFACE_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_MICRO_CHECKPOINT_INTERFACE_H

#include "simics/simulator-iface/osa-micro-checkpoint-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaMicroCheckpointInterface {
  public:
    using ctype = osa_micro_checkpoint_interface_t;

    // Function override and implemented by user
    virtual void started() = 0;
    virtual void finished() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void started(conf_object_t *obj) {
            detail::get_interface<OsaMicroCheckpointInterface>(obj)->started();
        }
        static void finished(conf_object_t *obj) {
            detail::get_interface<OsaMicroCheckpointInterface>(obj)->finished();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMicroCheckpointInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void started() const {
            iface_->started(obj_);
        }
        void finished() const {
            iface_->finished(obj_);
        }

        const OsaMicroCheckpointInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMicroCheckpointInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MICRO_CHECKPOINT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMicroCheckpointInterface::ctype funcs {
                FromC::started,
                FromC::finished,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
