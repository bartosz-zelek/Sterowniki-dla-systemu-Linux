// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_IMAGE_H
#define SIMICS_CPP_MODEL_IFACE_IMAGE_H

#include "simics/model-iface/image.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ImageInterface {
  public:
    using ctype = image_interface_t;

    // Function override and implemented by user
    virtual void read(void *to_buf, uint64 start, size_t length) = 0;
    virtual void write(const void *from_buf, uint64 start, size_t length) = 0;
    virtual int for_all_spages(int (*f)(image_spage_t *p, uint64 ofs, void *arg), void *arg) = 0;
    virtual void set_persistent() = 0;
    virtual void save_to_file(const char *file, uint64 start, uint64 length, save_flags_t flags) = 0;
    virtual void save_diff(const char *file, save_flags_t flags) = 0;
    virtual void clear_range(uint64 start, uint64 length) = 0;
    virtual void fill(uint64 start, uint64 length, uint8 value) = 0;
    virtual uint64 size() = 0;
    virtual void set(uint64 ofs, bytes_t b) = 0;
    virtual bytes_t get(uint64 ofs, size_t size) = 0;
    virtual void flush_writable() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void read(conf_object_t *img, void *to_buf, uint64 start, size_t length) {
            detail::get_interface<ImageInterface>(img)->read(to_buf, start, length);
        }
        static void write(conf_object_t *img, const void *from_buf, uint64 start, size_t length) {
            detail::get_interface<ImageInterface>(img)->write(from_buf, start, length);
        }
        static int for_all_spages(conf_object_t *img, int (*f)(image_spage_t *p, uint64 ofs, void *arg), void *arg) {
            return detail::get_interface<ImageInterface>(img)->for_all_spages(f, arg);
        }
        static void set_persistent(conf_object_t *obj) {
            detail::get_interface<ImageInterface>(obj)->set_persistent();
        }
        static void save_to_file(conf_object_t *obj, const char *file, uint64 start, uint64 length, save_flags_t flags) {
            detail::get_interface<ImageInterface>(obj)->save_to_file(file, start, length, flags);
        }
        static void save_diff(conf_object_t *obj, const char *file, save_flags_t flags) {
            detail::get_interface<ImageInterface>(obj)->save_diff(file, flags);
        }
        static void clear_range(conf_object_t *obj, uint64 start, uint64 length) {
            detail::get_interface<ImageInterface>(obj)->clear_range(start, length);
        }
        static void fill(conf_object_t *obj, uint64 start, uint64 length, uint8 value) {
            detail::get_interface<ImageInterface>(obj)->fill(start, length, value);
        }
        static uint64 size(conf_object_t *obj) {
            return detail::get_interface<ImageInterface>(obj)->size();
        }
        static void set(conf_object_t *obj, uint64 ofs, bytes_t b) {
            detail::get_interface<ImageInterface>(obj)->set(ofs, b);
        }
        static bytes_t get(conf_object_t *obj, uint64 ofs, size_t size) {
            return detail::get_interface<ImageInterface>(obj)->get(ofs, size);
        }
        static void flush_writable(conf_object_t *obj) {
            detail::get_interface<ImageInterface>(obj)->flush_writable();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ImageInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void read(void *to_buf, uint64 start, size_t length) const {
            iface_->read(obj_, to_buf, start, length);
        }
        void write(const void *from_buf, uint64 start, size_t length) const {
            iface_->write(obj_, from_buf, start, length);
        }
        int for_all_spages(int (*f)(image_spage_t *p, uint64 ofs, void *arg), void *arg) const {
            return iface_->for_all_spages(obj_, f, arg);
        }
        void set_persistent() const {
            iface_->set_persistent(obj_);
        }
        void save_to_file(const char *file, uint64 start, uint64 length, save_flags_t flags) const {
            iface_->save_to_file(obj_, file, start, length, flags);
        }
        void save_diff(const char *file, save_flags_t flags) const {
            iface_->save_diff(obj_, file, flags);
        }
        void clear_range(uint64 start, uint64 length) const {
            iface_->clear_range(obj_, start, length);
        }
        void fill(uint64 start, uint64 length, uint8 value) const {
            iface_->fill(obj_, start, length, value);
        }
        uint64 size() const {
            return iface_->size(obj_);
        }
        void set(uint64 ofs, bytes_t b) const {
            iface_->set(obj_, ofs, b);
        }
        bytes_t get(uint64 ofs, size_t size) const {
            return iface_->get(obj_, ofs, size);
        }
        void flush_writable() const {
            iface_->flush_writable(obj_);
        }

        const ImageInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ImageInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IMAGE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ImageInterface::ctype funcs {
                FromC::read,
                FromC::write,
                FromC::for_all_spages,
                FromC::set_persistent,
                FromC::save_to_file,
                FromC::save_diff,
                FromC::clear_range,
                FromC::fill,
                FromC::size,
                FromC::set,
                FromC::get,
                FromC::flush_writable,
            };
            return &funcs;
        }
    };
};

class LinearImageInterface {
  public:
    using ctype = linear_image_interface_t;

    // Function override and implemented by user
    virtual uint8 * get_base(size_t *retsize) = 0;
    virtual void set_base(uint8 *base) = 0;
    virtual void prepare_range(read_or_write_t type, size_t offs, size_t size) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint8 * get_base(conf_object_t *obj, size_t *retsize) {
            return detail::get_interface<LinearImageInterface>(obj)->get_base(retsize);
        }
        static void set_base(conf_object_t *obj, uint8 *base) {
            detail::get_interface<LinearImageInterface>(obj)->set_base(base);
        }
        static void prepare_range(conf_object_t *obj, read_or_write_t type, size_t offs, size_t size) {
            detail::get_interface<LinearImageInterface>(obj)->prepare_range(type, offs, size);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const LinearImageInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint8 * get_base(size_t *retsize) const {
            return iface_->get_base(obj_, retsize);
        }
        void set_base(uint8 *base) const {
            iface_->set_base(obj_, base);
        }
        void prepare_range(read_or_write_t type, size_t offs, size_t size) const {
            iface_->prepare_range(obj_, type, offs, size);
        }

        const LinearImageInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const LinearImageInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return LINEAR_IMAGE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr LinearImageInterface::ctype funcs {
                FromC::get_base,
                FromC::set_base,
                FromC::prepare_range,
            };
            return &funcs;
        }
    };
};

class ImageSnoopInterface {
  public:
    using ctype = image_snoop_interface_t;

    // Function override and implemented by user
    virtual void page_modified(conf_object_t *img, uint64 offset, uint8 *page_data, image_spage_t *spage) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void page_modified(conf_object_t *obj, conf_object_t *img, uint64 offset, uint8 *page_data, image_spage_t *spage) {
            detail::get_interface<ImageSnoopInterface>(obj)->page_modified(img, offset, page_data, spage);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ImageSnoopInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void page_modified(conf_object_t *img, uint64 offset, uint8 *page_data, image_spage_t *spage) const {
            iface_->page_modified(obj_, img, offset, page_data, spage);
        }

        const ImageSnoopInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ImageSnoopInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return IMAGE_SNOOP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ImageSnoopInterface::ctype funcs {
                FromC::page_modified,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
