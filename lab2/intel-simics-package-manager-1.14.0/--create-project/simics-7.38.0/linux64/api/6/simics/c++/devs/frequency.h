// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_FREQUENCY_H
#define SIMICS_CPP_DEVS_FREQUENCY_H

#include "simics/devs/frequency.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class FrequencyInterface {
  public:
    using ctype = frequency_interface_t;

    // Function override and implemented by user
    virtual double get() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static double get(conf_object_t *obj) {
            return detail::get_interface<FrequencyInterface>(obj)->get();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FrequencyInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        double get() const {
            return iface_->get(obj_);
        }

        const FrequencyInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FrequencyInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FREQUENCY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FrequencyInterface::ctype funcs {
                FromC::get,
            };
            return &funcs;
        }
    };
};

class FrequencyListenerInterface {
  public:
    using ctype = frequency_listener_interface_t;

    // Function override and implemented by user
    virtual void set(uint64 numerator, uint64 denominator) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set(conf_object_t *obj, uint64 numerator, uint64 denominator) {
            detail::get_interface<FrequencyListenerInterface>(obj)->set(numerator, denominator);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const FrequencyListenerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set(uint64 numerator, uint64 denominator) const {
            iface_->set(obj_, numerator, denominator);
        }

        const FrequencyListenerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const FrequencyListenerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return FREQUENCY_LISTENER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr FrequencyListenerInterface::ctype funcs {
                FromC::set,
            };
            return &funcs;
        }
    };
};

class ScaleFactorListenerInterface {
  public:
    using ctype = scale_factor_listener_interface_t;

    // Function override and implemented by user
    virtual void set(uint64 numerator, uint64 denominator) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set(conf_object_t *obj, uint64 numerator, uint64 denominator) {
            detail::get_interface<ScaleFactorListenerInterface>(obj)->set(numerator, denominator);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ScaleFactorListenerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set(uint64 numerator, uint64 denominator) const {
            iface_->set(obj_, numerator, denominator);
        }

        const ScaleFactorListenerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ScaleFactorListenerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SCALE_FACTOR_LISTENER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ScaleFactorListenerInterface::ctype funcs {
                FromC::set,
            };
            return &funcs;
        }
    };
};

class SimpleDispatcherInterface {
  public:
    using ctype = simple_dispatcher_interface_t;

    // Function override and implemented by user
    virtual void subscribe(conf_object_t *listener, const char *listener_port) = 0;
    virtual void unsubscribe(conf_object_t *listener, const char *listener_port) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void subscribe(conf_object_t *bus, conf_object_t *listener, const char *listener_port) {
            detail::get_interface<SimpleDispatcherInterface>(bus)->subscribe(listener, listener_port);
        }
        static void unsubscribe(conf_object_t *bus, conf_object_t *listener, const char *listener_port) {
            detail::get_interface<SimpleDispatcherInterface>(bus)->unsubscribe(listener, listener_port);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SimpleDispatcherInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void subscribe(conf_object_t *listener, const char *listener_port) const {
            iface_->subscribe(obj_, listener, listener_port);
        }
        void unsubscribe(conf_object_t *listener, const char *listener_port) const {
            iface_->unsubscribe(obj_, listener, listener_port);
        }

        const SimpleDispatcherInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SimpleDispatcherInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SIMPLE_DISPATCHER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SimpleDispatcherInterface::ctype funcs {
                FromC::subscribe,
                FromC::unsubscribe,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
