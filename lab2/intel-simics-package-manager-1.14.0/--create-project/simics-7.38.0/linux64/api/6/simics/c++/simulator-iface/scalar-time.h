// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_SCALAR_TIME_H
#define SIMICS_CPP_SIMULATOR_IFACE_SCALAR_TIME_H

#include "simics/simulator-iface/scalar-time.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ScalarTimeInterface {
  public:
    using ctype = scalar_time_interface_t;

    // Function override and implemented by user
    virtual int add_consumer() = 0;
    virtual void remove_consumer(int consumer) = 0;
    virtual attr_value_t poll(int consumer) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int add_consumer(conf_object_t *obj) {
            return detail::get_interface<ScalarTimeInterface>(obj)->add_consumer();
        }
        static void remove_consumer(conf_object_t *obj, int consumer) {
            detail::get_interface<ScalarTimeInterface>(obj)->remove_consumer(consumer);
        }
        static attr_value_t poll(conf_object_t *obj, int consumer) {
            return detail::get_interface<ScalarTimeInterface>(obj)->poll(consumer);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ScalarTimeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int add_consumer() const {
            return iface_->add_consumer(obj_);
        }
        void remove_consumer(int consumer) const {
            iface_->remove_consumer(obj_, consumer);
        }
        attr_value_t poll(int consumer) const {
            return iface_->poll(obj_, consumer);
        }

        const ScalarTimeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ScalarTimeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SCALAR_TIME_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ScalarTimeInterface::ctype funcs {
                FromC::add_consumer,
                FromC::remove_consumer,
                FromC::poll,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
