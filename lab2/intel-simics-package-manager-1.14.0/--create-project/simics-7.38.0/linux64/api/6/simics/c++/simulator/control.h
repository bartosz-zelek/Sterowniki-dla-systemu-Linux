// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_CONTROL_H
#define SIMICS_CPP_SIMULATOR_CONTROL_H

#include "simics/simulator/control.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class TcfChannelInterface {
  public:
    using ctype = tcf_channel_interface_t;

    // Function override and implemented by user
    virtual attr_value_t start_channel(const char *url) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t start_channel(conf_object_t *obj, const char *url) {
            return detail::get_interface<TcfChannelInterface>(obj)->start_channel(url);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const TcfChannelInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t start_channel(const char *url) const {
            return iface_->start_channel(obj_, url);
        }

        const TcfChannelInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const TcfChannelInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return TCF_CHANNEL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr TcfChannelInterface::ctype funcs {
                FromC::start_channel,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
