// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_KBD_INTERFACE_H
#define SIMICS_CPP_MODEL_IFACE_KBD_INTERFACE_H

#include "simics/model-iface/kbd-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class KeyboardInterface {
  public:
    using ctype = keyboard_interface_t;

    // Function override and implemented by user
    virtual int keyboard_event(int key_up, uint8 key) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int keyboard_event(conf_object_t *obj, int key_up, uint8 key) {
            return detail::get_interface<KeyboardInterface>(obj)->keyboard_event(key_up, key);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const KeyboardInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int keyboard_event(int key_up, uint8 key) const {
            return iface_->keyboard_event(obj_, key_up, key);
        }

        const KeyboardInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const KeyboardInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return KEYBOARD_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr KeyboardInterface::ctype funcs {
                FromC::keyboard_event,
            };
            return &funcs;
        }
    };
};

class KeyboardConsoleInterface {
  public:
    using ctype = keyboard_console_interface_t;

    // Function override and implemented by user
    virtual void keyboard_ready() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void keyboard_ready(conf_object_t *obj) {
            detail::get_interface<KeyboardConsoleInterface>(obj)->keyboard_ready();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const KeyboardConsoleInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void keyboard_ready() const {
            iface_->keyboard_ready(obj_);
        }

        const KeyboardConsoleInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const KeyboardConsoleInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return KEYBOARD_CONSOLE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr KeyboardConsoleInterface::ctype funcs {
                FromC::keyboard_ready,
            };
            return &funcs;
        }
    };
};

class MouseInterface {
  public:
    using ctype = mouse_interface_t;

    // Function override and implemented by user
    virtual void mouse_event(int xmicro, int ymicro, int z, int buttons) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void mouse_event(conf_object_t *obj, int xmicro, int ymicro, int z, int buttons) {
            detail::get_interface<MouseInterface>(obj)->mouse_event(xmicro, ymicro, z, buttons);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const MouseInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void mouse_event(int xmicro, int ymicro, int z, int buttons) const {
            iface_->mouse_event(obj_, xmicro, ymicro, z, buttons);
        }

        const MouseInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const MouseInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return MOUSE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr MouseInterface::ctype funcs {
                FromC::mouse_event,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
