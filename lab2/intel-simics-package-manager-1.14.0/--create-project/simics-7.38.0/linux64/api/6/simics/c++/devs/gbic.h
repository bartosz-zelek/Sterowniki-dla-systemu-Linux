// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_GBIC_H
#define SIMICS_CPP_DEVS_GBIC_H

#include "simics/devs/gbic.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class GbicTransceiverInterface {
  public:
    using ctype = gbic_transceiver_interface_t;

    // Function override and implemented by user
    virtual mod_def_t read_mod_def() = 0;
    virtual void write_mod_def(mod_def_t mod_def) = 0;
    virtual void loopback(int loopback) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static mod_def_t read_mod_def(conf_object_t *obj) {
            return detail::get_interface<GbicTransceiverInterface>(obj)->read_mod_def();
        }
        static void write_mod_def(conf_object_t *obj, mod_def_t mod_def) {
            detail::get_interface<GbicTransceiverInterface>(obj)->write_mod_def(mod_def);
        }
        static void loopback(conf_object_t *obj, int loopback) {
            detail::get_interface<GbicTransceiverInterface>(obj)->loopback(loopback);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const GbicTransceiverInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        mod_def_t read_mod_def() const {
            return iface_->read_mod_def(obj_);
        }
        void write_mod_def(mod_def_t mod_def) const {
            iface_->write_mod_def(obj_, mod_def);
        }
        void loopback(int loopback) const {
            iface_->loopback(obj_, loopback);
        }

        const GbicTransceiverInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const GbicTransceiverInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return GBIC_TRANSCEIVER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr GbicTransceiverInterface::ctype funcs {
                FromC::read_mod_def,
                FromC::write_mod_def,
                FromC::loopback,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
