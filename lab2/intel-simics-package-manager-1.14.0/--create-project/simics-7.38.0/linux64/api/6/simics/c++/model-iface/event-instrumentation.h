// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_EVENT_INSTRUMENTATION_H
#define SIMICS_CPP_MODEL_IFACE_EVENT_INSTRUMENTATION_H

#include "simics/model-iface/event-instrumentation.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class StepEventInstrumentationInterface {
  public:
    using ctype = step_event_instrumentation_interface_t;

    // Function override and implemented by user
    virtual step_handle_t * register_step_event_cb(conf_object_t *connection, step_event_cb_t cb, lang_void *data) = 0;
    virtual void remove_step_event_cb(step_handle_t *handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static step_handle_t * register_step_event_cb(conf_object_t *cpu, conf_object_t *connection, step_event_cb_t cb, lang_void *data) {
            return detail::get_interface<StepEventInstrumentationInterface>(cpu)->register_step_event_cb(connection, cb, data);
        }
        static void remove_step_event_cb(conf_object_t *cpu, step_handle_t *handle) {
            detail::get_interface<StepEventInstrumentationInterface>(cpu)->remove_step_event_cb(handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const StepEventInstrumentationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        step_handle_t * register_step_event_cb(conf_object_t *connection, step_event_cb_t cb, lang_void *data) const {
            return iface_->register_step_event_cb(obj_, connection, cb, data);
        }
        void remove_step_event_cb(step_handle_t *handle) const {
            iface_->remove_step_event_cb(obj_, handle);
        }

        const StepEventInstrumentationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const StepEventInstrumentationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return STEP_EVENT_INSTRUMENTATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr StepEventInstrumentationInterface::ctype funcs {
                FromC::register_step_event_cb,
                FromC::remove_step_event_cb,
            };
            return &funcs;
        }
    };
};

class CycleEventInstrumentationInterface {
  public:
    using ctype = cycle_event_instrumentation_interface_t;

    // Function override and implemented by user
    virtual cycle_handle_t * register_cycle_event_cb(conf_object_t *connection, cycle_event_cb_t cb, lang_void *data) = 0;
    virtual void remove_cycle_event_cb(cycle_handle_t *handle) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cycle_handle_t * register_cycle_event_cb(conf_object_t *cpu, conf_object_t *connection, cycle_event_cb_t cb, lang_void *data) {
            return detail::get_interface<CycleEventInstrumentationInterface>(cpu)->register_cycle_event_cb(connection, cb, data);
        }
        static void remove_cycle_event_cb(conf_object_t *cpu, cycle_handle_t *handle) {
            detail::get_interface<CycleEventInstrumentationInterface>(cpu)->remove_cycle_event_cb(handle);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CycleEventInstrumentationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cycle_handle_t * register_cycle_event_cb(conf_object_t *connection, cycle_event_cb_t cb, lang_void *data) const {
            return iface_->register_cycle_event_cb(obj_, connection, cb, data);
        }
        void remove_cycle_event_cb(cycle_handle_t *handle) const {
            iface_->remove_cycle_event_cb(obj_, handle);
        }

        const CycleEventInstrumentationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CycleEventInstrumentationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CYCLE_EVENT_INSTRUMENTATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CycleEventInstrumentationInterface::ctype funcs {
                FromC::register_cycle_event_cb,
                FromC::remove_cycle_event_cb,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
