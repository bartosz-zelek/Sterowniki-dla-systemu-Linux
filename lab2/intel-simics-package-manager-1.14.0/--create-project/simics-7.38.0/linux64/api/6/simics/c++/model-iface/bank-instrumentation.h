// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_BANK_INSTRUMENTATION_H
#define SIMICS_CPP_MODEL_IFACE_BANK_INSTRUMENTATION_H

#include "simics/model-iface/bank-instrumentation.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class BankInstrumentationSubscribeInterface {
  public:
    using ctype = bank_instrumentation_subscribe_interface_t;

    // Function override and implemented by user
    virtual bank_callback_handle_t register_before_read(conf_object_t *connection, uint64 offset, uint64 size, before_read_callback_t before_read, lang_void *user_data) = 0;
    virtual bank_callback_handle_t register_after_read(conf_object_t *connection, uint64 offset, uint64 size, after_read_callback_t after_read, lang_void *user_data) = 0;
    virtual bank_callback_handle_t register_before_write(conf_object_t *connection, uint64 offset, uint64 size, before_write_callback_t before_write, lang_void *user_data) = 0;
    virtual bank_callback_handle_t register_after_write(conf_object_t *connection, uint64 offset, uint64 size, after_write_callback_t after_write, lang_void *user_data) = 0;
    virtual void remove_callback(bank_callback_handle_t callback) = 0;
    virtual void remove_connection_callbacks(conf_object_t *connection) = 0;
    virtual void enable_connection_callbacks(conf_object_t *connection) = 0;
    virtual void disable_connection_callbacks(conf_object_t *connection) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bank_callback_handle_t register_before_read(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, before_read_callback_t before_read, lang_void *user_data) {
            return detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->register_before_read(connection, offset, size, before_read, user_data);
        }
        static bank_callback_handle_t register_after_read(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, after_read_callback_t after_read, lang_void *user_data) {
            return detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->register_after_read(connection, offset, size, after_read, user_data);
        }
        static bank_callback_handle_t register_before_write(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, before_write_callback_t before_write, lang_void *user_data) {
            return detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->register_before_write(connection, offset, size, before_write, user_data);
        }
        static bank_callback_handle_t register_after_write(conf_object_t *bank, conf_object_t *connection, uint64 offset, uint64 size, after_write_callback_t after_write, lang_void *user_data) {
            return detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->register_after_write(connection, offset, size, after_write, user_data);
        }
        static void remove_callback(conf_object_t *bank, bank_callback_handle_t callback) {
            detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->remove_callback(callback);
        }
        static void remove_connection_callbacks(conf_object_t *bank, conf_object_t *connection) {
            detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->remove_connection_callbacks(connection);
        }
        static void enable_connection_callbacks(conf_object_t *bank, conf_object_t *connection) {
            detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->enable_connection_callbacks(connection);
        }
        static void disable_connection_callbacks(conf_object_t *bank, conf_object_t *connection) {
            detail::get_interface<BankInstrumentationSubscribeInterface>(bank)->disable_connection_callbacks(connection);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BankInstrumentationSubscribeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bank_callback_handle_t register_before_read(conf_object_t *connection, uint64 offset, uint64 size, before_read_callback_t before_read, lang_void *user_data) const {
            return iface_->register_before_read(obj_, connection, offset, size, before_read, user_data);
        }
        bank_callback_handle_t register_after_read(conf_object_t *connection, uint64 offset, uint64 size, after_read_callback_t after_read, lang_void *user_data) const {
            return iface_->register_after_read(obj_, connection, offset, size, after_read, user_data);
        }
        bank_callback_handle_t register_before_write(conf_object_t *connection, uint64 offset, uint64 size, before_write_callback_t before_write, lang_void *user_data) const {
            return iface_->register_before_write(obj_, connection, offset, size, before_write, user_data);
        }
        bank_callback_handle_t register_after_write(conf_object_t *connection, uint64 offset, uint64 size, after_write_callback_t after_write, lang_void *user_data) const {
            return iface_->register_after_write(obj_, connection, offset, size, after_write, user_data);
        }
        void remove_callback(bank_callback_handle_t callback) const {
            iface_->remove_callback(obj_, callback);
        }
        void remove_connection_callbacks(conf_object_t *connection) const {
            iface_->remove_connection_callbacks(obj_, connection);
        }
        void enable_connection_callbacks(conf_object_t *connection) const {
            iface_->enable_connection_callbacks(obj_, connection);
        }
        void disable_connection_callbacks(conf_object_t *connection) const {
            iface_->disable_connection_callbacks(obj_, connection);
        }

        const BankInstrumentationSubscribeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BankInstrumentationSubscribeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BANK_INSTRUMENTATION_SUBSCRIBE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BankInstrumentationSubscribeInterface::ctype funcs {
                FromC::register_before_read,
                FromC::register_after_read,
                FromC::register_before_write,
                FromC::register_after_write,
                FromC::remove_callback,
                FromC::remove_connection_callbacks,
                FromC::enable_connection_callbacks,
                FromC::disable_connection_callbacks,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
