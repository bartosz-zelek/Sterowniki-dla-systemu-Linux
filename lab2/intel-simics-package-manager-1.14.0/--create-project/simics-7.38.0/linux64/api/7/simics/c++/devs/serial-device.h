// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_SERIAL_DEVICE_H
#define SIMICS_CPP_DEVS_SERIAL_DEVICE_H

#include "simics/devs/serial-device.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class SerialDeviceInterface {
  public:
    using ctype = serial_device_interface_t;

    // Function override and implemented by user
    virtual int write(int value) = 0;
    virtual void receive_ready() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int write(conf_object_t *obj, int value) {
            return detail::get_interface<SerialDeviceInterface>(obj)->write(value);
        }
        static void receive_ready(conf_object_t *obj) {
            detail::get_interface<SerialDeviceInterface>(obj)->receive_ready();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SerialDeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int write(int value) const {
            return iface_->write(obj_, value);
        }
        void receive_ready() const {
            iface_->receive_ready(obj_);
        }

        const SerialDeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SerialDeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SERIAL_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SerialDeviceInterface::ctype funcs {
                FromC::write,
                FromC::receive_ready,
            };
            return &funcs;
        }
    };
};

class ExtendedSerialInterface {
  public:
    using ctype = extended_serial_interface_t;

    // Function override and implemented by user
    virtual void write_at(int value, int x, int y, int fg, int bg) = 0;
    virtual void graphics_mode(int in_graphics_mode) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void write_at(conf_object_t *obj, int value, int x, int y, int fg, int bg) {
            detail::get_interface<ExtendedSerialInterface>(obj)->write_at(value, x, y, fg, bg);
        }
        static void graphics_mode(conf_object_t *obj, int in_graphics_mode) {
            detail::get_interface<ExtendedSerialInterface>(obj)->graphics_mode(in_graphics_mode);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ExtendedSerialInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void write_at(int value, int x, int y, int fg, int bg) const {
            iface_->write_at(obj_, value, x, y, fg, bg);
        }
        void graphics_mode(int in_graphics_mode) const {
            iface_->graphics_mode(obj_, in_graphics_mode);
        }

        const ExtendedSerialInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ExtendedSerialInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return EXTENDED_SERIAL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ExtendedSerialInterface::ctype funcs {
                FromC::write_at,
                FromC::graphics_mode,
            };
            return &funcs;
        }
    };
};

class Rs232DeviceInterface {
  public:
    using ctype = rs232_device_interface_t;

    // Function override and implemented by user
    virtual void cts(int status) = 0;
    virtual void dsr(int status) = 0;
    virtual void ring(int status) = 0;
    virtual void carrier(int status) = 0;
    virtual void got_break() = 0;
    virtual void got_frame_error() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void cts(conf_object_t *obj, int status) {
            detail::get_interface<Rs232DeviceInterface>(obj)->cts(status);
        }
        static void dsr(conf_object_t *obj, int status) {
            detail::get_interface<Rs232DeviceInterface>(obj)->dsr(status);
        }
        static void ring(conf_object_t *obj, int status) {
            detail::get_interface<Rs232DeviceInterface>(obj)->ring(status);
        }
        static void carrier(conf_object_t *obj, int status) {
            detail::get_interface<Rs232DeviceInterface>(obj)->carrier(status);
        }
        static void got_break(conf_object_t *obj) {
            detail::get_interface<Rs232DeviceInterface>(obj)->got_break();
        }
        static void got_frame_error(conf_object_t *obj) {
            detail::get_interface<Rs232DeviceInterface>(obj)->got_frame_error();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Rs232DeviceInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void cts(int status) const {
            iface_->cts(obj_, status);
        }
        void dsr(int status) const {
            iface_->dsr(obj_, status);
        }
        void ring(int status) const {
            iface_->ring(obj_, status);
        }
        void carrier(int status) const {
            iface_->carrier(obj_, status);
        }
        void got_break() const {
            iface_->got_break(obj_);
        }
        void got_frame_error() const {
            iface_->got_frame_error(obj_);
        }

        const Rs232DeviceInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Rs232DeviceInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RS232_DEVICE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Rs232DeviceInterface::ctype funcs {
                FromC::cts,
                FromC::dsr,
                FromC::ring,
                FromC::carrier,
                FromC::got_break,
                FromC::got_frame_error,
            };
            return &funcs;
        }
    };
};

class Rs232ConsoleInterface {
  public:
    using ctype = rs232_console_interface_t;

    // Function override and implemented by user
    virtual void set_baudrate(int rate, int commit) = 0;
    virtual void set_data_bits(int bits, int commit) = 0;
    virtual void set_stop_bits(stop_bits_t stop_bits, int commit) = 0;
    virtual void set_parity_mode(parity_mode_t parity_mode, int commit) = 0;
    virtual void set_dtr(int status) = 0;
    virtual void set_rts(int status) = 0;
    virtual void set_break(int status) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_baudrate(conf_object_t *obj, int rate, int commit) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_baudrate(rate, commit);
        }
        static void set_data_bits(conf_object_t *obj, int bits, int commit) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_data_bits(bits, commit);
        }
        static void set_stop_bits(conf_object_t *obj, stop_bits_t stop_bits, int commit) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_stop_bits(stop_bits, commit);
        }
        static void set_parity_mode(conf_object_t *obj, parity_mode_t parity_mode, int commit) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_parity_mode(parity_mode, commit);
        }
        static void set_dtr(conf_object_t *obj, int status) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_dtr(status);
        }
        static void set_rts(conf_object_t *obj, int status) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_rts(status);
        }
        static void set_break(conf_object_t *obj, int status) {
            detail::get_interface<Rs232ConsoleInterface>(obj)->set_break(status);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const Rs232ConsoleInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_baudrate(int rate, int commit) const {
            iface_->set_baudrate(obj_, rate, commit);
        }
        void set_data_bits(int bits, int commit) const {
            iface_->set_data_bits(obj_, bits, commit);
        }
        void set_stop_bits(stop_bits_t stop_bits, int commit) const {
            iface_->set_stop_bits(obj_, stop_bits, commit);
        }
        void set_parity_mode(parity_mode_t parity_mode, int commit) const {
            iface_->set_parity_mode(obj_, parity_mode, commit);
        }
        void set_dtr(int status) const {
            iface_->set_dtr(obj_, status);
        }
        void set_rts(int status) const {
            iface_->set_rts(obj_, status);
        }
        void set_break(int status) const {
            iface_->set_break(obj_, status);
        }

        const Rs232ConsoleInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const Rs232ConsoleInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RS232_CONSOLE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr Rs232ConsoleInterface::ctype funcs {
                FromC::set_baudrate,
                FromC::set_data_bits,
                FromC::set_stop_bits,
                FromC::set_parity_mode,
                FromC::set_dtr,
                FromC::set_rts,
                FromC::set_break,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
