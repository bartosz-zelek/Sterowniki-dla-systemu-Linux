// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_OSA_MACHINE_INTERFACES_H
#define SIMICS_CPP_SIMULATOR_IFACE_OSA_MACHINE_INTERFACES_H

#include "simics/simulator-iface/osa-machine-interfaces.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class OsaMachineNotificationInterface {
  public:
    using ctype = osa_machine_notification_interface_t;

    // Function override and implemented by user
    virtual cancel_id_t notify_mode_change(conf_object_t *tracker, conf_object_t *cpu, void (*cb)(cbdata_call_t data, conf_object_t *cpu, processor_mode_t old_mode, processor_mode_t new_mode), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_exception(conf_object_t *tracker, conf_object_t *cpu, int exc_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int exc_num), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_control_reg(conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num, uint64 value), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_exec_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint64 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_read_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len), cbdata_register_t data) = 0;
    virtual cancel_id_t notify_write_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len, uint64 old_val, uint64 new_val), cbdata_register_t data) = 0;
    virtual void cancel(conf_object_t *tracker, cancel_id_t cancel_id) = 0;
    virtual cancel_id_t notify_control_reg_read(conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num), cbdata_register_t data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cancel_id_t notify_mode_change(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, void (*cb)(cbdata_call_t data, conf_object_t *cpu, processor_mode_t old_mode, processor_mode_t new_mode), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_mode_change(tracker, cpu, cb, data);
        }
        static cancel_id_t notify_exception(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int exc_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int exc_num), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_exception(tracker, cpu, exc_num, cb, data);
        }
        static cancel_id_t notify_control_reg(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num, uint64 value), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_control_reg(tracker, cpu, reg_num, cb, data);
        }
        static cancel_id_t notify_exec_breakpoint(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint64 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_exec_breakpoint(tracker, cpu, address, len, virt, cb, data);
        }
        static cancel_id_t notify_read_breakpoint(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_read_breakpoint(tracker, cpu, address, len, virt, cb, data);
        }
        static cancel_id_t notify_write_breakpoint(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len, uint64 old_val, uint64 new_val), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_write_breakpoint(tracker, cpu, address, len, virt, cb, data);
        }
        static void cancel(conf_object_t *obj, conf_object_t *tracker, cancel_id_t cancel_id) {
            detail::get_interface<OsaMachineNotificationInterface>(obj)->cancel(tracker, cancel_id);
        }
        static cancel_id_t notify_control_reg_read(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num), cbdata_register_t data) {
            return detail::get_interface<OsaMachineNotificationInterface>(obj)->notify_control_reg_read(tracker, cpu, reg_num, cb, data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMachineNotificationInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cancel_id_t notify_mode_change(conf_object_t *tracker, conf_object_t *cpu, void (*cb)(cbdata_call_t data, conf_object_t *cpu, processor_mode_t old_mode, processor_mode_t new_mode), cbdata_register_t data) const {
            return iface_->notify_mode_change(obj_, tracker, cpu, cb, data);
        }
        cancel_id_t notify_exception(conf_object_t *tracker, conf_object_t *cpu, int exc_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int exc_num), cbdata_register_t data) const {
            return iface_->notify_exception(obj_, tracker, cpu, exc_num, cb, data);
        }
        cancel_id_t notify_control_reg(conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num, uint64 value), cbdata_register_t data) const {
            return iface_->notify_control_reg(obj_, tracker, cpu, reg_num, cb, data);
        }
        cancel_id_t notify_exec_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, uint64 len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address), cbdata_register_t data) const {
            return iface_->notify_exec_breakpoint(obj_, tracker, cpu, address, len, virt, cb, data);
        }
        cancel_id_t notify_read_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len), cbdata_register_t data) const {
            return iface_->notify_read_breakpoint(obj_, tracker, cpu, address, len, virt, cb, data);
        }
        cancel_id_t notify_write_breakpoint(conf_object_t *tracker, conf_object_t *cpu, uint64 address, unsigned len, bool virt, void (*cb)(cbdata_call_t data, conf_object_t *cpu, uint64 address, unsigned len, uint64 old_val, uint64 new_val), cbdata_register_t data) const {
            return iface_->notify_write_breakpoint(obj_, tracker, cpu, address, len, virt, cb, data);
        }
        void cancel(conf_object_t *tracker, cancel_id_t cancel_id) const {
            iface_->cancel(obj_, tracker, cancel_id);
        }
        cancel_id_t notify_control_reg_read(conf_object_t *tracker, conf_object_t *cpu, int reg_num, void (*cb)(cbdata_call_t data, conf_object_t *cpu, int reg_num), cbdata_register_t data) const {
            return iface_->notify_control_reg_read(obj_, tracker, cpu, reg_num, cb, data);
        }

        const OsaMachineNotificationInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMachineNotificationInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MACHINE_NOTIFICATION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMachineNotificationInterface::ctype funcs {
                FromC::notify_mode_change,
                FromC::notify_exception,
                FromC::notify_control_reg,
                FromC::notify_exec_breakpoint,
                FromC::notify_read_breakpoint,
                FromC::notify_write_breakpoint,
                FromC::cancel,
                FromC::notify_control_reg_read,
            };
            return &funcs;
        }
    };
};

class OsaMachineQueryInterface {
  public:
    using ctype = osa_machine_query_interface_t;

    // Function override and implemented by user
    virtual uint64 read_register(conf_object_t *tracker, conf_object_t *cpu, int reg) = 0;
    virtual int get_register_number(conf_object_t *tracker, conf_object_t *cpu, const char *reg) = 0;
    virtual attr_value_t read_phys_memory(conf_object_t *tracker, conf_object_t *cpu, physical_address_t addr, osa_read_len_t len) = 0;
    virtual attr_value_t read_phys_bytes(conf_object_t *tracker, conf_object_t *cpu, physical_address_t paddr, unsigned len) = 0;
    virtual attr_value_t virtual_to_physical(conf_object_t *tracker, conf_object_t *cpu, uint64 vaddr) = 0;
    virtual processor_mode_t cpu_mode(conf_object_t *tracker, conf_object_t *cpu) = 0;
    virtual attr_value_t get_all_processors(conf_object_t *tracker) = 0;
    virtual int get_exception_number(conf_object_t *tracker, conf_object_t *cpu, const char *name) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint64 read_register(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, int reg) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->read_register(tracker, cpu, reg);
        }
        static int get_register_number(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, const char *reg) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->get_register_number(tracker, cpu, reg);
        }
        static attr_value_t read_phys_memory(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, physical_address_t addr, osa_read_len_t len) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->read_phys_memory(tracker, cpu, addr, len);
        }
        static attr_value_t read_phys_bytes(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, physical_address_t paddr, unsigned len) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->read_phys_bytes(tracker, cpu, paddr, len);
        }
        static attr_value_t virtual_to_physical(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, uint64 vaddr) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->virtual_to_physical(tracker, cpu, vaddr);
        }
        static processor_mode_t cpu_mode(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->cpu_mode(tracker, cpu);
        }
        static attr_value_t get_all_processors(conf_object_t *obj, conf_object_t *tracker) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->get_all_processors(tracker);
        }
        static int get_exception_number(conf_object_t *obj, conf_object_t *tracker, conf_object_t *cpu, const char *name) {
            return detail::get_interface<OsaMachineQueryInterface>(obj)->get_exception_number(tracker, cpu, name);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const OsaMachineQueryInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint64 read_register(conf_object_t *tracker, conf_object_t *cpu, int reg) const {
            return iface_->read_register(obj_, tracker, cpu, reg);
        }
        int get_register_number(conf_object_t *tracker, conf_object_t *cpu, const char *reg) const {
            return iface_->get_register_number(obj_, tracker, cpu, reg);
        }
        attr_value_t read_phys_memory(conf_object_t *tracker, conf_object_t *cpu, physical_address_t addr, osa_read_len_t len) const {
            return iface_->read_phys_memory(obj_, tracker, cpu, addr, len);
        }
        attr_value_t read_phys_bytes(conf_object_t *tracker, conf_object_t *cpu, physical_address_t paddr, unsigned len) const {
            return iface_->read_phys_bytes(obj_, tracker, cpu, paddr, len);
        }
        attr_value_t virtual_to_physical(conf_object_t *tracker, conf_object_t *cpu, uint64 vaddr) const {
            return iface_->virtual_to_physical(obj_, tracker, cpu, vaddr);
        }
        processor_mode_t cpu_mode(conf_object_t *tracker, conf_object_t *cpu) const {
            return iface_->cpu_mode(obj_, tracker, cpu);
        }
        attr_value_t get_all_processors(conf_object_t *tracker) const {
            return iface_->get_all_processors(obj_, tracker);
        }
        int get_exception_number(conf_object_t *tracker, conf_object_t *cpu, const char *name) const {
            return iface_->get_exception_number(obj_, tracker, cpu, name);
        }

        const OsaMachineQueryInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const OsaMachineQueryInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return OSA_MACHINE_QUERY_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr OsaMachineQueryInterface::ctype funcs {
                FromC::read_register,
                FromC::get_register_number,
                FromC::read_phys_memory,
                FromC::read_phys_bytes,
                FromC::virtual_to_physical,
                FromC::cpu_mode,
                FromC::get_all_processors,
                FromC::get_exception_number,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
