// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_APIC_H
#define SIMICS_CPP_DEVS_APIC_H

#include "simics/devs/apic.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ApicBusInterface {
  public:
    using ctype = apic_bus_interface_t;

    // Function override and implemented by user
    virtual apic_bus_status_t interrupt(apic_destination_mode_t dest_mode, apic_delivery_mode_t delivery_mode, int level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, uint8 destination) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static apic_bus_status_t interrupt(conf_object_t *obj, apic_destination_mode_t dest_mode, apic_delivery_mode_t delivery_mode, int level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, uint8 destination) {
            return detail::get_interface<ApicBusInterface>(obj)->interrupt(dest_mode, delivery_mode, level_assert, trigger_mode, vector, destination);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ApicBusInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        apic_bus_status_t interrupt(apic_destination_mode_t dest_mode, apic_delivery_mode_t delivery_mode, int level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, uint8 destination) const {
            return iface_->interrupt(obj_, dest_mode, delivery_mode, level_assert, trigger_mode, vector, destination);
        }

        const ApicBusInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ApicBusInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return APIC_BUS_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ApicBusInterface::ctype funcs {
                FromC::interrupt,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
