// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_ARCH_XTENSA_H
#define SIMICS_CPP_ARCH_XTENSA_H

#include "simics/arch/xtensa.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class XtensaTieLookupInterface {
  public:
    using ctype = xtensa_tie_lookup_interface_t;

    // Function override and implemented by user
    virtual void data(uint32 out_width, const uint32 *out_data, uint32 in_width, uint32 *in_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void data(conf_object_t *obj, uint32 out_width, const uint32 *out_data, uint32 in_width, uint32 *in_data) {
            detail::get_interface<XtensaTieLookupInterface>(obj)->data(out_width, out_data, in_width, in_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaTieLookupInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void data(uint32 out_width, const uint32 *out_data, uint32 in_width, uint32 *in_data) const {
            iface_->data(obj_, out_width, out_data, in_width, in_data);
        }

        const XtensaTieLookupInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaTieLookupInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_TIE_LOOKUP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaTieLookupInterface::ctype funcs {
                FromC::data,
            };
            return &funcs;
        }
    };
};

class XtensaTieExportStateInterface {
  public:
    using ctype = xtensa_tie_export_state_interface_t;

    // Function override and implemented by user
    virtual void data(uint32 bit_width, const uint32 *out_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void data(conf_object_t *obj, uint32 bit_width, const uint32 *out_data) {
            detail::get_interface<XtensaTieExportStateInterface>(obj)->data(bit_width, out_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaTieExportStateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void data(uint32 bit_width, const uint32 *out_data) const {
            iface_->data(obj_, bit_width, out_data);
        }

        const XtensaTieExportStateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaTieExportStateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_TIE_EXPORT_STATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaTieExportStateInterface::ctype funcs {
                FromC::data,
            };
            return &funcs;
        }
    };
};

class XtensaTieOutputQueueInterface {
  public:
    using ctype = xtensa_tie_output_queue_interface_t;

    // Function override and implemented by user
    virtual bool full() = 0;
    virtual void data(uint32 bit_width, bool reserve_only, const uint32 *out_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool full(conf_object_t *obj) {
            return detail::get_interface<XtensaTieOutputQueueInterface>(obj)->full();
        }
        static void data(conf_object_t *obj, uint32 bit_width, bool reserve_only, const uint32 *out_data) {
            detail::get_interface<XtensaTieOutputQueueInterface>(obj)->data(bit_width, reserve_only, out_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaTieOutputQueueInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool full() const {
            return iface_->full(obj_);
        }
        void data(uint32 bit_width, bool reserve_only, const uint32 *out_data) const {
            iface_->data(obj_, bit_width, reserve_only, out_data);
        }

        const XtensaTieOutputQueueInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaTieOutputQueueInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_TIE_OUTPUT_QUEUE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaTieOutputQueueInterface::ctype funcs {
                FromC::full,
                FromC::data,
            };
            return &funcs;
        }
    };
};

class XtensaTieInputQueueInterface {
  public:
    using ctype = xtensa_tie_input_queue_interface_t;

    // Function override and implemented by user
    virtual bool empty() = 0;
    virtual void data(uint32 bit_width, bool is_peek, uint32 *in_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool empty(conf_object_t *obj) {
            return detail::get_interface<XtensaTieInputQueueInterface>(obj)->empty();
        }
        static void data(conf_object_t *obj, uint32 bit_width, bool is_peek, uint32 *in_data) {
            detail::get_interface<XtensaTieInputQueueInterface>(obj)->data(bit_width, is_peek, in_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaTieInputQueueInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool empty() const {
            return iface_->empty(obj_);
        }
        void data(uint32 bit_width, bool is_peek, uint32 *in_data) const {
            iface_->data(obj_, bit_width, is_peek, in_data);
        }

        const XtensaTieInputQueueInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaTieInputQueueInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_TIE_INPUT_QUEUE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaTieInputQueueInterface::ctype funcs {
                FromC::empty,
                FromC::data,
            };
            return &funcs;
        }
    };
};

class XtensaTieImportWireInterface {
  public:
    using ctype = xtensa_tie_import_wire_interface_t;

    // Function override and implemented by user
    virtual void data(uint32 bit_width, uint32 *in_data) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void data(conf_object_t *obj, uint32 bit_width, uint32 *in_data) {
            detail::get_interface<XtensaTieImportWireInterface>(obj)->data(bit_width, in_data);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaTieImportWireInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void data(uint32 bit_width, uint32 *in_data) const {
            iface_->data(obj_, bit_width, in_data);
        }

        const XtensaTieImportWireInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaTieImportWireInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_TIE_IMPORT_WIRE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaTieImportWireInterface::ctype funcs {
                FromC::data,
            };
            return &funcs;
        }
    };
};

class XtensaWwdtConfigInterface {
  public:
    using ctype = xtensa_wwdt_config_interface_t;

    // Function override and implemented by user
    virtual bool has_wwdt() = 0;
    virtual uint32 reset_val() = 0;
    virtual uint32 hb_reset_val() = 0;
    virtual uint32 ikey() = 0;
    virtual uint32 bkey() = 0;
    virtual uint32 rkey() = 0;
    virtual uint32 kkey() = 0;
    virtual uint32 ekey() = 0;
    virtual uint32 c1key() = 0;
    virtual uint32 c2key() = 0;
    virtual uint32 t1key() = 0;
    virtual uint32 t2key() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static bool has_wwdt(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->has_wwdt();
        }
        static uint32 reset_val(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->reset_val();
        }
        static uint32 hb_reset_val(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->hb_reset_val();
        }
        static uint32 ikey(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->ikey();
        }
        static uint32 bkey(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->bkey();
        }
        static uint32 rkey(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->rkey();
        }
        static uint32 kkey(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->kkey();
        }
        static uint32 ekey(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->ekey();
        }
        static uint32 c1key(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->c1key();
        }
        static uint32 c2key(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->c2key();
        }
        static uint32 t1key(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->t1key();
        }
        static uint32 t2key(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtConfigInterface>(obj)->t2key();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaWwdtConfigInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        bool has_wwdt() const {
            return iface_->has_wwdt(obj_);
        }
        uint32 reset_val() const {
            return iface_->reset_val(obj_);
        }
        uint32 hb_reset_val() const {
            return iface_->hb_reset_val(obj_);
        }
        uint32 ikey() const {
            return iface_->ikey(obj_);
        }
        uint32 bkey() const {
            return iface_->bkey(obj_);
        }
        uint32 rkey() const {
            return iface_->rkey(obj_);
        }
        uint32 kkey() const {
            return iface_->kkey(obj_);
        }
        uint32 ekey() const {
            return iface_->ekey(obj_);
        }
        uint32 c1key() const {
            return iface_->c1key(obj_);
        }
        uint32 c2key() const {
            return iface_->c2key(obj_);
        }
        uint32 t1key() const {
            return iface_->t1key(obj_);
        }
        uint32 t2key() const {
            return iface_->t2key(obj_);
        }

        const XtensaWwdtConfigInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaWwdtConfigInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_WWDT_CONFIG_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaWwdtConfigInterface::ctype funcs {
                FromC::has_wwdt,
                FromC::reset_val,
                FromC::hb_reset_val,
                FromC::ikey,
                FromC::bkey,
                FromC::rkey,
                FromC::kkey,
                FromC::ekey,
                FromC::c1key,
                FromC::c2key,
                FromC::t1key,
                FromC::t2key,
            };
            return &funcs;
        }
    };
};

class XtensaWwdtFaultinfoInterface {
  public:
    using ctype = xtensa_wwdt_faultinfo_interface_t;

    // Function override and implemented by user
    virtual uint8 status() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint8 status(conf_object_t *obj) {
            return detail::get_interface<XtensaWwdtFaultinfoInterface>(obj)->status();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaWwdtFaultinfoInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint8 status() const {
            return iface_->status(obj_);
        }

        const XtensaWwdtFaultinfoInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaWwdtFaultinfoInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_WWDT_FAULTINFO_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaWwdtFaultinfoInterface::ctype funcs {
                FromC::status,
            };
            return &funcs;
        }
    };
};

class XtensaInternalMemoriesInterface {
  public:
    using ctype = xtensa_internal_memories_interface_t;

    // Function override and implemented by user
    virtual attr_value_t iram_mappings() = 0;
    virtual attr_value_t irom_mappings() = 0;
    virtual attr_value_t dram_mappings() = 0;
    virtual attr_value_t drom_mappings() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t iram_mappings(conf_object_t *obj) {
            return detail::get_interface<XtensaInternalMemoriesInterface>(obj)->iram_mappings();
        }
        static attr_value_t irom_mappings(conf_object_t *obj) {
            return detail::get_interface<XtensaInternalMemoriesInterface>(obj)->irom_mappings();
        }
        static attr_value_t dram_mappings(conf_object_t *obj) {
            return detail::get_interface<XtensaInternalMemoriesInterface>(obj)->dram_mappings();
        }
        static attr_value_t drom_mappings(conf_object_t *obj) {
            return detail::get_interface<XtensaInternalMemoriesInterface>(obj)->drom_mappings();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaInternalMemoriesInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t iram_mappings() const {
            return iface_->iram_mappings(obj_);
        }
        attr_value_t irom_mappings() const {
            return iface_->irom_mappings(obj_);
        }
        attr_value_t dram_mappings() const {
            return iface_->dram_mappings(obj_);
        }
        attr_value_t drom_mappings() const {
            return iface_->drom_mappings(obj_);
        }

        const XtensaInternalMemoriesInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaInternalMemoriesInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_INTERNAL_MEMORIES_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaInternalMemoriesInterface::ctype funcs {
                FromC::iram_mappings,
                FromC::irom_mappings,
                FromC::dram_mappings,
                FromC::drom_mappings,
            };
            return &funcs;
        }
    };
};

class XtensaMpuLookupInterface {
  public:
    using ctype = xtensa_mpu_lookup_interface_t;

    // Function override and implemented by user
    virtual xtensa_mpu_lookup_t mpu_region(uint32 address) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static xtensa_mpu_lookup_t mpu_region(conf_object_t *obj, uint32 address) {
            return detail::get_interface<XtensaMpuLookupInterface>(obj)->mpu_region(address);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaMpuLookupInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        xtensa_mpu_lookup_t mpu_region(uint32 address) const {
            return iface_->mpu_region(obj_, address);
        }

        const XtensaMpuLookupInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaMpuLookupInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_MPU_LOOKUP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaMpuLookupInterface::ctype funcs {
                FromC::mpu_region,
            };
            return &funcs;
        }
    };
};

class XtensaLookupInterface {
  public:
    using ctype = xtensa_lookup_interface_t;

    // Function override and implemented by user
    virtual void register_lookup(lang_void *user_object, lang_void *lookup_func) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_lookup(conf_object_t *obj, lang_void *user_object, lang_void *lookup_func) {
            detail::get_interface<XtensaLookupInterface>(obj)->register_lookup(user_object, lookup_func);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaLookupInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_lookup(lang_void *user_object, lang_void *lookup_func) const {
            iface_->register_lookup(obj_, user_object, lookup_func);
        }

        const XtensaLookupInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaLookupInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_LOOKUP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaLookupInterface::ctype funcs {
                FromC::register_lookup,
            };
            return &funcs;
        }
    };
};

class XtensaExportStateInterface {
  public:
    using ctype = xtensa_export_state_interface_t;

    // Function override and implemented by user
    virtual void register_export_state(lang_void *user_object, lang_void *export_state_func) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_export_state(conf_object_t *obj, lang_void *user_object, lang_void *export_state_func) {
            detail::get_interface<XtensaExportStateInterface>(obj)->register_export_state(user_object, export_state_func);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaExportStateInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_export_state(lang_void *user_object, lang_void *export_state_func) const {
            iface_->register_export_state(obj_, user_object, export_state_func);
        }

        const XtensaExportStateInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaExportStateInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_EXPORT_STATE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaExportStateInterface::ctype funcs {
                FromC::register_export_state,
            };
            return &funcs;
        }
    };
};

class XtensaOutputQueueInterface {
  public:
    using ctype = xtensa_output_queue_interface_t;

    // Function override and implemented by user
    virtual void register_output_queue(lang_void *user_object, lang_void *full_callback, lang_void *data_callback) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_output_queue(conf_object_t *obj, lang_void *user_object, lang_void *full_callback, lang_void *data_callback) {
            detail::get_interface<XtensaOutputQueueInterface>(obj)->register_output_queue(user_object, full_callback, data_callback);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaOutputQueueInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_output_queue(lang_void *user_object, lang_void *full_callback, lang_void *data_callback) const {
            iface_->register_output_queue(obj_, user_object, full_callback, data_callback);
        }

        const XtensaOutputQueueInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaOutputQueueInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_OUTPUT_QUEUE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaOutputQueueInterface::ctype funcs {
                FromC::register_output_queue,
            };
            return &funcs;
        }
    };
};

class XtensaInputQueueInterface {
  public:
    using ctype = xtensa_input_queue_interface_t;

    // Function override and implemented by user
    virtual void register_input_queue(lang_void *user_object, lang_void *empty_callback, lang_void *data_callback) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_input_queue(conf_object_t *obj, lang_void *user_object, lang_void *empty_callback, lang_void *data_callback) {
            detail::get_interface<XtensaInputQueueInterface>(obj)->register_input_queue(user_object, empty_callback, data_callback);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaInputQueueInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_input_queue(lang_void *user_object, lang_void *empty_callback, lang_void *data_callback) const {
            iface_->register_input_queue(obj_, user_object, empty_callback, data_callback);
        }

        const XtensaInputQueueInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaInputQueueInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_INPUT_QUEUE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaInputQueueInterface::ctype funcs {
                FromC::register_input_queue,
            };
            return &funcs;
        }
    };
};

class XtensaImportWireInterface {
  public:
    using ctype = xtensa_import_wire_interface_t;

    // Function override and implemented by user
    virtual void register_import_wire(lang_void *user_object, lang_void *import_wire_func) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void register_import_wire(conf_object_t *obj, lang_void *user_object, lang_void *import_wire_func) {
            detail::get_interface<XtensaImportWireInterface>(obj)->register_import_wire(user_object, import_wire_func);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const XtensaImportWireInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void register_import_wire(lang_void *user_object, lang_void *import_wire_func) const {
            iface_->register_import_wire(obj_, user_object, import_wire_func);
        }

        const XtensaImportWireInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const XtensaImportWireInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return XTENSA_IMPORT_WIRE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr XtensaImportWireInterface::ctype funcs {
                FromC::register_import_wire,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
