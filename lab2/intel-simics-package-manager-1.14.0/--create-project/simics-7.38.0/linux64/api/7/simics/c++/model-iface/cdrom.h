// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_CDROM_H
#define SIMICS_CPP_MODEL_IFACE_CDROM_H

#include "simics/model-iface/cdrom.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CdromMediaInterface {
  public:
    using ctype = cdrom_media_interface_t;

    // Function override and implemented by user
    virtual int read_toc(uint8 *buf, int msf, int start_track) = 0;
    virtual uint32 capacity() = 0;
    virtual int read_block(uint8 *buf, int lba) = 0;
    virtual int read_raw_block(uint8 *buf, int lba) = 0;
    virtual int insert() = 0;
    virtual void eject() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int read_toc(conf_object_t *media, uint8 *buf, int msf, int start_track) {
            return detail::get_interface<CdromMediaInterface>(media)->read_toc(buf, msf, start_track);
        }
        static uint32 capacity(conf_object_t *media) {
            return detail::get_interface<CdromMediaInterface>(media)->capacity();
        }
        static int read_block(conf_object_t *media, uint8 *buf, int lba) {
            return detail::get_interface<CdromMediaInterface>(media)->read_block(buf, lba);
        }
        static int read_raw_block(conf_object_t *media, uint8 *buf, int lba) {
            return detail::get_interface<CdromMediaInterface>(media)->read_raw_block(buf, lba);
        }
        static int insert(conf_object_t *media) {
            return detail::get_interface<CdromMediaInterface>(media)->insert();
        }
        static void eject(conf_object_t *media) {
            detail::get_interface<CdromMediaInterface>(media)->eject();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CdromMediaInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int read_toc(uint8 *buf, int msf, int start_track) const {
            return iface_->read_toc(obj_, buf, msf, start_track);
        }
        uint32 capacity() const {
            return iface_->capacity(obj_);
        }
        int read_block(uint8 *buf, int lba) const {
            return iface_->read_block(obj_, buf, lba);
        }
        int read_raw_block(uint8 *buf, int lba) const {
            return iface_->read_raw_block(obj_, buf, lba);
        }
        int insert() const {
            return iface_->insert(obj_);
        }
        void eject() const {
            iface_->eject(obj_);
        }

        const CdromMediaInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CdromMediaInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CDROM_MEDIA_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CdromMediaInterface::ctype funcs {
                FromC::read_toc,
                FromC::capacity,
                FromC::read_block,
                FromC::read_raw_block,
                FromC::insert,
                FromC::eject,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
