// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_CO_EXECUTE_H
#define SIMICS_CPP_MODEL_IFACE_CO_EXECUTE_H

#include "simics/model-iface/co-execute.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CoExecuteInterface {
  public:
    using ctype = co_execute_interface_t;

    // Function override and implemented by user
    virtual void start_thread(void (*entry)(lang_void *arg), lang_void *arg) = 0;
    virtual void yield() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void start_thread(conf_object_t *obj, void (*entry)(lang_void *arg), lang_void *arg) {
            detail::get_interface<CoExecuteInterface>(obj)->start_thread(entry, arg);
        }
        static void yield(conf_object_t *obj) {
            detail::get_interface<CoExecuteInterface>(obj)->yield();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CoExecuteInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void start_thread(void (*entry)(lang_void *arg), lang_void *arg) const {
            iface_->start_thread(obj_, entry, arg);
        }
        void yield() const {
            iface_->yield(obj_);
        }

        const CoExecuteInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CoExecuteInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CO_EXECUTE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CoExecuteInterface::ctype funcs {
                FromC::start_thread,
                FromC::yield,
            };
            return &funcs;
        }
    };
};

class SynchronousModeInterface {
  public:
    using ctype = synchronous_mode_interface_t;

    // Function override and implemented by user
    virtual int enter() = 0;
    virtual int leave() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static int enter(conf_object_t *obj) {
            return detail::get_interface<SynchronousModeInterface>(obj)->enter();
        }
        static int leave(conf_object_t *obj) {
            return detail::get_interface<SynchronousModeInterface>(obj)->leave();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const SynchronousModeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        int enter() const {
            return iface_->enter(obj_);
        }
        int leave() const {
            return iface_->leave(obj_);
        }

        const SynchronousModeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const SynchronousModeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return SYNCHRONOUS_MODE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr SynchronousModeInterface::ctype funcs {
                FromC::enter,
                FromC::leave,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
