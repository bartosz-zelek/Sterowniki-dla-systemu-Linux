// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_ADDRESS_PROFILER_H
#define SIMICS_CPP_SIMULATOR_IFACE_ADDRESS_PROFILER_H

#include "simics/simulator-iface/address-profiler.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class AddressProfilerInterface {
  public:
    using ctype = address_profiler_interface_t;

    // Function override and implemented by user
    virtual addr_prof_iter_t * iter(unsigned view, generic_address_t start, generic_address_t stop) = 0;
    virtual uint64 sum(unsigned view, generic_address_t start, generic_address_t end) = 0;
    virtual uint64 max(unsigned view, generic_address_t start, generic_address_t end) = 0;
    virtual unsigned granularity_log2(unsigned view) = 0;
    virtual int address_bits(unsigned view) = 0;
    virtual int physical_addresses(unsigned view) = 0;
    virtual const char * description(unsigned view) = 0;
    virtual unsigned num_views() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static addr_prof_iter_t * iter(conf_object_t *prof_obj, unsigned view, generic_address_t start, generic_address_t stop) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->iter(view, start, stop);
        }
        static uint64 sum(conf_object_t *prof_obj, unsigned view, generic_address_t start, generic_address_t end) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->sum(view, start, end);
        }
        static uint64 max(conf_object_t *prof_obj, unsigned view, generic_address_t start, generic_address_t end) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->max(view, start, end);
        }
        static unsigned granularity_log2(conf_object_t *prof_obj, unsigned view) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->granularity_log2(view);
        }
        static int address_bits(conf_object_t *prof_obj, unsigned view) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->address_bits(view);
        }
        static int physical_addresses(conf_object_t *prof_obj, unsigned view) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->physical_addresses(view);
        }
        static const char * description(conf_object_t *prof_obj, unsigned view) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->description(view);
        }
        static unsigned num_views(conf_object_t *prof_obj) {
            return detail::get_interface<AddressProfilerInterface>(prof_obj)->num_views();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const AddressProfilerInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        addr_prof_iter_t * iter(unsigned view, generic_address_t start, generic_address_t stop) const {
            return iface_->iter(obj_, view, start, stop);
        }
        uint64 sum(unsigned view, generic_address_t start, generic_address_t end) const {
            return iface_->sum(obj_, view, start, end);
        }
        uint64 max(unsigned view, generic_address_t start, generic_address_t end) const {
            return iface_->max(obj_, view, start, end);
        }
        unsigned granularity_log2(unsigned view) const {
            return iface_->granularity_log2(obj_, view);
        }
        int address_bits(unsigned view) const {
            return iface_->address_bits(obj_, view);
        }
        int physical_addresses(unsigned view) const {
            return iface_->physical_addresses(obj_, view);
        }
        const char * description(unsigned view) const {
            return iface_->description(obj_, view);
        }
        unsigned num_views() const {
            return iface_->num_views(obj_);
        }

        const AddressProfilerInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const AddressProfilerInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return ADDRESS_PROFILER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr AddressProfilerInterface::ctype funcs {
                FromC::iter,
                FromC::sum,
                FromC::max,
                FromC::granularity_log2,
                FromC::address_bits,
                FromC::physical_addresses,
                FromC::description,
                FromC::num_views,
            };
            return &funcs;
        }
    };
};

class BranchArcInterface {
  public:
    using ctype = branch_arc_interface_t;

    // Function override and implemented by user
    virtual branch_arc_iter_t * iter(generic_address_t start, generic_address_t stop, branch_recorder_direction_t dir) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static branch_arc_iter_t * iter(conf_object_t *prof_obj, generic_address_t start, generic_address_t stop, branch_recorder_direction_t dir) {
            return detail::get_interface<BranchArcInterface>(prof_obj)->iter(start, stop, dir);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const BranchArcInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        branch_arc_iter_t * iter(generic_address_t start, generic_address_t stop, branch_recorder_direction_t dir) const {
            return iface_->iter(obj_, start, stop, dir);
        }

        const BranchArcInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const BranchArcInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return BRANCH_ARC_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr BranchArcInterface::ctype funcs {
                FromC::iter,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
