// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_INSTRUMENTATION_PROVIDER_H
#define SIMICS_CPP_MODEL_IFACE_INSTRUMENTATION_PROVIDER_H

#include "simics/model-iface/instrumentation-provider.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class InstrumentationOrderInterface {
  public:
    using ctype = instrumentation_order_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_connections() = 0;
    virtual bool move_before(conf_object_t *connection, conf_object_t *before) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_connections(conf_object_t *obj) {
            return detail::get_interface<InstrumentationOrderInterface>(obj)->get_connections();
        }
        static bool move_before(conf_object_t *self, conf_object_t *connection, conf_object_t *before) {
            return detail::get_interface<InstrumentationOrderInterface>(self)->move_before(connection, before);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationOrderInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_connections() const {
            return iface_->get_connections(obj_);
        }
        bool move_before(conf_object_t *connection, conf_object_t *before) const {
            return iface_->move_before(obj_, connection, before);
        }

        const InstrumentationOrderInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationOrderInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_ORDER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationOrderInterface::ctype funcs {
                FromC::get_connections,
                FromC::move_before,
            };
            return &funcs;
        }
    };
};

class CallbackInfoInterface {
  public:
    using ctype = callback_info_interface_t;

    // Function override and implemented by user
    virtual attr_value_t get_callbacks() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t get_callbacks(conf_object_t *obj) {
            return detail::get_interface<CallbackInfoInterface>(obj)->get_callbacks();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CallbackInfoInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t get_callbacks() const {
            return iface_->get_callbacks(obj_);
        }

        const CallbackInfoInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CallbackInfoInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CALLBACK_INFO_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CallbackInfoInterface::ctype funcs {
                FromC::get_callbacks,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
