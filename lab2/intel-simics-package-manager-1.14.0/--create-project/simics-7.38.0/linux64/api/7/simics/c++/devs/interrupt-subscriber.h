// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_INTERRUPT_SUBSCRIBER_H
#define SIMICS_CPP_DEVS_INTERRUPT_SUBSCRIBER_H

#include "simics/devs/interrupt-subscriber.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class InterruptSubscriberInterface {
  public:
    using ctype = interrupt_subscriber_interface_t;

    // Function override and implemented by user
    virtual void notify(apic_delivery_mode_t delivery_mode, bool level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, interrupt_source_t source) = 0;
    virtual void reset() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void notify(conf_object_t *obj, apic_delivery_mode_t delivery_mode, bool level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, interrupt_source_t source) {
            detail::get_interface<InterruptSubscriberInterface>(obj)->notify(delivery_mode, level_assert, trigger_mode, vector, source);
        }
        static void reset(conf_object_t *obj) {
            detail::get_interface<InterruptSubscriberInterface>(obj)->reset();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InterruptSubscriberInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void notify(apic_delivery_mode_t delivery_mode, bool level_assert, apic_trigger_mode_t trigger_mode, uint8 vector, interrupt_source_t source) const {
            iface_->notify(obj_, delivery_mode, level_assert, trigger_mode, vector, source);
        }
        void reset() const {
            iface_->reset(obj_);
        }

        const InterruptSubscriberInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InterruptSubscriberInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INTERRUPT_SUBSCRIBER_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InterruptSubscriberInterface::ctype funcs {
                FromC::notify,
                FromC::reset,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
