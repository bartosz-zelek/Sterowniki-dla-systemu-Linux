// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_SIMULATOR_IFACE_INSTRUMENTATION_TOOL_H
#define SIMICS_CPP_SIMULATOR_IFACE_INSTRUMENTATION_TOOL_H

#include "simics/simulator-iface/instrumentation-tool.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class InstrumentationToolInterface {
  public:
    using ctype = instrumentation_tool_interface_t;

    // Function override and implemented by user
    virtual conf_object_t * connect(conf_object_t *provider, attr_value_t args) = 0;
    virtual void disconnect(conf_object_t *conn_obj) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static conf_object_t * connect(conf_object_t *obj, conf_object_t *provider, attr_value_t args) {
            return detail::get_interface<InstrumentationToolInterface>(obj)->connect(provider, args);
        }
        static void disconnect(conf_object_t *obj, conf_object_t *conn_obj) {
            detail::get_interface<InstrumentationToolInterface>(obj)->disconnect(conn_obj);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationToolInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        conf_object_t * connect(conf_object_t *provider, attr_value_t args) const {
            return iface_->connect(obj_, provider, args);
        }
        void disconnect(conf_object_t *conn_obj) const {
            iface_->disconnect(obj_, conn_obj);
        }

        const InstrumentationToolInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationToolInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_TOOL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationToolInterface::ctype funcs {
                FromC::connect,
                FromC::disconnect,
            };
            return &funcs;
        }
    };
};

class InstrumentationConnectionInterface {
  public:
    using ctype = instrumentation_connection_interface_t;

    // Function override and implemented by user
    virtual void enable() = 0;
    virtual void disable() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void enable(conf_object_t *obj) {
            detail::get_interface<InstrumentationConnectionInterface>(obj)->enable();
        }
        static void disable(conf_object_t *obj) {
            detail::get_interface<InstrumentationConnectionInterface>(obj)->disable();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const InstrumentationConnectionInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void enable() const {
            iface_->enable(obj_);
        }
        void disable() const {
            iface_->disable(obj_);
        }

        const InstrumentationConnectionInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const InstrumentationConnectionInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return INSTRUMENTATION_CONNECTION_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr InstrumentationConnectionInterface::ctype funcs {
                FromC::enable,
                FromC::disable,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
