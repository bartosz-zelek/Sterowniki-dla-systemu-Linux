// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_ARCH_RISC_V_H
#define SIMICS_CPP_ARCH_RISC_V_H

#include "simics/arch/risc-v.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class RiscvCoprocessorInterface {
  public:
    using ctype = riscv_coprocessor_interface_t;

    // Function override and implemented by user
    virtual uint64 read_register(uint64 number) = 0;
    virtual void write_register(uint64 number, uint64 value) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint64 read_register(conf_object_t *obj, uint64 number) {
            return detail::get_interface<RiscvCoprocessorInterface>(obj)->read_register(number);
        }
        static void write_register(conf_object_t *obj, uint64 number, uint64 value) {
            detail::get_interface<RiscvCoprocessorInterface>(obj)->write_register(number, value);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvCoprocessorInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint64 read_register(uint64 number) const {
            return iface_->read_register(obj_, number);
        }
        void write_register(uint64 number, uint64 value) const {
            iface_->write_register(obj_, number, value);
        }

        const RiscvCoprocessorInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvCoprocessorInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_COPROCESSOR_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvCoprocessorInterface::ctype funcs {
                FromC::read_register,
                FromC::write_register,
            };
            return &funcs;
        }
    };
};

class RiscvImsicInterface {
  public:
    using ctype = riscv_imsic_interface_t;

    // Function override and implemented by user
    virtual uint32 num_guest_files() = 0;
    virtual uint64 read_irq_file(riscv_imsic_file_id_t id, uint32 offset) = 0;
    virtual uint64 read_and_write_irq_file(riscv_imsic_file_id_t id, uint32 offset, uint64 new_value, uint64 mask) = 0;
    virtual uint64 read_xtopei(riscv_imsic_file_id_t id) = 0;
    virtual uint64 read_and_write_xtopei(riscv_imsic_file_id_t id, uint64 value, uint64 mask) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint32 num_guest_files(conf_object_t *obj) {
            return detail::get_interface<RiscvImsicInterface>(obj)->num_guest_files();
        }
        static uint64 read_irq_file(conf_object_t *obj, riscv_imsic_file_id_t id, uint32 offset) {
            return detail::get_interface<RiscvImsicInterface>(obj)->read_irq_file(id, offset);
        }
        static uint64 read_and_write_irq_file(conf_object_t *obj, riscv_imsic_file_id_t id, uint32 offset, uint64 new_value, uint64 mask) {
            return detail::get_interface<RiscvImsicInterface>(obj)->read_and_write_irq_file(id, offset, new_value, mask);
        }
        static uint64 read_xtopei(conf_object_t *obj, riscv_imsic_file_id_t id) {
            return detail::get_interface<RiscvImsicInterface>(obj)->read_xtopei(id);
        }
        static uint64 read_and_write_xtopei(conf_object_t *obj, riscv_imsic_file_id_t id, uint64 value, uint64 mask) {
            return detail::get_interface<RiscvImsicInterface>(obj)->read_and_write_xtopei(id, value, mask);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvImsicInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint32 num_guest_files() const {
            return iface_->num_guest_files(obj_);
        }
        uint64 read_irq_file(riscv_imsic_file_id_t id, uint32 offset) const {
            return iface_->read_irq_file(obj_, id, offset);
        }
        uint64 read_and_write_irq_file(riscv_imsic_file_id_t id, uint32 offset, uint64 new_value, uint64 mask) const {
            return iface_->read_and_write_irq_file(obj_, id, offset, new_value, mask);
        }
        uint64 read_xtopei(riscv_imsic_file_id_t id) const {
            return iface_->read_xtopei(obj_, id);
        }
        uint64 read_and_write_xtopei(riscv_imsic_file_id_t id, uint64 value, uint64 mask) const {
            return iface_->read_and_write_xtopei(obj_, id, value, mask);
        }

        const RiscvImsicInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvImsicInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_IMSIC_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvImsicInterface::ctype funcs {
                FromC::num_guest_files,
                FromC::read_irq_file,
                FromC::read_and_write_irq_file,
                FromC::read_xtopei,
                FromC::read_and_write_xtopei,
            };
            return &funcs;
        }
    };
};

class RiscvSignalSgeipInterface {
  public:
    using ctype = riscv_signal_sgeip_interface_t;

    // Function override and implemented by user
    virtual void signal_raise(uint64 vgein) = 0;
    virtual void signal_lower(uint64 vgein) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void signal_raise(conf_object_t *obj, uint64 vgein) {
            detail::get_interface<RiscvSignalSgeipInterface>(obj)->signal_raise(vgein);
        }
        static void signal_lower(conf_object_t *obj, uint64 vgein) {
            detail::get_interface<RiscvSignalSgeipInterface>(obj)->signal_lower(vgein);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvSignalSgeipInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void signal_raise(uint64 vgein) const {
            iface_->signal_raise(obj_, vgein);
        }
        void signal_lower(uint64 vgein) const {
            iface_->signal_lower(obj_, vgein);
        }

        const RiscvSignalSgeipInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvSignalSgeipInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_SIGNAL_SGEIP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvSignalSgeipInterface::ctype funcs {
                FromC::signal_raise,
                FromC::signal_lower,
            };
            return &funcs;
        }
    };
};

class RiscvClicInterruptInterface {
  public:
    using ctype = riscv_clic_interrupt_interface_t;

    // Function override and implemented by user
    virtual void set_active_interrupt(uint64 id, uint64 level, riscv_vectoring_mode_t vect_mode, riscv_cpu_mode_t cpu_mode) = 0;
    virtual void clear_interrupt() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void set_active_interrupt(conf_object_t *obj, uint64 id, uint64 level, riscv_vectoring_mode_t vect_mode, riscv_cpu_mode_t cpu_mode) {
            detail::get_interface<RiscvClicInterruptInterface>(obj)->set_active_interrupt(id, level, vect_mode, cpu_mode);
        }
        static void clear_interrupt(conf_object_t *obj) {
            detail::get_interface<RiscvClicInterruptInterface>(obj)->clear_interrupt();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvClicInterruptInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void set_active_interrupt(uint64 id, uint64 level, riscv_vectoring_mode_t vect_mode, riscv_cpu_mode_t cpu_mode) const {
            iface_->set_active_interrupt(obj_, id, level, vect_mode, cpu_mode);
        }
        void clear_interrupt() const {
            iface_->clear_interrupt(obj_);
        }

        const RiscvClicInterruptInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvClicInterruptInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_CLIC_INTERRUPT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvClicInterruptInterface::ctype funcs {
                FromC::set_active_interrupt,
                FromC::clear_interrupt,
            };
            return &funcs;
        }
    };
};

class RiscvClicInterface {
  public:
    using ctype = riscv_clic_interface_t;

    // Function override and implemented by user
    virtual void acknowledge_interrupt(uint64 id) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void acknowledge_interrupt(conf_object_t *obj, uint64 id) {
            detail::get_interface<RiscvClicInterface>(obj)->acknowledge_interrupt(id);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const RiscvClicInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void acknowledge_interrupt(uint64 id) const {
            iface_->acknowledge_interrupt(obj_, id);
        }

        const RiscvClicInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const RiscvClicInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return RISCV_CLIC_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr RiscvClicInterface::ctype funcs {
                FromC::acknowledge_interrupt,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
