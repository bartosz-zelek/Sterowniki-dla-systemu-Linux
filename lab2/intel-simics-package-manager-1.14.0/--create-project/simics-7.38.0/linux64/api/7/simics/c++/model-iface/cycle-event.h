// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_CYCLE_EVENT_H
#define SIMICS_CPP_MODEL_IFACE_CYCLE_EVENT_H

#include "simics/model-iface/cycle-event.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class CycleEventInterface {
  public:
    using ctype = cycle_event_interface_t;

    // Function override and implemented by user
    virtual cycles_t cycles() = 0;
    virtual void post(const event_class_t *evclass, conf_object_t *ev_obj, cycles_t cycles, lang_void *param) = 0;
    virtual void cancel(const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) = 0;
    virtual cycles_t lookup(const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) = 0;
    virtual attr_value_t events() = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static cycles_t cycles(conf_object_t *obj) {
            return detail::get_interface<CycleEventInterface>(obj)->cycles();
        }
        static void post(conf_object_t *obj, const event_class_t *evclass, conf_object_t *ev_obj, cycles_t cycles, lang_void *param) {
            detail::get_interface<CycleEventInterface>(obj)->post(evclass, ev_obj, cycles, param);
        }
        static void cancel(conf_object_t *obj, const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) {
            detail::get_interface<CycleEventInterface>(obj)->cancel(evclass, ev_obj, pred, match_data);
        }
        static cycles_t lookup(conf_object_t *obj, const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) {
            return detail::get_interface<CycleEventInterface>(obj)->lookup(evclass, ev_obj, pred, match_data);
        }
        static attr_value_t events(conf_object_t *obj) {
            return detail::get_interface<CycleEventInterface>(obj)->events();
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CycleEventInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        cycles_t cycles() const {
            return iface_->cycles(obj_);
        }
        void post(const event_class_t *evclass, conf_object_t *ev_obj, cycles_t cycles, lang_void *param) const {
            iface_->post(obj_, evclass, ev_obj, cycles, param);
        }
        void cancel(const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) const {
            iface_->cancel(obj_, evclass, ev_obj, pred, match_data);
        }
        cycles_t lookup(const event_class_t *evclass, conf_object_t *ev_obj, int (*pred)(lang_void *data, lang_void *match_data), lang_void *match_data) const {
            return iface_->lookup(obj_, evclass, ev_obj, pred, match_data);
        }
        attr_value_t events() const {
            return iface_->events(obj_);
        }

        const CycleEventInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CycleEventInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CYCLE_EVENT_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CycleEventInterface::ctype funcs {
                FromC::cycles,
                FromC::post,
                FromC::cancel,
                FromC::lookup,
                FromC::events,
            };
            return &funcs;
        }
    };
};

class CycleControlInterface {
  public:
    using ctype = cycle_control_interface_t;

    // Function override and implemented by user
    virtual void stop() = 0;
    virtual void start() = 0;
    virtual void set_cycle_count(cycles_t cycle_count) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static void stop(conf_object_t *obj) {
            detail::get_interface<CycleControlInterface>(obj)->stop();
        }
        static void start(conf_object_t *obj) {
            detail::get_interface<CycleControlInterface>(obj)->start();
        }
        static void set_cycle_count(conf_object_t *obj, cycles_t cycle_count) {
            detail::get_interface<CycleControlInterface>(obj)->set_cycle_count(cycle_count);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const CycleControlInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        void stop() const {
            iface_->stop(obj_);
        }
        void start() const {
            iface_->start(obj_);
        }
        void set_cycle_count(cycles_t cycle_count) const {
            iface_->set_cycle_count(obj_, cycle_count);
        }

        const CycleControlInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const CycleControlInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CYCLE_CONTROL_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr CycleControlInterface::ctype funcs {
                FromC::stop,
                FromC::start,
                FromC::set_cycle_count,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
