// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_MODEL_IFACE_CONCURRENCY_H
#define SIMICS_CPP_MODEL_IFACE_CONCURRENCY_H

#include "simics/model-iface/concurrency.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class ConcurrencyModeInterface {
  public:
    using ctype = concurrency_mode_interface_t;

    // Function override and implemented by user
    virtual concurrency_mode_t supported_modes() = 0;
    virtual concurrency_mode_t current_mode() = 0;
    virtual void switch_mode(concurrency_mode_t mode) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static concurrency_mode_t supported_modes(conf_object_t *obj) {
            return detail::get_interface<ConcurrencyModeInterface>(obj)->supported_modes();
        }
        static concurrency_mode_t current_mode(conf_object_t *obj) {
            return detail::get_interface<ConcurrencyModeInterface>(obj)->current_mode();
        }
        static void switch_mode(conf_object_t *obj, concurrency_mode_t mode) {
            detail::get_interface<ConcurrencyModeInterface>(obj)->switch_mode(mode);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ConcurrencyModeInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        concurrency_mode_t supported_modes() const {
            return iface_->supported_modes(obj_);
        }
        concurrency_mode_t current_mode() const {
            return iface_->current_mode(obj_);
        }
        void switch_mode(concurrency_mode_t mode) const {
            iface_->switch_mode(obj_, mode);
        }

        const ConcurrencyModeInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ConcurrencyModeInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CONCURRENCY_MODE_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ConcurrencyModeInterface::ctype funcs {
                FromC::supported_modes,
                FromC::current_mode,
                FromC::switch_mode,
            };
            return &funcs;
        }
    };
};

class ConcurrencyGroupInterface {
  public:
    using ctype = concurrency_group_interface_t;

    // Function override and implemented by user
    virtual attr_value_t serialized_memory_group(unsigned group_index) = 0;
    virtual attr_value_t execution_group(unsigned group_index) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static attr_value_t serialized_memory_group(conf_object_t *obj, unsigned group_index) {
            return detail::get_interface<ConcurrencyGroupInterface>(obj)->serialized_memory_group(group_index);
        }
        static attr_value_t execution_group(conf_object_t *obj, unsigned group_index) {
            return detail::get_interface<ConcurrencyGroupInterface>(obj)->execution_group(group_index);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const ConcurrencyGroupInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        attr_value_t serialized_memory_group(unsigned group_index) const {
            return iface_->serialized_memory_group(obj_, group_index);
        }
        attr_value_t execution_group(unsigned group_index) const {
            return iface_->execution_group(obj_, group_index);
        }

        const ConcurrencyGroupInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const ConcurrencyGroupInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return CONCURRENCY_GROUP_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr ConcurrencyGroupInterface::ctype funcs {
                FromC::serialized_memory_group,
                FromC::execution_group,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
