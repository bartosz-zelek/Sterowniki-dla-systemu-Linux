// -*- mode: C++; c-file-style: "virtutech-c++" -*-

/*
  Â© 2025 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

// This file is generated by the script bin/gen-cc-interface

#ifndef SIMICS_CPP_DEVS_HPI_INTERFACE_H
#define SIMICS_CPP_DEVS_HPI_INTERFACE_H

#include "simics/devs/hpi-interface.h"

#include <simics/detail/conf-object-util.h>  // get_interface
#include <simics/iface/interface-info.h>

namespace simics {
namespace iface {

class HpiInterface {
  public:
    using ctype = hpi_interface_t;

    // Function override and implemented by user
    virtual uint32 read_hpic() = 0;
    virtual void write_hpic(uint32 value) = 0;
    virtual uint32 read_hpia() = 0;
    virtual void write_hpia(uint32 value) = 0;
    virtual uint32 read_hpid(int autoincrement) = 0;
    virtual void write_hpid(uint32 value, int autoincrement) = 0;

    // Function convert C interface call to C++ interface call
    class FromC {
      public:
        static uint32 read_hpic(conf_object_t *obj) {
            return detail::get_interface<HpiInterface>(obj)->read_hpic();
        }
        static void write_hpic(conf_object_t *obj, uint32 value) {
            detail::get_interface<HpiInterface>(obj)->write_hpic(value);
        }
        static uint32 read_hpia(conf_object_t *obj) {
            return detail::get_interface<HpiInterface>(obj)->read_hpia();
        }
        static void write_hpia(conf_object_t *obj, uint32 value) {
            detail::get_interface<HpiInterface>(obj)->write_hpia(value);
        }
        static uint32 read_hpid(conf_object_t *obj, int autoincrement) {
            return detail::get_interface<HpiInterface>(obj)->read_hpid(autoincrement);
        }
        static void write_hpid(conf_object_t *obj, uint32 value, int autoincrement) {
            detail::get_interface<HpiInterface>(obj)->write_hpid(value, autoincrement);
        }
    };

    // Function convert C++ interface call to C interface call
    class ToC {
      public:
        ToC() : obj_(nullptr), iface_(nullptr) {}
        ToC(conf_object_t *obj, const HpiInterface::ctype *iface)
            : obj_(obj), iface_(iface) {}

        uint32 read_hpic() const {
            return iface_->read_hpic(obj_);
        }
        void write_hpic(uint32 value) const {
            iface_->write_hpic(obj_, value);
        }
        uint32 read_hpia() const {
            return iface_->read_hpia(obj_);
        }
        void write_hpia(uint32 value) const {
            iface_->write_hpia(obj_, value);
        }
        uint32 read_hpid(int autoincrement) const {
            return iface_->read_hpid(obj_, autoincrement);
        }
        void write_hpid(uint32 value, int autoincrement) const {
            iface_->write_hpid(obj_, value, autoincrement);
        }

        const HpiInterface::ctype *get_iface() const {
            return iface_;
        }

      private:
        conf_object_t *obj_;
        const HpiInterface::ctype *iface_;
    };

    class Info : public InterfaceInfo {
      public:
        // InterfaceInfo
        std::string name() const override { return HPI_INTERFACE; }
        const interface_t *cstruct() const override {
            static constexpr HpiInterface::ctype funcs {
                FromC::read_hpic,
                FromC::write_hpic,
                FromC::read_hpia,
                FromC::write_hpia,
                FromC::read_hpid,
                FromC::write_hpid,
            };
            return &funcs;
        }
    };
};

}  // namespace iface
}  // namespace simics

#endif
