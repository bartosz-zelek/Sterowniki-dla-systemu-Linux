# Â© 2021 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.


# Implements table specific commands


from . import table
from . import exported_functions
from . import border
from . import common

from cli import (
    arg,
    doc,
    filename_t,
    int_t,
    flag_t,
    string_set_t,
    str_t,
    get_completions,
    new_command,
    new_tech_preview_command,
    new_unsupported_command,
    )


class TableArg:
    __slots__ = ('arg', 'doc')
    def __init__(self, arg, doc):
        self.arg = arg
        self.doc = doc

# Default Table CLI arguments. Note that all new_table_command() commands
# will get these arguments by default. Name them carefully to avoid clashes
# with the arguments specified by the commands themselves.

class TableArguments:
    __slots__ = ('all_args')
    def __init__(self, column_expander):
        self.all_args = [
            TableArg(
                arg(int_t, "max", "?", 40),
                "The <arg>max</arg> argument selects how many rows that should"
                " be printed, default is 40. Use max = 0 to get the entire"
                " table."),

            TableArg(
                arg(int_t, "max-table-width", "?", 0),
                "The <arg>max-table-width</arg> argument specifies how many"
                " characters the table width is allowed to be. Default is zero,"
                " which means that Simics will get the current width of the"
                " terminal where the command is executed. Tables which"
                " initially become wider than this, will be shrunk down by"
                " splitting cells to  multiple lines."),

            TableArg(
                arg(str_t, "sort-on-column", "?", None,
                    expander = column_expander),
                "The <arg>sort-on-column</arg> argument allows the table to be"
                " sorted on certain column names, not all columns are allowed to"
                " be sorted on. If <arg>sort-on-column</arg> is not specified,"
                " the table may be sorted on a the column it finds most"
                " interesting or present the table unsorted."),

            TableArg(
                arg(string_set_t(("ascending", "descending", "default")),
                    "sort-order", "?", "default"),
                "The <arg>sort-order</arg> argument allows the sort-order to be"
                " changed, so either high values are listed first ('descending')"
                " or low values are listed first ('ascending'). If not selected,"
                " the default order is selected by the column which is being"
                " sorted upon."),

            TableArg(
                arg(int_t, "float-decimals", "?", None),
                " The <arg>float-decimals</arg> argument can be used to print"
                " out more or less number of decimals on the floating point"
                " numbers in the table."),

            TableArg(
                arg(string_set_t(border.border_styles), "border-style", "?",
                    None),
                "The <arg>border-style</arg> argument specifies how the borders"
                " for the table should look like. Possible values are"
                " <tt>borderless</tt>, <tt>ascii</tt>, <tt>thin</tt> and"
                " <tt>thick</tt>. Default is 'thin'."),

            TableArg(
                arg(flag_t, "-show-all-columns"),
                "The <tt>-show-all-columns</tt> flag possibly displays some"
                " hidden columns. Some autogenerated columns associated with"
                " another column are normally only displayed if that column is"
                " used for sorting. This flag enables all columns to be showed"
                " in the same table."),

            TableArg(
                arg(flag_t, "-ignore-column-widths"),
                "The <tt>-ignore-column-widths</tt> flag formats the table"
                " columns to be the max widths of the contents in the displayed"
                " rows. Consequently ignoring any explicitly set widths set in"
                " the columns."),

            TableArg(
                arg(flag_t, "-verbose"),
                "The <tt>-verbose</tt> flag displays additional information of"
                " the table such as a description on what each column"
                " represents."),

            TableArg(
                arg(flag_t, "-no-row-column"),
                "By default, an additional 'row' column is added to the far"
                " left, displaying each row's number. This can be suppressed"
                " with the <tt>-no-row-column</tt> flag. Note that footers uses"
                " the row column for the footer-names. Consequently, if the row"
                " column is removed, and footers are printed, another empty"
                " column is created instead."),

            TableArg(
                arg(flag_t, "-no-footers"),
                "Any columns have data which should be calculated"
                " and displayed in the footer, this will be printed by default."
                " The footer can be suppressed with the <tt>-no-footers</tt>"
                " flag.")
    ]

    # Return the cli.arg object for all table-arguments
    def get_args(self):
        return [a.arg for a in self.all_args]

    # Return the cli documentation string for all table-arguments
    def get_doc(self):
        all_docs = "\n\n".join([a.doc for a in self.all_args])
        return "Below are the generic table arguments.\n" + all_docs

    # Return the default arguments of all table arguments,
    # possibly override some with the values in the set_dict.
    def get_default_values(self, set_dict):
        d = set_dict.copy()
        dl = []
        for a in self.all_args:
            name = a.arg.name
            if name in d:
                dl.append(d[name])
                d.pop(name)
            else:
                dl.append(a.arg.default)

        if d != {}:  # The dict should be empty now
            raise common.TableException(
                f"default_table_args: incorrect table_arguments: {d}")
        return tuple(dl)

    # Return a dict of {arg_name: arg_value}
    def unpack(self, arg_values):
        return {a.arg.name: val
                for (a, val) in zip(self.all_args, arg_values)}


def _sortable_column_expander(s, obj):
    # Create a temporary table to get the headings
    properties = obj.iface.table.properties()
    tbl = table.Table(properties, [])
    avail = tbl.sortable_columns()
    return get_completions(s, avail)


_table_args_obj = TableArguments(_sortable_column_expander)
_default_table_cli_doc = _table_args_obj.get_doc()
_default_table_cli_args = _table_args_obj.get_args()

# From a tuple of argument values, matching the order of the table-arguments
# return a dict { cli_arg_name: arg_value }
def unpack_arguments(arg_values):
    return _table_args_obj.unpack(arg_values)

# Exported
@doc('get default table arguments',
     module = 'table',
     see_also = 'table.new_table_command, table.get')
def default_table_args(set_dict={}):
    """Return the tuple representing the default table arguments. The
    set_dict can contain key/value elements overriding the default
    value. The key is the same as the name of the table argument in
    the command."""
    return _table_args_obj.get_default_values(set_dict)

# Exported
@doc('retrieve the value for a table command argument',
     module = 'table')
def get_table_arg_value(arg, table_values):
    """Allows the user command to look at a certain named parameter to get
    its value. For example, to internally make use of the
    <tt>-verbose</tt> flag.
    The <arg>arg</arg> argument specifies the argument to fetch the
    value of. The <arg>table_values</arg> argument is the tuple of table
    arguments received in the <fun>table.new_table_command()</fun>
    callback function."""
    for (i, a) in enumerate(_default_table_cli_args):
        if a.name == arg:
            return table_values[i]


# Exported!
@doc('register a new command which prints a table',
     module = 'table',
     see_also = 'cli.new_command, table.show')
def new_table_command(command_name,
                      cmd_func,
                      args = None,
                      doc = "",
                      sortable_columns = None,
                      **kwargs):
    """Register a specific command for printing the table, with
    all the command arguments from the <cmd class="table">print-table</cmd>
    commands, but extendable with personalized argument handling.
    For example, a dedicated command could print out additional data, or
    filter out certain rows from the table and only print those.

    All arguments here are similar to the <fun>cli.new_command()</fun> function
    except the <arg>sortable_columns</arg> argument.

    The <arg>cmd_func</arg> function will be called with additional table
    argument last. The function should use the <fun>table.show()</fun>
    to produce the table output according to the user arguments.

    If the <arg>sortable_columns</arg> argument is supplied, it should contain
    a list of the column namnes which can be used for sorting. This is
    only used for the expander function. If this argument is not set, the
    default expander will try to use the table interface to retrieve the
    column names."""

    _new_table_helper(new_command,
                      command_name,
                      cmd_func,
                      args,
                      doc,
                      sortable_columns,
                      **kwargs)

def _new_table_helper(call_cmd,
                      command_name,
                      cmd_func,
                      args,
                      doc,
                      sortable_columns,
                      feature = None,
                      **kwargs):
    # Closure function!
    def cmd_col_expander(s, obj):
        return get_completions(s, sortable_columns)

    if args == None:
        args = []

    if sortable_columns:
        expander = cmd_col_expander
    else:
        expander = _sortable_column_expander

    tbl_args = TableArguments(expander)
    args = args + tbl_args.get_args()
    doc = doc + tbl_args.get_doc()
    if feature:
        call_cmd(command_name, feature, cmd_func, args, doc = doc, **kwargs)
    else:
        call_cmd(command_name, cmd_func, args, doc = doc, **kwargs)

def new_unsupported_table_command(name, feature, fun, args = [], doc = "",
                                  sortable_columns = None, **kwargs):
    """Define a new unsupported CLI table command."""
    _new_table_helper(new_unsupported_command, name, fun, args, doc,
                      sortable_columns, feature, **kwargs)

def new_tech_preview_table_command(name, feature, fun, args=[], doc="",
                                   sortable_columns = None, **kwargs):
    """Define a new tech preview CLI table command."""
    _new_table_helper(new_tech_preview_command, name, fun, args, doc,
                      sortable_columns, feature, **kwargs)

def _print_table_cmd(obj, *args):
    properties = obj.iface.table.properties()
    data = obj.iface.table.data()
    exported_functions.show(properties, data, *args)

new_table_command("print-table", _print_table_cmd,
                  args = [],
                  iface = "table",
                  short = "print table",
                  see_also = ["<table>.export-table-csv"],
                  doc = ('Prints the contents of a table on screen.\n' +
                         _default_table_cli_doc))

def _export_table_csv_cmd(obj, filename):
    properties = obj.iface.table.properties()
    data = obj.iface.table.data()
    tbl = table.Table(properties, data)
    tbl.csv_export(filename)

new_command("export-table-csv", _export_table_csv_cmd,
            [arg(filename_t(), 'file')],
            iface = "table",
            short = "print table to file in csv format",
            see_also = ["<table>.print-table"],
            doc = '''
            Print a table to a file (specified with the
            <arg>file</arg> argument) in csv format (comma separated
            values). This file can be used to process the data by
            other tools, such as spreadsheet programs.
            Only the raw-data of the columns is printed.
            The data may be sorted by the default column,
            specified by the table.''')
