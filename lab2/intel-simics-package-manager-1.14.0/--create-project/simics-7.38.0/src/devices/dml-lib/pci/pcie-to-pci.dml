/*
  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

import "pci/bridge.dml";

param pcie_device = true;

#if (dev.simics_api_version != "6") {
    error "This library is deprecated, please use the new library dml-lib/pcie/*";
}

// Compute the map of the PCI configuration space of the secondary bus to put it
// in the primary bus configuration space
inline method compute_conf_space_window(inline map, inline sec, inline sub) default {
    map->base = sec << 20;
    map->start = sec << 20;
    map->length = (1 << 20) * (sub - sec + 1);
}

implement pci_express {
    method send_message(conf_object_t *src, pcie_message_type_t type, 
                        byte_string_t payload) -> (int) default {
        local int h;
        // send message to implement
        h = 0;
        return h;
    }
}

// register a translate method to convert the access from PCIe to PCI
implement translate {
    method translate(generic_transaction_t *memop, map_info_t mapinfo) 
        -> (conf_object_t *) {
        local conf_object_t *ret;
        local uint64 pa = SIM_get_mem_op_physical_address(memop);

        // this function is called for all bridge mappings, but we need only to
        // translate the configuration accesses
        if (mapinfo.function == DOWNSTREAM_CONF) {
            SIM_set_mem_op_physical_address(memop, (pa[27:12] << 8) | pa[7:0]);
            log info, 3, PCI_bridge:
            "Converting PCIE configuration address %#x to PCI configuration address %#x",
                pa, SIM_get_mem_op_physical_address(memop);
        }
        ret = NULL;
        return ret;
    }
}

// Override default map_upstream. If we have the upstream_target set, we map
// ourselves as target (not as translator) and forward the access to the
// pci_upstream interface. This allows us to bridge a memory operation and
// convert it into an upstream->operation() call instead needed by some PCIe
// implementations where upstream/downstream mappings have been separated.
method map_upstream(addr_space_t space, uint64 base, uint64 length,
                    int function) {
    local conf_object_t *tgt;
    local map_info_t info;

    // If the upstream target has not been set, use the old translator style
    // mapping directly towards the PCIe space.
    if (upstream_target.obj == NULL) {
        try {
            default(space, base, length, function);
        } catch {
            log error: "Unexpected error while mapping upstream";
        }
        return;
    }

    memset(&info, 0, sizeoftype(map_info_t));
    info.base = base;
    info.start = base;
    info.length = length;
    info.function = function;

    switch (function) {
    case UPSTREAM_IO_1:
    case UPSTREAM_IO_2:
        info.priority = io_up.priority;
        info.align_size = io_up.align_size;
        info.reverse_endian = cast(io_up.endian, swap_mode_t);
        break;
    case UPSTREAM_MEM_1:
    case UPSTREAM_MEM_2:
    case UPSTREAM_MEM_3:
        info.priority = mem_up.priority;
        info.align_size = mem_up.align_size;
        info.reverse_endian = cast(mem_up.endian, swap_mode_t);
        break;
    default:
        log error, 1, PCI_bridge:
            "Unknown function in pci-bridge::map_downstream()";
        return;
    }

    secondary_bus.pci_bus.add_map(dev.obj, space, NULL, info);

    log info, 3, PCI_bridge:
        "New upstream %s space mapping (function %d): base = 0x%llx, length = 0x%llx",
        space == Sim_Addr_Space_IO ? "I/O" : "memory",
        function, base, length;
}


template outbound_window is bank {
    method access(generic_transaction_t *mop, uint64 offset, uint64 size) throws {
        if (upstream_target.obj == NULL) {
            if (SIM_mem_op_is_read(mop))
                SIM_set_mem_op_value_le(mop, 0xffffffff);
            log error, 2, PCI_bridge:
                "Unable to forward transaction upstream across the bridge,"
                + " as bridge is not connected to an upstream target";
            return;
        }

        local exception_type_t ex;
        // Forward the mem-op up towards the PCIe upstream side
        ex = upstream_target.pci_upstream.operation(mop, space);
        if (ex != Sim_PE_No_Exception)
            throw;
    }
}

#if (!dml_1_2) {
    bank outbound_io1 is function_mapped_bank;
    bank outbound_io2 is function_mapped_bank;
    bank outbound_mem1 is function_mapped_bank;
    bank outbound_mem2 is function_mapped_bank;
    bank outbound_mem3 is function_mapped_bank;
}

bank outbound_io1 {
    is outbound_window;
    param space = Sim_Addr_Space_IO;
    param function = UPSTREAM_IO_1;
}

bank outbound_io2 {
    is outbound_window;
    param space = Sim_Addr_Space_IO;
    param function = UPSTREAM_IO_2;
}

bank outbound_mem1 {
    is outbound_window;
    param space = Sim_Addr_Space_Memory;
    param function = UPSTREAM_MEM_1;
}

bank outbound_mem2 {
    is outbound_window;
    param space = Sim_Addr_Space_Memory;
    param function = UPSTREAM_MEM_2;
}

bank outbound_mem3 {
    is outbound_window;
    param space = Sim_Addr_Space_Memory;
    param function = UPSTREAM_MEM_3;
}
