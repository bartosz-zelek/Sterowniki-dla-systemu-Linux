--- /usr/fmt/core.h	2024-01-10 17:07:07.789896240 +0100
+++ src/devices/c++-api/fmt/fmt/core.h	2024-01-16 12:58:58.112000914 +0100
@@ -344,6 +344,9 @@
 FMT_NORETURN FMT_API void assert_fail(const char* file, int line,
                                       const char* message);
 
+#ifdef __COVERITY__
+#  define FMT_ASSERT(condition, message) assert(condition)
+#endif
 #ifndef FMT_ASSERT
 #  ifdef NDEBUG
 // FMT_ASSERT is not empty to avoid -Wempty-body.
@@ -784,6 +787,7 @@
     -> Container& {
   using base = std::back_insert_iterator<Container>;
   struct accessor : base {
+    // coverity[copy_instead_of_move]
     accessor(base b) : base(b) {}
     using base::container;
   };
@@ -921,6 +925,7 @@
 
 // A buffer that writes to an output iterator when flushed.
 template <typename OutputIt, typename T, typename Traits = buffer_traits>
+// coverity[rule_of_five_violation:SUPPRESS]
 class iterator_buffer final : public Traits, public buffer<T> {
  private:
   OutputIt out_;
@@ -943,6 +948,7 @@
       : Traits(n), buffer<T>(data_, 0, buffer_size), out_(out) {}
   iterator_buffer(iterator_buffer&& other)
       : Traits(other), buffer<T>(data_, 0, buffer_size), out_(other.out_) {}
+  iterator_buffer& operator=(iterator_buffer&&) = delete;
   ~iterator_buffer() { flush(); }
 
   auto out() -> OutputIt {
@@ -1963,6 +1969,7 @@
 
   /** Returns the argument with the specified id. */
   FMT_CONSTEXPR auto get(int id) const -> format_arg {
+    /* coverity[var_decl] arg.value_ depends on arg.type_ */
     format_arg arg;
     if (!is_packed()) {
       if (id < max_size()) arg = args_[id];
--- /usr/fmt/format.h	2024-01-10 17:07:01.353911507 +0100
+++ src/devices/c++-api/fmt/fmt/format.h	2024-01-16 13:01:46.856766988 +0100
@@ -880,6 +880,7 @@
  */
 template <typename T, size_t SIZE = inline_buffer_size,
           typename Allocator = std::allocator<T>>
+// coverity[rule_of_five_violation:SUPPRESS]
 class basic_memory_buffer final : public detail::buffer<T> {
  private:
   T store_[SIZE];
