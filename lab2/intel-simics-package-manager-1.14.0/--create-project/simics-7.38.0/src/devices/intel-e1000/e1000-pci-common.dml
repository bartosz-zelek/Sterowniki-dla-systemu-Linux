/*
  e1000-pci-common.dml

  Â© 2013 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

bank io_mapped {
    parameter documentation =
        "I/O-Mapped Access to Internal Registers and Memory";
    parameter register_size = 4;
    parameter function = 1;

    // Register used to access memory mapped registers and memory.
    // This register contains the address.
    register addr @ 0x0 "Address Register" {
        method write(value) {
            $this = value & 0xFFFFF;
        }
    }

    // Register used to access memory mapped registers and memory.
    // This register contains the data.
    register data @ 0x4 "Data Register" {
        method read() -> (value) {
            local generic_transaction_t memop;
            local bool success;
            local uint64 val;

            SIM_set_mem_op_type(&memop, Sim_Trans_Load);
            call $csr.read_access(&memop, $addr, 4) -> (success, val);
            if (success)
                value = val & 0xFFFFFFFF;
            else
                value = 0;
            $this = value;
        }

        method write(value) {
            local generic_transaction_t memop;
            local bool success;
            local uint64 val = value;

            SIM_set_mem_op_type(&memop, Sim_Trans_Store);
            call $csr.write_access(&memop, $addr, 4, val) -> (success);
            $this = value;
        }
    }
    register rsv[6] @ 0x8 + $i * 4 "Reserved Registers" {
        method write(value) { /* do nothing */ }
	method read() -> (value) { value = 0xFFFF; }
    }
}
