/*
  ich-mac-intr.dml

  Â© 2012 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

import "simics/devs/interrupt.dml";

constant INTR_ASSERTED = 1 << 31; // Any interrupt is active
constant EINT_OTHER_BIT = 31;   // Legacy interrupt is active

/* This will allow ICS to trigger even reserved interrupts. However, this
   seems to be how the real HW works. */
constant INTR_MASK = 0x7ffffff;

attribute interrupt_raised {
    parameter documentation = "Interrupt Output State";
    parameter allocate_type = "bool";
}

attribute legacy_interrupt_raised {
    parameter documentation = "Legacy Interrupt Output State";
    parameter allocate_type = "bool";
}

attribute ext_interrupt_raised {
    parameter documentation = "Extended Interrupt Output State";
    parameter allocate_type = "bool";
}

bank csr {
    /* --------------------------------------------------------------
       INTERRUPT REGISTERS
       -------------------------------------------------------------- */
    register icr @ 0x000c0 "Interrupt Cause Read";
    register itr @ 0x000c4 "Interrupt Throttling Rate";
    register ics @ 0x000c8 "Interrupt Cause Set";
    register ims @ 0x000d0 "Interrupt Mask Set/Read";
    register imc @ 0x000d8 "Interrupt Mask Clear";
    register iam @ 0x000e0 "Interrupt Acknowledge Auto Mask";

    if($HAS_EXTENDED_INTERRUPTS) {
        register eitr[$EITR_CNT] size 4 @ 0x01680 + $i*4 "Interrupt Throttle";
        register ivar[$IVAR_CNT] size 1 @ 0x01700 + $i "Vector allocation";
        register eicr @ 0x01580 "Extended Interrupt Cause";
        register eics @ 0x01520 "Extended Interrupt Cause Set";
        register eims @ 0x01524 "Extended Interrupt Mask Set/Read";

        register gpie @ 0x01514 "General Purpose Interrupt Enable" {
            is read_write;
            field pba_support   [31]   "PBA support";
            field eiame         [30]   "Extended Interrupt Auto Mask Enable";
            field ll_interval   [11:7] "LLI credit increment rate";
            field multiple_msix [4]    "Multi- or single MSI-X vectors";
            field nsicr         [0]    "Non selective interrupt clear on read";
        }
    }

    register icr {
        method write(value) {
            log "info", 4: "%s written val = 0x%08x", $qname, value;
            if($HAS_INTERRUPT_AUTOMASKING) {
                if ($ctrl_ext.iame == 1) {
                    // Copy auto mask reg to mask clear reg to clear the mask
                    inline $imc.write($iam);
                }
            }

	    if($this != 0){
		value &= INTR_MASK;
		$this &= ~value;
		if($this == 0){
                    call $update_interrupt();
                }
            }
        }

        /* Reading from the ICR register has different effects
           1) Interrupt Mask register equals 0x0000 (mask all):
		ICR content is cleared.
           2) Interrupt was asserted and auto mask is active:
		ICR content is cleared and IAM is written to IMC.
           3) Interrupt was not asserted:
		Read has no side effect.
	*/
        method read() -> (value) {
            value = $this & INTR_MASK;

            if ($interrupt_raised)
                value |= INTR_ASSERTED;

            if ($ims == 0) {
		log "info", 4: "clearing %s on read (IMS is zero)", $qname;
                $this = 0;
            } else if ($interrupt_raised) {
                /* Documentation is not very clear if ICR is always cleared on
                   read when an interrupt is raised or if auto-masking also has
                   to be enabled. Windows expects the former for ICH10. */
                log "info", 4: "clearing %s on READ (irq raised)", $qname;
                $this = 0;

                if ($HAS_INTERRUPT_AUTOMASKING && $ctrl_ext.iame == 1) {
                    // Copy auto mask reg to mask clear reg
                    inline $imc.write($iam);
                }
            } else {
                log "info", 4: "not clearing %s on READ", $qname;
            }

            call $update_interrupt();
        }
    }

    method raise_legacy_interrupt(uint32 intr) default {
        $icr |= (intr & INTR_MASK);
        call $update_legacy_interrupt();
    }

    method raise_extended_interrupt(uint32 intr) default {
        local bool is_rx_irq;
        local bool is_tx_irq;
        local int ivar_idx;
        local int irq_bit;

        /* Find out if the cause should be reflected in the extended
           registers */
        if((intr & INTR_TXDW) != 0)
            is_tx_irq = true;
        if((intr & INTR_RXDMT0) != 0)
            is_rx_irq = true;

        if(is_rx_irq) {
            /* Find out which IVAR register to use */
            if($rx_queue_nbr < 7)
                ivar_idx = $rx_queue_nbr * 4 + 1;
            else
                ivar_idx = ($rx_queue_nbr - 8) * 4 + 3;

            irq_bit = 1 << $ivar[ivar_idx].alloc;

            if($ivar[ivar_idx].valid) {
                $eicr |= irq_bit;
            } else {
                if($gpie.multiple_msix == 1) {
                    log "spec_violation", 1: "rx interrupt on queue %d without a valid IVAR entry in IVAR[%d]", $rx_queue_nbr, ivar_idx;
                }
            }
        }

        if(is_tx_irq) {
            /* Find out which IVAR register to use */
            if($tx_queue_nbr < 7)
                ivar_idx = $tx_queue_nbr * 4 + 1;
            else
                ivar_idx = ($tx_queue_nbr - 8) * 4 + 3;

            irq_bit = 1 << $ivar[ivar_idx].alloc;

            if($ivar[ivar_idx].valid) {
                $eicr |= irq_bit;
            } else {
                if($gpie.multiple_msix == 1) {
                    log "spec_violation", 1: "tx interrupt on queue %d without a valid IVAR entry in IVAR[%d]", $tx_queue_nbr, ivar_idx;
                }
            }
        }

        call $update_extended_interrupt();
    }

    method raise_interrupt(uint32 intr) default {
        call $raise_legacy_interrupt(intr);
        if($HAS_EXTENDED_INTERRUPTS) {
            call $raise_extended_interrupt(intr);
        }
        call $update_interrupt();
    }

    method signal_irq(bool active) {
        if(active) {
            if($pci_config.msi_control.msie){
                local exception_type_t ex;
                local uint64 msi_address;

                // note there is need to check if 64-bit MSI is supported

                msi_address = $pci_config.msi_upper_address;
                msi_address <<= 32;
                msi_address |= $pci_config.msi_address;

                log "info", 4: "%s sending MSI to %lx", $qname, msi_address;

                call $pci_value_to_memory(
                    Sim_Addr_Space_Memory,
                    $pci_config.msi_data,
                    msi_address,
                    $pci_config.msi_data.size) -> (ex);
            }else{
                log "info", 4: "%s raising legacy interrupt", $qname;
                inline $pci_config.pci_raise_interrupt();
            }
        } else {
            if(!$pci_config.msi_control.msie){
                log "info", 4: "lower legacy PCI interrupt";
                inline $pci_config.pci_lower_interrupt();
            }
        }
        $interrupt_raised = active;
    }

    method update_interrupt() default {
        local bool new_interrupt_level;

        call $update_legacy_interrupt();
        new_interrupt_level = $legacy_interrupt_raised;

        if($HAS_EXTENDED_INTERRUPTS) {
            $eicr[EINT_OTHER_BIT] = $legacy_interrupt_raised ? 1: 0;
            call $update_extended_interrupt();
            new_interrupt_level = $ext_interrupt_raised;
        }

        if (!new_interrupt_level) {
            /* Lower IRQ if interrupt cause has disappeared */
            if ($interrupt_raised) {
                log "info", 4: "lowering interrupt request level";
                inline $signal_irq(false);
            }
            $interrupt_raised = false;
            return;
        } else {
            /* Raise IRQ if a new interrupt cause is found */
            if(!$interrupt_raised) {
                log "info", 4: "raising interrupt request level";
                inline $signal_irq(true);
            }
            $interrupt_raised = true;
        }
    }

    method update_extended_interrupt() default {
        if (($eims & $eicr) == 0) {
            if($ext_interrupt_raised)
                log "info", 4: "lowering extended interrupt request level";
            $ext_interrupt_raised = false;
        } else {
            if(!$ext_interrupt_raised)
                log "info", 4: "raising extended interrupt request level";
            $ext_interrupt_raised = true;
        }
    }

    method update_legacy_interrupt() default {
	if(($icr & $ims) == 0){
            if($legacy_interrupt_raised)
                log "info", 4: "lowering legacy interrupt request level";
            $legacy_interrupt_raised = false;
            return;
        }

        if($legacy_interrupt_raised){
	    // doing nothing because interrupt is already raised.
            return;
	}

        local bool is_posted;
        inline $intr_interval.posted(NULL) -> (is_posted);
        if (is_posted) {
            log "info", 4: "legacy interrupt not activated, since it is throttled";
            return;
        }

        // start new interrupt throttling timer when raising interrupt
        if ($itr.interval != 0)
            inline $intr_interval.update_interval($itr.interval);

        log "info", 4: "raising legacy interrupt request level";
        $legacy_interrupt_raised = true;
    }

    register itr {
        field interval[15:0] is (read_write) "Minimum inter-interrupt interval" {
            method write(value) {
                log "info", 4: "write 0x%x to csr.itr", value;
                if (value != $this) {
                    $this = value;
                    inline $intr_interval.update_interval(value);
                }
            }
        }
    }
    register ics is (read_write) {
	// Software uses this register to set an interrupt condition.
	// Any bit written with a 1b sets the corresponding interrupt.
	// This results in the corresponding bit being set in the
	// Interrupt Cause Read register. A PCIe interrupt is also
	// generated if one of the bits in this register is set and
	// the corresponding interrupt is enabled via the
	// Interrupt Mask Set/Read register
	// Bits written with 0b are unchanged.
        method write(value) {
            log "info", 4: "write 0x%x to csr.ics", value;
            $icr |= (value & INTR_MASK);
            if ($this[20] == 1) {
                log "unimplemented", 1:
                    "management engine reset interrupt is unimplemented";
            }
            call $update_interrupt();
        }
        /* Undocumented; ICS returns ICR on read, without clearing it.
           Linux driver ixgbe reads it unconditionally. search for
           IXGBE_READ_REG(hw, IXGBE_EICS) */
        method read() -> (value) {
            value = $icr;
        }
    }
    register ims is (read_write) {
        // A particular interrupt can be enabled by writing a 1b
        // to the corresponding mask bit in this register.
        // Any bits written with a 0b, are unchanged.
        // Thus, if software desires to disable a particular interrupt
        // condition that had been previously enabled, it must write
        // to the Interrupt Mask Clear register, rather than writing
        // a 0b to bits in this register.

        method write(value) {
            $this |= (value & INTR_MASK);
	    call $update_interrupt();
        }
    }

    register imc is (write_only) {
	// Software blocks interrupts by clearing the corresponding mask bit.
	// This is accomplished by writing a 1b to the corresponding bit in
	// this register. Bits written with 0b are unchanged
	// (for example, their mask status does not change).
        method write(value) {
            $ims &= ~(value & INTR_MASK);
            call $update_interrupt();
        }
    }
    register iam is (read_write) {
	// When the CTRL_EXT.IAME bit is set and the ICR.INT_ASSERT=1b,
	// an ICR read ** or write ** has the side effect of writing
	// contents of this register to the IMC register.
    }

    if($HAS_EXTENDED_INTERRUPTS) {
        register eitr[$EITR_CNT] {
            field interval[14:2] is (read_write) "Min inter-interrupt interval";
            field llien[15] is (read_write) "LLI moderation enable";
            field llcnt[20:16] is (read_write) "LL interrupts counter";
            field counter[30:21] is (read_write) "Interval down counter";
            field cntwdis[31] is (read_zero) "Counter write disable";
            method after_write(op) {
                if ($i == 0)
                    call $intr_interval.update_interval($interval);
            }
        }
        register ivar[$IVAR_CNT] {
            field alloc[4:0] is (read_write);
            field valid[7] is (read_write);
            method after_write(op) {
                if($this.valid == 1) {
                    local int queue;

                    if($i % 4 < 2) {
                        queue = $i / 4;
                    } else {
                        queue = $i / 4 + 8;
                    }

                    log "info", 4:
                        "IVAR: %s queue #%d is allocated to bit %d in EICR",
                        ($i%2 == 0)?"Rx":"Tx", queue, $i;
                }
            }
        }
        register eicr is (read_write);
        register eims is (read_write) {
            /* Other cause (legacy interrupts) is active by default */
            parameter hard_reset_value = 0x80000000;
        }
    }

    event intr_interval {
        parameter documentation = "Delay between successive interrupts.";
        parameter timebase = "seconds";

        method event(void *data) {
            log "info", 4: "interrupts are allowed again after throttling";
            call $update_interrupt();
        }

        method update_interval(uint16 interval) default {
            local bool is_posted;
            inline $posted(NULL) -> (is_posted);
            if (is_posted)
                inline $remove(NULL);
            if (interval != 0)
                inline $post(interval * ITR_UNIT, NULL);
        }
    }
}
