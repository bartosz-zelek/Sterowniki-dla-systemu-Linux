/*
  Â© 2017 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

device i3c_wire;

import "simics/devs/i3c.dml";

parameter desc = "model of I3C wire";
parameter documentation = 
      "The <class>i3c_wire</class> implements bridge functionality between "
    + "two <class>i3c_link</class> endpoints. It will forward everything from "
    + "one side to another without analyzing. To use this device, connect "
    + "i3c_link[0]/I3C_PORT[0] to one endpoint and i3c_link[1]/I3C_PORT[1] "
    + "to another endpoint";

connect i3c_link[2] {
    parameter documentation =
        "Connectors to connect two <class>i3c_link</class> objects";
    interface i3c_master { parameter required = false; }
    interface i3c_slave { parameter required = false; }
    interface i3c_daa_snoop { parameter required = false; }
    method after_set() {
        if ($obj && !$i3c_master && !$i3c_slave && !$i3c_daa_snoop) {
            log error:
                "object should at least implement one of interfaces %s, %s",
                "i3c_master", "i3c_slave and i3c_daa_snoop";
        }
    }
}

port I3C_PORT[2] {
    implement i3c_daa_snoop {
        method assigned_address(uint64 id,
                                uint8 bcr, uint8 dcr, uint8 address) {
            if (!$i3c_link[1 - $i].i3c_daa_snoop)
                return;
            $i3c_link[1 - $i].i3c_daa_snoop.assigned_address(id, bcr,
                                                             dcr, address);
        }
    }

    implement i3c_slave {
        method ibi_start() {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.ibi_start();
        }
        method ibi_acknowledge(i3c_ack_t ack) {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.ibi_acknowledge(ack);
        }
        method start(uint8 address) {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.start(address);
            else
                $i3c_link[$i].i3c_master.acknowledge(I3C_noack);
        }
        method write(uint8 data) {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.write(data);
        }
        method sdr_write(bytes_t buf) {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.sdr_write(buf);
        }
        method read() {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.read();
        }
        method stop() {
            if ($i3c_link[1 - $i].i3c_slave)
                $i3c_link[1 - $i].i3c_slave.stop();
        }
    }

    implement i3c_master {
        method ibi_request() {
            if ($i3c_link[1 - $i].i3c_master)
                $i3c_link[1 - $i].i3c_master.ibi_request();
        }
        method ibi_address(uint8 address) {
            if ($i3c_link[1 - $i].i3c_master)
                $i3c_link[1 - $i].i3c_master.ibi_address(address);
        }
        method acknowledge(i3c_ack_t ack) {
            if ($i3c_link[1 - $i].i3c_master)
                $i3c_link[1 - $i].i3c_master.acknowledge(ack);
        }
        method read_response(uint8 data, bool more) {
            if ($i3c_link[1 - $i].i3c_master)
                $i3c_link[1 - $i].i3c_master.read_response(data, more);
        }
        method daa_response(uint64 uid, uint8 bcr, uint8 dcr) {
            if ($i3c_link[1 - $i].i3c_master)
                $i3c_link[1 - $i].i3c_master.daa_response(uid, bcr, dcr);

        }
    }
}
