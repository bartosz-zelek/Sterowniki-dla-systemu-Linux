/*
  sample-device-mixed.dml - sample code for a mixed DML/C Simics device

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

device sample_device_mixed;
parameter desc = "sample device using both DML and C/C++ code";
parameter documentation = "This is a very simple device which shows how you"
    + " can use C/C++ code from DML.";

/*
 * Include the C header file to get the declaration of the C/C++ function we
 * want to use.
 */
header %{
#include "sample-device-mixed.h"
%}

/*
 * dmlc does not know about c header files, so we also have to declare the
 * C/C++ functions in dml.
 */
extern uint64 calculate_value_in_c(uint64 v);
extern void call_out_to_c(conf_object_t *obj);
extern uint64 calculate_value_in_cc_int(uint64 v);
extern lang_void *create_myclass();
extern void free_myclass(lang_void *c);
extern void myclass_foo(lang_void *c, conf_object_t *obj);

attribute int_attr "An integer attribute" {
    parameter allocate_type = "int32";
    method after_set() {
        log info: "attribute int_attr updated";
    }
}

/*
 * Define a new interface type and implement it. This interface is used to call
 * back into DML from the C code. It is the supported way of calling DML code
 * from C code.
 */
extern typedef struct {
        void (*one)(conf_object_t *obj);
        void (*two)(conf_object_t *obj, uint32 count);
} myinterface_interface_t;

implement myinterface {
    method one() {
        log info: "ONE";
    }
    method two(uint32 count) {
        log info: "TWO %u", count;
    }
}

bank regs {
    register r1 size 4 @ 0x0000 {
        method read() -> (value) {
            log info: "read from r1";
            value = calculate_value_in_c($this);
        }
    }
    register r2 size 4 @ 0x0010 {
        method read() -> (value) {
            log info: "read from r2";
            value = calculate_value_in_cc_int($this);
        }
    }
}

/*
 * The post_init method will be run when the object has been created
 */
method post_init {
    call_out_to_c($dev.obj);
    local lang_void *i = create_myclass();
    myclass_foo(i, $dev.obj);
    free_myclass(i);
}
