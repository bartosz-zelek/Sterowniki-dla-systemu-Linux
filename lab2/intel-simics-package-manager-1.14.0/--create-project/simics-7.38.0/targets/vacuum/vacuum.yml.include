# Â© 2024 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.

# Vacuum is intended to be used for testing a device from the command line.
#
# To test a device, replace the sample-device-python device in the add-map
# call, or add more devices using add-map.
#
# To read from or write to a device, use the phys_mem.set and phys_mem.get
# commands.  Examples for the sample-device-python device:
#
# Write a value '1' to address '1':  phys_mem.set 1 1 -l
#    Read a value from address '0':  phys_mem.get 0 -l
#

echo "Welcome to vacuum, a machine for testing devices in isolation.\n"
echo "Please add devices using the vacuum.mem.add-map command."
echo "To read from memory or device, use 'vacuum.mem.read <addr> -l/-b'."
echo "To write to memory or device, use 'vacuum.mem.write <addr> <value> -l/-b."
echo ("\nFor help on adding devices and read/write options regarding"
      + " transfer sizes,")
echo "use 'help vacuum.mem.add-map', 'help vacuum.mem.read',"
echo "and 'help vacuum.mem.write' commands."

# Add the python sample device to the code
#   Mapped at address 0x0000, size 16 bytes (0x10)
@SIM_create_object("sample_device_python", "sdp",
                   [["queue", conf.vacuum.timer]])
vacuum.mem.add-map device = sdp base = 0x0000 length = 0x10

#
# Logging
#
vacuum.uart.log-level 3

#
# Test script, Simics style
#
script-branch {
	bp.cycle.wait-for vacuum.timer 1
	echo "Sending out a character"
	vacuum.mem.write 0x1000 0x41 1
	bp.console_string.wait-for vacuum.console "A"
	echo "'A' correctly transmitted"
	ptime
	vacuum.mem.write 0x1000 0x42 1
	bp.console_string.wait-for vacuum.console "B"
	echo "'B' correctly transmitted"
	ptime
}
