#!/bin/bash

# Â© 2012 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may
# not use, modify, copy, publish, distribute, disclose or transmit this software
# or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express or
# implied warranties, other than those that are expressly stated in the License.


# The script loads and installs VMXMON to the system.
# Please follow this style guide when updating the script:
# https://google.github.io/styleguide/shellguide.html

set -u  # To catch errors early let's treat unset variables as errors.


SDIR="$(dirname "$(readlink -f "$0")")"
readonly SDIR

DRY_RUN=""
while [[ -n "${1:-}" ]]; do
    case "$1" in
        --dry-run|-n) DRY_RUN=y ;;
        --help|-h|*) echo "Usage: $0 [--dry-run]" ; exit 0 ;;
    esac
    shift
done
readonly DRY_RUN

SUDO="sudo"
if [[ "${UID}" == "0" ]]; then
    SUDO=""
fi
readonly SUDO


function failure() { echo "Failure: $*" ; exit 1 ; }
function verbose() { echo "$*" ; [[ -n "${DRY_RUN}" ]] || "$@" ; }
function silent() { [[ -z "${DRY_RUN}" ]] && "$@" >& /dev/null ; }

# Assume that scripts are "installed" as part of the build, so that the kernel
# module and utils are always found relative to the build directory.
function echo_bad_usage_and_exit() {
    echo "The install script is meant to run from the build directory,"
    echo "not from the vmxmon root directory. Please configure and build"
    echo "the required targets. See README.md for details."
    echo "Alternatively run the build script provided by Simics Base:"
    echo "  <simics base>/scripts/vmp-kernel-build.sh"
    exit 1
}
if [[ ! -f "${SDIR}/../module/vmxmon.ko" ]]; then
    echo "Kernel module not found or bad invocation."
    echo_bad_usage_and_exit
fi
if [[ ! -f "${SDIR}/../util/vmxmon-version" ]]; then
    echo "vmxmon-version utility program not found or bad invocation."
    echo_bad_usage_and_exit
else
    VERSION=$("${SDIR}/../util/vmxmon-version")
fi
readonly VERSION

echo "Installing VMXMON v${VERSION}"

function check_hw() {
    "${SDIR}/../util/check-hw-util" >& /dev/null && return
    "${SDIR}/../util/check-hw-util"
    exit $?
}
verbose check_hw

if [[ -x /sbin/dkms ]]; then
    DEST_DIR="/usr/src/vmxmon-${VERSION}/"

    function remove_all_vmxmons_dkms() {  # TODO: reuse code from uninstall script
        # dkms status lines that we parse below can have these formats:
        # a.) output starting from 2.8.6 version of dkms:
        #   "vmxmon/1.16.5, 6.5.11-200.fc38.x86_64, x86_64: installed"
        # b). earlier dkms versions:
        #   "vmxmon, 1.15.48, 5.0.8-100.fc28.x86_64, x86_64: installed"

        local i
        while read -r i; do
            if [[ -z "${i}" ]]; then
                continue
            fi
            echo "Removing *${i}*"
            verbose "${SUDO}" /sbin/dkms remove "${i}" --all
            VMXMON_DIR=/usr/src/${i/\//-}
            if [[ -d "${VMXMON_DIR}" ]]; then
                verbose "${SUDO}" /bin/rm -rf "${VMXMON_DIR}"
            fi
        done < <("${SUDO}" /sbin/dkms status vmxmon \
                     | sed -e 's:^vmxmon, :vmxmon/:' \
                           -e 's:\(^vmxmon/[[:alnum:].]\+\)\?.*:\1:')

        # Sanity check that nothing was left behind:
        local VMXMONS_AFTER
        VMXMONS_AFTER=$("${SUDO}" /sbin/dkms status vmxmon)
        if [[ -n "${VMXMONS_AFTER}" ]]; then
            echo -e "*** Failed to uninstall vmxmon." \
                    "Please report:\n${VMXMONS_AFTER}"
        fi
    }
    remove_all_vmxmons_dkms

    function prepare_dkmstree() {
        "${SUDO}" /bin/mkdir -p "${DEST_DIR}"

        "${SUDO}" /bin/cp "${SDIR}/../module/Makefile" "${DEST_DIR}"
        "${SUDO}" /bin/cp -r "${SDIR}/../module/include" "${DEST_DIR}"
        "${SUDO}" /bin/cp -r "${SDIR}/../module/common" "${DEST_DIR}"
        "${SUDO}" /bin/cp -r "${SDIR}/../module/linux" "${DEST_DIR}"

        sed -e "s/@PKGVER@/${VERSION}/" "${SDIR}/dkms.conf" |
            "${SUDO}" /usr/bin/tee "${DEST_DIR}/dkms.conf" > /dev/null
    }
    verbose prepare_dkmstree

    verbose "${SUDO}" /sbin/dkms add "vmxmon/${VERSION}"
    verbose "${SUDO}" /sbin/dkms build "vmxmon/${VERSION}"
    verbose "${SUDO}" /sbin/dkms install "vmxmon/${VERSION}"
else
    MODULES_DIR="/lib/modules/$(uname -r)"
    if [[ ! -d "${MODULES_DIR}" ]]; then
        failure "Directory ${MODULES_DIR} not present"
    fi

    VMXMON_KO="${SDIR}/../module/vmxmon.ko"
    if [[ ! -f "${VMXMON_KO}" ]]; then
        failure "VMXMON kernel module is not built"
    fi

    # install kernel modules
    DEST_DIR="${MODULES_DIR}/extra"
    if [[ ! -d "${DEST_DIR}" ]]; then
        verbose "${SUDO}" /bin/mkdir "${DEST_DIR}"
    fi

    verbose "${SUDO}" /bin/cp -f "${VMXMON_KO}" "${DEST_DIR}/vmxmon.ko"
    verbose "${SUDO}" /sbin/depmod
fi

# install udev rules (sets permissions for /dev/vmx and /dev/nmihook)
verbose "${SUDO}" /bin/cp -f "${SDIR}/99-vmxmon.rules" /etc/udev/rules.d/

# load modules
silent "${SUDO}" /sbin/modprobe -r vmxmon

function modprobe_wrapper() {
    "${SUDO}" /sbin/modprobe "$@" >& /dev/null
    local -i RETCODE=$?
    if [[ "${RETCODE}" == "2" ]]; then
	# Return code 2 means that the module is not supported, so we
	# retry with --allow-unsupported.
	if ! modprobe_wrapper --allow-unsupported "$@" ; then
	    return 1
	fi
    elif [[ "${RETCODE}" -ne 0 ]]; then
	# Module load failed, but error was suppressed. Run it again
	# to get the error message.
	"${SUDO}" /sbin/modprobe "$@"
	return "${RETCODE}"
    fi
}

# Refresh udev rules (needed on Ubuntu if scripted installation)
# We search a few directories for udevadm: we saw it in different places.
UDEVADM=""
UDEVADM_DIRS=("/sbin" "/bin" "/usr/sbin" "/usr/bin")
for UDEVADM_DIR in "${UDEVADM_DIRS[@]}"; do
    if [[ -f "${UDEVADM_DIR}/udevadm" ]]; then
        UDEVADM="${UDEVADM_DIR}/udevadm"
        break
    fi
done
if [[ -n "${UDEVADM}" ]]; then
    verbose "${SUDO}" "${UDEVADM}" control --reload-rules
else
    echo "No 'udevadm' was found"  # This is likely not critical, just report
fi
verbose "${SUDO}" /sbin/service udev restart >& /dev/null

verbose modprobe_wrapper vmxmon

# find location of init.d directory
INIT_D=""
if [[ -d /etc/init.d ]]; then
    INIT_D=/etc/init.d
elif [[ -d /etc/rc.d/init.d ]]; then
    INIT_D=/etc/rc.d/init.d
fi

RDIR=""
RUNLEVEL=$(/sbin/runlevel | sed 's/[^0-9]*//' 2> /dev/null)
if [[ -n "${RUNLEVEL}" ]]; then
    RDIR="rc${RUNLEVEL}.d"
fi


if [[ -d /etc/modules-load.d/ ]]; then
    # use /etc/modules-load.d on systemd systems
    verbose "${SUDO}" /bin/cp -f "${SDIR}/vmxmon.conf" /etc/modules-load.d/

elif [[ -x /sbin/chkconfig && -d "${INIT_D}" ]]; then
    verbose "${SUDO}" /bin/cp -f "${SDIR}/vmxmon.rc" "${INIT_D}"/vmxmon
    verbose "${SUDO}" /sbin/chkconfig --add vmxmon

elif [[ -n "${RDIR}" && -d "/etc/${RDIR}" && -d "/etc/init.d/" ]]; then
    verbose "${SUDO}" /bin/cp -f "${SDIR}/vmxmon.rc" /etc/init.d/vmxmon
    verbose ln -s -f ../init.d/vmxmon "/etc/${RDIR}/S98vmxmon"

elif [[ -n "${RDIR}" && -d "/etc/rc.d/${RDIR}" && -d "/etc/rc.d/init.d/" ]]; then
    verbose "${SUDO}" /bin/cp -f "${SDIR}/vmxmon.rc" /etc/rc.d/init.d/vmxmon
    verbose ln -s -f ../init.d/vmxmon "/etc/rc.d/${RDIR}/S98vmxmon"

else
    failure "Could not determine where to put the vmxmon rc script"
    # unreachable: failure doesn't return
fi
