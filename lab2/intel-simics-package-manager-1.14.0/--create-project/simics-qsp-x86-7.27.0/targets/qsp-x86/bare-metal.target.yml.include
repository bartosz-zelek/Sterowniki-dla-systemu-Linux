run-script "%script%/hardware.yml" namespace = machine:hardware

local $system = (params.get machine:hardware:output:system)
instantiate-components $system

## Name system
$system->system_info = (params.get machine:system_info)

local $binary_to_load = (params.get machine:software:binary)
local $relocation = (params.get machine:software:relocation)
local $raw_binary = (params.get machine:software:raw)
local $exec_mode = (params.get machine:execution:mode)
local $stack_ptr = (params.get machine:execution:stack_pointer)
local $cpus = $system->cpu_list
local $page_table_base = (params.get machine:execution:page_table_base)
if ($page_table_base & 0xffff != 0) {
    interrupt-script -error ("machine:software:page_table_base must be 64kb"
                             + " aligned")
}

local $helper_script = (lookup-file "%script%/bare_metal_target.py")
@bm_globals = dict()
@with open(cli.simenv.helper_script) as bm_script:
    exec(bm_script.read(), bm_globals)
@del bm_script
@bm_helpers = bm_globals['QspX86BareMetalHelpers'](
     cli.simenv.cpus, cli.simenv.stack_ptr, cli.simenv.page_table_base,
     cli.simenv.binary_to_load)
@del bm_globals


local $load_addr = 0
local $binary = NIL  # NIL means binary is not loaded
local $def_exec_mode = 64
if ($binary_to_load) {
    $binary = (lookup-file $binary_to_load)
    if ($raw_binary) {
        load-file filename=$binary offset=$relocation
        $load_addr = $relocation
    } else {
        $load_addr = (load-binary filename=$binary offset=$relocation)
        if (not (params.get machine:execution:mode)) {
            local $em = `bm_helpers.mode_from_binary()`
            if (not $em) {
                interrupt-script -error ("Not a proper x86 binary, use"
                                         + " machine:software:raw option to"
                                         + " load as raw.")
            }
            echo ("Execution mode for \"" + $binary + "\" is " + $em + "-bit")
            $def_exec_mode = $em
        }
    }
    params.setdefault machine:execution:pc $load_addr
}
params.setdefault machine:execution:mode $def_exec_mode

local $exec_mode = (params.get machine:execution:mode)
local $reduced_isa_cpu = `bm_helpers.contains_x86s_cpu()`

if ($exec_mode == 16 and $reduced_isa_cpu) {
    interrupt-script -error ("Trying to set 16-bit mode for cpu that lacks"
                             + " 16-bit mode")
}

if ($exec_mode != 16) {
    @bm_helpers.switch_to_mode(cli.simenv.exec_mode)
}

local $pc = (params.get machine:execution:pc)
if ($pc != NIL) {
     set-pc $pc
}

# Framebuffer

if (params.get machine:framebuffer:create) {
    local $width = (params.get machine:framebuffer:width)
    local $height = (params.get machine:framebuffer:height)
    local $addr = (params.get machine:framebuffer:address)
    local $gfx_con = (params.get machine:hardware:output:console)
    @bm_helpers.add_framebuffer(cli.simenv.gfx_con, cli.simenv.addr, cli.simenv.width, cli.simenv.height)
}

# Debugging
local $debug_enable = (params.get debugging:enable)
params.setdefault "debugging:add_symbols" $debug_enable and (not $raw_binary)
local $add_symbols = (params.get debugging:add_symbols)
if ($add_symbols) {
    if (not $binary) {
        interrupt-script -error ("Attempting to add symbols without loading a"
                                 + " binary")
    }
    add-symbol-file $binary relocation-address=$relocation -relative
}
if ($debug_enable) {
    enable-debugger
}

# Clean up Python helpers used by this script.
@del bm_helpers
