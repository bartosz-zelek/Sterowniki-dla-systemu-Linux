/*
  ich-ehci-common.dml - Common Definitions in the EHCI of the ICH series

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

parameter ich_version default undefined;
parameter use_4_2_api = true;

parameter limitations = "<ul>"
    + $usb_ehci_limitations
    + "</ul>";

import "pci/common.dml";
import "usb/ehci.dml";
import "usb/ehci-pci.dml";
import "ich-pci-common.dml";

parameter CAPLENGTH             = 0x20;
parameter DEBUG_PORT_REG_IDX    = 0x0;
parameter DEBUG_PORT_REG_OFF    = 0xA0;

// USB PID constants
parameter USB_PID_OUT   = 0xE1;
parameter USB_PID_IN    = 0x69;
parameter USB_PID_SOF   = 0xA5;
parameter USB_PID_SETUP = 0x2D;
parameter USB_PID_ACK   = 0xD2;
parameter USB_PID_NAK   = 0x5A;
parameter USB_PID_STALL = 0x1E;

// EHCI Extended Capabilities Pointer
parameter EECP = 0x68;

attribute pci_dev_num {
    parameter documentation = "PCI device number on the ICH internal PCI bus";
    parameter allocate_type = "uint32";
    parameter configuration = "required";
}

attribute pcidev_func_num {
    parameter documentation = "Function number in the PCI device";
    parameter allocate_type = "uint32";
    parameter configuration = "required";
}

is pci_device;
bank pci_config {
    parameter register_size = 1;
    parameter usb_base_address_bits = 10;

    register vendor_id { parameter hard_reset_value = 0x8086; }
    register device_id { is no_reset; }
    register command   { parameter hard_reset_value = 0x0000; }
    register status {
        field fbb { parameter hard_reset_value = 1; }
        field ds  { parameter hard_reset_value = 1; }
        field c {
            parameter hard_reset_value =
                        ($ich_version == 9 || $ich_version == 10) ? 1 : 0;
        }
    }

    register revision_id {
        parameter hard_reset_value =
                    ($ich_version == 9 || $ich_version == 10) ? 0x02 : 0x08; }

    register base_address_1 @ 0x14 is (no_base_address_32);
    register base_address_2 @ 0x18 is (no_base_address_32);
    register base_address_3 @ 0x1c is (no_base_address_32);
    register base_address_4 @ 0x20 is (no_base_address_32);
    register base_address_5 @ 0x24 is (no_base_address_32);

    register capabilities_ptr {
        parameter value =
                    ($ich_version == 9 || $ich_version == 10) ? 0x50 : 0;
    }

    register interrupt_pin {
        method get()->(value) {
            if ($pci_dev_num == 29 && $pcidev_func_num == 7) {
                value = $chipset_config.int_register.read(0x3108)[31:28];
            } else if ($pci_dev_num == 26 && $pcidev_func_num == 7) {
                value = $chipset_config.int_register.read(0x3114)[31:28];
            } else {
                log "error", 1, PCI_config: "unknown EHCI device (d%d:f%d)",
                    $pci_dev_num, $pcidev_func_num;
                value = 0;
            }
        }
        method set(value) {
            local typeof(value) current_value;
            inline $get()->(current_value);
            if (value != current_value) {
                log "error", 1, PCI_config:
                    "%s is a read-only alias for d%dp in %s",
                    $qname, $pci_dev_num, $chipset_config.qname;
            }
        }
        method read()->(value) {
            inline $get()->(value);
        }
    }

    parameter pm_offset     = 0x50;
    parameter pm_next_ptr   = 0x58;
    is defining_pci_pm_capability;

    parameter dbg_port_offset   = $pm_next_ptr;
    parameter dbg_port_next_ptr = 0x98;
    parameter dbg_port_bar_num  = ($DEBUG_PORT_REG_IDX + 1);
    parameter dbg_port_bar_off  = $DEBUG_PORT_REG_OFF;
    is defining_debug_port_capability;

    parameter flr_offset        = $dbg_port_next_ptr;
    parameter flr_next_ptr      = 0;
    is defining_function_level_reset_capability;

    register special_smi size 4     @ 0x70
                    "Intel Specific USB 2.0 SMI Register";
    register access_cntl            @ 0x80
                    "Access Control Register";
    register access_cntl_buf size 3 @ 0x81
                    "Dummy register";
    register ehciir1                @ 0x84
                    "EHCI Initialization Register 1";
    register dummy_dc size 4        @ 0xDC is (undocumented);
    register ehciir2 size 4         @ 0xFC
                    "EHCI Initialization Register 2";

    register pm_capabilities{ parameter hard_reset_value = 0xC9C2; }
    register ehciir1        { parameter hard_reset_value = 0x01; }
    register ehciir2        { parameter hard_reset_value = 0x20001706; }

    // Registers defined in usb-ehci-pci-common.dml
    register frame_length_adjustment { parameter hard_reset_value = 0x20; }
    register port_wake_capability    { parameter hard_reset_value = 0x01FF;}
    register legacy_support_ext_cap  { parameter hard_reset_value = 0x1; }

    method miss_read_access(physical_address_t offset, physical_address_t size)
        -> (bool success, uint64 value) {
        // Linux reads entire address range from 0x0 - 0xfc, this avoids spam
        if (offset <= 0xfc) {
            log "info", 2:
                "%d %s read access at %s %d in PCI conf to unknown register",
                size, "byte", "offset", offset;
            success = true;
            value = 0;
        } else {
            success = false;
        }
    }
}

bank usb_regs {
    register hcsparams {
        field debug_port_number { parameter hard_reset_value = 0x1; }
        field n_cc { parameter hard_reset_value = 0x3; }
        field n_pcc { parameter hard_reset_value = 0x2; }
    }

    register hccparams {
        field iso_sched { parameter hard_reset_value = 0x7; }
        field addr_64bit { parameter hard_reset_value = 0x1; }
    }

    register prtsc[$NUM_PORTS] {
        field port_power { parameter hard_reset_value = 0x1; }
    }

    parameter usb2_debug_port_reg_off = $DEBUG_PORT_REG_OFF;
    is defining_usb2_debug_port_registers;
}

method usb_ehci_dma_read(addr_space_t type, uint8 *buf,
        physical_address_t addr, uint32 size)  {
    local exception_type_t ex;
    call $pci_data_from_memory(type, buf, addr, size) -> (ex);
    if (ex != Sim_PE_No_Exception)
        throw;
}

method usb_ehci_dma_write(addr_space_t type, const uint8 *buf,
        physical_address_t addr, uint32 size)  {
    local exception_type_t ex;
    call $pci_data_to_memory(type, buf, addr, size) -> (ex);
    if (ex != Sim_PE_No_Exception)
        throw;
}

method usb_ehci_raise_interrupt() {
    call $pci_config.pci_raise_interrupt();
}

method usb_ehci_lower_interrupt() {
    call $pci_config.pci_lower_interrupt();
}

method usb_ehci_post_init() {
    local uint1 flr_cssel;
    local uint64 reg_val1;
    local uint64 reg_val2;
    local exception_type_t ex;

    // Initialize the device id register
    if ($ich_version == 10) {
        if ($pci_dev_num == 29 && $pcidev_func_num == 7)
            $pci_config.device_id = 0x3A6A;
        else if ($pci_dev_num == 26 && $pcidev_func_num == 7)
            $pci_config.device_id = 0x3A6C;
        else {
            log "info", 3:
                "invalid function num %d or invalid PCI device num %d",
                $pcidev_func_num, $pci_dev_num;
            $pci_config.device_id = 0x293A;
        }
    } else if ($ich_version == 9) {
        if ($pci_dev_num == 29 && $pcidev_func_num == 7)
            $pci_config.device_id = 0x293A;
        else if ($pci_dev_num == 26 && $pcidev_func_num == 7)
            $pci_config.device_id = 0x293C;
        else {
            log "info", 3:
                "invalid function num %d or invalid PCI device num %d",
                $pcidev_func_num, $pci_dev_num;
            $pci_config.device_id = 0x293A;
        }
    } else {
        assert false;
    }

    if (   ($pci_dev_num == 29 && $pcidev_func_num == 7)    // EHCI #1
        || ($pci_dev_num == 26 && $pcidev_func_num == 7)) { // EHCI #2
        // Initialize the header type register
        $pci_config.header_type.mf = 0; // Single function device

        // Initialize the function level reset registers
        $pci_config.flrcid = 0x09;
        $pci_config.flrclv = 0x2006;
    }
}

template defining_function_level_reset_capability {
    parameter flr_offset   default undefined;
    parameter flr_next_ptr default undefined;

    register flrcid  size 1 @ ($flr_offset + 0x0)
                    "Function Level Reset Capability ID";
    register flrncp  size 1 @ ($flr_offset + 0x1)
                    "Function Level Reset Next Capability Pointer";
    register flrclv  size 2 @ ($flr_offset + 0x2)
                    "Function Level Reset Capability Length and Version";
    register flrctrl size 1 @ ($flr_offset + 0x4)
                    "FLR Control Register";
    register flrstat size 1 @ ($flr_offset + 0x5)
                    "FLR Status Register";

    register flrcid is (read_only) { parameter hard_reset_value = 0x09; }
    register flrncp is (constant)  { parameter value = $flr_next_ptr; }
    register flrclv is (read_only) { parameter hard_reset_value = 0x2006; }
}
