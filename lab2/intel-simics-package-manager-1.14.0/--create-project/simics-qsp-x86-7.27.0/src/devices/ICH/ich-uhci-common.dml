/*
  ich-uhci-common.dml - Common Definitions in the UHCI of the ICH series

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

parameter ich_version default undefined;
parameter use_4_2_api = true;

parameter limitations = "<ul>"
    + "<li>Interrupt and isochronous transfers are not supported.</li>"
    + "<li>The bulk and control transfers are only initiated while the attribute async_list_polling_enabled is set.</li>"
    + "<li>Does not handle when USB devices sending NAK or STALL.</li>"
    + "<li>Does not handle USB devices with latency.</li>"
    + "<li>The submit_transfer function must return USB_Transfer_Complicated.</li>"
    + "</ul>";

import "usb/uhci.dml";
import "ich-pci-common.dml";

attribute pci_dev_num {
    parameter documentation = "PCI device number on the ICH internal PCI bus";
    parameter allocate_type = "uint32";
    parameter configuration = "required";
}

attribute pcidev_func_num {
    parameter documentation = "Function number in the PCI device";
    parameter allocate_type = "uint32";
    parameter configuration = "required";
}

bank pci_config {
    parameter register_size = 1;
    parameter base_address_registers = ["usbbase"];

    register vendor_id { parameter hard_reset_value = 0x8086; }
    register device_id { is no_reset; }
    register command   { parameter hard_reset_value = 0x0000; }
    register status {
        field fbb { parameter hard_reset_value = 1; }
        field ds  { parameter hard_reset_value = 1; }
        field c {
            parameter hard_reset_value =
                        ($ich_version == 9 || $ich_version == 10) ? 1 : 0;
        }
    }

    register revision_id {
        parameter hard_reset_value =
                    ($ich_version == 9 || $ich_version == 10) ? 0x02 : 0x08;
    }
    register class_code { parameter hard_reset_value = 0x0C0300; }
    register header_type {
        field mf { is no_reset; }
    }

    register base_address_0 @ 0x10 is (no_base_address_32);
    register base_address_1 @ 0x14 is (no_base_address_32);
    register base_address_2 @ 0x18 is (no_base_address_32);
    register base_address_3 @ 0x1c is (no_base_address_32);
    register usbbase @ 0x20 is (io_base_address) {
        parameter size_bits = 5;
        parameter map_func = 1;

        // Override default add_map() to prevent mapping to IO address 0x0
        method add_map() {
            local int            succ;
            local map_info_t     info;

            inline $require_pci_bus();

            // Add this new mapping
            memset(&info, 0, sizeoftype(map_info_t));
            inline $pci_mapping_base()   -> (info.base);
            inline $pci_mapping_length() -> (info.length);
            info.function = $map_func;

            if (info.base == 0) {
                log "info", 2, PCI_config: "not mapping to IO address 0x0";
                return;
            }

            succ = $pci_bus.pci_bus.add_map(
                        $dev.obj, Sim_Addr_Space_IO, NULL, info);
            log "info", 2, PCI_config:
                "%s to add IO mapping for bank %s of %s: %s=%#x, %s=%#x",
                (succ == 1) ? "succeeded" : "failed", "usb_regs",
                SIM_object_name($dev.obj),
                "base", info.base,
                "length", info.length;
        }
    }
    register base_address_5 @ 0x24 is (no_base_address_32);

    register capabilities_ptr {
        parameter value = ($ich_version == 9 || $ich_version == 10) ? 0x50 : 0;
    }

    register interrupt_pin {
        method get()->(value) {
            if ($pci_dev_num == 29 && $pcidev_func_num == 0)
                value = $chipset_config.int_register.read(0x3108)[3:0];
            else if ($pci_dev_num == 29 && $pcidev_func_num == 1)
                value = $chipset_config.int_register.read(0x3108)[7:4];
            else if ($pci_dev_num == 29 && $pcidev_func_num == 2)
                value = $chipset_config.int_register.read(0x3108)[11:8];
            else if ($pci_dev_num == 26 && $pcidev_func_num == 0)
                value = $chipset_config.int_register.read(0x3114)[3:0];
            else if ($pci_dev_num == 26 && $pcidev_func_num == 1)
                value = $chipset_config.int_register.read(0x3114)[7:4];
            else if ($pci_dev_num == 26 && $pcidev_func_num == 2)
                value = $chipset_config.int_register.read(0x3114)[11:8];
            else {
                log "error", 1, PCI_config: "unknown UHCI device (d%d:f%d)",
                    $pci_dev_num, $pcidev_func_num;
                value = 0;
            }
        }
        method set(value) {
            local typeof(value) current_value;            
            inline $get()->(current_value);            
            if (value != current_value) {
                log "error", 1, PCI_config: "%s is a read-only alias for d%dp in %s",
                    $qname, $pci_dev_num, $chipset_config.qname;
            }
        }
        method read()->(value) {
            inline $get()->(value);
        }
    }

    if ($ich_version == 9 || $ich_version == 10) {
        register flrcid @ 0x50 "Function Level Reset Capability ID";
        register flrncp @ 0x51 "Function Level Reset Next Capability Pointer";
        register flrclv size 2 @ 0x52 
            "Function Level Reset Capability Length and Version";
        register usb_flrctrl @ 0x54 "FLR Control Register";
        register usb_flrstat @ 0x55 "FLR Status Register";

        register flrcid is (read_only) { parameter hard_reset_value = 0x09; }
        register flrncp is (constant);
        register flrclv { parameter hard_reset_value = 0x2006; }
        register usb_flrstat is (constant);
    }

    register usb_relnum size 1 @ 0x60 is (constant) { parameter value = 0x10; }
    register usb_legkey size 2 @ 0xC0 { parameter hard_reset_value = 0x2000; }
    register usb_leg_up size 2 @ 0xC2 is (zeros);
    register usb_res    size 1 @ 0xC4 { parameter hard_reset_value = 0x0; }

    if ($ich_version == 9 || $ich_version == 10) {
        register cwp @ 0xC8 "Core Well Policy Register";
        register ucr1 @ 0xCA "UHCI Configuration Register 1";
    }

    method miss_read_access(physical_address_t offset, physical_address_t size)
        -> (bool success, uint64 value) {
        // Linux reads entire address range from 0x0 - 0xfc, this avoids spam
        if (offset <= 0xfc) {
            log "info", 2: "%d byte read access at offset %d in PCI conf to unknown register",
                size, offset;
            success = true;
            value = 0;
        } else {
            success = false;
        }
    }
}

bank usb_regs {
    register usb_status { parameter hard_reset_value = 0x0020; }
    register start_of_frame_modify { parameter hard_reset_value = 0x40; }
}

method usb_uhci_raise_interrupt() {
    call $pci_config.pci_raise_interrupt();
}

method usb_uhci_lower_interrupt() {
    call $pci_config.pci_lower_interrupt();
}

method init {
    call $usb_uhci_init();
}

method usb_uhci_post_init() {
    local uint1 flr_cssel;
    local uint64 reg_val1;
    local uint64 reg_val2;
    local exception_type_t ex;

    // Initialize the device id register
    if ($ich_version == 10) {
        if ($pci_dev_num == 29) {
            if ($pcidev_func_num == 0)
                $pci_config.device_id = 0x3A64;
            else if ($pcidev_func_num == 1)
                $pci_config.device_id = 0x3A65;
            else if ($pcidev_func_num == 2)
                $pci_config.device_id = 0x3A66;
            else if ($pcidev_func_num == 3)
                $pci_config.device_id = 0x3A69;
            else {
                log "info", 3:
                    "invalid function num %d in this PCI device %d",
                    $pcidev_func_num, $pci_dev_num;
                $pci_config.device_id = 0x3A64;
            }
        } else if ($pci_dev_num == 26) {
            if ($pcidev_func_num == 0)
                $pci_config.device_id = 0x3A67;
            else if ($pcidev_func_num == 1)
                $pci_config.device_id = 0x3A68;
            else if ($pcidev_func_num == 2)
                $pci_config.device_id = 0x3A69;
            else {
                log "info", 3:
                    "invalid function num %d in this PCI device %d",
                    $pcidev_func_num, $pci_dev_num;
                $pci_config.device_id = 0x3A67;
            }
        } else {
            log "info", 3:
                "invalid device num %d for the PCI device of USB controllers",
                $pci_dev_num;
        }
    } else if ($ich_version == 9) {
        if ($pci_dev_num == 29) {
            if ($pcidev_func_num == 0)
                $pci_config.device_id = 0x2934;
            else if ($pcidev_func_num == 1)
                $pci_config.device_id = 0x2935;
            else if ($pcidev_func_num == 2)
                $pci_config.device_id = 0x2936;
            else if ($pcidev_func_num == 3)
                $pci_config.device_id = 0x2939;
            else {
                log "info", 3:
                    "invalid function num %d in this PCI device %d",
                    $pcidev_func_num, $pci_dev_num;
                $pci_config.device_id = 0x2934;
            }
        } else if ($pci_dev_num == 26) {
            if ($pcidev_func_num == 0)
                $pci_config.device_id = 0x2937;
            else if ($pcidev_func_num == 1)
                $pci_config.device_id = 0x2938;
            else if ($pcidev_func_num == 2)
                $pci_config.device_id = 0x2939;
            else {
                log "info", 3:
                    "invalid function num %d in this PCI device %d",
                    $pcidev_func_num, $pci_dev_num;
                $pci_config.device_id = 0x2937;
            }
        } else {
            log "info", 3:
                "invalid device num %d for the PCI device of USB controllers",
                $pci_dev_num;
        }
    } else {
        assert (false);
    }

    // Initialize the header type register
    if (($ich_version == 9 || $ich_version == 10)
        && (($pci_dev_num == 29 && $pcidev_func_num == 0) || //#1
            ($pci_dev_num == 26 && $pcidev_func_num == 0)))  //#4
        $pci_config.header_type.mf = 1;

    if (($ich_version == 9  || $ich_version == 10)
        && (   ($pci_dev_num == 29 && $pcidev_func_num == 0) // UHCI #1
            || ($pci_dev_num == 29 && $pcidev_func_num == 1) // UHCI #2
            || ($pci_dev_num == 29 && $pcidev_func_num == 2) // UHCI #3
            || ($pci_dev_num == 26 && $pcidev_func_num == 0) // UHCI #4
            || ($pci_dev_num == 26 && $pcidev_func_num == 1) // UHCI #5
            || ($pci_dev_num == 26 && $pcidev_func_num == 2) // UHCI #6
           )) {
        // Initialize the function level reset registers
        $pci_config.flrcid = 0x09;
        $pci_config.flrclv = 0x2006;
    }

}
