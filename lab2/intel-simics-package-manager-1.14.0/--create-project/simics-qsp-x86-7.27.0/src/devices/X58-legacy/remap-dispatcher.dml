/*
  remap-dispatcher.dml

  Â© 2010 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.2;

device x58_remap_dispatcher_legacy;
parameter classname = "x58-remap-dispatcher-legacy";

parameter desc = "model of translate dispatcher unit";
parameter documentation = "Translate dispatcher unit. - legacy variant, using old PCIe libraries";

import "simics/devs/memory-space.dml";
import "simics/devs/pci.dml";

connect default_remapping_unit {
    parameter documentation = "The default dma remapping unit.";
    interface pci_upstream;
}

connect gfx_remapping_unit {
    parameter documentation = "The dma remapping unit used for gfx.";
    interface pci_upstream;
}

connect pci_bus {
    interface pci_downstream {
        parameter required = true;
    }
}

attribute gfx_objs {
    parameter type = "[o*]";
    parameter documentation = "List of configuration objects from which"
        + " transactions will be remapped using the GFX remap unit.";

    data conf_object_t **objects;
    data uint16 size = 0;
    
    method get() -> (attr_value_t val) {
        val = SIM_alloc_attr_list($size);
        local int i;
        for (i = 0; i < $size; ++i)
            SIM_attr_list_set_item(&val, i,
                                   SIM_make_attr_object($objects[i]));
    }

    method set(attr_value_t val) {
        $size = SIM_attr_list_size(val);
        delete $objects;
        $objects = new conf_object_t *[$size];
        local int i;
        for (i = 0; i < $size; ++i)
            $objects[i] = SIM_attr_object(SIM_attr_list_item(val, i));
    }

    method contains(conf_object_t *obj) -> (bool contained) nothrow {
        local int i;
        contained = false;
        for (i = 0; i < $size; ++i) {
            if ($objects[i] == obj) {
                contained = true;
                break;
            }
        }
    }
}

implement pci_upstream {
    method operation(generic_transaction_t *mop, addr_space_t space)
        -> (exception_type_t ex) {

        if (space != Sim_Addr_Space_Memory) {
            ex = $pci_bus.pci_downstream.operation(mop, space);
            return;
        }

        local bool is_gfx = $gfx_objs.contains(SIM_get_mem_op_initiator(mop));

        if (is_gfx && $gfx_remapping_unit.obj) {
            ex = $gfx_remapping_unit.pci_upstream.operation(
                mop, space);
        } else {
            if (is_gfx) {
                log info, 1: "WARNING: dma should have been remapped "
                    + "using gfx remapping unit, but no such unit is "
                    + "connected. Dispatching to default remapping unit "
                    + "instead.";
            }
            ex = $default_remapping_unit.pci_upstream.operation(
                mop, space);
        }
    }
}
