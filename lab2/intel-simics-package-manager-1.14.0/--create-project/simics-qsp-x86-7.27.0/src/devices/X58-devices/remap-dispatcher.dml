/*
  remap-dispatcher.dml

  Â© 2021 Intel Corporation

  This software and the related documents are Intel copyrighted materials, and
  your use of them is governed by the express license under which they were
  provided to you ("License"). Unless the License provides otherwise, you may
  not use, modify, copy, publish, distribute, disclose or transmit this software
  or the related documents without Intel's prior written permission.

  This software and the related documents are provided as is, with no express or
  implied warranties, other than those that are expressly stated in the License.
*/

dml 1.4;

import "x58-common.dml";
import "simics/devs/translator.dml";
import "simics/model-iface/transaction.dml";

attribute gfx_objs {
    param type = "[o*]";
    param documentation = "List of configuration objects from which"
        + " transactions will be remapped using the graphics remapping unit";

    session attr_value_t val;

    method get() -> (attr_value_t) {
        if (SIM_attr_is_invalid(val))
            return SIM_make_attr_list(0);
        return SIM_attr_copy(val);
    }

    method set(attr_value_t new_val) throws {
        SIM_attr_free(&val);
        val = SIM_attr_copy(new_val);
        SIM_translation_changed(dev.obj);
    }

    method contains(conf_object_t *obj) -> (bool) {
        if (SIM_attr_is_list(val)) {
            for (local int i = 0; i < SIM_attr_list_size(val); ++i) {
                if (SIM_attr_object(SIM_attr_list_item(val, i)) == obj) {
                    if (!gfx_remapping_unit.obj) {
                        log error: "%s contains '%s', but %s is not set",
                            this.qname, SIM_object_name(obj),
                            gfx_remapping_unit.qname;
                    }
                    return true;
                }
            }
        }
        return false;
    }
}

template remapper is map_target {
    method set(conf_object_t *obj) {
        default(obj);
        SIM_translation_changed(dev.obj);
    }
}

connect default_remapping_unit is (remapper) "Default DMA remapping unit";
connect gfx_remapping_unit is (remapper) "Graphics DMA remapping unit";

connect interrupt "Target to receive PCIe Legacy Interrupts" {
    interface pci_interrupt;
    method set_pin(conf_object_t *src, uint16 rid, int pin, bool raise) {
        local uint8 devno = rid[7:3];
        log info, 2: "%s pin %d in '%s'",
            raise ? "assert" : "deassert", pin,
            this.obj ? SIM_object_name(this.obj) : "NULL";
        if (pci_interrupt.val) {
            if (raise)
                pci_interrupt.raise_interrupt(src, devno, pin);
            else
                pci_interrupt.lower_interrupt(src, devno, pin);
        }
    }
}

implement transaction_translator {
    method translate(uint64 addr,
                     access_t access,
                     transaction_t *t,
                     exception_type_t (*callback)(translation_t translation,
                                                  transaction_t *transaction,
                                                  cbdata_call_t cbdata),
                     cbdata_register_t cbdata) -> (exception_type_t) {
        local pcie_type_t type = ATOM_get_transaction_pcie_type(t);
        local translation_t txl;
        if (type == PCIE_Type_Mem) {
            if (gfx_objs.contains(SIM_transaction_initiator(t)))
                txl.target = gfx_remapping_unit.map_target;
            else
                txl.target = default_remapping_unit.map_target;
        } else if (type == PCIE_Type_Msg) {
            txl.target = msg.map_target;
        } else {
            log info: "Upstream '%s' transaction dropped", pcie_type_name(type);
        }
        return callback(txl, t, cbdata);
    }
}

implement translation_flush {
    method flush_range(uint64 base, uint64 size, access_t access,
                        const map_target_t *default_target) -> (bool) {
        local bool ret = true;
        if (gfx_remapping_unit.map_target != NULL) {
            ret = SIM_map_target_flush(gfx_remapping_unit.map_target, base,
                                       size, access);
            if (!ret) {
                log info, 1 then 2: "Failed flushing map_target %s in %s",
                    SIM_object_name(SIM_map_target_object(
                        gfx_remapping_unit.map_target)), this.qname;
                return false;
            }
        }
        if (default_remapping_unit.map_target != NULL) {
            ret = SIM_map_target_flush(default_remapping_unit.map_target, base,
                                       size, access);
            if (!ret) {
                log info, 1 then 2: "Failed flushing map_target %s in %s",
                    SIM_object_name(SIM_map_target_object(
                        default_remapping_unit.map_target)), this.qname;
                return false;
            }
        }
        ret = SIM_map_target_flush(msg.map_target, base, size, access);
        if (!ret) {
            log info, 1 then 2: "Failed flushing map_target %s in %s",
                SIM_object_name(SIM_map_target_object(msg.map_target)),
                this.qname;
        }
        return ret;
    }
}

port msg is init {
    param desc = "legacy PCI INTx message to pci_interrupt converter";
    session map_target_t *map_target;

    method init() {
        map_target = SIM_new_map_target(obj, NULL, NULL);
    }

    implement transaction {
        method issue(transaction_t *t, uint64 addr) -> (exception_type_t) {
            local pcie_message_type_t msg =
                ATOM_get_transaction_pcie_msg_type(t);
            if (msg >= PCIE_Msg_Assert_INTA && msg <= PCIE_Msg_Deassert_INTD) {
                local int pin = (msg - PCIE_Msg_Assert_INTA) % 4;
                local uint16 rid = ATOM_get_transaction_pcie_requester_id(t);
                local conf_object_t *src = SIM_transaction_initiator(t);
                log info, 2: "%s received from '%s' %x.%d:%d",
                    pcie_message_type_name(msg),
                    src ? SIM_object_name(src) : "NULL",
                    rid[15:8], rid[7:3], rid[2:0];
                interrupt.set_pin(src, rid, pin, msg < PCIE_Msg_Deassert_INTA);
                return Sim_PE_No_Exception;
            } else {
                return Sim_PE_IO_Not_Taken;
            }
        }
    }
}
